
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffc8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000206c  08010268  08010268  00011268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080122d4  080122d4  000132d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080122dc  080122dc  000132dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080122e0  080122e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  080122e4  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000818  24000064  08012348  00014064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400087c  08012348  0001487c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00014064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b288  00000000  00000000  00014092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007572  00000000  00000000  0004f31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0001a49c  00000000  00000000  0005688c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001590  00000000  00000000  00070d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000168b  00000000  00000000  000722b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003ef36  00000000  00000000  00073943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00036448  00000000  00000000  000b2879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001603e2  00000000  00000000  000e8cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  002490a3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000450c  00000000  00000000  002490e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000056  00000000  00000000  0024d5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010250 	.word	0x08010250

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	08010250 	.word	0x08010250

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000380:	b510      	push	{r4, lr}
 8000382:	b09c      	sub	sp, #112	@ 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000384:	224c      	movs	r2, #76	@ 0x4c
 8000386:	2100      	movs	r1, #0
 8000388:	a809      	add	r0, sp, #36	@ 0x24
 800038a:	f00f fb91 	bl	800fab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038e:	2220      	movs	r2, #32
 8000390:	2100      	movs	r1, #0
 8000392:	a801      	add	r0, sp, #4
 8000394:	f00f fb8c 	bl	800fab0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000398:	2002      	movs	r0, #2
 800039a:	f000 fcef 	bl	8000d7c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800039e:	2300      	movs	r3, #0
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	4b22      	ldr	r3, [pc, #136]	@ (800042c <SystemClock_Config+0xac>)
 80003a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80003a6:	f022 0201 	bic.w	r2, r2, #1
 80003aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80003ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003ae:	4a20      	ldr	r2, [pc, #128]	@ (8000430 <SystemClock_Config+0xb0>)
 80003b0:	f003 0301 	and.w	r3, r3, #1
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	6993      	ldr	r3, [r2, #24]
 80003b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80003bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	6993      	ldr	r3, [r2, #24]
 80003c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003cc:	6993      	ldr	r3, [r2, #24]
 80003ce:	049b      	lsls	r3, r3, #18
 80003d0:	d5fc      	bpl.n	80003cc <SystemClock_Config+0x4c>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d2:	2240      	movs	r2, #64	@ 0x40
 80003d4:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 4;
 80003d6:	2104      	movs	r1, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d8:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLQ = 8;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003da:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003dc:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003de:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e0:	e9cd 420c 	strd	r4, r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = 4;
 80003e4:	2200      	movs	r2, #0
 80003e6:	e9cd 2113 	strd	r2, r1, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80003ea:	210a      	movs	r1, #10
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003ec:	921b      	str	r2, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003ee:	e9cd 1315 	strd	r1, r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80003f2:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003f4:	e9cd 1317 	strd	r1, r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003f8:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80003fa:	e9cd 1319 	strd	r1, r3, [sp, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fe:	f000 fce1 	bl	8000dc4 <HAL_RCC_OscConfig>
 8000402:	b108      	cbz	r0, 8000408 <SystemClock_Config+0x88>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000406:	e7fe      	b.n	8000406 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000408:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800040a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800040c:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000410:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000414:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000418:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800041c:	a801      	add	r0, sp, #4
 800041e:	f001 f81b 	bl	8001458 <HAL_RCC_ClockConfig>
 8000422:	b108      	cbz	r0, 8000428 <SystemClock_Config+0xa8>
 8000424:	b672      	cpsid	i
  while (1)
 8000426:	e7fe      	b.n	8000426 <SystemClock_Config+0xa6>
}
 8000428:	b01c      	add	sp, #112	@ 0x70
 800042a:	bd10      	pop	{r4, pc}
 800042c:	58000400 	.word	0x58000400
 8000430:	58024800 	.word	0x58024800

08000434 <checkAndInitSD>:
{
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	460c      	mov	r4, r1
 8000438:	b085      	sub	sp, #20
 800043a:	4615      	mov	r5, r2
 800043c:	9001      	str	r0, [sp, #4]
    if (f_getfree(SDPath, &free_clusters, &fs) != FR_OK)
 800043e:	aa01      	add	r2, sp, #4
 8000440:	a903      	add	r1, sp, #12
 8000442:	4620      	mov	r0, r4
 8000444:	f004 fd86 	bl	8004f54 <f_getfree>
 8000448:	b1a8      	cbz	r0, 8000476 <checkAndInitSD+0x42>
        f_mount(NULL, (TCHAR const*) SDPath, 1);
 800044a:	2201      	movs	r2, #1
 800044c:	4621      	mov	r1, r4
 800044e:	2000      	movs	r0, #0
 8000450:	f004 fb32 	bl	8004ab8 <f_mount>
        FATFS_UnLinkDriver((TCHAR*) SDPath);
 8000454:	4620      	mov	r0, r4
 8000456:	f004 fe1d 	bl	8005094 <FATFS_UnLinkDriver>
        FATFS_LinkDriver(SD_Driver, (TCHAR*) SDPath);
 800045a:	4621      	mov	r1, r4
 800045c:	4628      	mov	r0, r5
 800045e:	f004 fdfd 	bl	800505c <FATFS_LinkDriver>
        if (FR_OK != f_mount(fs, (TCHAR const*) SDPath, 1))
 8000462:	2201      	movs	r2, #1
 8000464:	4621      	mov	r1, r4
 8000466:	9801      	ldr	r0, [sp, #4]
 8000468:	f004 fb26 	bl	8004ab8 <f_mount>
 800046c:	fab0 f080 	clz	r0, r0
 8000470:	0940      	lsrs	r0, r0, #5
}
 8000472:	b005      	add	sp, #20
 8000474:	bd30      	pop	{r4, r5, pc}
    bool retVal = true;
 8000476:	2001      	movs	r0, #1
 8000478:	e7fb      	b.n	8000472 <checkAndInitSD+0x3e>
	...

0800047c <SD_PhotoViewer_Init>:
    (void)checkAndInitSD(&SDFatFS, SDPath, &SD_Driver);
 800047c:	4a02      	ldr	r2, [pc, #8]	@ (8000488 <SD_PhotoViewer_Init+0xc>)
 800047e:	4903      	ldr	r1, [pc, #12]	@ (800048c <SD_PhotoViewer_Init+0x10>)
 8000480:	4803      	ldr	r0, [pc, #12]	@ (8000490 <SD_PhotoViewer_Init+0x14>)
 8000482:	f7ff bfd7 	b.w	8000434 <checkAndInitSD>
 8000486:	bf00      	nop
 8000488:	0801151c 	.word	0x0801151c
 800048c:	240006f4 	.word	0x240006f4
 8000490:	240004c4 	.word	0x240004c4

08000494 <SD_PhotoViewer_Save>:
{
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	f2ad 4d94 	subw	sp, sp, #1172	@ 0x494
    char filename[30] = { 0x0U };
 800049a:	221e      	movs	r2, #30
 800049c:	2100      	movs	r1, #0
 800049e:	a803      	add	r0, sp, #12
 80004a0:	f00f fb06 	bl	800fab0 <memset>
    if (f_mount(&SDFatFS, SDPath, 1) != FR_OK)
 80004a4:	2201      	movs	r2, #1
 80004a6:	4935      	ldr	r1, [pc, #212]	@ (800057c <SD_PhotoViewer_Save+0xe8>)
 80004a8:	4835      	ldr	r0, [pc, #212]	@ (8000580 <SD_PhotoViewer_Save+0xec>)
 80004aa:	f004 fb05 	bl	8004ab8 <f_mount>
 80004ae:	b100      	cbz	r0, 80004b2 <SD_PhotoViewer_Save+0x1e>
                while(1);
 80004b0:	e7fe      	b.n	80004b0 <SD_PhotoViewer_Save+0x1c>
            sprintf(filename, "%s_%d.%s", IMG_PREFIX, 9, IMG_EXTENSION);
 80004b2:	4b34      	ldr	r3, [pc, #208]	@ (8000584 <SD_PhotoViewer_Save+0xf0>)
 80004b4:	a803      	add	r0, sp, #12
 80004b6:	4a34      	ldr	r2, [pc, #208]	@ (8000588 <SD_PhotoViewer_Save+0xf4>)
 80004b8:	4934      	ldr	r1, [pc, #208]	@ (800058c <SD_PhotoViewer_Save+0xf8>)
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2309      	movs	r3, #9
 80004be:	f00f fad5 	bl	800fa6c <siprintf>
        if (FR_OK != f_open(&file, filename, FA_CREATE_ALWAYS | FA_WRITE))
 80004c2:	220a      	movs	r2, #10
 80004c4:	a903      	add	r1, sp, #12
 80004c6:	a898      	add	r0, sp, #608	@ 0x260
 80004c8:	f004 fb20 	bl	8004b0c <f_open>
 80004cc:	2800      	cmp	r0, #0
 80004ce:	d133      	bne.n	8000538 <SD_PhotoViewer_Save+0xa4>
        JSAMPROW row_pointer = SD_RGB888_buffer;
 80004d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000590 <SD_PhotoViewer_Save+0xfc>)
        cinfo.err = jpeg_std_error(&jerr);
 80004d2:	a80b      	add	r0, sp, #44	@ 0x2c
        cinfo.image_height = ILI9341_ACTIVE_HEIGHT;
 80004d4:	f44f 74a0 	mov.w	r4, #320	@ 0x140
 80004d8:	25f0      	movs	r5, #240	@ 0xf0
        JSAMPROW row_pointer = SD_RGB888_buffer;
 80004da:	9302      	str	r3, [sp, #8]
        cinfo.err = jpeg_std_error(&jerr);
 80004dc:	f009 ff1c 	bl	800a318 <jpeg_std_error>
        jpeg_create_compress(&cinfo);
 80004e0:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80004e4:	2150      	movs	r1, #80	@ 0x50
        cinfo.err = jpeg_std_error(&jerr);
 80004e6:	902c      	str	r0, [sp, #176]	@ 0xb0
        jpeg_create_compress(&cinfo);
 80004e8:	a82c      	add	r0, sp, #176	@ 0xb0
 80004ea:	f004 fdd7 	bl	800509c <jpeg_CreateCompress>
        jpeg_stdio_dest(&cinfo, &file);
 80004ee:	a998      	add	r1, sp, #608	@ 0x260
 80004f0:	a82c      	add	r0, sp, #176	@ 0xb0
            for (uint16_t x = 0; x < ILI9341_ACTIVE_WIDTH; x++)
 80004f2:	4e28      	ldr	r6, [pc, #160]	@ (8000594 <SD_PhotoViewer_Save+0x100>)
        jpeg_stdio_dest(&cinfo, &file);
 80004f4:	f009 fe84 	bl	800a200 <jpeg_stdio_dest>
        cinfo.input_components = 3;
 80004f8:	2303      	movs	r3, #3
        jpeg_set_defaults(&cinfo);
 80004fa:	a82c      	add	r0, sp, #176	@ 0xb0
        cinfo.input_components = 3;
 80004fc:	9335      	str	r3, [sp, #212]	@ 0xd4
        cinfo.in_color_space = JCS_RGB;
 80004fe:	2302      	movs	r3, #2
        cinfo.image_height = ILI9341_ACTIVE_HEIGHT;
 8000500:	e9cd 4533 	strd	r4, r5, [sp, #204]	@ 0xcc
        cinfo.in_color_space = JCS_RGB;
 8000504:	f88d 30d8 	strb.w	r3, [sp, #216]	@ 0xd8
        jpeg_set_defaults(&cinfo);
 8000508:	f009 f8cc 	bl	80096a4 <jpeg_set_defaults>
        jpeg_set_quality(&cinfo, 90, TRUE);
 800050c:	2201      	movs	r2, #1
 800050e:	215a      	movs	r1, #90	@ 0x5a
 8000510:	a82c      	add	r0, sp, #176	@ 0xb0
 8000512:	f008 ffc7 	bl	80094a4 <jpeg_set_quality>
        jpeg_start_compress(&cinfo, TRUE);
 8000516:	2101      	movs	r1, #1
 8000518:	a82c      	add	r0, sp, #176	@ 0xb0
 800051a:	f004 fe89 	bl	8005230 <jpeg_start_compress>
        while (cinfo.next_scanline < cinfo.image_height)
 800051e:	9b6d      	ldr	r3, [sp, #436]	@ 0x1b4
 8000520:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 8000522:	4293      	cmp	r3, r2
 8000524:	d30b      	bcc.n	800053e <SD_PhotoViewer_Save+0xaa>
        jpeg_finish_compress(&cinfo);
 8000526:	a82c      	add	r0, sp, #176	@ 0xb0
 8000528:	f004 fe2f 	bl	800518a <jpeg_finish_compress>
        f_close(&file);
 800052c:	a898      	add	r0, sp, #608	@ 0x260
 800052e:	f004 fd00 	bl	8004f32 <f_close>
        jpeg_destroy_compress(&cinfo);
 8000532:	a82c      	add	r0, sp, #176	@ 0xb0
 8000534:	f004 fe0c 	bl	8005150 <jpeg_destroy_compress>
}
 8000538:	f20d 4d94 	addw	sp, sp, #1172	@ 0x494
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	b29b      	uxth	r3, r3
 8000540:	4913      	ldr	r1, [pc, #76]	@ (8000590 <SD_PhotoViewer_Save+0xfc>)
                pixel[0] = (uint8_t)((y * 255) / ILI9341_ACTIVE_HEIGHT);        // R
 8000542:	2200      	movs	r2, #0
                pixel[2] = (uint8_t)(((x + y) * 255) / (ILI9341_ACTIVE_WIDTH + ILI9341_ACTIVE_HEIGHT)); // B
 8000544:	f44f 7c0c 	mov.w	ip, #560	@ 0x230
                pixel[0] = (uint8_t)((y * 255) / ILI9341_ACTIVE_HEIGHT);        // R
 8000548:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800054c:	fbb3 f7f5 	udiv	r7, r3, r5
 8000550:	b2ff      	uxtb	r7, r7
 8000552:	700f      	strb	r7, [r1, #0]
            for (uint16_t x = 0; x < ILI9341_ACTIVE_WIDTH; x++)
 8000554:	3103      	adds	r1, #3
                pixel[1] = (uint8_t)((x * 255) / ILI9341_ACTIVE_WIDTH);         // G
 8000556:	fbb2 f0f4 	udiv	r0, r2, r4
 800055a:	f801 0c02 	strb.w	r0, [r1, #-2]
                pixel[2] = (uint8_t)(((x + y) * 255) / (ILI9341_ACTIVE_WIDTH + ILI9341_ACTIVE_HEIGHT)); // B
 800055e:	1898      	adds	r0, r3, r2
            for (uint16_t x = 0; x < ILI9341_ACTIVE_WIDTH; x++)
 8000560:	32ff      	adds	r2, #255	@ 0xff
                pixel[2] = (uint8_t)(((x + y) * 255) / (ILI9341_ACTIVE_WIDTH + ILI9341_ACTIVE_HEIGHT)); // B
 8000562:	fbb0 f0fc 	udiv	r0, r0, ip
            for (uint16_t x = 0; x < ILI9341_ACTIVE_WIDTH; x++)
 8000566:	42b2      	cmp	r2, r6
                pixel[2] = (uint8_t)(((x + y) * 255) / (ILI9341_ACTIVE_WIDTH + ILI9341_ACTIVE_HEIGHT)); // B
 8000568:	f801 0c01 	strb.w	r0, [r1, #-1]
            for (uint16_t x = 0; x < ILI9341_ACTIVE_WIDTH; x++)
 800056c:	d1f1      	bne.n	8000552 <SD_PhotoViewer_Save+0xbe>
            (void) jpeg_write_scanlines(&cinfo, &row_pointer, 1U);
 800056e:	2201      	movs	r2, #1
 8000570:	a902      	add	r1, sp, #8
 8000572:	a82c      	add	r0, sp, #176	@ 0xb0
 8000574:	f004 fe88 	bl	8005288 <jpeg_write_scanlines>
 8000578:	e7d1      	b.n	800051e <SD_PhotoViewer_Save+0x8a>
 800057a:	bf00      	nop
 800057c:	240006f4 	.word	0x240006f4
 8000580:	240004c4 	.word	0x240004c4
 8000584:	08010275 	.word	0x08010275
 8000588:	08010268 	.word	0x08010268
 800058c:	0801026c 	.word	0x0801026c
 8000590:	24000080 	.word	0x24000080
 8000594:	00013ec0 	.word	0x00013ec0

08000598 <main>:
{
 8000598:	b500      	push	{lr}
 800059a:	b08b      	sub	sp, #44	@ 0x2c
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800059c:	2210      	movs	r2, #16
 800059e:	2100      	movs	r1, #0
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005a0:	2400      	movs	r4, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80005a2:	a805      	add	r0, sp, #20
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005a4:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80005a6:	f00f fa83 	bl	800fab0 <memset>
  HAL_MPU_Disable();
 80005aa:	f000 faaf 	bl	8000b0c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005ae:	f248 731f 	movw	r3, #34591	@ 0x871f
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005b2:	a805      	add	r0, sp, #20
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005b4:	f8ad 5014 	strh.w	r5, [sp, #20]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005b8:	e9cd 4306 	strd	r4, r3, [sp, #24]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80005bc:	f240 1301 	movw	r3, #257	@ 0x101
 80005c0:	9308      	str	r3, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005c2:	f000 fac1 	bl	8000b48 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80005c6:	2004      	movs	r0, #4
 80005c8:	f000 faae 	bl	8000b28 <HAL_MPU_Enable>
  HAL_Init();
 80005cc:	f000 f9ee 	bl	80009ac <HAL_Init>
  SystemClock_Config();
 80005d0:	f7ff fed6 	bl	8000380 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	2214      	movs	r2, #20
 80005d6:	4621      	mov	r1, r4
 80005d8:	eb0d 0002 	add.w	r0, sp, r2
 80005dc:	f00f fa68 	bl	800fab0 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b33      	ldr	r3, [pc, #204]	@ (80006b0 <main+0x118>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80005e2:	2140      	movs	r1, #64	@ 0x40
 80005e4:	4833      	ldr	r0, [pc, #204]	@ (80006b4 <main+0x11c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80005ea:	432a      	orrs	r2, r5
 80005ec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80005f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80005f4:	402a      	ands	r2, r5
 80005f6:	9201      	str	r2, [sp, #4]
 80005f8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80005fe:	f042 0210 	orr.w	r2, r2, #16
 8000602:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000606:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800060a:	f002 0210 	and.w	r2, r2, #16
 800060e:	9202      	str	r2, [sp, #8]
 8000610:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000616:	f042 0204 	orr.w	r2, r2, #4
 800061a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800061e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000622:	f002 0204 	and.w	r2, r2, #4
 8000626:	9203      	str	r2, [sp, #12]
 8000628:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800062e:	f042 0208 	orr.w	r2, r2, #8
 8000632:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000636:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800063c:	f003 0308 	and.w	r3, r3, #8
 8000640:	9304      	str	r3, [sp, #16]
 8000642:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000644:	f000 fb94 	bl	8000d70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000648:	4622      	mov	r2, r4
 800064a:	2180      	movs	r1, #128	@ 0x80
 800064c:	481a      	ldr	r0, [pc, #104]	@ (80006b8 <main+0x120>)
 800064e:	f000 fb8f 	bl	8000d70 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000652:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	a905      	add	r1, sp, #20
 8000656:	4817      	ldr	r0, [pc, #92]	@ (80006b4 <main+0x11c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	f000 fa9e 	bl	8000ba0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000664:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000666:	4814      	ldr	r0, [pc, #80]	@ (80006b8 <main+0x120>)
 8000668:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000672:	f000 fa95 	bl	8000ba0 <HAL_GPIO_Init>
  hsd1.Instance = SDMMC1;
 8000676:	4811      	ldr	r0, [pc, #68]	@ (80006bc <main+0x124>)
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <main+0x128>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800067a:	6084      	str	r4, [r0, #8]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800067c:	e9c0 3400 	strd	r3, r4, [r0]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000680:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000684:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hsd1.Init.ClockDiv = 199;
 8000688:	23c7      	movs	r3, #199	@ 0xc7
 800068a:	6143      	str	r3, [r0, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800068c:	f002 ff0c 	bl	80034a8 <HAL_SD_Init>
 8000690:	b108      	cbz	r0, 8000696 <main+0xfe>
 8000692:	b672      	cpsid	i
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0xfc>
  MX_FATFS_Init();
 8000696:	f003 fae3 	bl	8003c60 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 800069a:	f003 fbad 	bl	8003df8 <MX_LIBJPEG_Init>
  SD_PhotoViewer_Init();
 800069e:	f7ff feed 	bl	800047c <SD_PhotoViewer_Init>
  HAL_Delay(1000U);
 80006a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a6:	f000 f9c1 	bl	8000a2c <HAL_Delay>
  SD_PhotoViewer_Save();
 80006aa:	f7ff fef3 	bl	8000494 <SD_PhotoViewer_Save>
  while (1)
 80006ae:	e7fe      	b.n	80006ae <main+0x116>
 80006b0:	58024400 	.word	0x58024400
 80006b4:	58020000 	.word	0x58020000
 80006b8:	58021000 	.word	0x58021000
 80006bc:	24000440 	.word	0x24000440
 80006c0:	52007000 	.word	0x52007000

080006c4 <Error_Handler>:
 80006c4:	b672      	cpsid	i
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <Error_Handler+0x2>

080006c8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c8:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <HAL_MspInit+0x20>)
{
 80006ca:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006cc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80006d0:	f042 0202 	orr.w	r2, r2, #2
 80006d4:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 80006d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006dc:	f003 0302 	and.w	r3, r3, #2
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e4:	b002      	add	sp, #8
 80006e6:	4770      	bx	lr
 80006e8:	58024400 	.word	0x58024400

080006ec <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80006ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ee:	b0b9      	sub	sp, #228	@ 0xe4
 80006f0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	2214      	movs	r2, #20
 80006f4:	2100      	movs	r1, #0
 80006f6:	a803      	add	r0, sp, #12
 80006f8:	f00f f9da 	bl	800fab0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006fc:	22c0      	movs	r2, #192	@ 0xc0
 80006fe:	2100      	movs	r1, #0
 8000700:	a808      	add	r0, sp, #32
 8000702:	f00f f9d5 	bl	800fab0 <memset>
  if(hsd->Instance==SDMMC1)
 8000706:	6822      	ldr	r2, [r4, #0]
 8000708:	4b27      	ldr	r3, [pc, #156]	@ (80007a8 <HAL_SD_MspInit+0xbc>)
 800070a:	429a      	cmp	r2, r3
 800070c:	d14a      	bne.n	80007a4 <HAL_SD_MspInit+0xb8>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800070e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000712:	2300      	movs	r3, #0
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000714:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000716:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800071a:	f001 f8e3 	bl	80018e4 <HAL_RCCEx_PeriphCLKConfig>
 800071e:	b108      	cbz	r0, 8000724 <HAL_SD_MspInit+0x38>
    {
      Error_Handler();
 8000720:	f7ff ffd0 	bl	80006c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000724:	4b21      	ldr	r3, [pc, #132]	@ (80007ac <HAL_SD_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000726:	240c      	movs	r4, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072a:	2601      	movs	r6, #1
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800072c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000732:	eb0d 0104 	add.w	r1, sp, r4
 8000736:	481e      	ldr	r0, [pc, #120]	@ (80007b0 <HAL_SD_MspInit+0xc4>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000738:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800073c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8000740:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000744:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800074c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000750:	f042 0204 	orr.w	r2, r2, #4
 8000754:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000758:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800075c:	f002 0204 	and.w	r2, r2, #4
 8000760:	9201      	str	r2, [sp, #4]
 8000762:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000764:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000768:	f042 0208 	orr.w	r2, r2, #8
 800076c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000774:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	f003 0308 	and.w	r3, r3, #8
 800077a:	9302      	str	r3, [sp, #8]
 800077c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	e9cd 3703 	strd	r3, r7, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078a:	f000 fa09 	bl	8000ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800078e:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000790:	eb0d 0104 	add.w	r1, sp, r4
 8000794:	4807      	ldr	r0, [pc, #28]	@ (80007b4 <HAL_SD_MspInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000796:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a0:	f000 f9fe 	bl	8000ba0 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80007a4:	b039      	add	sp, #228	@ 0xe4
 80007a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a8:	52007000 	.word	0x52007000
 80007ac:	58024400 	.word	0x58024400
 80007b0:	58020800 	.word	0x58020800
 80007b4:	58020c00 	.word	0x58020c00

080007b8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler>

080007ba <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <HardFault_Handler>

080007bc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <MemManage_Handler>

080007be <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler>

080007c0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <UsageFault_Handler>

080007c2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c2:	4770      	bx	lr

080007c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80007c4:	4770      	bx	lr

080007c6 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 b91e 	b.w	8000a08 <HAL_IncTick>

080007cc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007cc:	4a0b      	ldr	r2, [pc, #44]	@ (80007fc <_sbrk+0x30>)
{
 80007ce:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80007d0:	6811      	ldr	r1, [r2, #0]
{
 80007d2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80007d4:	b909      	cbnz	r1, 80007da <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80007d6:	490a      	ldr	r1, [pc, #40]	@ (8000800 <_sbrk+0x34>)
 80007d8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007da:	6810      	ldr	r0, [r2, #0]
 80007dc:	4909      	ldr	r1, [pc, #36]	@ (8000804 <_sbrk+0x38>)
 80007de:	4c0a      	ldr	r4, [pc, #40]	@ (8000808 <_sbrk+0x3c>)
 80007e0:	4403      	add	r3, r0
 80007e2:	1b09      	subs	r1, r1, r4
 80007e4:	428b      	cmp	r3, r1
 80007e6:	d906      	bls.n	80007f6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80007e8:	f00f f97a 	bl	800fae0 <__errno>
 80007ec:	230c      	movs	r3, #12
 80007ee:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80007f4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80007f6:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80007f8:	e7fc      	b.n	80007f4 <_sbrk+0x28>
 80007fa:	bf00      	nop
 80007fc:	240004bc 	.word	0x240004bc
 8000800:	24000880 	.word	0x24000880
 8000804:	24080000 	.word	0x24080000
 8000808:	00000400 	.word	0x00000400

0800080c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800080c:	4a2e      	ldr	r2, [pc, #184]	@ (80008c8 <SystemInit+0xbc>)
 800080e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000812:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000816:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800081a:	4a2c      	ldr	r2, [pc, #176]	@ (80008cc <SystemInit+0xc0>)
 800081c:	6813      	ldr	r3, [r2, #0]
 800081e:	f003 030f 	and.w	r3, r3, #15
 8000822:	2b06      	cmp	r3, #6
 8000824:	d805      	bhi.n	8000832 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000826:	6813      	ldr	r3, [r2, #0]
 8000828:	f023 030f 	bic.w	r3, r3, #15
 800082c:	f043 0307 	orr.w	r3, r3, #7
 8000830:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000832:	4b27      	ldr	r3, [pc, #156]	@ (80008d0 <SystemInit+0xc4>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	f042 0201 	orr.w	r2, r2, #1
 800083a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000840:	4a24      	ldr	r2, [pc, #144]	@ (80008d4 <SystemInit+0xc8>)
 8000842:	6819      	ldr	r1, [r3, #0]
 8000844:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000846:	4921      	ldr	r1, [pc, #132]	@ (80008cc <SystemInit+0xc0>)
  RCC->CR &= 0xEAF6ED7FU;
 8000848:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800084a:	680a      	ldr	r2, [r1, #0]
 800084c:	0710      	lsls	r0, r2, #28
 800084e:	d505      	bpl.n	800085c <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000850:	680a      	ldr	r2, [r1, #0]
 8000852:	f022 020f 	bic.w	r2, r2, #15
 8000856:	f042 0207 	orr.w	r2, r2, #7
 800085a:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800085c:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800085e:	491e      	ldr	r1, [pc, #120]	@ (80008d8 <SystemInit+0xcc>)
  RCC->D1CFGR = 0x00000000;
 8000860:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000862:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000864:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000866:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000868:	491c      	ldr	r1, [pc, #112]	@ (80008dc <SystemInit+0xd0>)
 800086a:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800086c:	491c      	ldr	r1, [pc, #112]	@ (80008e0 <SystemInit+0xd4>)
 800086e:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000870:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000872:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000874:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000876:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000878:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800087a:	6819      	ldr	r1, [r3, #0]
 800087c:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8000880:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000882:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000884:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <SystemInit+0xd8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f36f 030f 	bfc	r3, #0, #16
 800088c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000890:	d203      	bcs.n	800089a <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <SystemInit+0xdc>)
 8000894:	2201      	movs	r2, #1
 8000896:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800089a:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <SystemInit+0xc4>)
 800089c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80008a0:	04d2      	lsls	r2, r2, #19
 80008a2:	d40f      	bmi.n	80008c4 <SystemInit+0xb8>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80008a4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80008a8:	f243 01d2 	movw	r1, #12498	@ 0x30d2
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80008ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80008b0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80008b4:	4a0d      	ldr	r2, [pc, #52]	@ (80008ec <SystemInit+0xe0>)
 80008b6:	6011      	str	r1, [r2, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80008b8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80008bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80008c0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00
 80008cc:	52002000 	.word	0x52002000
 80008d0:	58024400 	.word	0x58024400
 80008d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80008d8:	02020200 	.word	0x02020200
 80008dc:	01ff0000 	.word	0x01ff0000
 80008e0:	01010280 	.word	0x01010280
 80008e4:	5c001000 	.word	0x5c001000
 80008e8:	51008000 	.word	0x51008000
 80008ec:	52004000 	.word	0x52004000

080008f0 <ExitRun0Mode>:
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80008f0:	4b04      	ldr	r3, [pc, #16]	@ (8000904 <ExitRun0Mode+0x14>)
 80008f2:	68da      	ldr	r2, [r3, #12]
 80008f4:	f042 0202 	orr.w	r2, r2, #2
 80008f8:	60da      	str	r2, [r3, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80008fa:	685a      	ldr	r2, [r3, #4]
 80008fc:	0492      	lsls	r2, r2, #18
 80008fe:	d5fc      	bpl.n	80008fa <ExitRun0Mode+0xa>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	58024800 	.word	0x58024800

08000908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000908:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000944 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800090c:	f7ff fff0 	bl	80008f0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000910:	f7ff ff7c 	bl	800080c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000914:	480c      	ldr	r0, [pc, #48]	@ (8000948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000916:	490d      	ldr	r1, [pc, #52]	@ (800094c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000918:	4a0d      	ldr	r2, [pc, #52]	@ (8000950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800092c:	4c0a      	ldr	r4, [pc, #40]	@ (8000958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800093a:	f00f f8d7 	bl	800faec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093e:	f7ff fe2b 	bl	8000598 <main>
  bx  lr
 8000942:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000944:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000948:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800094c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000950:	080122e4 	.word	0x080122e4
  ldr r2, =_sbss
 8000954:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8000958:	2400087c 	.word	0x2400087c

0800095c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC3_IRQHandler>
	...

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_InitTick+0x40>)
{
 8000964:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8000966:	781a      	ldrb	r2, [r3, #0]
 8000968:	b90a      	cbnz	r2, 800096e <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 800096a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800096c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800096e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000972:	fbb3 f3f2 	udiv	r3, r3, r2
 8000976:	4a0b      	ldr	r2, [pc, #44]	@ (80009a4 <HAL_InitTick+0x44>)
 8000978:	6810      	ldr	r0, [r2, #0]
 800097a:	fbb0 f0f3 	udiv	r0, r0, r3
 800097e:	f000 f8b1 	bl	8000ae4 <HAL_SYSTICK_Config>
 8000982:	4604      	mov	r4, r0
 8000984:	2800      	cmp	r0, #0
 8000986:	d1f0      	bne.n	800096a <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000988:	2d0f      	cmp	r5, #15
 800098a:	d8ee      	bhi.n	800096a <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	4602      	mov	r2, r0
 800098e:	4629      	mov	r1, r5
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f000 f874 	bl	8000a80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <HAL_InitTick+0x48>)
 800099a:	4620      	mov	r0, r4
 800099c:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 800099e:	e7e5      	b.n	800096c <HAL_InitTick+0xc>
 80009a0:	24000008 	.word	0x24000008
 80009a4:	24000004 	.word	0x24000004
 80009a8:	2400000c 	.word	0x2400000c

080009ac <HAL_Init>:
{
 80009ac:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ae:	2003      	movs	r0, #3
 80009b0:	f000 f854 	bl	8000a5c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009b4:	f000 fcae 	bl	8001314 <HAL_RCC_GetSysClockFreq>
 80009b8:	490f      	ldr	r1, [pc, #60]	@ (80009f8 <HAL_Init+0x4c>)
 80009ba:	4a10      	ldr	r2, [pc, #64]	@ (80009fc <HAL_Init+0x50>)
 80009bc:	698b      	ldr	r3, [r1, #24]
 80009be:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80009c2:	5cd3      	ldrb	r3, [r2, r3]
 80009c4:	f003 031f 	and.w	r3, r3, #31
 80009c8:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009ca:	698b      	ldr	r3, [r1, #24]
 80009cc:	f003 030f 	and.w	r3, r3, #15
 80009d0:	5cd3      	ldrb	r3, [r2, r3]
 80009d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a00 <HAL_Init+0x54>)
 80009d4:	f003 031f 	and.w	r3, r3, #31
 80009d8:	fa20 f303 	lsr.w	r3, r0, r3
 80009dc:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <HAL_Init+0x58>)
 80009e0:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e2:	200f      	movs	r0, #15
 80009e4:	f7ff ffbc 	bl	8000960 <HAL_InitTick>
 80009e8:	4604      	mov	r4, r0
 80009ea:	b918      	cbnz	r0, 80009f4 <HAL_Init+0x48>
  HAL_MspInit();
 80009ec:	f7ff fe6c 	bl	80006c8 <HAL_MspInit>
}
 80009f0:	4620      	mov	r0, r4
 80009f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80009f4:	2401      	movs	r4, #1
 80009f6:	e7fb      	b.n	80009f0 <HAL_Init+0x44>
 80009f8:	58024400 	.word	0x58024400
 80009fc:	0801150a 	.word	0x0801150a
 8000a00:	24000000 	.word	0x24000000
 8000a04:	24000004 	.word	0x24000004

08000a08 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000a08:	4a03      	ldr	r2, [pc, #12]	@ (8000a18 <HAL_IncTick+0x10>)
 8000a0a:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <HAL_IncTick+0x14>)
 8000a0c:	6811      	ldr	r1, [r2, #0]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	440b      	add	r3, r1
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	240004c0 	.word	0x240004c0
 8000a1c:	24000008 	.word	0x24000008

08000a20 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a20:	4b01      	ldr	r3, [pc, #4]	@ (8000a28 <HAL_GetTick+0x8>)
 8000a22:	6818      	ldr	r0, [r3, #0]
}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	240004c0 	.word	0x240004c0

08000a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a2c:	b538      	push	{r3, r4, r5, lr}
 8000a2e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a30:	f7ff fff6 	bl	8000a20 <HAL_GetTick>
 8000a34:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a36:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000a38:	bf1e      	ittt	ne
 8000a3a:	4b04      	ldrne	r3, [pc, #16]	@ (8000a4c <HAL_Delay+0x20>)
 8000a3c:	781b      	ldrbne	r3, [r3, #0]
 8000a3e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a40:	f7ff ffee 	bl	8000a20 <HAL_GetTick>
 8000a44:	1b43      	subs	r3, r0, r5
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d3fa      	bcc.n	8000a40 <HAL_Delay+0x14>
  {
  }
}
 8000a4a:	bd38      	pop	{r3, r4, r5, pc}
 8000a4c:	24000008 	.word	0x24000008

08000a50 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000a50:	4b01      	ldr	r3, [pc, #4]	@ (8000a58 <HAL_GetREVID+0x8>)
 8000a52:	6818      	ldr	r0, [r3, #0]
}
 8000a54:	0c00      	lsrs	r0, r0, #16
 8000a56:	4770      	bx	lr
 8000a58:	5c001000 	.word	0x5c001000

08000a5c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4907      	ldr	r1, [pc, #28]	@ (8000a7c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a5e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a62:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000a6a:	0412      	lsls	r2, r2, #16
 8000a6c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000a78:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a82:	b530      	push	{r4, r5, lr}
 8000a84:	68dc      	ldr	r4, [r3, #12]
 8000a86:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a8a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a90:	2b04      	cmp	r3, #4
 8000a92:	bf28      	it	cs
 8000a94:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9c:	bf8c      	ite	hi
 8000a9e:	3c03      	subhi	r4, #3
 8000aa0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa2:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8000aa6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa8:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	fa03 f304 	lsl.w	r3, r3, r4
 8000ab8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000ac0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000ac2:	db06      	blt.n	8000ad2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000ac8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000acc:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ad0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	f000 000f 	and.w	r0, r0, #15
 8000ad6:	4a02      	ldr	r2, [pc, #8]	@ (8000ae0 <HAL_NVIC_SetPriority+0x60>)
 8000ad8:	5413      	strb	r3, [r2, r0]
 8000ada:	e7f9      	b.n	8000ad0 <HAL_NVIC_SetPriority+0x50>
 8000adc:	e000ed00 	.word	0xe000ed00
 8000ae0:	e000ed14 	.word	0xe000ed14

08000ae4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	3801      	subs	r0, #1
 8000ae6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000aea:	d20b      	bcs.n	8000b04 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <HAL_SYSTICK_Config+0x24>)
 8000af2:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af4:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af6:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000afe:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b00:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b02:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b04:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b0c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b10:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <HAL_MPU_Disable+0x18>)
 8000b12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b14:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_MPU_Enable+0x1c>)
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b34:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000b38:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000b3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b3e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000b48:	7843      	ldrb	r3, [r0, #1]
 8000b4a:	4a14      	ldr	r2, [pc, #80]	@ (8000b9c <HAL_MPU_ConfigRegion+0x54>)
 8000b4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000b50:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8000b54:	f023 0301 	bic.w	r3, r3, #1
 8000b58:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000b5c:	6843      	ldr	r3, [r0, #4]
 8000b5e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b62:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b64:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b66:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b68:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000b6c:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b6e:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000b70:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b72:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000b76:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b78:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000b7c:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b7e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000b82:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b88:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000b8e:	7a01      	ldrb	r1, [r0, #8]
 8000b90:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b94:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8000ba4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8000d6c <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000baa:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bae:	680a      	ldr	r2, [r1, #0]
 8000bb0:	fa32 f503 	lsrs.w	r5, r2, r3
 8000bb4:	d102      	bne.n	8000bbc <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8000bb6:	b003      	add	sp, #12
 8000bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bbc:	2501      	movs	r5, #1
 8000bbe:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8000bc2:	ea18 0202 	ands.w	r2, r8, r2
 8000bc6:	f000 80bb 	beq.w	8000d40 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bca:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bcc:	2703      	movs	r7, #3
 8000bce:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bd2:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bd6:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bda:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bdc:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be0:	2f01      	cmp	r7, #1
 8000be2:	d834      	bhi.n	8000c4e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000be4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000be6:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bea:	68cf      	ldr	r7, [r1, #12]
 8000bec:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bf0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000bf4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bf6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bf8:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bfc:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8000c00:	409f      	lsls	r7, r3
 8000c02:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8000c06:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c08:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c0a:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c0c:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c10:	688f      	ldr	r7, [r1, #8]
 8000c12:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c16:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8000c1a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c1c:	d119      	bne.n	8000c52 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8000c1e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c22:	f003 0a07 	and.w	sl, r3, #7
 8000c26:	f04f 0b0f 	mov.w	fp, #15
 8000c2a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8000c2e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8000c32:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c36:	fa0b fb0a 	lsl.w	fp, fp, sl
 8000c3a:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c3e:	690f      	ldr	r7, [r1, #16]
 8000c40:	fa07 f70a 	lsl.w	r7, r7, sl
 8000c44:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8000c48:	f8c8 7020 	str.w	r7, [r8, #32]
 8000c4c:	e001      	b.n	8000c52 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c4e:	2d03      	cmp	r5, #3
 8000c50:	d1da      	bne.n	8000c08 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8000c52:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c54:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c58:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c5c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c60:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8000c64:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c66:	d06b      	beq.n	8000d40 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c68:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8000c6c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c70:	f003 0c03 	and.w	ip, r3, #3
 8000c74:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c78:	f045 0502 	orr.w	r5, r5, #2
 8000c7c:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c80:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c84:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8000c88:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8000c8c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c90:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c94:	f005 0502 	and.w	r5, r5, #2
 8000c98:	9501      	str	r5, [sp, #4]
 8000c9a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c9c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c9e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ca2:	4d31      	ldr	r5, [pc, #196]	@ (8000d68 <HAL_GPIO_Init+0x1c8>)
 8000ca4:	42a8      	cmp	r0, r5
 8000ca6:	d04d      	beq.n	8000d44 <HAL_GPIO_Init+0x1a4>
 8000ca8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000cac:	42a8      	cmp	r0, r5
 8000cae:	d04b      	beq.n	8000d48 <HAL_GPIO_Init+0x1a8>
 8000cb0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000cb4:	42a8      	cmp	r0, r5
 8000cb6:	d049      	beq.n	8000d4c <HAL_GPIO_Init+0x1ac>
 8000cb8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000cbc:	42a8      	cmp	r0, r5
 8000cbe:	d047      	beq.n	8000d50 <HAL_GPIO_Init+0x1b0>
 8000cc0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000cc4:	42a8      	cmp	r0, r5
 8000cc6:	d045      	beq.n	8000d54 <HAL_GPIO_Init+0x1b4>
 8000cc8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000ccc:	42a8      	cmp	r0, r5
 8000cce:	d043      	beq.n	8000d58 <HAL_GPIO_Init+0x1b8>
 8000cd0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000cd4:	42a8      	cmp	r0, r5
 8000cd6:	d041      	beq.n	8000d5c <HAL_GPIO_Init+0x1bc>
 8000cd8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000cdc:	42a8      	cmp	r0, r5
 8000cde:	d03f      	beq.n	8000d60 <HAL_GPIO_Init+0x1c0>
 8000ce0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000ce4:	42a8      	cmp	r0, r5
 8000ce6:	d03d      	beq.n	8000d64 <HAL_GPIO_Init+0x1c4>
 8000ce8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000cec:	42a8      	cmp	r0, r5
 8000cee:	bf14      	ite	ne
 8000cf0:	250a      	movne	r5, #10
 8000cf2:	2509      	moveq	r5, #9
 8000cf4:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cf8:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cfc:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d00:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8000d02:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8000d06:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000d08:	bf0c      	ite	eq
 8000d0a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000d0c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d0e:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8000d12:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8000d14:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8000d16:	bf0c      	ite	eq
 8000d18:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000d1a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d1c:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8000d20:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8000d22:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8000d26:	bf0c      	ite	eq
 8000d28:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000d2a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d2c:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8000d2e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8000d32:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8000d36:	bf54      	ite	pl
 8000d38:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000d3a:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8000d3c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8000d40:	3301      	adds	r3, #1
 8000d42:	e734      	b.n	8000bae <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d44:	2500      	movs	r5, #0
 8000d46:	e7d5      	b.n	8000cf4 <HAL_GPIO_Init+0x154>
 8000d48:	2501      	movs	r5, #1
 8000d4a:	e7d3      	b.n	8000cf4 <HAL_GPIO_Init+0x154>
 8000d4c:	2502      	movs	r5, #2
 8000d4e:	e7d1      	b.n	8000cf4 <HAL_GPIO_Init+0x154>
 8000d50:	2503      	movs	r5, #3
 8000d52:	e7cf      	b.n	8000cf4 <HAL_GPIO_Init+0x154>
 8000d54:	2504      	movs	r5, #4
 8000d56:	e7cd      	b.n	8000cf4 <HAL_GPIO_Init+0x154>
 8000d58:	2505      	movs	r5, #5
 8000d5a:	e7cb      	b.n	8000cf4 <HAL_GPIO_Init+0x154>
 8000d5c:	2506      	movs	r5, #6
 8000d5e:	e7c9      	b.n	8000cf4 <HAL_GPIO_Init+0x154>
 8000d60:	2507      	movs	r5, #7
 8000d62:	e7c7      	b.n	8000cf4 <HAL_GPIO_Init+0x154>
 8000d64:	2508      	movs	r5, #8
 8000d66:	e7c5      	b.n	8000cf4 <HAL_GPIO_Init+0x154>
 8000d68:	58020000 	.word	0x58020000
 8000d6c:	58024400 	.word	0x58024400

08000d70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d70:	b10a      	cbz	r2, 8000d76 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d72:	6181      	str	r1, [r0, #24]
  }
}
 8000d74:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d76:	0409      	lsls	r1, r1, #16
 8000d78:	e7fb      	b.n	8000d72 <HAL_GPIO_WritePin+0x2>
	...

08000d7c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000d7c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000d7e:	4c10      	ldr	r4, [pc, #64]	@ (8000dc0 <HAL_PWREx_ConfigSupply+0x44>)
 8000d80:	68e3      	ldr	r3, [r4, #12]
 8000d82:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000d86:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000d88:	d105      	bne.n	8000d96 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	1a18      	subs	r0, r3, r0
 8000d90:	bf18      	it	ne
 8000d92:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000d96:	f023 0307 	bic.w	r3, r3, #7
 8000d9a:	4318      	orrs	r0, r3
 8000d9c:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8000d9e:	f7ff fe3f 	bl	8000a20 <HAL_GetTick>
 8000da2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000da4:	6863      	ldr	r3, [r4, #4]
 8000da6:	049b      	lsls	r3, r3, #18
 8000da8:	d501      	bpl.n	8000dae <HAL_PWREx_ConfigSupply+0x32>
      return HAL_OK;
 8000daa:	2000      	movs	r0, #0
 8000dac:	e7f2      	b.n	8000d94 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000dae:	f7ff fe37 	bl	8000a20 <HAL_GetTick>
 8000db2:	1b40      	subs	r0, r0, r5
 8000db4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000db8:	d9f4      	bls.n	8000da4 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8000dba:	2001      	movs	r0, #1
 8000dbc:	e7ea      	b.n	8000d94 <HAL_PWREx_ConfigSupply+0x18>
 8000dbe:	bf00      	nop
 8000dc0:	58024800 	.word	0x58024800

08000dc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d074      	beq.n	8000eb6 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dcc:	6803      	ldr	r3, [r0, #0]
 8000dce:	07d8      	lsls	r0, r3, #31
 8000dd0:	d45e      	bmi.n	8000e90 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	0799      	lsls	r1, r3, #30
 8000dd6:	f100 80ad 	bmi.w	8000f34 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	06da      	lsls	r2, r3, #27
 8000dde:	d527      	bpl.n	8000e30 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000de0:	4a9c      	ldr	r2, [pc, #624]	@ (8001054 <HAL_RCC_OscConfig+0x290>)
 8000de2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000de4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000de6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000dea:	2b08      	cmp	r3, #8
 8000dec:	d007      	beq.n	8000dfe <HAL_RCC_OscConfig+0x3a>
 8000dee:	2b18      	cmp	r3, #24
 8000df0:	f040 8103 	bne.w	8000ffa <HAL_RCC_OscConfig+0x236>
 8000df4:	f001 0303 	and.w	r3, r1, #3
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	f040 80fe 	bne.w	8000ffa <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000dfe:	6813      	ldr	r3, [r2, #0]
 8000e00:	05db      	lsls	r3, r3, #23
 8000e02:	d502      	bpl.n	8000e0a <HAL_RCC_OscConfig+0x46>
 8000e04:	69e3      	ldr	r3, [r4, #28]
 8000e06:	2b80      	cmp	r3, #128	@ 0x80
 8000e08:	d155      	bne.n	8000eb6 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000e0a:	f7ff fe21 	bl	8000a50 <HAL_GetREVID>
 8000e0e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8000e12:	6a21      	ldr	r1, [r4, #32]
 8000e14:	4298      	cmp	r0, r3
 8000e16:	4b8f      	ldr	r3, [pc, #572]	@ (8001054 <HAL_RCC_OscConfig+0x290>)
 8000e18:	f200 80e8 	bhi.w	8000fec <HAL_RCC_OscConfig+0x228>
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	2920      	cmp	r1, #32
 8000e20:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8000e24:	bf0c      	ite	eq
 8000e26:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 8000e2a:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8000e2e:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	0719      	lsls	r1, r3, #28
 8000e34:	f100 8123 	bmi.w	800107e <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	069a      	lsls	r2, r3, #26
 8000e3c:	f100 8144 	bmi.w	80010c8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	075d      	lsls	r5, r3, #29
 8000e44:	d51e      	bpl.n	8000e84 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000e46:	4d84      	ldr	r5, [pc, #528]	@ (8001058 <HAL_RCC_OscConfig+0x294>)
 8000e48:	682b      	ldr	r3, [r5, #0]
 8000e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e4e:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000e50:	f7ff fde6 	bl	8000a20 <HAL_GetTick>
 8000e54:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000e56:	682b      	ldr	r3, [r5, #0]
 8000e58:	05da      	lsls	r2, r3, #23
 8000e5a:	f140 815a 	bpl.w	8001112 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e5e:	68a3      	ldr	r3, [r4, #8]
 8000e60:	4d7c      	ldr	r5, [pc, #496]	@ (8001054 <HAL_RCC_OscConfig+0x290>)
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	f040 815c 	bne.w	8001120 <HAL_RCC_OscConfig+0x35c>
 8000e68:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e70:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8000e74:	f7ff fdd4 	bl	8000a20 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000e78:	4e76      	ldr	r6, [pc, #472]	@ (8001054 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8000e7a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000e7c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8000e7e:	079b      	lsls	r3, r3, #30
 8000e80:	f140 8174 	bpl.w	800116c <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e84:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000e86:	2900      	cmp	r1, #0
 8000e88:	f040 8177 	bne.w	800117a <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	e02b      	b.n	8000ee8 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e90:	4a70      	ldr	r2, [pc, #448]	@ (8001054 <HAL_RCC_OscConfig+0x290>)
 8000e92:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e94:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000e9a:	2b10      	cmp	r3, #16
 8000e9c:	d005      	beq.n	8000eaa <HAL_RCC_OscConfig+0xe6>
 8000e9e:	2b18      	cmp	r3, #24
 8000ea0:	d10b      	bne.n	8000eba <HAL_RCC_OscConfig+0xf6>
 8000ea2:	f001 0303 	and.w	r3, r1, #3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d107      	bne.n	8000eba <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eaa:	6813      	ldr	r3, [r2, #0]
 8000eac:	039a      	lsls	r2, r3, #14
 8000eae:	d590      	bpl.n	8000dd2 <HAL_RCC_OscConfig+0xe>
 8000eb0:	6863      	ldr	r3, [r4, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d18d      	bne.n	8000dd2 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	e016      	b.n	8000ee8 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eba:	6863      	ldr	r3, [r4, #4]
 8000ebc:	4d65      	ldr	r5, [pc, #404]	@ (8001054 <HAL_RCC_OscConfig+0x290>)
 8000ebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ec2:	d112      	bne.n	8000eea <HAL_RCC_OscConfig+0x126>
 8000ec4:	682b      	ldr	r3, [r5, #0]
 8000ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fda8 	bl	8000a20 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ed0:	4e60      	ldr	r6, [pc, #384]	@ (8001054 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8000ed2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ed4:	6833      	ldr	r3, [r6, #0]
 8000ed6:	039b      	lsls	r3, r3, #14
 8000ed8:	f53f af7b 	bmi.w	8000dd2 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000edc:	f7ff fda0 	bl	8000a20 <HAL_GetTick>
 8000ee0:	1b40      	subs	r0, r0, r5
 8000ee2:	2864      	cmp	r0, #100	@ 0x64
 8000ee4:	d9f6      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8000ee6:	2003      	movs	r0, #3
}
 8000ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eea:	b9a3      	cbnz	r3, 8000f16 <HAL_RCC_OscConfig+0x152>
 8000eec:	682b      	ldr	r3, [r5, #0]
 8000eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ef2:	602b      	str	r3, [r5, #0]
 8000ef4:	682b      	ldr	r3, [r5, #0]
 8000ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000efa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000efc:	f7ff fd90 	bl	8000a20 <HAL_GetTick>
 8000f00:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f02:	682b      	ldr	r3, [r5, #0]
 8000f04:	039f      	lsls	r7, r3, #14
 8000f06:	f57f af64 	bpl.w	8000dd2 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f0a:	f7ff fd89 	bl	8000a20 <HAL_GetTick>
 8000f0e:	1b80      	subs	r0, r0, r6
 8000f10:	2864      	cmp	r0, #100	@ 0x64
 8000f12:	d9f6      	bls.n	8000f02 <HAL_RCC_OscConfig+0x13e>
 8000f14:	e7e7      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f1a:	682b      	ldr	r3, [r5, #0]
 8000f1c:	d103      	bne.n	8000f26 <HAL_RCC_OscConfig+0x162>
 8000f1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f22:	602b      	str	r3, [r5, #0]
 8000f24:	e7ce      	b.n	8000ec4 <HAL_RCC_OscConfig+0x100>
 8000f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f2a:	602b      	str	r3, [r5, #0]
 8000f2c:	682b      	ldr	r3, [r5, #0]
 8000f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f32:	e7ca      	b.n	8000eca <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f34:	4947      	ldr	r1, [pc, #284]	@ (8001054 <HAL_RCC_OscConfig+0x290>)
 8000f36:	68e2      	ldr	r2, [r4, #12]
 8000f38:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f3a:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000f3c:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8000f40:	d003      	beq.n	8000f4a <HAL_RCC_OscConfig+0x186>
 8000f42:	2b18      	cmp	r3, #24
 8000f44:	d12a      	bne.n	8000f9c <HAL_RCC_OscConfig+0x1d8>
 8000f46:	0780      	lsls	r0, r0, #30
 8000f48:	d128      	bne.n	8000f9c <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f4a:	680b      	ldr	r3, [r1, #0]
 8000f4c:	075b      	lsls	r3, r3, #29
 8000f4e:	d501      	bpl.n	8000f54 <HAL_RCC_OscConfig+0x190>
 8000f50:	2a00      	cmp	r2, #0
 8000f52:	d0b0      	beq.n	8000eb6 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000f54:	4d3f      	ldr	r5, [pc, #252]	@ (8001054 <HAL_RCC_OscConfig+0x290>)
 8000f56:	682b      	ldr	r3, [r5, #0]
 8000f58:	f023 0319 	bic.w	r3, r3, #25
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f60:	f7ff fd5e 	bl	8000a20 <HAL_GetTick>
 8000f64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f66:	682b      	ldr	r3, [r5, #0]
 8000f68:	075f      	lsls	r7, r3, #29
 8000f6a:	d511      	bpl.n	8000f90 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f6c:	f7ff fd70 	bl	8000a50 <HAL_GetREVID>
 8000f70:	f241 0303 	movw	r3, #4099	@ 0x1003
 8000f74:	6922      	ldr	r2, [r4, #16]
 8000f76:	4298      	cmp	r0, r3
 8000f78:	686b      	ldr	r3, [r5, #4]
 8000f7a:	d822      	bhi.n	8000fc2 <HAL_RCC_OscConfig+0x1fe>
 8000f7c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8000f80:	2a40      	cmp	r2, #64	@ 0x40
 8000f82:	bf0c      	ite	eq
 8000f84:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8000f88:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8000f8c:	606b      	str	r3, [r5, #4]
 8000f8e:	e724      	b.n	8000dda <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f90:	f7ff fd46 	bl	8000a20 <HAL_GetTick>
 8000f94:	1b80      	subs	r0, r0, r6
 8000f96:	2802      	cmp	r0, #2
 8000f98:	d9e5      	bls.n	8000f66 <HAL_RCC_OscConfig+0x1a2>
 8000f9a:	e7a4      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f9c:	4d2d      	ldr	r5, [pc, #180]	@ (8001054 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000f9e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000fa0:	b1a2      	cbz	r2, 8000fcc <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000fa2:	f023 0319 	bic.w	r3, r3, #25
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000faa:	f7ff fd39 	bl	8000a20 <HAL_GetTick>
 8000fae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fb0:	682b      	ldr	r3, [r5, #0]
 8000fb2:	0758      	lsls	r0, r3, #29
 8000fb4:	d4da      	bmi.n	8000f6c <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb6:	f7ff fd33 	bl	8000a20 <HAL_GetTick>
 8000fba:	1b80      	subs	r0, r0, r6
 8000fbc:	2802      	cmp	r0, #2
 8000fbe:	d9f7      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x1ec>
 8000fc0:	e791      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8000fc6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000fca:	e7df      	b.n	8000f8c <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 8000fcc:	f023 0301 	bic.w	r3, r3, #1
 8000fd0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fd25 	bl	8000a20 <HAL_GetTick>
 8000fd6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fd8:	682b      	ldr	r3, [r5, #0]
 8000fda:	0759      	lsls	r1, r3, #29
 8000fdc:	f57f aefd 	bpl.w	8000dda <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe0:	f7ff fd1e 	bl	8000a20 <HAL_GetTick>
 8000fe4:	1b80      	subs	r0, r0, r6
 8000fe6:	2802      	cmp	r0, #2
 8000fe8:	d9f6      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x214>
 8000fea:	e77c      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8000ff2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	e71a      	b.n	8000e30 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8000ffa:	69e3      	ldr	r3, [r4, #28]
 8000ffc:	4d15      	ldr	r5, [pc, #84]	@ (8001054 <HAL_RCC_OscConfig+0x290>)
 8000ffe:	b36b      	cbz	r3, 800105c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8001000:	682b      	ldr	r3, [r5, #0]
 8001002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001006:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001008:	f7ff fd0a 	bl	8000a20 <HAL_GetTick>
 800100c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800100e:	682b      	ldr	r3, [r5, #0]
 8001010:	05df      	lsls	r7, r3, #23
 8001012:	d511      	bpl.n	8001038 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001014:	f7ff fd1c 	bl	8000a50 <HAL_GetREVID>
 8001018:	f241 0303 	movw	r3, #4099	@ 0x1003
 800101c:	6a22      	ldr	r2, [r4, #32]
 800101e:	4298      	cmp	r0, r3
 8001020:	d810      	bhi.n	8001044 <HAL_RCC_OscConfig+0x280>
 8001022:	686b      	ldr	r3, [r5, #4]
 8001024:	2a20      	cmp	r2, #32
 8001026:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800102a:	bf0c      	ite	eq
 800102c:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8001030:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8001034:	606b      	str	r3, [r5, #4]
 8001036:	e6fb      	b.n	8000e30 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001038:	f7ff fcf2 	bl	8000a20 <HAL_GetTick>
 800103c:	1b80      	subs	r0, r0, r6
 800103e:	2802      	cmp	r0, #2
 8001040:	d9e5      	bls.n	800100e <HAL_RCC_OscConfig+0x24a>
 8001042:	e750      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001044:	68eb      	ldr	r3, [r5, #12]
 8001046:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800104a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800104e:	60eb      	str	r3, [r5, #12]
 8001050:	e6ee      	b.n	8000e30 <HAL_RCC_OscConfig+0x6c>
 8001052:	bf00      	nop
 8001054:	58024400 	.word	0x58024400
 8001058:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800105c:	682b      	ldr	r3, [r5, #0]
 800105e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001062:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001064:	f7ff fcdc 	bl	8000a20 <HAL_GetTick>
 8001068:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800106a:	682b      	ldr	r3, [r5, #0]
 800106c:	05d8      	lsls	r0, r3, #23
 800106e:	f57f aedf 	bpl.w	8000e30 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001072:	f7ff fcd5 	bl	8000a20 <HAL_GetTick>
 8001076:	1b80      	subs	r0, r0, r6
 8001078:	2802      	cmp	r0, #2
 800107a:	d9f6      	bls.n	800106a <HAL_RCC_OscConfig+0x2a6>
 800107c:	e733      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800107e:	6963      	ldr	r3, [r4, #20]
 8001080:	4da3      	ldr	r5, [pc, #652]	@ (8001310 <HAL_RCC_OscConfig+0x54c>)
 8001082:	b183      	cbz	r3, 80010a6 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8001084:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800108c:	f7ff fcc8 	bl	8000a20 <HAL_GetTick>
 8001090:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001092:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8001094:	079b      	lsls	r3, r3, #30
 8001096:	f53f aecf 	bmi.w	8000e38 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800109a:	f7ff fcc1 	bl	8000a20 <HAL_GetTick>
 800109e:	1b80      	subs	r0, r0, r6
 80010a0:	2802      	cmp	r0, #2
 80010a2:	d9f6      	bls.n	8001092 <HAL_RCC_OscConfig+0x2ce>
 80010a4:	e71f      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 80010a6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80010ae:	f7ff fcb7 	bl	8000a20 <HAL_GetTick>
 80010b2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010b4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80010b6:	079f      	lsls	r7, r3, #30
 80010b8:	f57f aebe 	bpl.w	8000e38 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010bc:	f7ff fcb0 	bl	8000a20 <HAL_GetTick>
 80010c0:	1b80      	subs	r0, r0, r6
 80010c2:	2802      	cmp	r0, #2
 80010c4:	d9f6      	bls.n	80010b4 <HAL_RCC_OscConfig+0x2f0>
 80010c6:	e70e      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80010c8:	69a3      	ldr	r3, [r4, #24]
 80010ca:	4d91      	ldr	r5, [pc, #580]	@ (8001310 <HAL_RCC_OscConfig+0x54c>)
 80010cc:	b183      	cbz	r3, 80010f0 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 80010ce:	682b      	ldr	r3, [r5, #0]
 80010d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010d4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80010d6:	f7ff fca3 	bl	8000a20 <HAL_GetTick>
 80010da:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80010dc:	682b      	ldr	r3, [r5, #0]
 80010de:	0498      	lsls	r0, r3, #18
 80010e0:	f53f aeae 	bmi.w	8000e40 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010e4:	f7ff fc9c 	bl	8000a20 <HAL_GetTick>
 80010e8:	1b80      	subs	r0, r0, r6
 80010ea:	2802      	cmp	r0, #2
 80010ec:	d9f6      	bls.n	80010dc <HAL_RCC_OscConfig+0x318>
 80010ee:	e6fa      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010f6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80010f8:	f7ff fc92 	bl	8000a20 <HAL_GetTick>
 80010fc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010fe:	682b      	ldr	r3, [r5, #0]
 8001100:	0499      	lsls	r1, r3, #18
 8001102:	f57f ae9d 	bpl.w	8000e40 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001106:	f7ff fc8b 	bl	8000a20 <HAL_GetTick>
 800110a:	1b80      	subs	r0, r0, r6
 800110c:	2802      	cmp	r0, #2
 800110e:	d9f6      	bls.n	80010fe <HAL_RCC_OscConfig+0x33a>
 8001110:	e6e9      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001112:	f7ff fc85 	bl	8000a20 <HAL_GetTick>
 8001116:	1b80      	subs	r0, r0, r6
 8001118:	2864      	cmp	r0, #100	@ 0x64
 800111a:	f67f ae9c 	bls.w	8000e56 <HAL_RCC_OscConfig+0x92>
 800111e:	e6e2      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001120:	b9b3      	cbnz	r3, 8001150 <HAL_RCC_OscConfig+0x38c>
 8001122:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001124:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001128:	f023 0301 	bic.w	r3, r3, #1
 800112c:	672b      	str	r3, [r5, #112]	@ 0x70
 800112e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001130:	f023 0304 	bic.w	r3, r3, #4
 8001134:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8001136:	f7ff fc73 	bl	8000a20 <HAL_GetTick>
 800113a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800113c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800113e:	0798      	lsls	r0, r3, #30
 8001140:	f57f aea0 	bpl.w	8000e84 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001144:	f7ff fc6c 	bl	8000a20 <HAL_GetTick>
 8001148:	1b80      	subs	r0, r0, r6
 800114a:	42b8      	cmp	r0, r7
 800114c:	d9f6      	bls.n	800113c <HAL_RCC_OscConfig+0x378>
 800114e:	e6ca      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001150:	2b05      	cmp	r3, #5
 8001152:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001154:	d103      	bne.n	800115e <HAL_RCC_OscConfig+0x39a>
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	672b      	str	r3, [r5, #112]	@ 0x70
 800115c:	e684      	b.n	8000e68 <HAL_RCC_OscConfig+0xa4>
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	672b      	str	r3, [r5, #112]	@ 0x70
 8001164:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001166:	f023 0304 	bic.w	r3, r3, #4
 800116a:	e680      	b.n	8000e6e <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800116c:	f7ff fc58 	bl	8000a20 <HAL_GetTick>
 8001170:	1b40      	subs	r0, r0, r5
 8001172:	42b8      	cmp	r0, r7
 8001174:	f67f ae82 	bls.w	8000e7c <HAL_RCC_OscConfig+0xb8>
 8001178:	e6b5      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800117a:	4d65      	ldr	r5, [pc, #404]	@ (8001310 <HAL_RCC_OscConfig+0x54c>)
 800117c:	692b      	ldr	r3, [r5, #16]
 800117e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001182:	2b18      	cmp	r3, #24
 8001184:	d078      	beq.n	8001278 <HAL_RCC_OscConfig+0x4b4>
        __HAL_RCC_PLL_DISABLE();
 8001186:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001188:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800118a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800118e:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001190:	d165      	bne.n	800125e <HAL_RCC_OscConfig+0x49a>
        tickstart = HAL_GetTick();
 8001192:	f7ff fc45 	bl	8000a20 <HAL_GetTick>
 8001196:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	0199      	lsls	r1, r3, #6
 800119c:	d459      	bmi.n	8001252 <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800119e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80011a0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80011a2:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 80011a6:	f023 0303 	bic.w	r3, r3, #3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80011ae:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80011b2:	62ab      	str	r3, [r5, #40]	@ 0x28
 80011b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80011b6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80011b8:	3b01      	subs	r3, #1
 80011ba:	3a01      	subs	r2, #1
 80011bc:	025b      	lsls	r3, r3, #9
 80011be:	0412      	lsls	r2, r2, #16
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80011c6:	4313      	orrs	r3, r2
 80011c8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80011ca:	3a01      	subs	r2, #1
 80011cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011d0:	4313      	orrs	r3, r2
 80011d2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80011d4:	3a01      	subs	r2, #1
 80011d6:	0612      	lsls	r2, r2, #24
 80011d8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80011dc:	4313      	orrs	r3, r2
 80011de:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80011e0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80011e2:	f023 0301 	bic.w	r3, r3, #1
 80011e6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80011e8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80011ea:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80011ec:	f36f 03cf 	bfc	r3, #3, #13
 80011f0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011f4:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80011f6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80011f8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80011fa:	f023 030c 	bic.w	r3, r3, #12
 80011fe:	4313      	orrs	r3, r2
 8001200:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001202:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001204:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001206:	f023 0302 	bic.w	r3, r3, #2
 800120a:	4313      	orrs	r3, r2
 800120c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800120e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001214:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001216:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800121c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800121e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001224:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8001226:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800122e:	682b      	ldr	r3, [r5, #0]
 8001230:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001234:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001236:	f7ff fbf3 	bl	8000a20 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800123a:	4d35      	ldr	r5, [pc, #212]	@ (8001310 <HAL_RCC_OscConfig+0x54c>)
        tickstart = HAL_GetTick();
 800123c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800123e:	682b      	ldr	r3, [r5, #0]
 8001240:	019a      	lsls	r2, r3, #6
 8001242:	f53f ae23 	bmi.w	8000e8c <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff fbeb 	bl	8000a20 <HAL_GetTick>
 800124a:	1b00      	subs	r0, r0, r4
 800124c:	2802      	cmp	r0, #2
 800124e:	d9f6      	bls.n	800123e <HAL_RCC_OscConfig+0x47a>
 8001250:	e649      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001252:	f7ff fbe5 	bl	8000a20 <HAL_GetTick>
 8001256:	1b80      	subs	r0, r0, r6
 8001258:	2802      	cmp	r0, #2
 800125a:	d99d      	bls.n	8001198 <HAL_RCC_OscConfig+0x3d4>
 800125c:	e643      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800125e:	f7ff fbdf 	bl	8000a20 <HAL_GetTick>
 8001262:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001264:	682b      	ldr	r3, [r5, #0]
 8001266:	019b      	lsls	r3, r3, #6
 8001268:	f57f ae10 	bpl.w	8000e8c <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800126c:	f7ff fbd8 	bl	8000a20 <HAL_GetTick>
 8001270:	1b00      	subs	r0, r0, r4
 8001272:	2802      	cmp	r0, #2
 8001274:	d9f6      	bls.n	8001264 <HAL_RCC_OscConfig+0x4a0>
 8001276:	e636      	b.n	8000ee6 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001278:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800127a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800127c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800127e:	f43f ae1a 	beq.w	8000eb6 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001282:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001286:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001288:	4281      	cmp	r1, r0
 800128a:	f47f ae14 	bne.w	8000eb6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800128e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001292:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001294:	428a      	cmp	r2, r1
 8001296:	f47f ae0e 	bne.w	8000eb6 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800129a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800129c:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80012a0:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80012a2:	4291      	cmp	r1, r2
 80012a4:	f47f ae07 	bne.w	8000eb6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80012a8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80012aa:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80012ae:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80012b0:	4291      	cmp	r1, r2
 80012b2:	f47f ae00 	bne.w	8000eb6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80012b6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80012b8:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80012bc:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80012be:	4291      	cmp	r1, r2
 80012c0:	f47f adf9 	bne.w	8000eb6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80012c4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80012c6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80012ca:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80012cc:	4293      	cmp	r3, r2
 80012ce:	f47f adf2 	bne.w	8000eb6 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80012d2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80012d4:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80012d6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80012da:	429a      	cmp	r2, r3
 80012dc:	f43f add6 	beq.w	8000e8c <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 80012e0:	4d0b      	ldr	r5, [pc, #44]	@ (8001310 <HAL_RCC_OscConfig+0x54c>)
 80012e2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 80012ea:	f7ff fb99 	bl	8000a20 <HAL_GetTick>
 80012ee:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80012f0:	f7ff fb96 	bl	8000a20 <HAL_GetTick>
 80012f4:	42b0      	cmp	r0, r6
 80012f6:	d0fb      	beq.n	80012f0 <HAL_RCC_OscConfig+0x52c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80012f8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80012fa:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80012fc:	f36f 03cf 	bfc	r3, #3, #13
 8001300:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001304:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8001306:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800130e:	e5bd      	b.n	8000e8c <HAL_RCC_OscConfig+0xc8>
 8001310:	58024400 	.word	0x58024400

08001314 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001314:	4b49      	ldr	r3, [pc, #292]	@ (800143c <HAL_RCC_GetSysClockFreq+0x128>)
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800131c:	2a10      	cmp	r2, #16
{
 800131e:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001320:	f000 8088 	beq.w	8001434 <HAL_RCC_GetSysClockFreq+0x120>
 8001324:	2a18      	cmp	r2, #24
 8001326:	d00c      	beq.n	8001342 <HAL_RCC_GetSysClockFreq+0x2e>
 8001328:	2a00      	cmp	r2, #0
 800132a:	f040 8085 	bne.w	8001438 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4843      	ldr	r0, [pc, #268]	@ (8001440 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001332:	f012 0f20 	tst.w	r2, #32
 8001336:	d003      	beq.n	8001340 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800133e:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8001340:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001342:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001344:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001346:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 8001348:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800134c:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 8001352:	d0f5      	beq.n	8001340 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001354:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001358:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800135c:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001360:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001364:	4362      	muls	r2, r4
 8001366:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
        switch (pllsource)
 800136a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800136c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001370:	ee06 2a90 	vmov	s13, r2
 8001374:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8001378:	d04e      	beq.n	8001418 <HAL_RCC_GetSysClockFreq+0x104>
 800137a:	2902      	cmp	r1, #2
 800137c:	d03e      	beq.n	80013fc <HAL_RCC_GetSysClockFreq+0xe8>
 800137e:	2900      	cmp	r1, #0
 8001380:	d14a      	bne.n	8001418 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	0692      	lsls	r2, r2, #26
 8001386:	d527      	bpl.n	80013d8 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001388:	6819      	ldr	r1, [r3, #0]
 800138a:	4a2d      	ldr	r2, [pc, #180]	@ (8001440 <HAL_RCC_GetSysClockFreq+0x12c>)
 800138c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001392:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001398:	ee07 2a90 	vmov	s15, r2
 800139c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80013a0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80013a4:	ee07 3a10 	vmov	s14, r3
 80013a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80013ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 80013b0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80013b4:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80013b8:	4b20      	ldr	r3, [pc, #128]	@ (800143c <HAL_RCC_GetSysClockFreq+0x128>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013bc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80013c0:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80013c2:	ee07 3a10 	vmov	s14, r3
 80013c6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80013ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013ce:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80013d2:	ee17 0a90 	vmov	r0, s15
 80013d6:	e7b3      	b.n	8001340 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80013ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 80013ee:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8001444 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80013f2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80013f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 80013fa:	e7dd      	b.n	80013b8 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800140e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001412:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8001448 <HAL_RCC_GetSysClockFreq+0x134>
 8001416:	e7ec      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800142a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800142e:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800144c <HAL_RCC_GetSysClockFreq+0x138>
 8001432:	e7de      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001434:	4806      	ldr	r0, [pc, #24]	@ (8001450 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001436:	e783      	b.n	8001340 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8001438:	4806      	ldr	r0, [pc, #24]	@ (8001454 <HAL_RCC_GetSysClockFreq+0x140>)
 800143a:	e781      	b.n	8001340 <HAL_RCC_GetSysClockFreq+0x2c>
 800143c:	58024400 	.word	0x58024400
 8001440:	03d09000 	.word	0x03d09000
 8001444:	4c742400 	.word	0x4c742400
 8001448:	4bbebc20 	.word	0x4bbebc20
 800144c:	4a742400 	.word	0x4a742400
 8001450:	017d7840 	.word	0x017d7840
 8001454:	003d0900 	.word	0x003d0900

08001458 <HAL_RCC_ClockConfig>:
{
 8001458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800145c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800145e:	4604      	mov	r4, r0
 8001460:	b910      	cbnz	r0, 8001468 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001462:	2001      	movs	r0, #1
}
 8001464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001468:	4a88      	ldr	r2, [pc, #544]	@ (800168c <HAL_RCC_ClockConfig+0x234>)
 800146a:	6813      	ldr	r3, [r2, #0]
 800146c:	f003 030f 	and.w	r3, r3, #15
 8001470:	428b      	cmp	r3, r1
 8001472:	f0c0 8093 	bcc.w	800159c <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	075f      	lsls	r7, r3, #29
 800147a:	f100 809b 	bmi.w	80015b4 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147e:	071e      	lsls	r6, r3, #28
 8001480:	d50b      	bpl.n	800149a <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001482:	4983      	ldr	r1, [pc, #524]	@ (8001690 <HAL_RCC_ClockConfig+0x238>)
 8001484:	6960      	ldr	r0, [r4, #20]
 8001486:	69ca      	ldr	r2, [r1, #28]
 8001488:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800148c:	4290      	cmp	r0, r2
 800148e:	d904      	bls.n	800149a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001490:	69ca      	ldr	r2, [r1, #28]
 8001492:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001496:	4302      	orrs	r2, r0
 8001498:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149a:	06d8      	lsls	r0, r3, #27
 800149c:	d50b      	bpl.n	80014b6 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800149e:	497c      	ldr	r1, [pc, #496]	@ (8001690 <HAL_RCC_ClockConfig+0x238>)
 80014a0:	69a0      	ldr	r0, [r4, #24]
 80014a2:	69ca      	ldr	r2, [r1, #28]
 80014a4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80014a8:	4290      	cmp	r0, r2
 80014aa:	d904      	bls.n	80014b6 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80014ac:	69ca      	ldr	r2, [r1, #28]
 80014ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80014b2:	4302      	orrs	r2, r0
 80014b4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80014b6:	0699      	lsls	r1, r3, #26
 80014b8:	d50b      	bpl.n	80014d2 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80014ba:	4975      	ldr	r1, [pc, #468]	@ (8001690 <HAL_RCC_ClockConfig+0x238>)
 80014bc:	69e0      	ldr	r0, [r4, #28]
 80014be:	6a0a      	ldr	r2, [r1, #32]
 80014c0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80014c4:	4290      	cmp	r0, r2
 80014c6:	d904      	bls.n	80014d2 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80014c8:	6a0a      	ldr	r2, [r1, #32]
 80014ca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80014ce:	4302      	orrs	r2, r0
 80014d0:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d2:	079a      	lsls	r2, r3, #30
 80014d4:	d50b      	bpl.n	80014ee <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80014d6:	496e      	ldr	r1, [pc, #440]	@ (8001690 <HAL_RCC_ClockConfig+0x238>)
 80014d8:	68e0      	ldr	r0, [r4, #12]
 80014da:	698a      	ldr	r2, [r1, #24]
 80014dc:	f002 020f 	and.w	r2, r2, #15
 80014e0:	4290      	cmp	r0, r2
 80014e2:	d904      	bls.n	80014ee <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e4:	698a      	ldr	r2, [r1, #24]
 80014e6:	f022 020f 	bic.w	r2, r2, #15
 80014ea:	4302      	orrs	r2, r0
 80014ec:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ee:	07df      	lsls	r7, r3, #31
 80014f0:	d46e      	bmi.n	80015d0 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	079e      	lsls	r6, r3, #30
 80014f6:	f100 80a1 	bmi.w	800163c <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014fa:	4964      	ldr	r1, [pc, #400]	@ (800168c <HAL_RCC_ClockConfig+0x234>)
 80014fc:	680a      	ldr	r2, [r1, #0]
 80014fe:	f002 020f 	and.w	r2, r2, #15
 8001502:	42aa      	cmp	r2, r5
 8001504:	f200 80a8 	bhi.w	8001658 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001508:	0758      	lsls	r0, r3, #29
 800150a:	f100 80b1 	bmi.w	8001670 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150e:	0719      	lsls	r1, r3, #28
 8001510:	d50b      	bpl.n	800152a <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001512:	495f      	ldr	r1, [pc, #380]	@ (8001690 <HAL_RCC_ClockConfig+0x238>)
 8001514:	6960      	ldr	r0, [r4, #20]
 8001516:	69ca      	ldr	r2, [r1, #28]
 8001518:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800151c:	4290      	cmp	r0, r2
 800151e:	d204      	bcs.n	800152a <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001520:	69ca      	ldr	r2, [r1, #28]
 8001522:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001526:	4302      	orrs	r2, r0
 8001528:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152a:	06da      	lsls	r2, r3, #27
 800152c:	d50b      	bpl.n	8001546 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800152e:	4958      	ldr	r1, [pc, #352]	@ (8001690 <HAL_RCC_ClockConfig+0x238>)
 8001530:	69a0      	ldr	r0, [r4, #24]
 8001532:	69ca      	ldr	r2, [r1, #28]
 8001534:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8001538:	4290      	cmp	r0, r2
 800153a:	d204      	bcs.n	8001546 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800153c:	69ca      	ldr	r2, [r1, #28]
 800153e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001542:	4302      	orrs	r2, r0
 8001544:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001546:	069b      	lsls	r3, r3, #26
 8001548:	d50b      	bpl.n	8001562 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800154a:	4a51      	ldr	r2, [pc, #324]	@ (8001690 <HAL_RCC_ClockConfig+0x238>)
 800154c:	69e1      	ldr	r1, [r4, #28]
 800154e:	6a13      	ldr	r3, [r2, #32]
 8001550:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001554:	4299      	cmp	r1, r3
 8001556:	d204      	bcs.n	8001562 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001558:	6a13      	ldr	r3, [r2, #32]
 800155a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800155e:	430b      	orrs	r3, r1
 8001560:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001562:	f7ff fed7 	bl	8001314 <HAL_RCC_GetSysClockFreq>
 8001566:	494a      	ldr	r1, [pc, #296]	@ (8001690 <HAL_RCC_ClockConfig+0x238>)
 8001568:	4a4a      	ldr	r2, [pc, #296]	@ (8001694 <HAL_RCC_ClockConfig+0x23c>)
 800156a:	698b      	ldr	r3, [r1, #24]
 800156c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001570:	5cd3      	ldrb	r3, [r2, r3]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001578:	698b      	ldr	r3, [r1, #24]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	5cd3      	ldrb	r3, [r2, r3]
 8001580:	4a45      	ldr	r2, [pc, #276]	@ (8001698 <HAL_RCC_ClockConfig+0x240>)
 8001582:	f003 031f 	and.w	r3, r3, #31
 8001586:	fa20 f303 	lsr.w	r3, r0, r3
 800158a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800158c:	4b43      	ldr	r3, [pc, #268]	@ (800169c <HAL_RCC_ClockConfig+0x244>)
 800158e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8001590:	4b43      	ldr	r3, [pc, #268]	@ (80016a0 <HAL_RCC_ClockConfig+0x248>)
}
 8001592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	f7ff b9e2 	b.w	8000960 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159c:	6813      	ldr	r3, [r2, #0]
 800159e:	f023 030f 	bic.w	r3, r3, #15
 80015a2:	430b      	orrs	r3, r1
 80015a4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a6:	6813      	ldr	r3, [r2, #0]
 80015a8:	f003 030f 	and.w	r3, r3, #15
 80015ac:	428b      	cmp	r3, r1
 80015ae:	f47f af58 	bne.w	8001462 <HAL_RCC_ClockConfig+0xa>
 80015b2:	e760      	b.n	8001476 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80015b4:	4936      	ldr	r1, [pc, #216]	@ (8001690 <HAL_RCC_ClockConfig+0x238>)
 80015b6:	6920      	ldr	r0, [r4, #16]
 80015b8:	698a      	ldr	r2, [r1, #24]
 80015ba:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80015be:	4290      	cmp	r0, r2
 80015c0:	f67f af5d 	bls.w	800147e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80015c4:	698a      	ldr	r2, [r1, #24]
 80015c6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80015ca:	4302      	orrs	r2, r0
 80015cc:	618a      	str	r2, [r1, #24]
 80015ce:	e756      	b.n	800147e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80015d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <HAL_RCC_ClockConfig+0x238>)
 80015d2:	68a1      	ldr	r1, [r4, #8]
 80015d4:	699a      	ldr	r2, [r3, #24]
 80015d6:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 80015da:	430a      	orrs	r2, r1
 80015dc:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015de:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015e0:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e2:	2902      	cmp	r1, #2
 80015e4:	d11d      	bne.n	8001622 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015e6:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ea:	f43f af3a 	beq.w	8001462 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015ee:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f0:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f4:	4f26      	ldr	r7, [pc, #152]	@ (8001690 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015f6:	f022 0207 	bic.w	r2, r2, #7
 80015fa:	430a      	orrs	r2, r1
 80015fc:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 80015fe:	f7ff fa0f 	bl	8000a20 <HAL_GetTick>
 8001602:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	6862      	ldr	r2, [r4, #4]
 8001608:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800160c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001610:	f43f af6f 	beq.w	80014f2 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001614:	f7ff fa04 	bl	8000a20 <HAL_GetTick>
 8001618:	1b80      	subs	r0, r0, r6
 800161a:	4540      	cmp	r0, r8
 800161c:	d9f2      	bls.n	8001604 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800161e:	2003      	movs	r0, #3
 8001620:	e720      	b.n	8001464 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001622:	2903      	cmp	r1, #3
 8001624:	d102      	bne.n	800162c <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001626:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800162a:	e7de      	b.n	80015ea <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800162c:	2901      	cmp	r1, #1
 800162e:	d102      	bne.n	8001636 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001630:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001634:	e7d9      	b.n	80015ea <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001636:	f012 0f04 	tst.w	r2, #4
 800163a:	e7d6      	b.n	80015ea <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800163c:	4914      	ldr	r1, [pc, #80]	@ (8001690 <HAL_RCC_ClockConfig+0x238>)
 800163e:	68e0      	ldr	r0, [r4, #12]
 8001640:	698a      	ldr	r2, [r1, #24]
 8001642:	f002 020f 	and.w	r2, r2, #15
 8001646:	4290      	cmp	r0, r2
 8001648:	f4bf af57 	bcs.w	80014fa <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800164c:	698a      	ldr	r2, [r1, #24]
 800164e:	f022 020f 	bic.w	r2, r2, #15
 8001652:	4302      	orrs	r2, r0
 8001654:	618a      	str	r2, [r1, #24]
 8001656:	e750      	b.n	80014fa <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001658:	680a      	ldr	r2, [r1, #0]
 800165a:	f022 020f 	bic.w	r2, r2, #15
 800165e:	432a      	orrs	r2, r5
 8001660:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	680a      	ldr	r2, [r1, #0]
 8001664:	f002 020f 	and.w	r2, r2, #15
 8001668:	42aa      	cmp	r2, r5
 800166a:	f47f aefa 	bne.w	8001462 <HAL_RCC_ClockConfig+0xa>
 800166e:	e74b      	b.n	8001508 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001670:	4907      	ldr	r1, [pc, #28]	@ (8001690 <HAL_RCC_ClockConfig+0x238>)
 8001672:	6920      	ldr	r0, [r4, #16]
 8001674:	698a      	ldr	r2, [r1, #24]
 8001676:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800167a:	4290      	cmp	r0, r2
 800167c:	f4bf af47 	bcs.w	800150e <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001680:	698a      	ldr	r2, [r1, #24]
 8001682:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001686:	4302      	orrs	r2, r0
 8001688:	618a      	str	r2, [r1, #24]
 800168a:	e740      	b.n	800150e <HAL_RCC_ClockConfig+0xb6>
 800168c:	52002000 	.word	0x52002000
 8001690:	58024400 	.word	0x58024400
 8001694:	0801150a 	.word	0x0801150a
 8001698:	24000000 	.word	0x24000000
 800169c:	24000004 	.word	0x24000004
 80016a0:	2400000c 	.word	0x2400000c

080016a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a4:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80016a6:	f7ff fe35 	bl	8001314 <HAL_RCC_GetSysClockFreq>
 80016aa:	4a0b      	ldr	r2, [pc, #44]	@ (80016d8 <HAL_RCC_GetHCLKFreq+0x34>)
 80016ac:	490b      	ldr	r1, [pc, #44]	@ (80016dc <HAL_RCC_GetHCLKFreq+0x38>)
 80016ae:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016b0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80016b2:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016b6:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80016ba:	5ccb      	ldrb	r3, [r1, r3]
 80016bc:	f003 031f 	and.w	r3, r3, #31
 80016c0:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016c4:	5c88      	ldrb	r0, [r1, r2]
 80016c6:	4a06      	ldr	r2, [pc, #24]	@ (80016e0 <HAL_RCC_GetHCLKFreq+0x3c>)
 80016c8:	f000 001f 	and.w	r0, r0, #31
 80016cc:	fa23 f000 	lsr.w	r0, r3, r0
 80016d0:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016d2:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <HAL_RCC_GetHCLKFreq+0x40>)
 80016d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80016d6:	bd08      	pop	{r3, pc}
 80016d8:	58024400 	.word	0x58024400
 80016dc:	0801150a 	.word	0x0801150a
 80016e0:	24000000 	.word	0x24000000
 80016e4:	24000004 	.word	0x24000004

080016e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e8:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80016ea:	f7ff ffdb 	bl	80016a4 <HAL_RCC_GetHCLKFreq>
 80016ee:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80016f0:	4a05      	ldr	r2, [pc, #20]	@ (8001708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80016f8:	5cd3      	ldrb	r3, [r2, r3]
 80016fa:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80016fe:	40d8      	lsrs	r0, r3
 8001700:	bd08      	pop	{r3, pc}
 8001702:	bf00      	nop
 8001704:	58024400 	.word	0x58024400
 8001708:	0801150a 	.word	0x0801150a

0800170c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800170c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800170e:	4c39      	ldr	r4, [pc, #228]	@ (80017f4 <RCCEx_PLL2_Config+0xe8>)
{
 8001710:	4606      	mov	r6, r0
 8001712:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001714:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b03      	cmp	r3, #3
 800171c:	d067      	beq.n	80017ee <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001724:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001726:	f7ff f97b 	bl	8000a20 <HAL_GetTick>
 800172a:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	011a      	lsls	r2, r3, #4
 8001730:	d449      	bmi.n	80017c6 <RCCEx_PLL2_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001732:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001734:	6832      	ldr	r2, [r6, #0]
 8001736:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800173a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800173e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001740:	68b3      	ldr	r3, [r6, #8]
 8001742:	68f2      	ldr	r2, [r6, #12]
 8001744:	3b01      	subs	r3, #1
 8001746:	3a01      	subs	r2, #1
 8001748:	025b      	lsls	r3, r3, #9
 800174a:	0412      	lsls	r2, r2, #16
 800174c:	b29b      	uxth	r3, r3
 800174e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8001752:	4313      	orrs	r3, r2
 8001754:	6872      	ldr	r2, [r6, #4]
 8001756:	3a01      	subs	r2, #1
 8001758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800175c:	4313      	orrs	r3, r2
 800175e:	6932      	ldr	r2, [r6, #16]
 8001760:	3a01      	subs	r2, #1
 8001762:	0612      	lsls	r2, r2, #24
 8001764:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8001768:	4313      	orrs	r3, r2
 800176a:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800176c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800176e:	6972      	ldr	r2, [r6, #20]
 8001770:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001774:	4313      	orrs	r3, r2
 8001776:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001778:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800177a:	69b2      	ldr	r2, [r6, #24]
 800177c:	f023 0320 	bic.w	r3, r3, #32
 8001780:	4313      	orrs	r3, r2
 8001782:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001784:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001786:	f023 0310 	bic.w	r3, r3, #16
 800178a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800178c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800178e:	69f2      	ldr	r2, [r6, #28]
 8001790:	f36f 03cf 	bfc	r3, #3, #13
 8001794:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001798:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800179a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800179c:	f043 0310 	orr.w	r3, r3, #16
 80017a0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80017a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80017a4:	b9b5      	cbnz	r5, 80017d4 <RCCEx_PLL2_Config+0xc8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80017a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80017aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80017ac:	4c11      	ldr	r4, [pc, #68]	@ (80017f4 <RCCEx_PLL2_Config+0xe8>)
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017b4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017b6:	f7ff f933 	bl	8000a20 <HAL_GetTick>
 80017ba:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	d50f      	bpl.n	80017e2 <RCCEx_PLL2_Config+0xd6>
    }

  }


  return status;
 80017c2:	2000      	movs	r0, #0
 80017c4:	e005      	b.n	80017d2 <RCCEx_PLL2_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80017c6:	f7ff f92b 	bl	8000a20 <HAL_GetTick>
 80017ca:	1bc0      	subs	r0, r0, r7
 80017cc:	2802      	cmp	r0, #2
 80017ce:	d9ad      	bls.n	800172c <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 80017d0:	2003      	movs	r0, #3
}
 80017d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 80017d4:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80017d6:	bf0c      	ite	eq
 80017d8:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80017dc:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 80017e0:	e7e3      	b.n	80017aa <RCCEx_PLL2_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80017e2:	f7ff f91d 	bl	8000a20 <HAL_GetTick>
 80017e6:	1b40      	subs	r0, r0, r5
 80017e8:	2802      	cmp	r0, #2
 80017ea:	d9e7      	bls.n	80017bc <RCCEx_PLL2_Config+0xb0>
 80017ec:	e7f0      	b.n	80017d0 <RCCEx_PLL2_Config+0xc4>
    return HAL_ERROR;
 80017ee:	2001      	movs	r0, #1
 80017f0:	e7ef      	b.n	80017d2 <RCCEx_PLL2_Config+0xc6>
 80017f2:	bf00      	nop
 80017f4:	58024400 	.word	0x58024400

080017f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80017f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80017fa:	4c39      	ldr	r4, [pc, #228]	@ (80018e0 <RCCEx_PLL3_Config+0xe8>)
{
 80017fc:	4606      	mov	r6, r0
 80017fe:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001800:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b03      	cmp	r3, #3
 8001808:	d067      	beq.n	80018da <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001810:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001812:	f7ff f905 	bl	8000a20 <HAL_GetTick>
 8001816:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	009a      	lsls	r2, r3, #2
 800181c:	d449      	bmi.n	80018b2 <RCCEx_PLL3_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800181e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001820:	6832      	ldr	r2, [r6, #0]
 8001822:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8001826:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800182a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800182c:	68b3      	ldr	r3, [r6, #8]
 800182e:	68f2      	ldr	r2, [r6, #12]
 8001830:	3b01      	subs	r3, #1
 8001832:	3a01      	subs	r2, #1
 8001834:	025b      	lsls	r3, r3, #9
 8001836:	0412      	lsls	r2, r2, #16
 8001838:	b29b      	uxth	r3, r3
 800183a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800183e:	4313      	orrs	r3, r2
 8001840:	6872      	ldr	r2, [r6, #4]
 8001842:	3a01      	subs	r2, #1
 8001844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001848:	4313      	orrs	r3, r2
 800184a:	6932      	ldr	r2, [r6, #16]
 800184c:	3a01      	subs	r2, #1
 800184e:	0612      	lsls	r2, r2, #24
 8001850:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8001854:	4313      	orrs	r3, r2
 8001856:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001858:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800185a:	6972      	ldr	r2, [r6, #20]
 800185c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001860:	4313      	orrs	r3, r2
 8001862:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001864:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001866:	69b2      	ldr	r2, [r6, #24]
 8001868:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800186c:	4313      	orrs	r3, r2
 800186e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001870:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001872:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001876:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001878:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800187a:	69f2      	ldr	r2, [r6, #28]
 800187c:	f36f 03cf 	bfc	r3, #3, #13
 8001880:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001884:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001886:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800188c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800188e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8001890:	b9b5      	cbnz	r5, 80018c0 <RCCEx_PLL3_Config+0xc8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001892:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001896:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001898:	4c11      	ldr	r4, [pc, #68]	@ (80018e0 <RCCEx_PLL3_Config+0xe8>)
 800189a:	6823      	ldr	r3, [r4, #0]
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018a2:	f7ff f8bd 	bl	8000a20 <HAL_GetTick>
 80018a6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	d50f      	bpl.n	80018ce <RCCEx_PLL3_Config+0xd6>
    }

  }


  return status;
 80018ae:	2000      	movs	r0, #0
 80018b0:	e005      	b.n	80018be <RCCEx_PLL3_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80018b2:	f7ff f8b5 	bl	8000a20 <HAL_GetTick>
 80018b6:	1bc0      	subs	r0, r0, r7
 80018b8:	2802      	cmp	r0, #2
 80018ba:	d9ad      	bls.n	8001818 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 80018bc:	2003      	movs	r0, #3
}
 80018be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 80018c0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80018c2:	bf0c      	ite	eq
 80018c4:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80018c8:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 80018cc:	e7e3      	b.n	8001896 <RCCEx_PLL3_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80018ce:	f7ff f8a7 	bl	8000a20 <HAL_GetTick>
 80018d2:	1b40      	subs	r0, r0, r5
 80018d4:	2802      	cmp	r0, #2
 80018d6:	d9e7      	bls.n	80018a8 <RCCEx_PLL3_Config+0xb0>
 80018d8:	e7f0      	b.n	80018bc <RCCEx_PLL3_Config+0xc4>
    return HAL_ERROR;
 80018da:	2001      	movs	r0, #1
 80018dc:	e7ef      	b.n	80018be <RCCEx_PLL3_Config+0xc6>
 80018de:	bf00      	nop
 80018e0:	58024400 	.word	0x58024400

080018e4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80018e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80018e8:	6803      	ldr	r3, [r0, #0]
{
 80018ea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80018ec:	0118      	lsls	r0, r3, #4
 80018ee:	d51e      	bpl.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80018f0:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 80018f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80018f6:	d02b      	beq.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80018f8:	d80f      	bhi.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x36>
 80018fa:	b1d3      	cbz	r3, 8001932 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80018fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001900:	d01d      	beq.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8001902:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001904:	682b      	ldr	r3, [r5, #0]
 8001906:	05d9      	lsls	r1, r3, #23
 8001908:	d551      	bpl.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 800190a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800190c:	2b04      	cmp	r3, #4
 800190e:	d84d      	bhi.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8001910:	e8df f003 	tbb	[pc, r3]
 8001914:	29463f24 	.word	0x29463f24
 8001918:	29          	.byte	0x29
 8001919:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800191a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800191e:	d1f0      	bne.n	8001902 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001920:	4a85      	ldr	r2, [pc, #532]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001922:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8001924:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8001926:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800192a:	430b      	orrs	r3, r1
 800192c:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800192e:	2600      	movs	r6, #0
 8001930:	e7e8      	b.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001932:	4a81      	ldr	r2, [pc, #516]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001934:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800193a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800193c:	e7f0      	b.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800193e:	2102      	movs	r1, #2
 8001940:	f105 0008 	add.w	r0, r5, #8
 8001944:	f7ff fee2 	bl	800170c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8001948:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800194a:	2800      	cmp	r0, #0
 800194c:	d1da      	bne.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800194e:	e7e7      	b.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8001950:	2102      	movs	r1, #2
 8001952:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8001956:	f7ff ff4f 	bl	80017f8 <RCCEx_PLL3_Config>
 800195a:	e7f5      	b.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x64>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800195c:	4a76      	ldr	r2, [pc, #472]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800195e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001964:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 8001966:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 8001968:	bb1c      	cbnz	r4, 80019b2 <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800196a:	4a73      	ldr	r2, [pc, #460]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800196c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800196e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8001970:	f023 0307 	bic.w	r3, r3, #7
 8001974:	430b      	orrs	r3, r1
 8001976:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001978:	682b      	ldr	r3, [r5, #0]
 800197a:	059a      	lsls	r2, r3, #22
 800197c:	d528      	bpl.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai23ClockSelection)
 800197e:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8001980:	2b80      	cmp	r3, #128	@ 0x80
 8001982:	d043      	beq.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8001984:	d817      	bhi.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8001986:	b3a3      	cbz	r3, 80019f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8001988:	2b40      	cmp	r3, #64	@ 0x40
 800198a:	d038      	beq.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x11a>
 800198c:	2601      	movs	r6, #1
 800198e:	4634      	mov	r4, r6
 8001990:	e01e      	b.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8001992:	2100      	movs	r1, #0
 8001994:	f105 0008 	add.w	r0, r5, #8
 8001998:	f7ff feb8 	bl	800170c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800199c:	4604      	mov	r4, r0
        break;
 800199e:	e7e3      	b.n	8001968 <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80019a0:	2100      	movs	r1, #0
 80019a2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80019a6:	f7ff ff27 	bl	80017f8 <RCCEx_PLL3_Config>
 80019aa:	e7f7      	b.n	800199c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai1ClockSelection)
 80019ac:	2601      	movs	r6, #1
 80019ae:	4634      	mov	r4, r6
 80019b0:	e7e2      	b.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x94>
      status = ret;
 80019b2:	4626      	mov	r6, r4
 80019b4:	e7e0      	b.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai23ClockSelection)
 80019b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80019b8:	d002      	beq.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80019ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019be:	d1e5      	bne.n	800198c <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if (ret == HAL_OK)
 80019c0:	bb54      	cbnz	r4, 8001a18 <HAL_RCCEx_PeriphCLKConfig+0x134>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80019c2:	4a5d      	ldr	r2, [pc, #372]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80019c4:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 80019c6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80019c8:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 80019cc:	430b      	orrs	r3, r1
 80019ce:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80019d0:	682b      	ldr	r3, [r5, #0]
 80019d2:	055b      	lsls	r3, r3, #21
 80019d4:	d531      	bpl.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4AClockSelection)
 80019d6:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 80019da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019de:	d049      	beq.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80019e0:	d81c      	bhi.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x138>
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d039      	beq.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x176>
 80019e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80019ea:	d03c      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80019ec:	2601      	movs	r6, #1
 80019ee:	4634      	mov	r4, r6
 80019f0:	e023      	b.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80019f2:	4a51      	ldr	r2, [pc, #324]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80019f4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80019f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80019fc:	e7e0      	b.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80019fe:	2100      	movs	r1, #0
 8001a00:	f105 0008 	add.w	r0, r5, #8
 8001a04:	f7ff fe82 	bl	800170c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001a08:	4604      	mov	r4, r0
        break;
 8001a0a:	e7d9      	b.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8001a12:	f7ff fef1 	bl	80017f8 <RCCEx_PLL3_Config>
 8001a16:	e7f7      	b.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x124>
      status = ret;
 8001a18:	4626      	mov	r6, r4
 8001a1a:	e7d9      	b.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai4AClockSelection)
 8001a1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8001a20:	d002      	beq.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8001a22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001a26:	d1e1      	bne.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x108>
    if (ret == HAL_OK)
 8001a28:	bb54      	cbnz	r4, 8001a80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001a2a:	4a43      	ldr	r2, [pc, #268]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001a2c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8001a30:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001a32:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8001a36:	430b      	orrs	r3, r1
 8001a38:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001a3a:	682b      	ldr	r3, [r5, #0]
 8001a3c:	051f      	lsls	r7, r3, #20
 8001a3e:	d530      	bpl.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->Sai4BClockSelection)
 8001a40:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8001a44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a48:	d045      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8001a4a:	d81b      	bhi.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8001a4c:	b3b3      	cbz	r3, 8001abc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8001a4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a52:	d039      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001a54:	2601      	movs	r6, #1
 8001a56:	4634      	mov	r4, r6
 8001a58:	e023      	b.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a5a:	4a37      	ldr	r2, [pc, #220]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001a5c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a62:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8001a64:	e7e0      	b.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8001a66:	2100      	movs	r1, #0
 8001a68:	f105 0008 	add.w	r0, r5, #8
 8001a6c:	f7ff fe4e 	bl	800170c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001a70:	4604      	mov	r4, r0
        break;
 8001a72:	e7d9      	b.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001a74:	2100      	movs	r1, #0
 8001a76:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8001a7a:	f7ff febd 	bl	80017f8 <RCCEx_PLL3_Config>
 8001a7e:	e7f7      	b.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      status = ret;
 8001a80:	4626      	mov	r6, r4
 8001a82:	e7da      	b.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4BClockSelection)
 8001a84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001a88:	d002      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8001a8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001a8e:	d1e1      	bne.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x170>
    if (ret == HAL_OK)
 8001a90:	bb3c      	cbnz	r4, 8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001a92:	4a29      	ldr	r2, [pc, #164]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001a94:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8001a98:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001a9a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001aa2:	682b      	ldr	r3, [r5, #0]
 8001aa4:	0198      	lsls	r0, r3, #6
 8001aa6:	d528      	bpl.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch (PeriphClkInit->QspiClockSelection)
 8001aa8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	d03b      	beq.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8001aae:	d81a      	bhi.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8001ab0:	b1db      	cbz	r3, 8001aea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8001ab2:	2b10      	cmp	r3, #16
 8001ab4:	d031      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x236>
 8001ab6:	2601      	movs	r6, #1
 8001ab8:	4634      	mov	r4, r6
 8001aba:	e01e      	b.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x216>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001abc:	4a1e      	ldr	r2, [pc, #120]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001abe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8001ac6:	e7e3      	b.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	f105 0008 	add.w	r0, r5, #8
 8001ace:	f7ff fe1d 	bl	800170c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001ad2:	4604      	mov	r4, r0
        break;
 8001ad4:	e7dc      	b.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8001adc:	f7ff fe8c 	bl	80017f8 <RCCEx_PLL3_Config>
 8001ae0:	e7f7      	b.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      status = ret;
 8001ae2:	4626      	mov	r6, r4
 8001ae4:	e7dd      	b.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->QspiClockSelection)
 8001ae6:	2b30      	cmp	r3, #48	@ 0x30
 8001ae8:	d1e5      	bne.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if (ret == HAL_OK)
 8001aea:	bb1c      	cbnz	r4, 8001b34 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001aec:	4a12      	ldr	r2, [pc, #72]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001aee:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8001af0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8001af2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001af6:	430b      	orrs	r3, r1
 8001af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001afa:	682b      	ldr	r3, [r5, #0]
 8001afc:	04d9      	lsls	r1, r3, #19
 8001afe:	d52c      	bpl.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi123ClockSelection)
 8001b00:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001b02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b06:	d074      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8001b08:	d818      	bhi.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d064      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8001b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b12:	d067      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001b14:	2601      	movs	r6, #1
 8001b16:	4634      	mov	r4, r6
 8001b18:	e01f      	b.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b1a:	4a07      	ldr	r2, [pc, #28]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001b1c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001b1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b22:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8001b24:	e7e1      	b.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8001b26:	2102      	movs	r1, #2
 8001b28:	f105 0008 	add.w	r0, r5, #8
 8001b2c:	f7ff fdee 	bl	800170c <RCCEx_PLL2_Config>
 8001b30:	4604      	mov	r4, r0
        break;
 8001b32:	e7da      	b.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x206>
      status = ret;
 8001b34:	4626      	mov	r6, r4
 8001b36:	e7e0      	b.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x216>
 8001b38:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 8001b3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001b40:	d002      	beq.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001b42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b46:	d1e5      	bne.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x230>
    if (ret == HAL_OK)
 8001b48:	2c00      	cmp	r4, #0
 8001b4a:	d158      	bne.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x31a>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001b4c:	4a9d      	ldr	r2, [pc, #628]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001b4e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8001b50:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8001b52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001b56:	430b      	orrs	r3, r1
 8001b58:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001b5a:	682b      	ldr	r3, [r5, #0]
 8001b5c:	049a      	lsls	r2, r3, #18
 8001b5e:	d50b      	bpl.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi45ClockSelection)
 8001b60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001b62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b66:	d064      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8001b68:	d84b      	bhi.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d051      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8001b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b72:	d057      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x340>
 8001b74:	2601      	movs	r6, #1
 8001b76:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8001b78:	682b      	ldr	r3, [r5, #0]
 8001b7a:	045b      	lsls	r3, r3, #17
 8001b7c:	d50c      	bpl.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8001b7e:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8001b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b86:	d075      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8001b88:	d85b      	bhi.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d061      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8001b8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b92:	d068      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8001b94:	2601      	movs	r6, #1
 8001b96:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	041f      	lsls	r7, r3, #16
 8001b9c:	d511      	bpl.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FdcanClockSelection)
 8001b9e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001ba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ba4:	d06e      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8001ba6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001baa:	d071      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d176      	bne.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    if (ret == HAL_OK)
 8001bb0:	2c00      	cmp	r4, #0
 8001bb2:	d177      	bne.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001bb4:	4a83      	ldr	r2, [pc, #524]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001bb6:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8001bb8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8001bba:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001bbe:	430b      	orrs	r3, r1
 8001bc0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8001bc2:	682b      	ldr	r3, [r5, #0]
 8001bc4:	01d8      	lsls	r0, r3, #7
 8001bc6:	d57d      	bpl.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    switch (PeriphClkInit->FmcClockSelection)
 8001bc8:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	f200 80bf 	bhi.w	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8001bd0:	e8df f003 	tbb	[pc, r3]
 8001bd4:	6fb66a6f 	.word	0x6fb66a6f
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bd8:	4a7a      	ldr	r2, [pc, #488]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001bda:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8001be2:	e7b1      	b.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8001be4:	2100      	movs	r1, #0
 8001be6:	f105 0008 	add.w	r0, r5, #8
 8001bea:	f7ff fd8f 	bl	800170c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001bee:	4604      	mov	r4, r0
        break;
 8001bf0:	e7aa      	b.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8001bf8:	f7ff fdfe 	bl	80017f8 <RCCEx_PLL3_Config>
 8001bfc:	e7f7      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x30a>
      status = ret;
 8001bfe:	4626      	mov	r6, r4
 8001c00:	e7ab      	b.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi45ClockSelection)
 8001c02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8001c06:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001c0a:	d002      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8001c0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001c10:	d1b0      	bne.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x290>
    if (ret == HAL_OK)
 8001c12:	b9a4      	cbnz	r4, 8001c3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8001c14:	4a6b      	ldr	r2, [pc, #428]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001c16:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 8001c18:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8001c1a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001c1e:	430b      	orrs	r3, r1
 8001c20:	6513      	str	r3, [r2, #80]	@ 0x50
 8001c22:	e7a9      	b.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8001c24:	2101      	movs	r1, #1
 8001c26:	f105 0008 	add.w	r0, r5, #8
 8001c2a:	f7ff fd6f 	bl	800170c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8001c2e:	4604      	mov	r4, r0
        break;
 8001c30:	e7ef      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x32e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8001c32:	2101      	movs	r1, #1
 8001c34:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8001c38:	f7ff fdde 	bl	80017f8 <RCCEx_PLL3_Config>
 8001c3c:	e7f7      	b.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
      status = ret;
 8001c3e:	4626      	mov	r6, r4
 8001c40:	e79a      	b.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi6ClockSelection)
 8001c42:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001c46:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001c4a:	d002      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8001c4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8001c50:	d1a0      	bne.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    if (ret == HAL_OK)
 8001c52:	b9ac      	cbnz	r4, 8001c80 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8001c54:	4a5b      	ldr	r2, [pc, #364]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001c56:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 8001c5a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001c5c:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8001c60:	430b      	orrs	r3, r1
 8001c62:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c64:	e798      	b.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8001c66:	2101      	movs	r1, #1
 8001c68:	f105 0008 	add.w	r0, r5, #8
 8001c6c:	f7ff fd4e 	bl	800170c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8001c70:	4604      	mov	r4, r0
        break;
 8001c72:	e7ee      	b.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8001c74:	2101      	movs	r1, #1
 8001c76:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8001c7a:	f7ff fdbd 	bl	80017f8 <RCCEx_PLL3_Config>
 8001c7e:	e7f7      	b.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      status = ret;
 8001c80:	4626      	mov	r6, r4
 8001c82:	e789      	b.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c84:	4a4f      	ldr	r2, [pc, #316]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001c86:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8001c8e:	e78f      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8001c90:	2101      	movs	r1, #1
 8001c92:	f105 0008 	add.w	r0, r5, #8
 8001c96:	f7ff fd39 	bl	800170c <RCCEx_PLL2_Config>
 8001c9a:	4604      	mov	r4, r0
        break;
 8001c9c:	e788      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    switch (PeriphClkInit->FdcanClockSelection)
 8001c9e:	2601      	movs	r6, #1
 8001ca0:	4634      	mov	r4, r6
 8001ca2:	e78e      	b.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      status = ret;
 8001ca4:	4626      	mov	r6, r4
 8001ca6:	e78c      	b.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ca8:	4a46      	ldr	r2, [pc, #280]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001caa:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8001cb2:	2c00      	cmp	r4, #0
 8001cb4:	d14e      	bne.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x470>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8001cb6:	4a43      	ldr	r2, [pc, #268]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001cb8:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8001cba:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8001cbc:	f023 0303 	bic.w	r3, r3, #3
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cc4:	682b      	ldr	r3, [r5, #0]
 8001cc6:	0259      	lsls	r1, r3, #9
 8001cc8:	d54e      	bpl.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x484>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cca:	4f3f      	ldr	r7, [pc, #252]	@ (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001cd4:	f7fe fea4 	bl	8000a20 <HAL_GetTick>
 8001cd8:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	05da      	lsls	r2, r3, #23
 8001cde:	d53b      	bpl.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x474>
    if (ret == HAL_OK)
 8001ce0:	2c00      	cmp	r4, #0
 8001ce2:	d175      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8001ce4:	4b37      	ldr	r3, [pc, #220]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001ce6:	f8d5 00b4 	ldr.w	r0, [r5, #180]	@ 0xb4
 8001cea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001cec:	4042      	eors	r2, r0
 8001cee:	f412 7f40 	tst.w	r2, #768	@ 0x300
 8001cf2:	d00b      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x428>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cf4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cf6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cf8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cfc:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8001d00:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d02:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8001d04:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8001d08:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8001d0a:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8001d0c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8001d10:	d042      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d12:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8001d16:	492b      	ldr	r1, [pc, #172]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001d18:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8001d1c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8001d20:	d14b      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 8001d22:	6908      	ldr	r0, [r1, #16]
 8001d24:	4a29      	ldr	r2, [pc, #164]	@ (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 8001d26:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 8001d2a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8001d2e:	4302      	orrs	r2, r0
 8001d30:	610a      	str	r2, [r1, #16]
 8001d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d36:	4a23      	ldr	r2, [pc, #140]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001d38:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8001d3a:	430b      	orrs	r3, r1
 8001d3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d3e:	e013      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x484>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8001d40:	2102      	movs	r1, #2
 8001d42:	f105 0008 	add.w	r0, r5, #8
 8001d46:	f7ff fce1 	bl	800170c <RCCEx_PLL2_Config>
 8001d4a:	4604      	mov	r4, r0
        break;
 8001d4c:	e7b1      	b.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch (PeriphClkInit->FmcClockSelection)
 8001d4e:	2601      	movs	r6, #1
 8001d50:	4634      	mov	r4, r6
 8001d52:	e7b7      	b.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      status = ret;
 8001d54:	4626      	mov	r6, r4
 8001d56:	e7b5      	b.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d58:	f7fe fe62 	bl	8000a20 <HAL_GetTick>
 8001d5c:	eba0 0008 	sub.w	r0, r0, r8
 8001d60:	2864      	cmp	r0, #100	@ 0x64
 8001d62:	d9ba      	bls.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = HAL_TIMEOUT;
 8001d64:	2603      	movs	r6, #3
 8001d66:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	07d8      	lsls	r0, r3, #31
 8001d6c:	d509      	bpl.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x49e>
    switch (PeriphClkInit->Usart16ClockSelection)
 8001d6e:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8001d70:	2b10      	cmp	r3, #16
 8001d72:	d045      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8001d74:	d82e      	bhi.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d032      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d039      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8001d7e:	2601      	movs	r6, #1
 8001d80:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8001d82:	682b      	ldr	r3, [r5, #0]
 8001d84:	0799      	lsls	r1, r3, #30
 8001d86:	d551      	bpl.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x548>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8001d88:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	d864      	bhi.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8001d8e:	e8df f003 	tbb	[pc, r3]
 8001d92:	3f45      	.short	0x3f45
 8001d94:	4545455d 	.word	0x4545455d
        tickstart = HAL_GetTick();
 8001d98:	f7fe fe42 	bl	8000a20 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d9c:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        tickstart = HAL_GetTick();
 8001da0:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001da6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8001daa:	079b      	lsls	r3, r3, #30
 8001dac:	d4b1      	bmi.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7fe fe37 	bl	8000a20 <HAL_GetTick>
 8001db2:	1bc0      	subs	r0, r0, r7
 8001db4:	4548      	cmp	r0, r9
 8001db6:	d9f6      	bls.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8001db8:	e7d4      	b.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dba:	690a      	ldr	r2, [r1, #16]
 8001dbc:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8001dc0:	e7b6      	b.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8001dc2:	bf00      	nop
 8001dc4:	58024400 	.word	0x58024400
 8001dc8:	58024800 	.word	0x58024800
 8001dcc:	00ffffcf 	.word	0x00ffffcf
      status = ret;
 8001dd0:	4626      	mov	r6, r4
 8001dd2:	e7c9      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x484>
    switch (PeriphClkInit->Usart16ClockSelection)
 8001dd4:	f023 0208 	bic.w	r2, r3, #8
 8001dd8:	2a20      	cmp	r2, #32
 8001dda:	d001      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8001ddc:	2b18      	cmp	r3, #24
 8001dde:	d1ce      	bne.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x49a>
    if (ret == HAL_OK)
 8001de0:	b9a4      	cbnz	r4, 8001e0c <HAL_RCCEx_PeriphCLKConfig+0x528>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8001de2:	4a20      	ldr	r2, [pc, #128]	@ (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8001de4:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 8001de6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001de8:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001dec:	430b      	orrs	r3, r1
 8001dee:	6553      	str	r3, [r2, #84]	@ 0x54
 8001df0:	e7c7      	b.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x49e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8001df2:	2101      	movs	r1, #1
 8001df4:	f105 0008 	add.w	r0, r5, #8
 8001df8:	f7ff fc88 	bl	800170c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8001dfc:	4604      	mov	r4, r0
        break;
 8001dfe:	e7ef      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8001e00:	2101      	movs	r1, #1
 8001e02:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8001e06:	f7ff fcf7 	bl	80017f8 <RCCEx_PLL3_Config>
 8001e0a:	e7f7      	b.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x518>
      status = ret;
 8001e0c:	4626      	mov	r6, r4
 8001e0e:	e7b8      	b.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x49e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8001e10:	2101      	movs	r1, #1
 8001e12:	f105 0008 	add.w	r0, r5, #8
 8001e16:	f7ff fc79 	bl	800170c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8001e1a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8001e1c:	b9fc      	cbnz	r4, 8001e5e <HAL_RCCEx_PeriphCLKConfig+0x57a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8001e1e:	4a11      	ldr	r2, [pc, #68]	@ (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8001e20:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 8001e22:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001e24:	f023 0307 	bic.w	r3, r3, #7
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e2c:	682b      	ldr	r3, [r5, #0]
 8001e2e:	075a      	lsls	r2, r3, #29
 8001e30:	d52b      	bpl.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8001e32:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	f200 816e 	bhi.w	8002118 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8001e3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001e40:	0014001a 	.word	0x0014001a
 8001e44:	001a0166 	.word	0x001a0166
 8001e48:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8001e52:	f7ff fcd1 	bl	80017f8 <RCCEx_PLL3_Config>
 8001e56:	e7e0      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8001e58:	2601      	movs	r6, #1
 8001e5a:	4634      	mov	r4, r6
 8001e5c:	e7e6      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x548>
      status = ret;
 8001e5e:	4626      	mov	r6, r4
 8001e60:	e7e4      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x548>
 8001e62:	bf00      	nop
 8001e64:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8001e68:	2101      	movs	r1, #1
 8001e6a:	f105 0008 	add.w	r0, r5, #8
 8001e6e:	f7ff fc4d 	bl	800170c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8001e72:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8001e74:	2c00      	cmp	r4, #0
 8001e76:	f040 8152 	bne.w	800211e <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e7a:	4aaa      	ldr	r2, [pc, #680]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8001e7c:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 8001e80:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001e82:	f023 0307 	bic.w	r3, r3, #7
 8001e86:	430b      	orrs	r3, r1
 8001e88:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e8a:	682b      	ldr	r3, [r5, #0]
 8001e8c:	069b      	lsls	r3, r3, #26
 8001e8e:	d510      	bpl.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8001e90:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8001e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e98:	f000 8160 	beq.w	800215c <HAL_RCCEx_PeriphCLKConfig+0x878>
 8001e9c:	f200 8144 	bhi.w	8002128 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 814a 	beq.w	800213a <HAL_RCCEx_PeriphCLKConfig+0x856>
 8001ea6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001eaa:	f000 8150 	beq.w	800214e <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8001eae:	2601      	movs	r6, #1
 8001eb0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8001eb2:	682b      	ldr	r3, [r5, #0]
 8001eb4:	065f      	lsls	r7, r3, #25
 8001eb6:	d510      	bpl.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8001eb8:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8001ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ec0:	f000 816e 	beq.w	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8001ec4:	f200 8152 	bhi.w	800216c <HAL_RCCEx_PeriphCLKConfig+0x888>
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8158 	beq.w	800217e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8001ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ed2:	f000 815e 	beq.w	8002192 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8001ed6:	2601      	movs	r6, #1
 8001ed8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8001eda:	682b      	ldr	r3, [r5, #0]
 8001edc:	0618      	lsls	r0, r3, #24
 8001ede:	d510      	bpl.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8001ee0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 8001ee4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ee8:	f000 817c 	beq.w	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8001eec:	f200 8160 	bhi.w	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 8166 	beq.w	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8001ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001efa:	f000 816c 	beq.w	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8001efe:	2601      	movs	r6, #1
 8001f00:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8001f02:	682b      	ldr	r3, [r5, #0]
 8001f04:	0719      	lsls	r1, r3, #28
 8001f06:	d514      	bpl.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8001f08:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8001f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f10:	d107      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8001f12:	2102      	movs	r1, #2
 8001f14:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8001f18:	f7ff fc6e 	bl	80017f8 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	bf18      	it	ne
 8001f20:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8001f22:	4a80      	ldr	r2, [pc, #512]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8001f24:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 8001f28:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001f2a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f2e:	430b      	orrs	r3, r1
 8001f30:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f32:	682b      	ldr	r3, [r5, #0]
 8001f34:	06da      	lsls	r2, r3, #27
 8001f36:	d514      	bpl.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8001f38:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8001f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f40:	d107      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8001f42:	2102      	movs	r1, #2
 8001f44:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8001f48:	f7ff fc56 	bl	80017f8 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	bf18      	it	ne
 8001f50:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f52:	4a74      	ldr	r2, [pc, #464]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8001f54:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 8001f58:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f62:	682b      	ldr	r3, [r5, #0]
 8001f64:	031b      	lsls	r3, r3, #12
 8001f66:	d51b      	bpl.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    switch (PeriphClkInit->AdcClockSelection)
 8001f68:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8001f6c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8001f70:	f000 8140 	beq.w	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8001f74:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8001f78:	d007      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8001f7a:	2900      	cmp	r1, #0
 8001f7c:	f040 8140 	bne.w	8002200 <HAL_RCCEx_PeriphCLKConfig+0x91c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8001f80:	f105 0008 	add.w	r0, r5, #8
 8001f84:	f7ff fbc2 	bl	800170c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8001f88:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8001f8a:	2c00      	cmp	r4, #0
 8001f8c:	f040 813b 	bne.w	8002206 <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f90:	4a64      	ldr	r2, [pc, #400]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8001f92:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8001f96:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001f98:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fa0:	682b      	ldr	r3, [r5, #0]
 8001fa2:	035f      	lsls	r7, r3, #13
 8001fa4:	d50f      	bpl.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch (PeriphClkInit->UsbClockSelection)
 8001fa6:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 8001faa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001fae:	f000 813b 	beq.w	8002228 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8001fb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001fb6:	f000 812d 	beq.w	8002214 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8001fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001fbe:	f000 8124 	beq.w	800220a <HAL_RCCEx_PeriphCLKConfig+0x926>
 8001fc2:	2601      	movs	r6, #1
 8001fc4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8001fc6:	682b      	ldr	r3, [r5, #0]
 8001fc8:	03d8      	lsls	r0, r3, #15
 8001fca:	d509      	bpl.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    switch (PeriphClkInit->SdmmcClockSelection)
 8001fcc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8133 	beq.w	800223a <HAL_RCCEx_PeriphCLKConfig+0x956>
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd8:	f000 813d 	beq.w	8002256 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8001fdc:	2601      	movs	r6, #1
 8001fde:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001fe0:	682b      	ldr	r3, [r5, #0]
 8001fe2:	0099      	lsls	r1, r3, #2
 8001fe4:	d507      	bpl.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x712>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8001fec:	f7ff fc04 	bl	80017f8 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	bf18      	it	ne
 8001ff4:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8001ff6:	e9d5 3100 	ldrd	r3, r1, [r5]
 8001ffa:	039a      	lsls	r2, r3, #14
 8001ffc:	f140 8143 	bpl.w	8002286 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
    switch (PeriphClkInit->RngClockSelection)
 8002000:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 8002004:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8002008:	f000 813f 	beq.w	800228a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800200c:	f200 812c 	bhi.w	8002268 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002010:	2800      	cmp	r0, #0
 8002012:	f000 812f 	beq.w	8002274 <HAL_RCCEx_PeriphCLKConfig+0x990>
 8002016:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002018:	02df      	lsls	r7, r3, #11
 800201a:	d506      	bpl.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x746>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800201c:	4841      	ldr	r0, [pc, #260]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800201e:	6f6e      	ldr	r6, [r5, #116]	@ 0x74
 8002020:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002022:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002026:	4332      	orrs	r2, r6
 8002028:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800202a:	00de      	lsls	r6, r3, #3
 800202c:	d507      	bpl.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x75a>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800202e:	483d      	ldr	r0, [pc, #244]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002030:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 8002034:	6902      	ldr	r2, [r0, #16]
 8002036:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800203a:	4332      	orrs	r2, r6
 800203c:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800203e:	0298      	lsls	r0, r3, #10
 8002040:	d506      	bpl.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x76c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002042:	4838      	ldr	r0, [pc, #224]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002044:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
 8002046:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002048:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800204c:	4332      	orrs	r2, r6
 800204e:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002050:	005a      	lsls	r2, r3, #1
 8002052:	d509      	bpl.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x784>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002054:	4a33      	ldr	r2, [pc, #204]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002056:	6910      	ldr	r0, [r2, #16]
 8002058:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800205c:	6110      	str	r0, [r2, #16]
 800205e:	6910      	ldr	r0, [r2, #16]
 8002060:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 8002064:	4330      	orrs	r0, r6
 8002066:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002068:	2b00      	cmp	r3, #0
 800206a:	da06      	bge.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800206c:	482d      	ldr	r0, [pc, #180]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800206e:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 8002070:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002072:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002076:	4332      	orrs	r2, r6
 8002078:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800207a:	021f      	lsls	r7, r3, #8
 800207c:	d507      	bpl.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800207e:	4a29      	ldr	r2, [pc, #164]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002080:	f8d5 008c 	ldr.w	r0, [r5, #140]	@ 0x8c
 8002084:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002086:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800208a:	4303      	orrs	r3, r0
 800208c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800208e:	07ce      	lsls	r6, r1, #31
 8002090:	d506      	bpl.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002092:	2100      	movs	r1, #0
 8002094:	f105 0008 	add.w	r0, r5, #8
 8002098:	f7ff fb38 	bl	800170c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800209c:	4607      	mov	r7, r0
 800209e:	b900      	cbnz	r0, 80020a2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    switch (PeriphClkInit->RngClockSelection)
 80020a0:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80020a2:	686b      	ldr	r3, [r5, #4]
 80020a4:	079c      	lsls	r4, r3, #30
 80020a6:	d506      	bpl.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80020a8:	2101      	movs	r1, #1
 80020aa:	f105 0008 	add.w	r0, r5, #8
 80020ae:	f7ff fb2d 	bl	800170c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 80020b2:	4606      	mov	r6, r0
 80020b4:	b900      	cbnz	r0, 80020b8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    switch (PeriphClkInit->RngClockSelection)
 80020b6:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80020b8:	686b      	ldr	r3, [r5, #4]
 80020ba:	0758      	lsls	r0, r3, #29
 80020bc:	d506      	bpl.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80020be:	2102      	movs	r1, #2
 80020c0:	f105 0008 	add.w	r0, r5, #8
 80020c4:	f7ff fb22 	bl	800170c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 80020c8:	4604      	mov	r4, r0
 80020ca:	b900      	cbnz	r0, 80020ce <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    switch (PeriphClkInit->RngClockSelection)
 80020cc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80020ce:	686b      	ldr	r3, [r5, #4]
 80020d0:	0719      	lsls	r1, r3, #28
 80020d2:	d506      	bpl.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80020d4:	2100      	movs	r1, #0
 80020d6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80020da:	f7ff fb8d 	bl	80017f8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80020de:	4606      	mov	r6, r0
 80020e0:	b900      	cbnz	r0, 80020e4 <HAL_RCCEx_PeriphCLKConfig+0x800>
    switch (PeriphClkInit->RngClockSelection)
 80020e2:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80020e4:	686b      	ldr	r3, [r5, #4]
 80020e6:	06da      	lsls	r2, r3, #27
 80020e8:	d506      	bpl.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80020ea:	2101      	movs	r1, #1
 80020ec:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80020f0:	f7ff fb82 	bl	80017f8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80020f4:	4604      	mov	r4, r0
 80020f6:	b900      	cbnz	r0, 80020fa <HAL_RCCEx_PeriphCLKConfig+0x816>
    switch (PeriphClkInit->RngClockSelection)
 80020f8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80020fa:	686b      	ldr	r3, [r5, #4]
 80020fc:	069b      	lsls	r3, r3, #26
 80020fe:	f100 80ca 	bmi.w	8002296 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
  if (status == HAL_OK)
 8002102:	1e20      	subs	r0, r4, #0
 8002104:	bf18      	it	ne
 8002106:	2001      	movne	r0, #1
}
 8002108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800210c:	2101      	movs	r1, #1
 800210e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8002112:	f7ff fb71 	bl	80017f8 <RCCEx_PLL3_Config>
 8002116:	e6ac      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x58e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002118:	2601      	movs	r6, #1
 800211a:	4634      	mov	r4, r6
 800211c:	e6b5      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      status = ret;
 800211e:	4626      	mov	r6, r4
 8002120:	e6b3      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002122:	bf00      	nop
 8002124:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002128:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800212c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002130:	d003      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x856>
 8002132:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002136:	f47f aeba 	bne.w	8001eae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    if (ret == HAL_OK)
 800213a:	b9ac      	cbnz	r4, 8002168 <HAL_RCCEx_PeriphCLKConfig+0x884>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800213c:	4a5b      	ldr	r2, [pc, #364]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800213e:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 8002142:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002144:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8002148:	430b      	orrs	r3, r1
 800214a:	6553      	str	r3, [r2, #84]	@ 0x54
 800214c:	e6b1      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800214e:	2100      	movs	r1, #0
 8002150:	f105 0008 	add.w	r0, r5, #8
 8002154:	f7ff fada 	bl	800170c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002158:	4604      	mov	r4, r0
        break;
 800215a:	e7ee      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x856>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800215c:	2102      	movs	r1, #2
 800215e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8002162:	f7ff fb49 	bl	80017f8 <RCCEx_PLL3_Config>
 8002166:	e7f7      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x874>
      status = ret;
 8002168:	4626      	mov	r6, r4
 800216a:	e6a2      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800216c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002170:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8002174:	d003      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8002176:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800217a:	f47f aeac 	bne.w	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    if (ret == HAL_OK)
 800217e:	b9ac      	cbnz	r4, 80021ac <HAL_RCCEx_PeriphCLKConfig+0x8c8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002180:	4a4a      	ldr	r2, [pc, #296]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8002182:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 8002186:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002188:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800218c:	430b      	orrs	r3, r1
 800218e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002190:	e6a3      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x5f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002192:	2100      	movs	r1, #0
 8002194:	f105 0008 	add.w	r0, r5, #8
 8002198:	f7ff fab8 	bl	800170c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800219c:	4604      	mov	r4, r0
        break;
 800219e:	e7ee      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x89a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80021a0:	2102      	movs	r1, #2
 80021a2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80021a6:	f7ff fb27 	bl	80017f8 <RCCEx_PLL3_Config>
 80021aa:	e7f7      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      status = ret;
 80021ac:	4626      	mov	r6, r4
 80021ae:	e694      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80021b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80021b4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80021b8:	d003      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 80021ba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80021be:	f47f ae9e 	bne.w	8001efe <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 80021c2:	b9ac      	cbnz	r4, 80021f0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80021c4:	4a39      	ldr	r2, [pc, #228]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80021c6:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 80021ca:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80021cc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80021d0:	430b      	orrs	r3, r1
 80021d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80021d4:	e695      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80021d6:	2100      	movs	r1, #0
 80021d8:	f105 0008 	add.w	r0, r5, #8
 80021dc:	f7ff fa96 	bl	800170c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80021e0:	4604      	mov	r4, r0
        break;
 80021e2:	e7ee      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80021e4:	2102      	movs	r1, #2
 80021e6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80021ea:	f7ff fb05 	bl	80017f8 <RCCEx_PLL3_Config>
 80021ee:	e7f7      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
      status = ret;
 80021f0:	4626      	mov	r6, r4
 80021f2:	e686      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80021f4:	2102      	movs	r1, #2
 80021f6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80021fa:	f7ff fafd 	bl	80017f8 <RCCEx_PLL3_Config>
 80021fe:	e6c3      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
    switch (PeriphClkInit->AdcClockSelection)
 8002200:	2601      	movs	r6, #1
 8002202:	4634      	mov	r4, r6
 8002204:	e6cc      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      status = ret;
 8002206:	4626      	mov	r6, r4
 8002208:	e6ca      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800220a:	4a28      	ldr	r2, [pc, #160]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800220c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800220e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002212:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8002214:	b97c      	cbnz	r4, 8002236 <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002216:	4a25      	ldr	r2, [pc, #148]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8002218:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800221c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800221e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002222:	430b      	orrs	r3, r1
 8002224:	6553      	str	r3, [r2, #84]	@ 0x54
 8002226:	e6ce      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002228:	2101      	movs	r1, #1
 800222a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800222e:	f7ff fae3 	bl	80017f8 <RCCEx_PLL3_Config>
 8002232:	4604      	mov	r4, r0
        break;
 8002234:	e7ee      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x930>
      status = ret;
 8002236:	4626      	mov	r6, r4
 8002238:	e6c5      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800223a:	4a1c      	ldr	r2, [pc, #112]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800223c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800223e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002242:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8002244:	b974      	cbnz	r4, 8002264 <HAL_RCCEx_PeriphCLKConfig+0x980>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002246:	4a19      	ldr	r2, [pc, #100]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8002248:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800224a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800224c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002250:	430b      	orrs	r3, r1
 8002252:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002254:	e6c4      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002256:	2102      	movs	r1, #2
 8002258:	f105 0008 	add.w	r0, r5, #8
 800225c:	f7ff fa56 	bl	800170c <RCCEx_PLL2_Config>
 8002260:	4604      	mov	r4, r0
        break;
 8002262:	e7ef      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 8002264:	4626      	mov	r6, r4
 8002266:	e6bb      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    switch (PeriphClkInit->RngClockSelection)
 8002268:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800226c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8002270:	f47f aed1 	bne.w	8002016 <HAL_RCCEx_PeriphCLKConfig+0x732>
    if (ret == HAL_OK)
 8002274:	2c00      	cmp	r4, #0
 8002276:	f47f aecf 	bne.w	8002018 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800227a:	4c0c      	ldr	r4, [pc, #48]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800227c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800227e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002282:	4302      	orrs	r2, r0
 8002284:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 8002286:	4634      	mov	r4, r6
 8002288:	e6c6      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x734>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800228a:	4f08      	ldr	r7, [pc, #32]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800228c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800228e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002292:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 8002294:	e7ee      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x990>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002296:	2102      	movs	r1, #2
 8002298:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800229c:	f7ff faac 	bl	80017f8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80022a0:	2800      	cmp	r0, #0
 80022a2:	f43f af2e 	beq.w	8002102 <HAL_RCCEx_PeriphCLKConfig+0x81e>
  return HAL_ERROR;
 80022a6:	2001      	movs	r0, #1
 80022a8:	e72e      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x824>
 80022aa:	bf00      	nop
 80022ac:	58024400 	.word	0x58024400

080022b0 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80022b0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80022b2:	f7ff f9f7 	bl	80016a4 <HAL_RCC_GetHCLKFreq>
 80022b6:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80022b8:	4a05      	ldr	r2, [pc, #20]	@ (80022d0 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80022c0:	5cd3      	ldrb	r3, [r2, r3]
 80022c2:	f003 031f 	and.w	r3, r3, #31
}
 80022c6:	40d8      	lsrs	r0, r3
 80022c8:	bd08      	pop	{r3, pc}
 80022ca:	bf00      	nop
 80022cc:	58024400 	.word	0x58024400
 80022d0:	0801150a 	.word	0x0801150a

080022d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022d4:	494f      	ldr	r1, [pc, #316]	@ (8002414 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 80022d6:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022d8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80022da:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80022dc:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 80022de:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80022e2:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80022e6:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 80022e8:	f000 8090 	beq.w	800240c <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80022ec:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80022f0:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80022f4:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022f8:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80022fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002300:	4353      	muls	r3, r2
    switch (pllsource)
 8002302:	2c01      	cmp	r4, #1
 8002304:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002308:	ee06 3a90 	vmov	s13, r3
 800230c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8002310:	d06e      	beq.n	80023f0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 8002312:	2c02      	cmp	r4, #2
 8002314:	d05e      	beq.n	80023d4 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8002316:	2c00      	cmp	r4, #0
 8002318:	d16a      	bne.n	80023f0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800231a:	680b      	ldr	r3, [r1, #0]
 800231c:	069b      	lsls	r3, r3, #26
 800231e:	d547      	bpl.n	80023b0 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002320:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002322:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002324:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8002328:	4a3b      	ldr	r2, [pc, #236]	@ (8002418 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800232a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800232e:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002330:	ee07 2a90 	vmov	s15, r2
 8002334:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002338:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800233c:	ee07 3a10 	vmov	s14, r3
 8002340:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002344:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002348:	ee37 7a06 	vadd.f32	s14, s14, s12
 800234c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002350:	4a30      	ldr	r2, [pc, #192]	@ (8002414 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8002352:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8002354:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002358:	ee07 3a10 	vmov	s14, r3
 800235c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002360:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002364:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002368:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800236c:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002370:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8002372:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002376:	ee07 3a10 	vmov	s14, r3
 800237a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800237e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002382:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002386:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800238a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800238e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8002390:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002394:	ee06 3a90 	vmov	s13, r3
 8002398:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800239c:	ee76 6a86 	vadd.f32	s13, s13, s12
 80023a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023a4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80023a8:	ee17 3a90 	vmov	r3, s15
 80023ac:	6083      	str	r3, [r0, #8]
}
 80023ae:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80023b0:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80023b2:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800241c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80023b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023c6:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80023ca:	eec5 6a87 	vdiv.f32	s13, s11, s14
 80023ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 80023d2:	e7bd      	b.n	8002350 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80023d4:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80023d6:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8002420 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80023da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 80023ee:	e7ec      	b.n	80023ca <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80023f0:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80023f2:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8002424 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 80023f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002406:	ee77 7a86 	vadd.f32	s15, s15, s12
 800240a:	e7de      	b.n	80023ca <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800240c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002410:	e7cc      	b.n	80023ac <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8002412:	bf00      	nop
 8002414:	58024400 	.word	0x58024400
 8002418:	03d09000 	.word	0x03d09000
 800241c:	4c742400 	.word	0x4c742400
 8002420:	4bbebc20 	.word	0x4bbebc20
 8002424:	4a742400 	.word	0x4a742400

08002428 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002428:	494f      	ldr	r1, [pc, #316]	@ (8002568 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800242a:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800242c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800242e:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002430:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 8002432:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002436:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800243a:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 800243c:	f000 8090 	beq.w	8002560 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002440:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002444:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002448:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800244c:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002454:	4353      	muls	r3, r2
    switch (pllsource)
 8002456:	2c01      	cmp	r4, #1
 8002458:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800245c:	ee06 3a90 	vmov	s13, r3
 8002460:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8002464:	d06e      	beq.n	8002544 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 8002466:	2c02      	cmp	r4, #2
 8002468:	d05e      	beq.n	8002528 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800246a:	2c00      	cmp	r4, #0
 800246c:	d16a      	bne.n	8002544 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800246e:	680b      	ldr	r3, [r1, #0]
 8002470:	069b      	lsls	r3, r3, #26
 8002472:	d547      	bpl.n	8002504 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002474:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002476:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002478:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800247c:	4a3b      	ldr	r2, [pc, #236]	@ (800256c <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800247e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002482:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002484:	ee07 2a90 	vmov	s15, r2
 8002488:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800248c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8002490:	ee07 3a10 	vmov	s14, r3
 8002494:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002498:	ee37 7a26 	vadd.f32	s14, s14, s13
 800249c:	ee37 7a06 	vadd.f32	s14, s14, s12
 80024a0:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80024a4:	4a30      	ldr	r2, [pc, #192]	@ (8002568 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 80024a6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80024a8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80024ac:	ee07 3a10 	vmov	s14, r3
 80024b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80024b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024bc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80024c0:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80024c4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80024c6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80024ca:	ee07 3a10 	vmov	s14, r3
 80024ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024d2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80024d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024da:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80024de:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80024e2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80024e4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80024e8:	ee06 3a90 	vmov	s13, r3
 80024ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80024f0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80024f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024f8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80024fc:	ee17 3a90 	vmov	r3, s15
 8002500:	6083      	str	r3, [r0, #8]
}
 8002502:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002504:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002506:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8002570 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800250a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250e:	ee07 3a90 	vmov	s15, r3
 8002512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800251a:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800251e:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8002522:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8002526:	e7bd      	b.n	80024a4 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002528:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800252a:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8002574 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800252e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800253e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002542:	e7ec      	b.n	800251e <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002544:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002546:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8002578 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800254a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800255a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800255e:	e7de      	b.n	800251e <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002560:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002564:	e7cc      	b.n	8002500 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8002566:	bf00      	nop
 8002568:	58024400 	.word	0x58024400
 800256c:	03d09000 	.word	0x03d09000
 8002570:	4c742400 	.word	0x4c742400
 8002574:	4bbebc20 	.word	0x4bbebc20
 8002578:	4a742400 	.word	0x4a742400

0800257c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800257c:	494f      	ldr	r1, [pc, #316]	@ (80026bc <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800257e:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002580:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8002582:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8002584:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll1m != 0U)
 8002586:	f416 7f7c 	tst.w	r6, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800258a:	f3c6 1305 	ubfx	r3, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800258e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  if (pll1m != 0U)
 8002590:	f000 8090 	beq.w	80026b4 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002594:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002598:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800259c:	f005 0201 	and.w	r2, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025a0:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80025a8:	4353      	muls	r3, r2
    switch (pllsource)
 80025aa:	2c01      	cmp	r4, #1
 80025ac:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025b0:	ee06 3a90 	vmov	s13, r3
 80025b4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80025b8:	d04e      	beq.n	8002658 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 80025ba:	2c02      	cmp	r4, #2
 80025bc:	d05e      	beq.n	800267c <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 80025be:	2c00      	cmp	r4, #0
 80025c0:	d16a      	bne.n	8002698 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025c2:	680b      	ldr	r3, [r1, #0]
 80025c4:	069b      	lsls	r3, r3, #26
 80025c6:	d567      	bpl.n	8002698 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025c8:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025ca:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025cc:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 80025d0:	4a3b      	ldr	r2, [pc, #236]	@ (80026c0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025d6:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025d8:	ee07 2a90 	vmov	s15, r2
 80025dc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80025e0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80025e4:	ee07 3a10 	vmov	s14, r3
 80025e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80025ec:	ee37 7a26 	vadd.f32	s14, s14, s13
 80025f0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80025f4:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80025f8:	4a30      	ldr	r2, [pc, #192]	@ (80026bc <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 80025fa:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80025fc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002600:	ee07 3a10 	vmov	s14, r3
 8002604:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002608:	ee37 7a06 	vadd.f32	s14, s14, s12
 800260c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002610:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002614:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8002618:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800261a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800261e:	ee07 3a10 	vmov	s14, r3
 8002622:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002626:	ee37 7a06 	vadd.f32	s14, s14, s12
 800262a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800262e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002632:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8002636:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002638:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800263c:	ee06 3a90 	vmov	s13, r3
 8002640:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002644:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002648:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800264c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002650:	ee17 3a90 	vmov	r3, s15
 8002654:	6083      	str	r3, [r0, #8]
}
 8002656:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002658:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800265a:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 80026c4 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800265e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002662:	ee07 3a90 	vmov	s15, r3
 8002666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800266a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800266e:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002672:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8002676:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800267a:	e7bd      	b.n	80025f8 <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800267c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800267e:	eddf 5a12 	vldr	s11, [pc, #72]	@ 80026c8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8002682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002686:	ee07 3a90 	vmov	s15, r3
 800268a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800268e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002692:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002696:	e7ec      	b.n	8002672 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002698:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800269a:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 80026cc <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800269e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ae:	ee77 7a86 	vadd.f32	s15, s15, s12
 80026b2:	e7de      	b.n	8002672 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80026b4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80026b8:	e7cc      	b.n	8002654 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 80026ba:	bf00      	nop
 80026bc:	58024400 	.word	0x58024400
 80026c0:	03d09000 	.word	0x03d09000
 80026c4:	4a742400 	.word	0x4a742400
 80026c8:	4bbebc20 	.word	0x4bbebc20
 80026cc:	4c742400 	.word	0x4c742400

080026d0 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 80026d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80026d2:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 80026d6:	430b      	orrs	r3, r1
 80026d8:	d115      	bne.n	8002706 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80026da:	4b9d      	ldr	r3, [pc, #628]	@ (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80026dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026de:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 80026e2:	2a04      	cmp	r2, #4
 80026e4:	d82d      	bhi.n	8002742 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80026e6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80026ea:	001c      	.short	0x001c
 80026ec:	000500e1 	.word	0x000500e1
 80026f0:	00410151 	.word	0x00410151
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80026fa:	f000 80df 	beq.w	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80026fe:	a801      	add	r0, sp, #4
 8002700:	f7ff fe92 	bl	8002428 <HAL_RCCEx_GetPLL3ClockFreq>
 8002704:	e0d9      	b.n	80028ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8002706:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 800270a:	430b      	orrs	r3, r1
 800270c:	d11b      	bne.n	8002746 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800270e:	4b90      	ldr	r3, [pc, #576]	@ (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8002710:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002712:	f402 72e0 	and.w	r2, r2, #448	@ 0x1c0
    switch (saiclocksource)
 8002716:	2a80      	cmp	r2, #128	@ 0x80
 8002718:	d0ec      	beq.n	80026f4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800271a:	d80c      	bhi.n	8002736 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
    switch (srcclk)
 800271c:	2a00      	cmp	r2, #0
 800271e:	f040 80c5 	bne.w	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8002728:	f000 80c8 	beq.w	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800272c:	a801      	add	r0, sp, #4
 800272e:	f7ff ff25 	bl	800257c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8002732:	9802      	ldr	r0, [sp, #8]
 8002734:	e0c2      	b.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
    switch (saiclocksource)
 8002736:	2ac0      	cmp	r2, #192	@ 0xc0
 8002738:	f000 8128 	beq.w	800298c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 800273c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
    switch (saiclocksource)
 8002740:	d014      	beq.n	800276c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = 0;
 8002742:	2000      	movs	r0, #0
 8002744:	e0ba      	b.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8002746:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 800274a:	430b      	orrs	r3, r1
 800274c:	d12e      	bne.n	80027ac <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800274e:	4b80      	ldr	r3, [pc, #512]	@ (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8002750:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002752:	f402 0260 	and.w	r2, r2, #14680064	@ 0xe00000
    switch (saiclocksource)
 8002756:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 800275a:	d0cb      	beq.n	80026f4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800275c:	d9de      	bls.n	800271c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 800275e:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 8002762:	f000 8113 	beq.w	800298c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8002766:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800276a:	e7e9      	b.n	8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800276c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800276e:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8002770:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002774:	0748      	lsls	r0, r1, #29
 8002776:	d506      	bpl.n	8002786 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8002778:	b92a      	cbnz	r2, 8002786 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800277a:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800277c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002780:	4874      	ldr	r0, [pc, #464]	@ (8002954 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8002782:	40d8      	lsrs	r0, r3
 8002784:	e09a      	b.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8002786:	4b72      	ldr	r3, [pc, #456]	@ (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8002788:	6819      	ldr	r1, [r3, #0]
 800278a:	05c9      	lsls	r1, r1, #23
 800278c:	d503      	bpl.n	8002796 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800278e:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8002792:	f000 80fd 	beq.w	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800279c:	f000 808e 	beq.w	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = 0;
 80027a0:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 80027a4:	486c      	ldr	r0, [pc, #432]	@ (8002958 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80027a6:	bf18      	it	ne
 80027a8:	2000      	movne	r0, #0
 80027aa:	e087      	b.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80027ac:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 80027b0:	430b      	orrs	r3, r1
 80027b2:	d11f      	bne.n	80027f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80027b4:	4b66      	ldr	r3, [pc, #408]	@ (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80027b6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80027b8:	f002 62e0 	and.w	r2, r2, #117440512	@ 0x7000000
    switch (saiclocksource)
 80027bc:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 80027c0:	d098      	beq.n	80026f4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 80027c2:	d9ab      	bls.n	800271c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 80027c4:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 80027c8:	f000 80e0 	beq.w	800298c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80027cc:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
    switch (srcclk)
 80027d0:	d1b7      	bne.n	8002742 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80027d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80027d4:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80027d6:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027da:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80027dc:	0748      	lsls	r0, r1, #29
 80027de:	d501      	bpl.n	80027e4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80027e0:	2a00      	cmp	r2, #0
 80027e2:	d0cb      	beq.n	800277c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80027e4:	05d9      	lsls	r1, r3, #23
 80027e6:	d503      	bpl.n	80027f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80027e8:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 80027ec:	f000 80d0 	beq.w	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80027f0:	4b57      	ldr	r3, [pc, #348]	@ (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80027f2:	e7d0      	b.n	8002796 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80027f4:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 80027f8:	430b      	orrs	r3, r1
 80027fa:	d10f      	bne.n	800281c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80027fc:	4b54      	ldr	r3, [pc, #336]	@ (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80027fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002800:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
    switch (srcclk)
 8002804:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002808:	f43f af74 	beq.w	80026f4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800280c:	d986      	bls.n	800271c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 800280e:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8002812:	f000 80bb 	beq.w	800298c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8002816:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800281a:	e7d9      	b.n	80027d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800281c:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8002820:	430b      	orrs	r3, r1
 8002822:	d132      	bne.n	800288a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8002824:	4a4a      	ldr	r2, [pc, #296]	@ (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8002826:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8002828:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 800282c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002830:	f000 8081 	beq.w	8002936 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8002834:	d80d      	bhi.n	8002852 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8002836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800283a:	d016      	beq.n	800286a <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800283c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002840:	d01b      	beq.n	800287a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8002842:	2b00      	cmp	r3, #0
 8002844:	f47f af7d 	bne.w	8002742 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
}
 8002848:	b005      	add	sp, #20
 800284a:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800284e:	f7fe bf4b 	b.w	80016e8 <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 8002852:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002856:	d074      	beq.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8002858:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
    switch (srcclk)
 800285c:	f47f af71 	bne.w	8002742 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002860:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 8002862:	4b3d      	ldr	r3, [pc, #244]	@ (8002958 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8002864:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8002868:	e06f      	b.n	800294a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800286a:	6810      	ldr	r0, [r2, #0]
 800286c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8002870:	d024      	beq.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002872:	a801      	add	r0, sp, #4
 8002874:	f7ff fd2e 	bl	80022d4 <HAL_RCCEx_GetPLL2ClockFreq>
 8002878:	e75b      	b.n	8002732 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800287a:	6810      	ldr	r0, [r2, #0]
 800287c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8002880:	d01c      	beq.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002882:	a801      	add	r0, sp, #4
 8002884:	f7ff fdd0 	bl	8002428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8002888:	e753      	b.n	8002732 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800288a:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 800288e:	430b      	orrs	r3, r1
 8002890:	d120      	bne.n	80028d4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002892:	4b2f      	ldr	r3, [pc, #188]	@ (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8002894:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002896:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
    switch (srcclk)
 800289a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800289e:	d010      	beq.n	80028c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 80028a0:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 80028a4:	d095      	beq.n	80027d2 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
 80028a6:	2a00      	cmp	r2, #0
 80028a8:	f47f af4b 	bne.w	8002742 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80028b2:	d003      	beq.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80028b4:	a801      	add	r0, sp, #4
 80028b6:	f7ff fd0d 	bl	80022d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80028ba:	9801      	ldr	r0, [sp, #4]
}
 80028bc:	b005      	add	sp, #20
 80028be:	f85d fb04 	ldr.w	pc, [sp], #4
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80028c8:	d0f8      	beq.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80028ca:	a801      	add	r0, sp, #4
 80028cc:	f7ff fdac 	bl	8002428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80028d0:	9803      	ldr	r0, [sp, #12]
 80028d2:	e7f3      	b.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80028d4:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 80028d8:	430b      	orrs	r3, r1
 80028da:	d10c      	bne.n	80028f6 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80028dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80028de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 80028e0:	03d2      	lsls	r2, r2, #15
 80028e2:	f57f af1e 	bpl.w	8002722 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80028ec:	d0e6      	beq.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80028ee:	a801      	add	r0, sp, #4
 80028f0:	f7ff fcf0 	bl	80022d4 <HAL_RCCEx_GetPLL2ClockFreq>
 80028f4:	e7ec      	b.n	80028d0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80028f6:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 80028fa:	430b      	orrs	r3, r1
 80028fc:	d130      	bne.n	8002960 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80028fe:	4a14      	ldr	r2, [pc, #80]	@ (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8002900:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002902:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8002906:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800290a:	d014      	beq.n	8002936 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800290c:	d80d      	bhi.n	800292a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800290e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002912:	d0aa      	beq.n	800286a <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8002914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002918:	d0af      	beq.n	800287a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800291a:	2b00      	cmp	r3, #0
 800291c:	f47f af11 	bne.w	8002742 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
}
 8002920:	b005      	add	sp, #20
 8002922:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8002926:	f7ff bcc3 	b.w	80022b0 <HAL_RCCEx_GetD3PCLK1Freq>
    switch (srcclk)
 800292a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800292e:	d008      	beq.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8002930:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002934:	e792      	b.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002936:	6810      	ldr	r0, [r2, #0]
 8002938:	f010 0004 	ands.w	r0, r0, #4
 800293c:	d0be      	beq.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800293e:	6813      	ldr	r3, [r2, #0]
 8002940:	e71c      	b.n	800277c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8002942:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 8002944:	4b05      	ldr	r3, [pc, #20]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8002946:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
          frequency = HSE_VALUE;
 800294a:	bf18      	it	ne
 800294c:	4618      	movne	r0, r3
 800294e:	e7b5      	b.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 8002950:	58024400 	.word	0x58024400
 8002954:	03d09000 	.word	0x03d09000
 8002958:	017d7840 	.word	0x017d7840
 800295c:	003d0900 	.word	0x003d0900
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8002960:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 8002964:	4308      	orrs	r0, r1
 8002966:	f47f aeec 	bne.w	8002742 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800296a:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800296c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800296e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8002972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002976:	d007      	beq.n	8002988 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800297c:	f43f af75 	beq.w	800286a <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8002980:	2b00      	cmp	r3, #0
 8002982:	f47f aede 	bne.w	8002742 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8002986:	e76b      	b.n	8002860 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002988:	6810      	ldr	r0, [r2, #0]
 800298a:	e6cb      	b.n	8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        frequency = EXTERNAL_CLOCK_VALUE;
 800298c:	4802      	ldr	r0, [pc, #8]	@ (8002998 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800298e:	e795      	b.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = CSI_VALUE;
 8002990:	4802      	ldr	r0, [pc, #8]	@ (800299c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8002992:	e793      	b.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 8002994:	58024400 	.word	0x58024400
 8002998:	00bb8000 	.word	0x00bb8000
 800299c:	003d0900 	.word	0x003d0900

080029a0 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 80029a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029a4:	4605      	mov	r5, r0
 80029a6:	b086      	sub	sp, #24
 80029a8:	4688      	mov	r8, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80029aa:	f7fe f839 	bl	8000a20 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80029ae:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 80029b0:	4681      	mov	r9, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80029b2:	6828      	ldr	r0, [r5, #0]
 80029b4:	f000 feda 	bl	800376c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80029b8:	4604      	mov	r4, r0
 80029ba:	bb48      	cbnz	r0, 8002a10 <SD_FindSCR.constprop.0+0x70>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80029bc:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 80029be:	6828      	ldr	r0, [r5, #0]
 80029c0:	0409      	lsls	r1, r1, #16
 80029c2:	f000 ff99 	bl	80038f8 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 80029c6:	4604      	mov	r4, r0
 80029c8:	bb10      	cbnz	r0, 8002a10 <SD_FindSCR.constprop.0+0x70>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 80029ca:	f04f 30ff 	mov.w	r0, #4294967295
 80029ce:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80029d0:	2630      	movs	r6, #48	@ 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80029d2:	4669      	mov	r1, sp
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80029d4:	9404      	str	r4, [sp, #16]
  config.DataLength    = 8U;
 80029d6:	e9cd 0300 	strd	r0, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80029da:	2302      	movs	r3, #2
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80029dc:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80029de:	e9cd 6302 	strd	r6, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80029e2:	2301      	movs	r3, #1
 80029e4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80029e6:	f000 fdf4 	bl	80035d2 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80029ea:	6828      	ldr	r0, [r5, #0]
 80029ec:	f000 ffb8 	bl	8003960 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80029f0:	4604      	mov	r4, r0
 80029f2:	b968      	cbnz	r0, 8002a10 <SD_FindSCR.constprop.0+0x70>
  uint32_t tempscr[2U] = {0UL, 0UL};
 80029f4:	4607      	mov	r7, r0
 80029f6:	4606      	mov	r6, r0
  {
    return errorstate;
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80029f8:	f240 5a2a 	movw	sl, #1322	@ 0x52a
 80029fc:	6828      	ldr	r0, [r5, #0]
 80029fe:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002a00:	ea13 0f0a 	tst.w	r3, sl
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8002a04:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8002a06:	d007      	beq.n	8002a18 <SD_FindSCR.constprop.0+0x78>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8002a08:	071a      	lsls	r2, r3, #28
 8002a0a:	d519      	bpl.n	8002a40 <SD_FindSCR.constprop.0+0xa0>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8002a0c:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8002a0e:	6384      	str	r4, [r0, #56]	@ 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));

  }

  return HAL_SD_ERROR_NONE;
}
 8002a10:	4620      	mov	r0, r4
 8002a12:	b006      	add	sp, #24
 8002a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8002a18:	0319      	lsls	r1, r3, #12
 8002a1a:	d408      	bmi.n	8002a2e <SD_FindSCR.constprop.0+0x8e>
 8002a1c:	b93c      	cbnz	r4, 8002a2e <SD_FindSCR.constprop.0+0x8e>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8002a1e:	f000 fdaf 	bl	8003580 <SDMMC_ReadFIFO>
 8002a22:	4606      	mov	r6, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8002a24:	6828      	ldr	r0, [r5, #0]
      index++;
 8002a26:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8002a28:	f000 fdaa 	bl	8003580 <SDMMC_ReadFIFO>
 8002a2c:	4607      	mov	r7, r0
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8002a2e:	f7fd fff7 	bl	8000a20 <HAL_GetTick>
 8002a32:	eba0 0009 	sub.w	r0, r0, r9
 8002a36:	3001      	adds	r0, #1
 8002a38:	d1e0      	bne.n	80029fc <SD_FindSCR.constprop.0+0x5c>
      return HAL_SD_ERROR_TIMEOUT;
 8002a3a:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8002a3e:	e7e7      	b.n	8002a10 <SD_FindSCR.constprop.0+0x70>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8002a40:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002a42:	079b      	lsls	r3, r3, #30
 8002a44:	d501      	bpl.n	8002a4a <SD_FindSCR.constprop.0+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8002a46:	2402      	movs	r4, #2
 8002a48:	e7e1      	b.n	8002a0e <SD_FindSCR.constprop.0+0x6e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8002a4a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8002a4c:	f014 0420 	ands.w	r4, r4, #32
 8002a50:	d001      	beq.n	8002a56 <SD_FindSCR.constprop.0+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8002a52:	2420      	movs	r4, #32
 8002a54:	e7db      	b.n	8002a0e <SD_FindSCR.constprop.0+0x6e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002a56:	4b04      	ldr	r3, [pc, #16]	@ (8002a68 <SD_FindSCR.constprop.0+0xc8>)
 8002a58:	ba3f      	rev	r7, r7
 8002a5a:	ba36      	rev	r6, r6
 8002a5c:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8002a5e:	f8c8 7000 	str.w	r7, [r8]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8002a62:	f8c8 6004 	str.w	r6, [r8, #4]
  return HAL_SD_ERROR_NONE;
 8002a66:	e7d3      	b.n	8002a10 <SD_FindSCR.constprop.0+0x70>
 8002a68:	18000f3a 	.word	0x18000f3a

08002a6c <HAL_SD_ReadBlocks>:
{
 8002a6c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002a70:	460e      	mov	r6, r1
 8002a72:	b086      	sub	sp, #24
 8002a74:	4604      	mov	r4, r0
 8002a76:	4691      	mov	r9, r2
 8002a78:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8002a7a:	f7fd ffd1 	bl	8000a20 <HAL_GetTick>
 8002a7e:	4680      	mov	r8, r0
  if (NULL == pData)
 8002a80:	b93e      	cbnz	r6, 8002a92 <HAL_SD_ReadBlocks+0x26>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a82:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002a88:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
}
 8002a8c:	b006      	add	sp, #24
 8002a8e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  if (hsd->State == HAL_SD_STATE_READY)
 8002a92:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	f040 80bb 	bne.w	8002c12 <HAL_SD_ReadBlocks+0x1a6>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002a9c:	eb09 0307 	add.w	r3, r9, r7
 8002aa0:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002aa2:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002aa4:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002aa6:	6361      	str	r1, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002aa8:	d903      	bls.n	8002ab2 <HAL_SD_ReadBlocks+0x46>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002aaa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002aac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ab0:	e7ea      	b.n	8002a88 <HAL_SD_ReadBlocks+0x1c>
    hsd->State = HAL_SD_STATE_BUSY;
 8002ab2:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002ab4:	2502      	movs	r5, #2
    hsd->Instance->DCTRL = 0U;
 8002ab6:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8002ab8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002abc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->Instance->DCTRL = 0U;
 8002abe:	62c1      	str	r1, [r0, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002ac0:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ac2:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac8:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002aca:	ea4f 2347 	mov.w	r3, r7, lsl #9
      add *= BLOCKSIZE;
 8002ace:	bf18      	it	ne
 8002ad0:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002ad4:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002ad6:	2390      	movs	r3, #144	@ 0x90
 8002ad8:	e9cd 3502 	strd	r3, r5, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002adc:	2300      	movs	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8002ade:	e9cd 3304 	strd	r3, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002ae2:	f000 fd76 	bl	80035d2 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8002ae6:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 8002ae8:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8002aea:	68c3      	ldr	r3, [r0, #12]
 8002aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002af0:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 8002af2:	d910      	bls.n	8002b16 <HAL_SD_ReadBlocks+0xaa>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002af4:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002af6:	62e5      	str	r5, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002af8:	f000 fe6c 	bl	80037d4 <SDMMC_CmdReadMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002afc:	6823      	ldr	r3, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 8002afe:	b180      	cbz	r0, 8002b22 <HAL_SD_ReadBlocks+0xb6>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b00:	4a46      	ldr	r2, [pc, #280]	@ (8002c1c <HAL_SD_ReadBlocks+0x1b0>)
 8002b02:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002b04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002b06:	4303      	orrs	r3, r0
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002b08:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8002b14:	e7b9      	b.n	8002a8a <HAL_SD_ReadBlocks+0x1e>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002b16:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002b18:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002b1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002b1c:	f000 fe40 	bl	80037a0 <SDMMC_CmdReadSingleBlock>
 8002b20:	e7ec      	b.n	8002afc <HAL_SD_ReadBlocks+0x90>
    dataremaining = config.DataLength;
 8002b22:	9d01      	ldr	r5, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002b24:	6820      	ldr	r0, [r4, #0]
 8002b26:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002b28:	f413 7f95 	tst.w	r3, #298	@ 0x12a
 8002b2c:	d010      	beq.n	8002b50 <HAL_SD_ReadBlocks+0xe4>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8002b2e:	68c3      	ldr	r3, [r0, #12]
 8002b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b34:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002b36:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002b38:	05db      	lsls	r3, r3, #23
 8002b3a:	d53b      	bpl.n	8002bb4 <HAL_SD_ReadBlocks+0x148>
 8002b3c:	2f01      	cmp	r7, #1
 8002b3e:	d939      	bls.n	8002bb4 <HAL_SD_ReadBlocks+0x148>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8002b40:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d036      	beq.n	8002bb4 <HAL_SD_ReadBlocks+0x148>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b46:	f000 fe93 	bl	8003870 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8002b4a:	b398      	cbz	r0, 8002bb4 <HAL_SD_ReadBlocks+0x148>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	e7d7      	b.n	8002b00 <HAL_SD_ReadBlocks+0x94>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 8002b50:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002b52:	041a      	lsls	r2, r3, #16
 8002b54:	d519      	bpl.n	8002b8a <HAL_SD_ReadBlocks+0x11e>
 8002b56:	2d1f      	cmp	r5, #31
 8002b58:	d917      	bls.n	8002b8a <HAL_SD_ReadBlocks+0x11e>
 8002b5a:	f106 0904 	add.w	r9, r6, #4
 8002b5e:	f106 0b24 	add.w	fp, r6, #36	@ 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 8002b62:	6820      	ldr	r0, [r4, #0]
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8002b64:	f109 0904 	add.w	r9, r9, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 8002b68:	f000 fd0a 	bl	8003580 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002b6c:	f809 0c08 	strb.w	r0, [r9, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002b70:	0a03      	lsrs	r3, r0, #8
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002b72:	0e02      	lsrs	r2, r0, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002b74:	f809 3c07 	strb.w	r3, [r9, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002b78:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002b7a:	f809 2c05 	strb.w	r2, [r9, #-5]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002b7e:	f809 3c06 	strb.w	r3, [r9, #-6]
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8002b82:	45d9      	cmp	r9, fp
 8002b84:	d1ed      	bne.n	8002b62 <HAL_SD_ReadBlocks+0xf6>
 8002b86:	3620      	adds	r6, #32
        dataremaining -= SDMMC_FIFO_SIZE;
 8002b88:	3d20      	subs	r5, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8002b8a:	f7fd ff49 	bl	8000a20 <HAL_GetTick>
 8002b8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002b90:	eba0 0008 	sub.w	r0, r0, r8
 8002b94:	4298      	cmp	r0, r3
 8002b96:	d3c5      	bcc.n	8002b24 <HAL_SD_ReadBlocks+0xb8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b98:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8002b9a:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002c1c <HAL_SD_ReadBlocks+0x1b0>)
 8002b9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002ba0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ba6:	6363      	str	r3, [r4, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8002bb2:	e76b      	b.n	8002a8c <HAL_SD_ReadBlocks+0x20>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bb8:	f011 0108 	ands.w	r1, r1, #8
 8002bbc:	d005      	beq.n	8002bca <HAL_SD_ReadBlocks+0x15e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002bbe:	4a17      	ldr	r2, [pc, #92]	@ (8002c1c <HAL_SD_ReadBlocks+0x1b0>)
 8002bc0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002bc2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002bc4:	f043 0308 	orr.w	r3, r3, #8
 8002bc8:	e79e      	b.n	8002b08 <HAL_SD_ReadBlocks+0x9c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8002bca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bcc:	f012 0202 	ands.w	r2, r2, #2
 8002bd0:	d00a      	beq.n	8002be8 <HAL_SD_ReadBlocks+0x17c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002bd2:	4a12      	ldr	r2, [pc, #72]	@ (8002c1c <HAL_SD_ReadBlocks+0x1b0>)
 8002bd4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002bd6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8002bde:	2301      	movs	r3, #1
 8002be0:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8002be4:	62e1      	str	r1, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8002be6:	e750      	b.n	8002a8a <HAL_SD_ReadBlocks+0x1e>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8002be8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002bea:	f010 0020 	ands.w	r0, r0, #32
 8002bee:	d00a      	beq.n	8002c06 <HAL_SD_ReadBlocks+0x19a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002bf0:	490a      	ldr	r1, [pc, #40]	@ (8002c1c <HAL_SD_ReadBlocks+0x1b0>)
 8002bf2:	6399      	str	r1, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002bf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002bf6:	f043 0320 	orr.w	r3, r3, #32
 8002bfa:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8002c02:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8002c04:	e741      	b.n	8002a8a <HAL_SD_ReadBlocks+0x1e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002c06:	4a06      	ldr	r2, [pc, #24]	@ (8002c20 <HAL_SD_ReadBlocks+0x1b4>)
 8002c08:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    return HAL_OK;
 8002c10:	e73c      	b.n	8002a8c <HAL_SD_ReadBlocks+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002c12:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c18:	e736      	b.n	8002a88 <HAL_SD_ReadBlocks+0x1c>
 8002c1a:	bf00      	nop
 8002c1c:	1fe00fff 	.word	0x1fe00fff
 8002c20:	18000f3a 	.word	0x18000f3a

08002c24 <HAL_SD_WriteBlocks>:
{
 8002c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c28:	460d      	mov	r5, r1
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	4691      	mov	r9, r2
 8002c30:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8002c32:	f7fd fef5 	bl	8000a20 <HAL_GetTick>
 8002c36:	4680      	mov	r8, r0
  if (NULL == pData)
 8002c38:	b93d      	cbnz	r5, 8002c4a <HAL_SD_WriteBlocks+0x26>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c3a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002c40:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8002c42:	2001      	movs	r0, #1
}
 8002c44:	b008      	add	sp, #32
 8002c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hsd->State == HAL_SD_STATE_READY)
 8002c4a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	f040 80ad 	bne.w	8002dae <HAL_SD_WriteBlocks+0x18a>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002c54:	eb09 0307 	add.w	r3, r9, r7
 8002c58:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c5a:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002c5c:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c5e:	6361      	str	r1, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002c60:	d903      	bls.n	8002c6a <HAL_SD_WriteBlocks+0x46>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002c62:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c68:	e7ea      	b.n	8002c40 <HAL_SD_WriteBlocks+0x1c>
    hsd->State = HAL_SD_STATE_BUSY;
 8002c6a:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8002c6c:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8002c6e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002c72:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->Instance->DCTRL = 0U;
 8002c74:	62c1      	str	r1, [r0, #44]	@ 0x2c
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8002c76:	2190      	movs	r1, #144	@ 0x90
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002c78:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002c80:	ea4f 2347 	mov.w	r3, r7, lsl #9
      add *= BLOCKSIZE;
 8002c84:	bf18      	it	ne
 8002c86:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002c8a:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e9cd 1304 	strd	r1, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002c92:	a902      	add	r1, sp, #8
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8002c94:	e9cd 3306 	strd	r3, r3, [sp, #24]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002c98:	f000 fc9b 	bl	80035d2 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8002c9c:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 8002c9e:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8002ca0:	68c3      	ldr	r3, [r0, #12]
 8002ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ca6:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 8002ca8:	d911      	bls.n	8002cce <HAL_SD_WriteBlocks+0xaa>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002caa:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002cac:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002cae:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002cb0:	f000 fdc4 	bl	800383c <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002cb4:	6823      	ldr	r3, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 8002cb6:	b180      	cbz	r0, 8002cda <HAL_SD_WriteBlocks+0xb6>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002cb8:	4a3f      	ldr	r2, [pc, #252]	@ (8002db8 <HAL_SD_WriteBlocks+0x194>)
 8002cba:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002cbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002cbe:	4303      	orrs	r3, r0
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002cc0:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8002ccc:	e7b9      	b.n	8002c42 <HAL_SD_WriteBlocks+0x1e>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002cce:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002cd0:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002cd2:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002cd4:	f000 fd98 	bl	8003808 <SDMMC_CmdWriteSingleBlock>
 8002cd8:	e7ec      	b.n	8002cb4 <HAL_SD_WriteBlocks+0x90>
    dataremaining = config.DataLength;
 8002cda:	9e03      	ldr	r6, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8002cdc:	6820      	ldr	r0, [r4, #0]
 8002cde:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002ce0:	f413 7f8d 	tst.w	r3, #282	@ 0x11a
 8002ce4:	d010      	beq.n	8002d08 <HAL_SD_WriteBlocks+0xe4>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8002ce6:	68c3      	ldr	r3, [r0, #12]
 8002ce8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cec:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002cee:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002cf0:	05db      	lsls	r3, r3, #23
 8002cf2:	d52d      	bpl.n	8002d50 <HAL_SD_WriteBlocks+0x12c>
 8002cf4:	2f01      	cmp	r7, #1
 8002cf6:	d92b      	bls.n	8002d50 <HAL_SD_WriteBlocks+0x12c>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8002cf8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d028      	beq.n	8002d50 <HAL_SD_WriteBlocks+0x12c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002cfe:	f000 fdb7 	bl	8003870 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8002d02:	b328      	cbz	r0, 8002d50 <HAL_SD_WriteBlocks+0x12c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	e7d7      	b.n	8002cb8 <HAL_SD_WriteBlocks+0x94>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 8002d08:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002d0a:	045a      	lsls	r2, r3, #17
 8002d0c:	d50d      	bpl.n	8002d2a <HAL_SD_WriteBlocks+0x106>
 8002d0e:	2e1f      	cmp	r6, #31
 8002d10:	d90b      	bls.n	8002d2a <HAL_SD_WriteBlocks+0x106>
 8002d12:	f105 0a20 	add.w	sl, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002d16:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8002d1a:	a901      	add	r1, sp, #4
 8002d1c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002d1e:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8002d20:	f000 fc31 	bl	8003586 <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8002d24:	45aa      	cmp	sl, r5
 8002d26:	d1f6      	bne.n	8002d16 <HAL_SD_WriteBlocks+0xf2>
        dataremaining -= SDMMC_FIFO_SIZE;
 8002d28:	3e20      	subs	r6, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8002d2a:	f7fd fe79 	bl	8000a20 <HAL_GetTick>
 8002d2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002d30:	eba0 0008 	sub.w	r0, r0, r8
 8002d34:	4298      	cmp	r0, r3
 8002d36:	d3d1      	bcc.n	8002cdc <HAL_SD_WriteBlocks+0xb8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d38:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8002d3a:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d3c:	4a1e      	ldr	r2, [pc, #120]	@ (8002db8 <HAL_SD_WriteBlocks+0x194>)
 8002d3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002d40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d42:	6363      	str	r3, [r4, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8002d4e:	e779      	b.n	8002c44 <HAL_SD_WriteBlocks+0x20>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d54:	f011 0108 	ands.w	r1, r1, #8
 8002d58:	d005      	beq.n	8002d66 <HAL_SD_WriteBlocks+0x142>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d5a:	4a17      	ldr	r2, [pc, #92]	@ (8002db8 <HAL_SD_WriteBlocks+0x194>)
 8002d5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002d5e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d60:	f043 0308 	orr.w	r3, r3, #8
 8002d64:	e7ac      	b.n	8002cc0 <HAL_SD_WriteBlocks+0x9c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8002d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d68:	f012 0202 	ands.w	r2, r2, #2
 8002d6c:	d00a      	beq.n	8002d84 <HAL_SD_WriteBlocks+0x160>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d6e:	4a12      	ldr	r2, [pc, #72]	@ (8002db8 <HAL_SD_WriteBlocks+0x194>)
 8002d70:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002d72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8002d80:	62e1      	str	r1, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8002d82:	e75e      	b.n	8002c42 <HAL_SD_WriteBlocks+0x1e>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8002d84:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002d86:	f010 0010 	ands.w	r0, r0, #16
 8002d8a:	d00a      	beq.n	8002da2 <HAL_SD_WriteBlocks+0x17e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d8c:	490a      	ldr	r1, [pc, #40]	@ (8002db8 <HAL_SD_WriteBlocks+0x194>)
 8002d8e:	6399      	str	r1, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002d90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d92:	f043 0310 	orr.w	r3, r3, #16
 8002d96:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8002d9e:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8002da0:	e74f      	b.n	8002c42 <HAL_SD_WriteBlocks+0x1e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002da2:	4a06      	ldr	r2, [pc, #24]	@ (8002dbc <HAL_SD_WriteBlocks+0x198>)
 8002da4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002da6:	2301      	movs	r3, #1
 8002da8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    return HAL_OK;
 8002dac:	e74a      	b.n	8002c44 <HAL_SD_WriteBlocks+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002dae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002db0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002db4:	e744      	b.n	8002c40 <HAL_SD_WriteBlocks+0x1c>
 8002db6:	bf00      	nop
 8002db8:	1fe00fff 	.word	0x1fe00fff
 8002dbc:	18000f3a 	.word	0x18000f3a

08002dc0 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002dc0:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
{
 8002dc2:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002dc4:	0f90      	lsrs	r0, r2, #30
{
 8002dc6:	b510      	push	{r4, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002dc8:	7008      	strb	r0, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002dca:	f3c2 6083 	ubfx	r0, r2, #26, #4
 8002dce:	7048      	strb	r0, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002dd0:	f3c2 6001 	ubfx	r0, r2, #24, #2
 8002dd4:	7088      	strb	r0, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002dd6:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8002dda:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002ddc:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002de0:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002de2:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002de4:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002de6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002de8:	0d10      	lsrs	r0, r2, #20
 8002dea:	80c8      	strh	r0, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002dec:	f3c2 4003 	ubfx	r0, r2, #16, #4
 8002df0:	7208      	strb	r0, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002df2:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8002df6:	7248      	strb	r0, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002df8:	f3c2 3080 	ubfx	r0, r2, #14, #1
 8002dfc:	7288      	strb	r0, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002dfe:	f3c2 3040 	ubfx	r0, r2, #13, #1
 8002e02:	72c8      	strb	r0, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002e04:	f3c2 3000 	ubfx	r0, r2, #12, #1
 8002e08:	7308      	strb	r0, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	7348      	strb	r0, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 8002e0e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d16b      	bne.n	8002eec <HAL_SD_GetCardCSD+0x12c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002e14:	f640 74fc 	movw	r4, #4092	@ 0xffc
 8002e18:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002e1a:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 8002e1e:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8002e22:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002e24:	f3c0 62c2 	ubfx	r2, r0, #27, #3
 8002e28:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002e2a:	f3c0 6202 	ubfx	r2, r0, #24, #3
 8002e2e:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002e30:	f3c0 5242 	ubfx	r2, r0, #21, #3
 8002e34:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002e36:	f3c0 4282 	ubfx	r2, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002e3a:	f3c0 30c2 	ubfx	r0, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002e3e:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002e40:	7608      	strb	r0, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002e42:	6908      	ldr	r0, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002e44:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002e46:	3001      	adds	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002e48:	f002 0207 	and.w	r2, r2, #7
 8002e4c:	3202      	adds	r2, #2
 8002e4e:	4090      	lsls	r0, r2
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002e50:	2201      	movs	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002e52:	6498      	str	r0, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002e54:	7a0c      	ldrb	r4, [r1, #8]
 8002e56:	f004 040f 	and.w	r4, r4, #15
 8002e5a:	40a2      	lsls	r2, r4
 8002e5c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8002e5e:	0a52      	lsrs	r2, r2, #9
 8002e60:	4342      	muls	r2, r0
 8002e62:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8002e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e68:	655a      	str	r2, [r3, #84]	@ 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002e6a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e6c:	f3c2 3080 	ubfx	r0, r2, #14, #1
 8002e70:	7648      	strb	r0, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002e72:	f3c2 10c6 	ubfx	r0, r2, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002e76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002e7a:	7688      	strb	r0, [r1, #26]
  pCSD->Reserved3 = 0;
 8002e7c:	2000      	movs	r0, #0
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002e7e:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002e80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e82:	0fda      	lsrs	r2, r3, #31
 8002e84:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002e86:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8002e8a:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002e8c:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8002e90:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002e92:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8002e96:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002e98:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8002e9c:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002ea0:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8002ea4:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002ea8:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002eac:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002eb0:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002eb4:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8002eb8:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002ebc:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8002ec0:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002ec4:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8002ec8:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002ecc:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8002ed0:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002ed4:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002ed8:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002edc:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002ee0:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
  return HAL_OK;
 8002eea:	e01b      	b.n	8002f24 <HAL_SD_GetCardCSD+0x164>
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002eec:	2801      	cmp	r0, #1
 8002eee:	d10f      	bne.n	8002f10 <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002ef0:	0412      	lsls	r2, r2, #16
 8002ef2:	f8b3 0066 	ldrh.w	r0, [r3, #102]	@ 0x66
 8002ef6:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8002efa:	4302      	orrs	r2, r0
 8002efc:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002efe:	690a      	ldr	r2, [r1, #16]
 8002f00:	3201      	adds	r2, #1
 8002f02:	0292      	lsls	r2, r2, #10
 8002f04:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002f06:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8002f08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f0c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002f0e:	e7a9      	b.n	8002e64 <HAL_SD_GetCardCSD+0xa4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002f10:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8002f12:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002f14:	4904      	ldr	r1, [pc, #16]	@ (8002f28 <HAL_SD_GetCardCSD+0x168>)
 8002f16:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f1a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002f1e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8002f20:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
}
 8002f24:	bd10      	pop	{r4, pc}
 8002f26:	bf00      	nop
 8002f28:	1fe00fff 	.word	0x1fe00fff

08002f2c <HAL_SD_InitCard>:
{
 8002f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002f2e:	2300      	movs	r3, #0
{
 8002f30:	b095      	sub	sp, #84	@ 0x54
 8002f32:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8002f34:	2100      	movs	r1, #0
 8002f36:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002f3a:	e9cd 3304 	strd	r3, r3, [sp, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002f3e:	e9cd 3306 	strd	r3, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8002f42:	f7ff fbc5 	bl	80026d0 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8002f46:	4605      	mov	r5, r0
 8002f48:	b948      	cbnz	r0, 8002f5e <HAL_SD_InitCard+0x32>
    hsd->State = HAL_SD_STATE_READY;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8002f50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
    hsd->ErrorCode |= errorstate;
 8002f54:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8002f56:	2501      	movs	r5, #1
}
 8002f58:	4628      	mov	r0, r5
 8002f5a:	b015      	add	sp, #84	@ 0x54
 8002f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8002f5e:	4e7b      	ldr	r6, [pc, #492]	@ (800314c <HAL_SD_InitCard+0x220>)
  (void)SDMMC_Init(hsd->Instance, Init);
 8002f60:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8002f62:	fbb0 f6f6 	udiv	r6, r0, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 8002f66:	9807      	ldr	r0, [sp, #28]
 8002f68:	4631      	mov	r1, r6
 8002f6a:	9608      	str	r6, [sp, #32]
 8002f6c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8002f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f72:	6820      	ldr	r0, [r4, #0]
 8002f74:	f000 faea 	bl	800354c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002f78:	6820      	ldr	r0, [r4, #0]
 8002f7a:	f000 fb09 	bl	8003590 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 8002f7e:	4b74      	ldr	r3, [pc, #464]	@ (8003150 <HAL_SD_InitCard+0x224>)
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8002f80:	4874      	ldr	r0, [pc, #464]	@ (8003154 <HAL_SD_InitCard+0x228>)
  if (Init.ClockDiv != 0U)
 8002f82:	429d      	cmp	r5, r3
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8002f84:	bf84      	itt	hi
 8002f86:	0076      	lslhi	r6, r6, #1
 8002f88:	fbb5 f5f6 	udivhi	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8002f8c:	fbb0 f0f5 	udiv	r0, r0, r5
 8002f90:	3001      	adds	r0, #1
 8002f92:	f7fd fd4b 	bl	8000a2c <HAL_Delay>
  __IO uint32_t count = 0U;
 8002f96:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002f98:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8002f9a:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002f9c:	f000 fb2c 	bl	80035f8 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8002fa0:	4605      	mov	r5, r0
 8002fa2:	b9a8      	cbnz	r0, 8002fd0 <HAL_SD_InitCard+0xa4>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002fa4:	6820      	ldr	r0, [r4, #0]
 8002fa6:	f000 fe41 	bl	8003c2c <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8002faa:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8002fae:	d106      	bne.n	8002fbe <HAL_SD_InitCard+0x92>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002fb0:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002fb2:	63e5      	str	r5, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002fb4:	f000 fb20 	bl	80035f8 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8002fb8:	b180      	cbz	r0, 8002fdc <HAL_SD_InitCard+0xb0>
      return errorstate;
 8002fba:	4605      	mov	r5, r0
 8002fbc:	e008      	b.n	8002fd0 <HAL_SD_InitCard+0xa4>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	63e3      	str	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	6820      	ldr	r0, [r4, #0]
 8002fc6:	f000 fc97 	bl	80038f8 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8002fca:	b150      	cbz	r0, 8002fe2 <HAL_SD_InitCard+0xb6>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002fcc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8002fd6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002fd8:	432b      	orrs	r3, r5
 8002fda:	e7bb      	b.n	8002f54 <HAL_SD_InitCard+0x28>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8002fdc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d0ef      	beq.n	8002fc2 <HAL_SD_InitCard+0x96>
{
 8002fe2:	2100      	movs	r1, #0
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002fe4:	f64f 76fe 	movw	r6, #65534	@ 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8002fe8:	4f5b      	ldr	r7, [pc, #364]	@ (8003158 <HAL_SD_InitCard+0x22c>)
 8002fea:	e014      	b.n	8003016 <HAL_SD_InitCard+0xea>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002fec:	6820      	ldr	r0, [r4, #0]
 8002fee:	f000 fc83 	bl	80038f8 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d1eb      	bne.n	8002fd0 <HAL_SD_InitCard+0xa4>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8002ff8:	4639      	mov	r1, r7
 8002ffa:	6820      	ldr	r0, [r4, #0]
 8002ffc:	f000 fd78 	bl	8003af0 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8003000:	2800      	cmp	r0, #0
 8003002:	d1e3      	bne.n	8002fcc <HAL_SD_InitCard+0xa0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003004:	4629      	mov	r1, r5
 8003006:	6820      	ldr	r0, [r4, #0]
 8003008:	f000 fae0 	bl	80035cc <SDMMC_GetResponse>
    count++;
 800300c:	9b03      	ldr	r3, [sp, #12]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800300e:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003010:	0fc1      	lsrs	r1, r0, #31
    count++;
 8003012:	3301      	adds	r3, #1
 8003014:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003016:	9b03      	ldr	r3, [sp, #12]
 8003018:	42b3      	cmp	r3, r6
 800301a:	d801      	bhi.n	8003020 <HAL_SD_InitCard+0xf4>
 800301c:	2900      	cmp	r1, #0
 800301e:	d0e5      	beq.n	8002fec <HAL_SD_InitCard+0xc0>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8003020:	9b03      	ldr	r3, [sp, #12]
 8003022:	42b3      	cmp	r3, r6
 8003024:	d814      	bhi.n	8003050 <HAL_SD_InitCard+0x124>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8003026:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	63a5      	str	r5, [r4, #56]	@ 0x38
 800302e:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 8003032:	f7fd fcf5 	bl	8000a20 <HAL_GetTick>
 8003036:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	f000 faaf 	bl	800359c <SDMMC_GetPowerState>
 800303e:	b950      	cbnz	r0, 8003056 <HAL_SD_InitCard+0x12a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003040:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8003044:	2301      	movs	r3, #1
 8003046:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800304a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800304c:	430b      	orrs	r3, r1
 800304e:	e781      	b.n	8002f54 <HAL_SD_InitCard+0x28>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003050:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8003054:	e7bc      	b.n	8002fd0 <HAL_SD_InitCard+0xa4>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8003056:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003058:	6820      	ldr	r0, [r4, #0]
  if (hsd->SdCard.CardType != CARD_SECURED)
 800305a:	2b03      	cmp	r3, #3
 800305c:	d03d      	beq.n	80030da <HAL_SD_InitCard+0x1ae>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800305e:	f000 fcf5 	bl	8003a4c <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8003062:	4601      	mov	r1, r0
 8003064:	2800      	cmp	r0, #0
 8003066:	d1ed      	bne.n	8003044 <HAL_SD_InitCard+0x118>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003068:	6820      	ldr	r0, [r4, #0]
 800306a:	f000 faaf 	bl	80035cc <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800306e:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003070:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003072:	6820      	ldr	r0, [r4, #0]
 8003074:	f000 faaa 	bl	80035cc <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003078:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800307a:	6720      	str	r0, [r4, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800307c:	6820      	ldr	r0, [r4, #0]
 800307e:	f000 faa5 	bl	80035cc <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003082:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003084:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003086:	6820      	ldr	r0, [r4, #0]
 8003088:	f000 faa0 	bl	80035cc <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800308c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800308e:	67a0      	str	r0, [r4, #120]	@ 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 8003090:	2b03      	cmp	r3, #3
 8003092:	d022      	beq.n	80030da <HAL_SD_InitCard+0x1ae>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8003094:	f241 3687 	movw	r6, #4999	@ 0x1387
    while (sd_rca == 0U)
 8003098:	f8bd 100a 	ldrh.w	r1, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800309c:	6820      	ldr	r0, [r4, #0]
    while (sd_rca == 0U)
 800309e:	b359      	cbz	r1, 80030f8 <HAL_SD_InitCard+0x1cc>
  if (hsd->SdCard.CardType != CARD_SECURED)
 80030a0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d019      	beq.n	80030da <HAL_SD_InitCard+0x1ae>
    hsd->SdCard.RelCardAdd = sd_rca;
 80030a6:	6461      	str	r1, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80030a8:	0409      	lsls	r1, r1, #16
 80030aa:	f000 fce6 	bl	8003a7a <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 80030ae:	4601      	mov	r1, r0
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d1c7      	bne.n	8003044 <HAL_SD_InitCard+0x118>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80030b4:	6820      	ldr	r0, [r4, #0]
 80030b6:	f000 fa89 	bl	80035cc <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80030ba:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80030bc:	65e0      	str	r0, [r4, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80030be:	6820      	ldr	r0, [r4, #0]
 80030c0:	f000 fa84 	bl	80035cc <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80030c4:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80030c6:	6620      	str	r0, [r4, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80030c8:	6820      	ldr	r0, [r4, #0]
 80030ca:	f000 fa7f 	bl	80035cc <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80030ce:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80030d0:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80030d2:	6820      	ldr	r0, [r4, #0]
 80030d4:	f000 fa7a 	bl	80035cc <SDMMC_GetResponse>
 80030d8:	66a0      	str	r0, [r4, #104]	@ 0x68
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80030da:	2104      	movs	r1, #4
 80030dc:	6820      	ldr	r0, [r4, #0]
 80030de:	f000 fa75 	bl	80035cc <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80030e2:	a909      	add	r1, sp, #36	@ 0x24
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80030e4:	0d00      	lsrs	r0, r0, #20
 80030e6:	6420      	str	r0, [r4, #64]	@ 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80030e8:	4620      	mov	r0, r4
 80030ea:	f7ff fe69 	bl	8002dc0 <HAL_SD_GetCardCSD>
 80030ee:	4605      	mov	r5, r0
 80030f0:	b188      	cbz	r0, 8003116 <HAL_SD_InitCard+0x1ea>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80030f2:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80030f6:	e7a5      	b.n	8003044 <HAL_SD_InitCard+0x118>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80030f8:	f10d 010a 	add.w	r1, sp, #10
 80030fc:	f000 fd52 	bl	8003ba4 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 8003100:	4601      	mov	r1, r0
 8003102:	2800      	cmp	r0, #0
 8003104:	d19e      	bne.n	8003044 <HAL_SD_InitCard+0x118>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8003106:	f7fd fc8b 	bl	8000a20 <HAL_GetTick>
 800310a:	1b40      	subs	r0, r0, r5
 800310c:	42b0      	cmp	r0, r6
 800310e:	d9c3      	bls.n	8003098 <HAL_SD_InitCard+0x16c>
        return HAL_SD_ERROR_TIMEOUT;
 8003110:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 8003114:	e796      	b.n	8003044 <HAL_SD_InitCard+0x118>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003116:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003118:	6820      	ldr	r0, [r4, #0]
 800311a:	0409      	lsls	r1, r1, #16
 800311c:	f000 fbd2 	bl	80038c4 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003120:	4601      	mov	r1, r0
 8003122:	2800      	cmp	r0, #0
 8003124:	d18e      	bne.n	8003044 <HAL_SD_InitCard+0x118>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003126:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800312a:	6820      	ldr	r0, [r4, #0]
 800312c:	f000 fb1e 	bl	800376c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003130:	2800      	cmp	r0, #0
 8003132:	f43f af11 	beq.w	8002f58 <HAL_SD_InitCard+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	4a08      	ldr	r2, [pc, #32]	@ (800315c <HAL_SD_InitCard+0x230>)
 800313a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800313c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800313e:	4303      	orrs	r3, r0
 8003140:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8003142:	2301      	movs	r3, #1
 8003144:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    return HAL_ERROR;
 8003148:	e705      	b.n	8002f56 <HAL_SD_InitCard+0x2a>
 800314a:	bf00      	nop
 800314c:	000c3500 	.word	0x000c3500
 8003150:	000c34ff 	.word	0x000c34ff
 8003154:	00012110 	.word	0x00012110
 8003158:	c1100000 	.word	0xc1100000
 800315c:	1fe00fff 	.word	0x1fe00fff

08003160 <HAL_SD_GetCardStatus>:
{
 8003160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsd->State == HAL_SD_STATE_BUSY)
 8003164:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
{
 8003168:	b096      	sub	sp, #88	@ 0x58
 800316a:	4604      	mov	r4, r0
 800316c:	460d      	mov	r5, r1
  if (hsd->State == HAL_SD_STATE_BUSY)
 800316e:	2b03      	cmp	r3, #3
 8003170:	f000 80ab 	beq.w	80032ca <HAL_SD_GetCardStatus+0x16a>
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7fd fc54 	bl	8000a20 <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003178:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800317a:	4606      	mov	r6, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800317c:	6820      	ldr	r0, [r4, #0]
 800317e:	f000 fa25 	bl	80035cc <SDMMC_GetResponse>
 8003182:	0183      	lsls	r3, r0, #6
 8003184:	f100 80a6 	bmi.w	80032d4 <HAL_SD_GetCardStatus+0x174>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8003188:	2140      	movs	r1, #64	@ 0x40
 800318a:	6820      	ldr	r0, [r4, #0]
 800318c:	f000 faee 	bl	800376c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003190:	b158      	cbz	r0, 80031aa <HAL_SD_GetCardStatus+0x4a>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8003192:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003194:	6363      	str	r3, [r4, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003196:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8003198:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800319a:	4a52      	ldr	r2, [pc, #328]	@ (80032e4 <HAL_SD_GetCardStatus+0x184>)
 800319c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800319e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80031a0:	4303      	orrs	r3, r0
 80031a2:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80031a4:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
    status = HAL_ERROR;
 80031a8:	e082      	b.n	80032b0 <HAL_SD_GetCardStatus+0x150>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80031aa:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80031ac:	6820      	ldr	r0, [r4, #0]
 80031ae:	0409      	lsls	r1, r1, #16
 80031b0:	f000 fba2 	bl	80038f8 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d1ec      	bne.n	8003192 <HAL_SD_GetCardStatus+0x32>
  config.DataLength    = 64U;
 80031b8:	2340      	movs	r3, #64	@ 0x40
 80031ba:	f04f 37ff 	mov.w	r7, #4294967295
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80031be:	f04f 0c60 	mov.w	ip, #96	@ 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80031c2:	9004      	str	r0, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80031c4:	4669      	mov	r1, sp
 80031c6:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 80031c8:	e9cd 7300 	strd	r7, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80031cc:	2302      	movs	r3, #2
 80031ce:	e9cd c302 	strd	ip, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80031d2:	2301      	movs	r3, #1
 80031d4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80031d6:	f000 f9fc 	bl	80035d2 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80031da:	6820      	ldr	r0, [r4, #0]
 80031dc:	f000 fbf4 	bl	80039c8 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d1d6      	bne.n	8003192 <HAL_SD_GetCardStatus+0x32>
  uint32_t *pData = pSDstatus;
 80031e4:	af06      	add	r7, sp, #24
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ea:	f412 7f95 	tst.w	r2, #298	@ 0x12a
 80031ee:	d00a      	beq.n	8003206 <HAL_SD_GetCardStatus+0xa6>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80031f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031f2:	0711      	lsls	r1, r2, #28
 80031f4:	d471      	bmi.n	80032da <HAL_SD_GetCardStatus+0x17a>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80031f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031f8:	0792      	lsls	r2, r2, #30
 80031fa:	d470      	bmi.n	80032de <HAL_SD_GetCardStatus+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80031fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fe:	069b      	lsls	r3, r3, #26
 8003200:	d51e      	bpl.n	8003240 <HAL_SD_GetCardStatus+0xe0>
    return HAL_SD_ERROR_RX_OVERRUN;
 8003202:	2020      	movs	r0, #32
 8003204:	e7c7      	b.n	8003196 <HAL_SD_GetCardStatus+0x36>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8003206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003208:	0418      	lsls	r0, r3, #16
 800320a:	d508      	bpl.n	800321e <HAL_SD_GetCardStatus+0xbe>
 800320c:	f107 0820 	add.w	r8, r7, #32
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8003210:	6820      	ldr	r0, [r4, #0]
 8003212:	f000 f9b5 	bl	8003580 <SDMMC_ReadFIFO>
 8003216:	f847 0b04 	str.w	r0, [r7], #4
      for (count = 0U; count < 8U; count++)
 800321a:	4547      	cmp	r7, r8
 800321c:	d1f8      	bne.n	8003210 <HAL_SD_GetCardStatus+0xb0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800321e:	f7fd fbff 	bl	8000a20 <HAL_GetTick>
 8003222:	1b80      	subs	r0, r0, r6
 8003224:	3001      	adds	r0, #1
 8003226:	d1de      	bne.n	80031e6 <HAL_SD_GetCardStatus+0x86>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003228:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800322c:	e7b3      	b.n	8003196 <HAL_SD_GetCardStatus+0x36>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800322e:	f000 f9a7 	bl	8003580 <SDMMC_ReadFIFO>
 8003232:	f847 0b04 	str.w	r0, [r7], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8003236:	f7fd fbf3 	bl	8000a20 <HAL_GetTick>
 800323a:	1b80      	subs	r0, r0, r6
 800323c:	3001      	adds	r0, #1
 800323e:	d0f3      	beq.n	8003228 <HAL_SD_GetCardStatus+0xc8>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8003240:	6820      	ldr	r0, [r4, #0]
 8003242:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8003244:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003248:	d1f1      	bne.n	800322e <HAL_SD_GetCardStatus+0xce>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800324a:	9906      	ldr	r1, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800324c:	4b26      	ldr	r3, [pc, #152]	@ (80032e8 <HAL_SD_GetCardStatus+0x188>)
 800324e:	6383      	str	r3, [r0, #56]	@ 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8003250:	f3c1 1381 	ubfx	r3, r1, #6, #2
 8003254:	702b      	strb	r3, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8003256:	f3c1 1340 	ubfx	r3, r1, #5, #1
 800325a:	706b      	strb	r3, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800325c:	0a0b      	lsrs	r3, r1, #8
 800325e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003262:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8003266:	b29b      	uxth	r3, r3
 8003268:	806b      	strh	r3, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800326a:	9b07      	ldr	r3, [sp, #28]
 800326c:	ba1b      	rev	r3, r3
 800326e:	606b      	str	r3, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8003270:	9b08      	ldr	r3, [sp, #32]
 8003272:	b2d9      	uxtb	r1, r3
 8003274:	7229      	strb	r1, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8003276:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800327a:	7269      	strb	r1, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800327c:	f3c3 5103 	ubfx	r1, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8003280:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8003282:	72a9      	strb	r1, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8003284:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003286:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800328a:	b2c8      	uxtb	r0, r1
 800328c:	4303      	orrs	r3, r0
 800328e:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8003290:	f3c1 2385 	ubfx	r3, r1, #10, #6
 8003294:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8003296:	f3c1 2301 	ubfx	r3, r1, #8, #2
 800329a:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800329c:	f3c1 1303 	ubfx	r3, r1, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80032a0:	f001 010f 	and.w	r1, r1, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80032a4:	742b      	strb	r3, [r5, #16]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80032a6:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80032aa:	7469      	strb	r1, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80032ac:	74ab      	strb	r3, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
 80032ae:	4615      	mov	r5, r2
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80032b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032b4:	6820      	ldr	r0, [r4, #0]
 80032b6:	f000 fa59 	bl	800376c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80032ba:	b138      	cbz	r0, 80032cc <HAL_SD_GetCardStatus+0x16c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	4a09      	ldr	r2, [pc, #36]	@ (80032e4 <HAL_SD_GetCardStatus+0x184>)
 80032c0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80032c2:	2301      	movs	r3, #1
    hsd->ErrorCode = errorstate;
 80032c4:	6360      	str	r0, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80032c6:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    return HAL_ERROR;
 80032ca:	2501      	movs	r5, #1
}
 80032cc:	4628      	mov	r0, r5
 80032ce:	b016      	add	sp, #88	@ 0x58
 80032d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80032d4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80032d8:	e75d      	b.n	8003196 <HAL_SD_GetCardStatus+0x36>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80032da:	2008      	movs	r0, #8
 80032dc:	e75b      	b.n	8003196 <HAL_SD_GetCardStatus+0x36>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80032de:	2002      	movs	r0, #2
 80032e0:	e759      	b.n	8003196 <HAL_SD_GetCardStatus+0x36>
 80032e2:	bf00      	nop
 80032e4:	1fe00fff 	.word	0x1fe00fff
 80032e8:	18000f3a 	.word	0x18000f3a

080032ec <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80032ec:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80032ee:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80032f0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80032f2:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80032f4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80032f6:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80032f8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80032fa:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80032fc:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80032fe:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003300:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8003302:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003304:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003306:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003308:	6d43      	ldr	r3, [r0, #84]	@ 0x54
}
 800330a:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800330c:	61cb      	str	r3, [r1, #28]
}
 800330e:	4770      	bx	lr

08003310 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8003310:	2303      	movs	r3, #3
{
 8003312:	b530      	push	{r4, r5, lr}
 8003314:	b089      	sub	sp, #36	@ 0x24
  hsd->State = HAL_SD_STATE_BUSY;
 8003316:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 800331a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
{
 800331c:	4604      	mov	r4, r0
 800331e:	460d      	mov	r5, r1
  if (hsd->SdCard.CardType != CARD_SECURED)
 8003320:	2b03      	cmp	r3, #3
 8003322:	d002      	beq.n	800332a <HAL_SD_ConfigWideBusOperation+0x1a>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8003324:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003328:	d103      	bne.n	8003332 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800332a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003330:	e01e      	b.n	8003370 <HAL_SD_ConfigWideBusOperation+0x60>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8003332:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8003336:	d123      	bne.n	8003380 <HAL_SD_ConfigWideBusOperation+0x70>
  uint32_t scr[2U] = {0UL, 0UL};
 8003338:	2100      	movs	r1, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800333a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800333c:	e9cd 1103 	strd	r1, r1, [sp, #12]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003340:	f000 f944 	bl	80035cc <SDMMC_GetResponse>
 8003344:	0180      	lsls	r0, r0, #6
 8003346:	d435      	bmi.n	80033b4 <HAL_SD_ConfigWideBusOperation+0xa4>
  errorstate = SD_FindSCR(hsd, scr);
 8003348:	a903      	add	r1, sp, #12
 800334a:	4620      	mov	r0, r4
 800334c:	f7ff fb28 	bl	80029a0 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003350:	b960      	cbnz	r0, 800336c <HAL_SD_ConfigWideBusOperation+0x5c>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003352:	9b04      	ldr	r3, [sp, #16]
 8003354:	0359      	lsls	r1, r3, #13
 8003356:	d530      	bpl.n	80033ba <HAL_SD_ConfigWideBusOperation+0xaa>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003358:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800335a:	6820      	ldr	r0, [r4, #0]
 800335c:	0409      	lsls	r1, r1, #16
 800335e:	f000 facb 	bl	80038f8 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8003362:	b918      	cbnz	r0, 800336c <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003364:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003366:	6820      	ldr	r0, [r4, #0]
 8003368:	f000 fae0 	bl	800392c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800336c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800336e:	4303      	orrs	r3, r0
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003370:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003372:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003374:	b343      	cbz	r3, 80033c8 <HAL_SD_ConfigWideBusOperation+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	4a3d      	ldr	r2, [pc, #244]	@ (8003470 <HAL_SD_ConfigWideBusOperation+0x160>)
 800337a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800337c:	2501      	movs	r5, #1
 800337e:	e050      	b.n	8003422 <HAL_SD_ConfigWideBusOperation+0x112>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8003380:	b9f1      	cbnz	r1, 80033c0 <HAL_SD_ConfigWideBusOperation+0xb0>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003382:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8003384:	e9cd 1103 	strd	r1, r1, [sp, #12]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003388:	f000 f920 	bl	80035cc <SDMMC_GetResponse>
 800338c:	0182      	lsls	r2, r0, #6
 800338e:	d411      	bmi.n	80033b4 <HAL_SD_ConfigWideBusOperation+0xa4>
  errorstate = SD_FindSCR(hsd, scr);
 8003390:	a903      	add	r1, sp, #12
 8003392:	4620      	mov	r0, r4
 8003394:	f7ff fb04 	bl	80029a0 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003398:	2800      	cmp	r0, #0
 800339a:	d1e7      	bne.n	800336c <HAL_SD_ConfigWideBusOperation+0x5c>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800339c:	9b04      	ldr	r3, [sp, #16]
 800339e:	03db      	lsls	r3, r3, #15
 80033a0:	d50b      	bpl.n	80033ba <HAL_SD_ConfigWideBusOperation+0xaa>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80033a2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80033a4:	6820      	ldr	r0, [r4, #0]
 80033a6:	0409      	lsls	r1, r1, #16
 80033a8:	f000 faa6 	bl	80038f8 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d1dd      	bne.n	800336c <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80033b0:	4601      	mov	r1, r0
 80033b2:	e7d8      	b.n	8003366 <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80033b4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80033b8:	e7d8      	b.n	800336c <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80033ba:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80033be:	e7d5      	b.n	800336c <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033c0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80033c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033c6:	e7d3      	b.n	8003370 <HAL_SD_ConfigWideBusOperation+0x60>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80033c8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80033cc:	2100      	movs	r1, #0
 80033ce:	f7ff f97f 	bl	80026d0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 80033d2:	2800      	cmp	r0, #0
 80033d4:	d047      	beq.n	8003466 <HAL_SD_ConfigWideBusOperation+0x156>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80033d6:	6863      	ldr	r3, [r4, #4]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80033d8:	4926      	ldr	r1, [pc, #152]	@ (8003474 <HAL_SD_ConfigWideBusOperation+0x164>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80033da:	9303      	str	r3, [sp, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80033dc:	68a3      	ldr	r3, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80033de:	fbb0 f2f1 	udiv	r2, r0, r1
      Init.BusWide             = WideMode;
 80033e2:	e9cd 3504 	strd	r3, r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80033e6:	6923      	ldr	r3, [r4, #16]
 80033e8:	9306      	str	r3, [sp, #24]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80033ea:	6963      	ldr	r3, [r4, #20]
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d20c      	bcs.n	800340a <HAL_SD_ConfigWideBusOperation+0xfa>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80033f0:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 80033f2:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80033f6:	d008      	beq.n	800340a <HAL_SD_ConfigWideBusOperation+0xfa>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80033f8:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80033fc:	d129      	bne.n	8003452 <HAL_SD_ConfigWideBusOperation+0x142>
        if (hsd->Init.ClockDiv == 0U)
 80033fe:	bb1b      	cbnz	r3, 8003448 <HAL_SD_ConfigWideBusOperation+0x138>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8003400:	4288      	cmp	r0, r1
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8003402:	d902      	bls.n	800340a <HAL_SD_ConfigWideBusOperation+0xfa>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8003404:	4b1c      	ldr	r3, [pc, #112]	@ (8003478 <HAL_SD_ConfigWideBusOperation+0x168>)
 8003406:	fbb0 f3f3 	udiv	r3, r0, r3
        Init.ClockDiv = hsd->Init.ClockDiv;
 800340a:	9307      	str	r3, [sp, #28]
      (void)SDMMC_Init(hsd->Instance, Init);
 800340c:	ab08      	add	r3, sp, #32
  HAL_StatusTypeDef status = HAL_OK;
 800340e:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 8003410:	e913 0003 	ldmdb	r3, {r0, r1}
 8003414:	ab03      	add	r3, sp, #12
 8003416:	e88d 0003 	stmia.w	sp, {r0, r1}
 800341a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800341c:	6820      	ldr	r0, [r4, #0]
 800341e:	f000 f895 	bl	800354c <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003422:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003426:	6820      	ldr	r0, [r4, #0]
 8003428:	f000 f9a0 	bl	800376c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800342c:	b130      	cbz	r0, 800343c <HAL_SD_ConfigWideBusOperation+0x12c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800342e:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8003430:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003432:	4a0f      	ldr	r2, [pc, #60]	@ (8003470 <HAL_SD_ConfigWideBusOperation+0x160>)
 8003434:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003436:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003438:	4303      	orrs	r3, r0
 800343a:	6363      	str	r3, [r4, #52]	@ 0x34
  hsd->State = HAL_SD_STATE_READY;
 800343c:	2301      	movs	r3, #1
}
 800343e:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8003440:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 8003444:	b009      	add	sp, #36	@ 0x24
 8003446:	bd30      	pop	{r4, r5, pc}
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8003448:	005a      	lsls	r2, r3, #1
 800344a:	fbb0 f2f2 	udiv	r2, r0, r2
 800344e:	428a      	cmp	r2, r1
 8003450:	e7d7      	b.n	8003402 <HAL_SD_ConfigWideBusOperation+0xf2>
        if (hsd->Init.ClockDiv == 0U)
 8003452:	490a      	ldr	r1, [pc, #40]	@ (800347c <HAL_SD_ConfigWideBusOperation+0x16c>)
 8003454:	b91b      	cbnz	r3, 800345e <HAL_SD_ConfigWideBusOperation+0x14e>
 8003456:	4288      	cmp	r0, r1
 8003458:	bf88      	it	hi
 800345a:	4613      	movhi	r3, r2
 800345c:	e7d5      	b.n	800340a <HAL_SD_ConfigWideBusOperation+0xfa>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800345e:	005d      	lsls	r5, r3, #1
 8003460:	fbb0 f0f5 	udiv	r0, r0, r5
 8003464:	e7f7      	b.n	8003456 <HAL_SD_ConfigWideBusOperation+0x146>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8003466:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003468:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800346c:	6363      	str	r3, [r4, #52]	@ 0x34
      status = HAL_ERROR;
 800346e:	e785      	b.n	800337c <HAL_SD_ConfigWideBusOperation+0x6c>
 8003470:	1fe00fff 	.word	0x1fe00fff
 8003474:	02faf080 	.word	0x02faf080
 8003478:	05f5e100 	.word	0x05f5e100
 800347c:	017d7840 	.word	0x017d7840

08003480 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003480:	6c41      	ldr	r1, [r0, #68]	@ 0x44
{
 8003482:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003484:	0409      	lsls	r1, r1, #16
{
 8003486:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003488:	6800      	ldr	r0, [r0, #0]
 800348a:	f000 fa83 	bl	8003994 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800348e:	4601      	mov	r1, r0
 8003490:	b928      	cbnz	r0, 800349e <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003492:	6820      	ldr	r0, [r4, #0]
 8003494:	f000 f89a 	bl	80035cc <SDMMC_GetResponse>
}
 8003498:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800349c:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 800349e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80034a0:	4303      	orrs	r3, r0
  uint32_t resp1 = 0;
 80034a2:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 80034a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80034a6:	e7f7      	b.n	8003498 <HAL_SD_GetCardState+0x18>

080034a8 <HAL_SD_Init>:
{
 80034a8:	b570      	push	{r4, r5, r6, lr}
  if (hsd == NULL)
 80034aa:	4604      	mov	r4, r0
{
 80034ac:	b086      	sub	sp, #24
  if (hsd == NULL)
 80034ae:	b918      	cbnz	r0, 80034b8 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 80034b0:	2501      	movs	r5, #1
}
 80034b2:	4628      	mov	r0, r5
 80034b4:	b006      	add	sp, #24
 80034b6:	bd70      	pop	{r4, r5, r6, pc}
  if (hsd->State == HAL_SD_STATE_RESET)
 80034b8:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80034bc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80034c0:	b913      	cbnz	r3, 80034c8 <HAL_SD_Init+0x20>
    hsd->Lock = HAL_UNLOCKED;
 80034c2:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 80034c4:	f7fd f912 	bl	80006ec <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80034c8:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80034ca:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80034cc:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80034d0:	f7ff fd2c 	bl	8002f2c <HAL_SD_InitCard>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d1eb      	bne.n	80034b0 <HAL_SD_Init+0x8>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80034d8:	a901      	add	r1, sp, #4
 80034da:	4620      	mov	r0, r4
 80034dc:	f7ff fe40 	bl	8003160 <HAL_SD_GetCardStatus>
 80034e0:	2800      	cmp	r0, #0
 80034e2:	d1e5      	bne.n	80034b0 <HAL_SD_Init+0x8>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80034e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 80034e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80034ea:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 80034ec:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 80034f0:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 80034f2:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80034f4:	d105      	bne.n	8003502 <HAL_SD_Init+0x5a>
 80034f6:	4313      	orrs	r3, r2
 80034f8:	bf14      	ite	ne
 80034fa:	f44f 7000 	movne.w	r0, #512	@ 0x200
 80034fe:	f44f 7080 	moveq.w	r0, #256	@ 0x100
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8003502:	65a0      	str	r0, [r4, #88]	@ 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8003504:	4620      	mov	r0, r4
 8003506:	68e1      	ldr	r1, [r4, #12]
 8003508:	f7ff ff02 	bl	8003310 <HAL_SD_ConfigWideBusOperation>
 800350c:	4605      	mov	r5, r0
 800350e:	2800      	cmp	r0, #0
 8003510:	d1ce      	bne.n	80034b0 <HAL_SD_Init+0x8>
  tickstart = HAL_GetTick();
 8003512:	f7fd fa85 	bl	8000a20 <HAL_GetTick>
 8003516:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8003518:	4620      	mov	r0, r4
 800351a:	f7ff ffb1 	bl	8003480 <HAL_SD_GetCardState>
 800351e:	2804      	cmp	r0, #4
 8003520:	d106      	bne.n	8003530 <HAL_SD_Init+0x88>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003522:	2300      	movs	r3, #0
 8003524:	6363      	str	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003526:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hsd->State = HAL_SD_STATE_READY;
 8003528:	2301      	movs	r3, #1
 800352a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  return HAL_OK;
 800352e:	e7c0      	b.n	80034b2 <HAL_SD_Init+0xa>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8003530:	f7fd fa76 	bl	8000a20 <HAL_GetTick>
 8003534:	1b80      	subs	r0, r0, r6
 8003536:	3001      	adds	r0, #1
 8003538:	d1ee      	bne.n	8003518 <HAL_SD_Init+0x70>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800353a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
      return HAL_TIMEOUT;
 800353e:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8003540:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8003542:	2301      	movs	r3, #1
 8003544:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 8003548:	e7b3      	b.n	80034b2 <HAL_SD_Init+0xa>
	...

0800354c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800354c:	b084      	sub	sp, #16
 800354e:	b510      	push	{r4, lr}
 8003550:	ac03      	add	r4, sp, #12
 8003552:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8003556:	9b03      	ldr	r3, [sp, #12]
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8003558:	6841      	ldr	r1, [r0, #4]
  tmpreg |= (Init.ClockEdge           | \
 800355a:	4313      	orrs	r3, r2
             Init.ClockPowerSave      | \
 800355c:	9a05      	ldr	r2, [sp, #20]
 800355e:	4313      	orrs	r3, r2
             Init.BusWide             | \
 8003560:	9a06      	ldr	r2, [sp, #24]
 8003562:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 8003564:	9a07      	ldr	r2, [sp, #28]
 8003566:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8003568:	4a04      	ldr	r2, [pc, #16]	@ (800357c <SDMMC_Init+0x30>)
 800356a:	400a      	ands	r2, r1

  return HAL_OK;
}
 800356c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8003570:	4313      	orrs	r3, r2
}
 8003572:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8003574:	6043      	str	r3, [r0, #4]
}
 8003576:	2000      	movs	r0, #0
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	ffc02c00 	.word	0xffc02c00

08003580 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8003580:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 8003584:	4770      	bx	lr

08003586 <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8003586:	680b      	ldr	r3, [r1, #0]
 8003588:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  return HAL_OK;
}
 800358c:	2000      	movs	r0, #0
 800358e:	4770      	bx	lr

08003590 <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8003590:	6803      	ldr	r3, [r0, #0]
 8003592:	f043 0303 	orr.w	r3, r3, #3
 8003596:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8003598:	2000      	movs	r0, #0
 800359a:	4770      	bx	lr

0800359c <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800359c:	6800      	ldr	r0, [r0, #0]
}
 800359e:	f000 0003 	and.w	r0, r0, #3
 80035a2:	4770      	bx	lr

080035a4 <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80035a4:	680b      	ldr	r3, [r1, #0]
{
 80035a6:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 80035a8:	6083      	str	r3, [r0, #8]
                       Command->Response         | \
                       Command->WaitForInterrupt | \
                       Command->CPSM);

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80035aa:	68c4      	ldr	r4, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80035ac:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 80035b0:	4313      	orrs	r3, r2
                       Command->Response         | \
 80035b2:	68ca      	ldr	r2, [r1, #12]
 80035b4:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 80035b6:	690a      	ldr	r2, [r1, #16]
 80035b8:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80035ba:	4a03      	ldr	r2, [pc, #12]	@ (80035c8 <SDMMC_SendCommand+0x24>)
 80035bc:	4022      	ands	r2, r4
 80035be:	4313      	orrs	r3, r2
 80035c0:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 80035c2:	2000      	movs	r0, #0
 80035c4:	bd10      	pop	{r4, pc}
 80035c6:	bf00      	nop
 80035c8:	fffee0c0 	.word	0xfffee0c0

080035cc <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80035cc:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 80035ce:	5840      	ldr	r0, [r0, r1]
}
 80035d0:	4770      	bx	lr

080035d2 <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80035d2:	680b      	ldr	r3, [r1, #0]
{
 80035d4:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 80035d6:	6243      	str	r3, [r0, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80035d8:	684b      	ldr	r3, [r1, #4]
 80035da:	6283      	str	r3, [r0, #40]	@ 0x28
                       Data->TransferDir   | \
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80035dc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80035de:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80035e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80035e6:	4323      	orrs	r3, r4
                       Data->TransferDir   | \
 80035e8:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  | \
 80035ea:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   | \
 80035ec:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 80035ee:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80035f0:	4313      	orrs	r3, r2
 80035f2:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 80035f4:	2000      	movs	r0, #0
 80035f6:	bd10      	pop	{r4, pc}

080035f8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80035f8:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80035fa:	2300      	movs	r3, #0
{
 80035fc:	b086      	sub	sp, #24
 80035fe:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003600:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003602:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003606:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800360a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800360e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003610:	f7ff ffc8 	bl	80035a4 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8003614:	4b0a      	ldr	r3, [pc, #40]	@ (8003640 <SDMMC_CmdGoIdleState+0x48>)
 8003616:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003624:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 8003626:	b143      	cbz	r3, 800363a <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8003628:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800362a:	3b01      	subs	r3, #1
 800362c:	0612      	lsls	r2, r2, #24
 800362e:	d5fa      	bpl.n	8003626 <SDMMC_CmdGoIdleState+0x2e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003630:	4b04      	ldr	r3, [pc, #16]	@ (8003644 <SDMMC_CmdGoIdleState+0x4c>)

  return SDMMC_ERROR_NONE;
 8003632:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003634:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8003636:	b006      	add	sp, #24
 8003638:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800363a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  return errorstate;
 800363e:	e7fa      	b.n	8003636 <SDMMC_CmdGoIdleState+0x3e>
 8003640:	24000004 	.word	0x24000004
 8003644:	002000c5 	.word	0x002000c5

08003648 <SDMMC_GetCmdResp1>:
{
 8003648:	4603      	mov	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800364a:	4844      	ldr	r0, [pc, #272]	@ (800375c <SDMMC_GetCmdResp1+0x114>)
{
 800364c:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800364e:	6800      	ldr	r0, [r0, #0]
 8003650:	f44f 54fa 	mov.w	r4, #8000	@ 0x1f40
 8003654:	fbb0 f0f4 	udiv	r0, r0, r4
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8003658:	4c41      	ldr	r4, [pc, #260]	@ (8003760 <SDMMC_GetCmdResp1+0x118>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800365a:	4342      	muls	r2, r0
    if (count-- == 0U)
 800365c:	2a00      	cmp	r2, #0
 800365e:	d048      	beq.n	80036f2 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 8003660:	6b58      	ldr	r0, [r3, #52]	@ 0x34
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8003662:	4220      	tst	r0, r4
 8003664:	d007      	beq.n	8003676 <SDMMC_GetCmdResp1+0x2e>
 8003666:	0480      	lsls	r0, r0, #18
 8003668:	d405      	bmi.n	8003676 <SDMMC_GetCmdResp1+0x2e>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800366a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800366c:	0754      	lsls	r4, r2, #29
 800366e:	d504      	bpl.n	800367a <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003670:	2004      	movs	r0, #4
 8003672:	6398      	str	r0, [r3, #56]	@ 0x38
}
 8003674:	bd10      	pop	{r4, pc}
 8003676:	3a01      	subs	r2, #1
 8003678:	e7f0      	b.n	800365c <SDMMC_GetCmdResp1+0x14>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800367a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800367c:	07d0      	lsls	r0, r2, #31
 800367e:	d503      	bpl.n	8003688 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003680:	2201      	movs	r2, #1
 8003682:	639a      	str	r2, [r3, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003684:	2001      	movs	r0, #1
 8003686:	e7f5      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003688:	4a36      	ldr	r2, [pc, #216]	@ (8003764 <SDMMC_GetCmdResp1+0x11c>)
 800368a:	639a      	str	r2, [r3, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800368c:	691a      	ldr	r2, [r3, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	4291      	cmp	r1, r2
 8003692:	d1f7      	bne.n	8003684 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 8003694:	695b      	ldr	r3, [r3, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003696:	4834      	ldr	r0, [pc, #208]	@ (8003768 <SDMMC_GetCmdResp1+0x120>)
 8003698:	4018      	ands	r0, r3
 800369a:	2800      	cmp	r0, #0
 800369c:	d0ea      	beq.n	8003674 <SDMMC_GetCmdResp1+0x2c>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800369e:	2b00      	cmp	r3, #0
 80036a0:	db2a      	blt.n	80036f8 <SDMMC_GetCmdResp1+0xb0>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80036a2:	005a      	lsls	r2, r3, #1
 80036a4:	d42b      	bmi.n	80036fe <SDMMC_GetCmdResp1+0xb6>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80036a6:	009c      	lsls	r4, r3, #2
 80036a8:	d42b      	bmi.n	8003702 <SDMMC_GetCmdResp1+0xba>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80036aa:	00d9      	lsls	r1, r3, #3
 80036ac:	d42b      	bmi.n	8003706 <SDMMC_GetCmdResp1+0xbe>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80036ae:	011a      	lsls	r2, r3, #4
 80036b0:	d42c      	bmi.n	800370c <SDMMC_GetCmdResp1+0xc4>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80036b2:	015c      	lsls	r4, r3, #5
 80036b4:	d42d      	bmi.n	8003712 <SDMMC_GetCmdResp1+0xca>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80036b6:	01d9      	lsls	r1, r3, #7
 80036b8:	d42e      	bmi.n	8003718 <SDMMC_GetCmdResp1+0xd0>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80036ba:	021a      	lsls	r2, r3, #8
 80036bc:	d42f      	bmi.n	800371e <SDMMC_GetCmdResp1+0xd6>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80036be:	025c      	lsls	r4, r3, #9
 80036c0:	d430      	bmi.n	8003724 <SDMMC_GetCmdResp1+0xdc>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80036c2:	0299      	lsls	r1, r3, #10
 80036c4:	d431      	bmi.n	800372a <SDMMC_GetCmdResp1+0xe2>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80036c6:	02da      	lsls	r2, r3, #11
 80036c8:	d432      	bmi.n	8003730 <SDMMC_GetCmdResp1+0xe8>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80036ca:	035c      	lsls	r4, r3, #13
 80036cc:	d433      	bmi.n	8003736 <SDMMC_GetCmdResp1+0xee>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80036ce:	0399      	lsls	r1, r3, #14
 80036d0:	d434      	bmi.n	800373c <SDMMC_GetCmdResp1+0xf4>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80036d2:	03da      	lsls	r2, r3, #15
 80036d4:	d435      	bmi.n	8003742 <SDMMC_GetCmdResp1+0xfa>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80036d6:	041c      	lsls	r4, r3, #16
 80036d8:	d436      	bmi.n	8003748 <SDMMC_GetCmdResp1+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80036da:	0459      	lsls	r1, r3, #17
 80036dc:	d437      	bmi.n	800374e <SDMMC_GetCmdResp1+0x106>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80036de:	049a      	lsls	r2, r3, #18
 80036e0:	d438      	bmi.n	8003754 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80036e2:	f013 0f08 	tst.w	r3, #8
 80036e6:	bf0c      	ite	eq
 80036e8:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 80036ec:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 80036f0:	e7c0      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80036f2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80036f6:	e7bd      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80036f8:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80036fc:	e7ba      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80036fe:	2040      	movs	r0, #64	@ 0x40
 8003700:	e7b8      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003702:	2080      	movs	r0, #128	@ 0x80
 8003704:	e7b6      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003706:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800370a:	e7b3      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800370c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003710:	e7b0      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003712:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003716:	e7ad      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003718:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800371c:	e7aa      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800371e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003722:	e7a7      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003724:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003728:	e7a4      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800372a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800372e:	e7a1      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8003730:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003734:	e79e      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003736:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800373a:	e79b      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800373c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8003740:	e798      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003742:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003746:	e795      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003748:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800374c:	e792      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800374e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003752:	e78f      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8003754:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8003758:	e78c      	b.n	8003674 <SDMMC_GetCmdResp1+0x2c>
 800375a:	bf00      	nop
 800375c:	24000004 	.word	0x24000004
 8003760:	00200045 	.word	0x00200045
 8003764:	002000c5 	.word	0x002000c5
 8003768:	fdffe008 	.word	0xfdffe008

0800376c <SDMMC_CmdBlockLength>:
{
 800376c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800376e:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8003772:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003774:	2510      	movs	r5, #16
{
 8003776:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003778:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800377a:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800377c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800377e:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003782:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003786:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800378a:	f7ff ff0b 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800378e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003792:	4629      	mov	r1, r5
 8003794:	4620      	mov	r0, r4
}
 8003796:	b007      	add	sp, #28
 8003798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800379c:	f7ff bf54 	b.w	8003648 <SDMMC_GetCmdResp1>

080037a0 <SDMMC_CmdReadSingleBlock>:
{
 80037a0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80037a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 80037a6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80037a8:	2511      	movs	r5, #17
{
 80037aa:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80037ac:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80037ae:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80037b0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80037b2:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80037b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80037be:	f7ff fef1 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80037c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c6:	4629      	mov	r1, r5
 80037c8:	4620      	mov	r0, r4
}
 80037ca:	b007      	add	sp, #28
 80037cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80037d0:	f7ff bf3a 	b.w	8003648 <SDMMC_GetCmdResp1>

080037d4 <SDMMC_CmdReadMultiBlock>:
{
 80037d4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80037d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 80037da:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80037dc:	2512      	movs	r5, #18
{
 80037de:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80037e0:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80037e2:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80037e4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80037e6:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80037ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80037f2:	f7ff fed7 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80037f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fa:	4629      	mov	r1, r5
 80037fc:	4620      	mov	r0, r4
}
 80037fe:	b007      	add	sp, #28
 8003800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8003804:	f7ff bf20 	b.w	8003648 <SDMMC_GetCmdResp1>

08003808 <SDMMC_CmdWriteSingleBlock>:
{
 8003808:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800380a:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 800380e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003810:	2518      	movs	r5, #24
{
 8003812:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003814:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003816:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003818:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800381a:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800381e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003822:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003826:	f7ff febd 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800382a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382e:	4629      	mov	r1, r5
 8003830:	4620      	mov	r0, r4
}
 8003832:	b007      	add	sp, #28
 8003834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8003838:	f7ff bf06 	b.w	8003648 <SDMMC_GetCmdResp1>

0800383c <SDMMC_CmdWriteMultiBlock>:
{
 800383c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800383e:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8003842:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003844:	2519      	movs	r5, #25
{
 8003846:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003848:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800384a:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800384c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800384e:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003852:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003856:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800385a:	f7ff fea3 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800385e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003862:	4629      	mov	r1, r5
 8003864:	4620      	mov	r0, r4
}
 8003866:	b007      	add	sp, #28
 8003868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800386c:	f7ff beec 	b.w	8003648 <SDMMC_GetCmdResp1>

08003870 <SDMMC_CmdStopTransfer>:
{
 8003870:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003872:	2300      	movs	r3, #0
{
 8003874:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003876:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003878:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 800387c:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800387e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003880:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003884:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800388c:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800388e:	68c3      	ldr	r3, [r0, #12]
 8003890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003894:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8003896:	68c3      	ldr	r3, [r0, #12]
 8003898:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800389c:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800389e:	f7ff fe81 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80038a2:	4a07      	ldr	r2, [pc, #28]	@ (80038c0 <SDMMC_CmdStopTransfer+0x50>)
 80038a4:	4629      	mov	r1, r5
 80038a6:	4620      	mov	r0, r4
 80038a8:	f7ff fece 	bl	8003648 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80038ac:	68e3      	ldr	r3, [r4, #12]
    errorstate = SDMMC_ERROR_NONE;
 80038ae:	f1b0 7f00 	cmp.w	r0, #33554432	@ 0x2000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80038b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
}
 80038b6:	bf08      	it	eq
 80038b8:	2000      	moveq	r0, #0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80038ba:	60e3      	str	r3, [r4, #12]
}
 80038bc:	b007      	add	sp, #28
 80038be:	bd30      	pop	{r4, r5, pc}
 80038c0:	05f5e100 	.word	0x05f5e100

080038c4 <SDMMC_CmdSelDesel>:
{
 80038c4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80038c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 80038ca:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80038cc:	2507      	movs	r5, #7
{
 80038ce:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80038d0:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80038d2:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80038d4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80038d6:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80038da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038de:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80038e2:	f7ff fe5f 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80038e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ea:	4629      	mov	r1, r5
 80038ec:	4620      	mov	r0, r4
}
 80038ee:	b007      	add	sp, #28
 80038f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80038f4:	f7ff bea8 	b.w	8003648 <SDMMC_GetCmdResp1>

080038f8 <SDMMC_CmdAppCommand>:
{
 80038f8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80038fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 80038fe:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003900:	2537      	movs	r5, #55	@ 0x37
{
 8003902:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003904:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003906:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003908:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800390a:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800390e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003912:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003916:	f7ff fe45 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800391a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391e:	4629      	mov	r1, r5
 8003920:	4620      	mov	r0, r4
}
 8003922:	b007      	add	sp, #28
 8003924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8003928:	f7ff be8e 	b.w	8003648 <SDMMC_GetCmdResp1>

0800392c <SDMMC_CmdBusWidth>:
{
 800392c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800392e:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8003932:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003934:	2506      	movs	r5, #6
{
 8003936:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003938:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800393a:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800393c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800393e:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003942:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003946:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800394a:	f7ff fe2b 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800394e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003952:	4629      	mov	r1, r5
 8003954:	4620      	mov	r0, r4
}
 8003956:	b007      	add	sp, #28
 8003958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800395c:	f7ff be74 	b.w	8003648 <SDMMC_GetCmdResp1>

08003960 <SDMMC_CmdSendSCR>:
{
 8003960:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003962:	2300      	movs	r3, #0
{
 8003964:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003966:	2533      	movs	r5, #51	@ 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003968:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 800396c:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800396e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003970:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003974:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800397c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800397e:	f7ff fe11 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8003982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003986:	4629      	mov	r1, r5
 8003988:	4620      	mov	r0, r4
}
 800398a:	b007      	add	sp, #28
 800398c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8003990:	f7ff be5a 	b.w	8003648 <SDMMC_GetCmdResp1>

08003994 <SDMMC_CmdSendStatus>:
{
 8003994:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003996:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 800399a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800399c:	250d      	movs	r5, #13
{
 800399e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80039a0:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = Argument;
 80039a2:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80039a4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80039a6:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80039aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80039b2:	f7ff fdf7 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80039b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ba:	4629      	mov	r1, r5
 80039bc:	4620      	mov	r0, r4
}
 80039be:	b007      	add	sp, #28
 80039c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80039c4:	f7ff be40 	b.w	8003648 <SDMMC_GetCmdResp1>

080039c8 <SDMMC_CmdStatusRegister>:
{
 80039c8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80039ca:	2300      	movs	r3, #0
{
 80039cc:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80039ce:	250d      	movs	r5, #13
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80039d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 80039d4:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80039d6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80039d8:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80039dc:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80039e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039e4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80039e6:	f7ff fddd 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80039ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ee:	4629      	mov	r1, r5
 80039f0:	4620      	mov	r0, r4
}
 80039f2:	b007      	add	sp, #28
 80039f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80039f8:	f7ff be26 	b.w	8003648 <SDMMC_GetCmdResp1>

080039fc <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80039fc:	4b11      	ldr	r3, [pc, #68]	@ (8003a44 <SDMMC_GetCmdResp2+0x48>)
 80039fe:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
{
 8003a02:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a0a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003a0e:	434b      	muls	r3, r1
    if (count-- == 0U)
 8003a10:	b1ab      	cbz	r3, 8003a3e <SDMMC_GetCmdResp2+0x42>
    sta_reg = SDMMCx->STA;
 8003a12:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003a14:	f011 0f45 	tst.w	r1, #69	@ 0x45
 8003a18:	d007      	beq.n	8003a2a <SDMMC_GetCmdResp2+0x2e>
 8003a1a:	0489      	lsls	r1, r1, #18
 8003a1c:	d405      	bmi.n	8003a2a <SDMMC_GetCmdResp2+0x2e>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003a1e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003a20:	075b      	lsls	r3, r3, #29
 8003a22:	d504      	bpl.n	8003a2e <SDMMC_GetCmdResp2+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003a24:	2004      	movs	r0, #4
 8003a26:	6390      	str	r0, [r2, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003a28:	4770      	bx	lr
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	e7f0      	b.n	8003a10 <SDMMC_GetCmdResp2+0x14>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003a2e:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8003a30:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003a34:	bf14      	ite	ne
 8003a36:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003a38:	4b03      	ldreq	r3, [pc, #12]	@ (8003a48 <SDMMC_GetCmdResp2+0x4c>)
 8003a3a:	6393      	str	r3, [r2, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8003a3c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003a3e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8003a42:	4770      	bx	lr
 8003a44:	24000004 	.word	0x24000004
 8003a48:	002000c5 	.word	0x002000c5

08003a4c <SDMMC_CmdSendCID>:
{
 8003a4c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003a4e:	2300      	movs	r3, #0
{
 8003a50:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003a52:	2202      	movs	r2, #2
{
 8003a54:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003a56:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003a58:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8003a5c:	f44f 7240 	mov.w	r2, #768	@ 0x300
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003a60:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a68:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003a6a:	f7ff fd9b 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8003a6e:	4620      	mov	r0, r4
}
 8003a70:	b006      	add	sp, #24
 8003a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8003a76:	f7ff bfc1 	b.w	80039fc <SDMMC_GetCmdResp2>

08003a7a <SDMMC_CmdSendCSD>:
{
 8003a7a:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8003a7c:	2209      	movs	r2, #9
{
 8003a7e:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8003a80:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8003a84:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8003a86:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003a88:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8003a8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003a8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a92:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003a96:	a901      	add	r1, sp, #4
 8003a98:	f7ff fd84 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8003a9c:	4620      	mov	r0, r4
}
 8003a9e:	b006      	add	sp, #24
 8003aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8003aa4:	f7ff bfaa 	b.w	80039fc <SDMMC_GetCmdResp2>

08003aa8 <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae8 <SDMMC_GetCmdResp3+0x40>)
 8003aaa:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
{
 8003aae:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ab6:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003aba:	434b      	muls	r3, r1
    if (count-- == 0U)
 8003abc:	b18b      	cbz	r3, 8003ae2 <SDMMC_GetCmdResp3+0x3a>
    sta_reg = SDMMCx->STA;
 8003abe:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003ac0:	f011 0f45 	tst.w	r1, #69	@ 0x45
 8003ac4:	d008      	beq.n	8003ad8 <SDMMC_GetCmdResp3+0x30>
 8003ac6:	0489      	lsls	r1, r1, #18
 8003ac8:	d406      	bmi.n	8003ad8 <SDMMC_GetCmdResp3+0x30>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003aca:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8003acc:	f010 0004 	ands.w	r0, r0, #4
 8003ad0:	d004      	beq.n	8003adc <SDMMC_GetCmdResp3+0x34>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003ad2:	2004      	movs	r0, #4
 8003ad4:	6390      	str	r0, [r2, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003ad6:	4770      	bx	lr
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	e7ef      	b.n	8003abc <SDMMC_GetCmdResp3+0x14>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003adc:	4b03      	ldr	r3, [pc, #12]	@ (8003aec <SDMMC_GetCmdResp3+0x44>)
 8003ade:	6393      	str	r3, [r2, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8003ae0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003ae2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8003ae6:	4770      	bx	lr
 8003ae8:	24000004 	.word	0x24000004
 8003aec:	002000c5 	.word	0x002000c5

08003af0 <SDMMC_CmdAppOperCommand>:
{
 8003af0:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003af2:	2229      	movs	r2, #41	@ 0x29
{
 8003af4:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003af6:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8003afa:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8003afc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003afe:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003b00:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b08:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003b0c:	a901      	add	r1, sp, #4
 8003b0e:	f7ff fd49 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8003b12:	4620      	mov	r0, r4
}
 8003b14:	b006      	add	sp, #24
 8003b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8003b1a:	f7ff bfc5 	b.w	8003aa8 <SDMMC_GetCmdResp3>
	...

08003b20 <SDMMC_GetCmdResp6>:
{
 8003b20:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8003b22:	481e      	ldr	r0, [pc, #120]	@ (8003b9c <SDMMC_GetCmdResp6+0x7c>)
{
 8003b24:	b510      	push	{r4, lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8003b26:	6800      	ldr	r0, [r0, #0]
 8003b28:	f44f 54fa 	mov.w	r4, #8000	@ 0x1f40
 8003b2c:	fbb0 f0f4 	udiv	r0, r0, r4
 8003b30:	f241 3488 	movw	r4, #5000	@ 0x1388
 8003b34:	4360      	muls	r0, r4
    if (count-- == 0U)
 8003b36:	b358      	cbz	r0, 8003b90 <SDMMC_GetCmdResp6+0x70>
    sta_reg = SDMMCx->STA;
 8003b38:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003b3a:	f014 0f45 	tst.w	r4, #69	@ 0x45
 8003b3e:	d007      	beq.n	8003b50 <SDMMC_GetCmdResp6+0x30>
 8003b40:	04a4      	lsls	r4, r4, #18
 8003b42:	d405      	bmi.n	8003b50 <SDMMC_GetCmdResp6+0x30>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003b44:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003b46:	0744      	lsls	r4, r0, #29
 8003b48:	d504      	bpl.n	8003b54 <SDMMC_GetCmdResp6+0x34>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003b4a:	2004      	movs	r0, #4
 8003b4c:	6398      	str	r0, [r3, #56]	@ 0x38
}
 8003b4e:	bd10      	pop	{r4, pc}
 8003b50:	3801      	subs	r0, #1
 8003b52:	e7f0      	b.n	8003b36 <SDMMC_GetCmdResp6+0x16>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003b54:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003b56:	07c0      	lsls	r0, r0, #31
 8003b58:	d503      	bpl.n	8003b62 <SDMMC_GetCmdResp6+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	639a      	str	r2, [r3, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b5e:	2001      	movs	r0, #1
 8003b60:	e7f5      	b.n	8003b4e <SDMMC_GetCmdResp6+0x2e>
  return (uint8_t)(SDMMCx->RESPCMD);
 8003b62:	6918      	ldr	r0, [r3, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003b64:	b2c0      	uxtb	r0, r0
 8003b66:	4281      	cmp	r1, r0
 8003b68:	d1f9      	bne.n	8003b5e <SDMMC_GetCmdResp6+0x3e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003b6a:	490d      	ldr	r1, [pc, #52]	@ (8003ba0 <SDMMC_GetCmdResp6+0x80>)
 8003b6c:	6399      	str	r1, [r3, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 8003b6e:	695b      	ldr	r3, [r3, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8003b70:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 8003b74:	d102      	bne.n	8003b7c <SDMMC_GetCmdResp6+0x5c>
    *pRCA = (uint16_t)(response_r1 >> 16);
 8003b76:	0c1b      	lsrs	r3, r3, #16
 8003b78:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 8003b7a:	e7e8      	b.n	8003b4e <SDMMC_GetCmdResp6+0x2e>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003b7c:	045a      	lsls	r2, r3, #17
 8003b7e:	d40a      	bmi.n	8003b96 <SDMMC_GetCmdResp6+0x76>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003b80:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8003b84:	bf0c      	ite	eq
 8003b86:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8003b8a:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 8003b8e:	e7de      	b.n	8003b4e <SDMMC_GetCmdResp6+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8003b90:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8003b94:	e7db      	b.n	8003b4e <SDMMC_GetCmdResp6+0x2e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003b96:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003b9a:	e7d8      	b.n	8003b4e <SDMMC_GetCmdResp6+0x2e>
 8003b9c:	24000004 	.word	0x24000004
 8003ba0:	002000c5 	.word	0x002000c5

08003ba4 <SDMMC_CmdSetRelAdd>:
{
 8003ba4:	b570      	push	{r4, r5, r6, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003ba6:	2300      	movs	r3, #0
{
 8003ba8:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003baa:	2603      	movs	r6, #3
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003bac:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	460d      	mov	r5, r1
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003bb4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003bb6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003bba:	e9cd 3601 	strd	r3, r6, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003bbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bc2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003bc4:	f7ff fcee 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003bc8:	462a      	mov	r2, r5
 8003bca:	4631      	mov	r1, r6
 8003bcc:	4620      	mov	r0, r4
}
 8003bce:	b006      	add	sp, #24
 8003bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003bd4:	f7ff bfa4 	b.w	8003b20 <SDMMC_GetCmdResp6>

08003bd8 <SDMMC_GetCmdResp7>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8003bd8:	4b13      	ldr	r3, [pc, #76]	@ (8003c28 <SDMMC_GetCmdResp7+0x50>)
 8003bda:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
{
 8003bde:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003be6:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003bea:	434b      	muls	r3, r1
    if (count-- == 0U)
 8003bec:	b1cb      	cbz	r3, 8003c22 <SDMMC_GetCmdResp7+0x4a>
    sta_reg = SDMMCx->STA;
 8003bee:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003bf0:	f011 0f45 	tst.w	r1, #69	@ 0x45
 8003bf4:	d007      	beq.n	8003c06 <SDMMC_GetCmdResp7+0x2e>
 8003bf6:	0488      	lsls	r0, r1, #18
 8003bf8:	d405      	bmi.n	8003c06 <SDMMC_GetCmdResp7+0x2e>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003bfa:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003bfc:	0759      	lsls	r1, r3, #29
 8003bfe:	d504      	bpl.n	8003c0a <SDMMC_GetCmdResp7+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003c00:	2004      	movs	r0, #4
 8003c02:	6390      	str	r0, [r2, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003c04:	4770      	bx	lr
 8003c06:	3b01      	subs	r3, #1
 8003c08:	e7f0      	b.n	8003bec <SDMMC_GetCmdResp7+0x14>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003c0a:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8003c0c:	f010 0001 	ands.w	r0, r0, #1
 8003c10:	d002      	beq.n	8003c18 <SDMMC_GetCmdResp7+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003c12:	2301      	movs	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8003c14:	6393      	str	r3, [r2, #56]	@ 0x38
 8003c16:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8003c18:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003c1a:	065b      	lsls	r3, r3, #25
 8003c1c:	d503      	bpl.n	8003c26 <SDMMC_GetCmdResp7+0x4e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8003c1e:	2340      	movs	r3, #64	@ 0x40
 8003c20:	e7f8      	b.n	8003c14 <SDMMC_GetCmdResp7+0x3c>
      return SDMMC_ERROR_TIMEOUT;
 8003c22:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8003c26:	4770      	bx	lr
 8003c28:	24000004 	.word	0x24000004

08003c2c <SDMMC_CmdOperCond>:
{
 8003c2c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003c2e:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
{
 8003c32:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003c34:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003c36:	f44f 7180 	mov.w	r1, #256	@ 0x100
{
 8003c3a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003c3c:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003c46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003c4a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003c4c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003c4e:	f7ff fca9 	bl	80035a4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8003c52:	4620      	mov	r0, r4
}
 8003c54:	b006      	add	sp, #24
 8003c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8003c5a:	f7ff bfbd 	b.w	8003bd8 <SDMMC_GetCmdResp7>
	...

08003c60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003c60:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003c62:	4903      	ldr	r1, [pc, #12]	@ (8003c70 <MX_FATFS_Init+0x10>)
 8003c64:	4803      	ldr	r0, [pc, #12]	@ (8003c74 <MX_FATFS_Init+0x14>)
 8003c66:	f001 f9f9 	bl	800505c <FATFS_LinkDriver>
 8003c6a:	4b03      	ldr	r3, [pc, #12]	@ (8003c78 <MX_FATFS_Init+0x18>)
 8003c6c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003c6e:	bd08      	pop	{r3, pc}
 8003c70:	240006f4 	.word	0x240006f4
 8003c74:	0801151c 	.word	0x0801151c
 8003c78:	240006f8 	.word	0x240006f8

08003c7c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	4770      	bx	lr

08003c80 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003c80:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	4613      	mov	r3, r2
 8003c86:	460a      	mov	r2, r1
 8003c88:	4601      	mov	r1, r0
 8003c8a:	4804      	ldr	r0, [pc, #16]	@ (8003c9c <BSP_SD_ReadBlocks+0x1c>)
 8003c8c:	f7fe feee 	bl	8002a6c <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8003c90:	3800      	subs	r0, #0
 8003c92:	bf18      	it	ne
 8003c94:	2001      	movne	r0, #1
 8003c96:	b003      	add	sp, #12
 8003c98:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c9c:	24000440 	.word	0x24000440

08003ca0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003ca0:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	460a      	mov	r2, r1
 8003ca8:	4601      	mov	r1, r0
 8003caa:	4804      	ldr	r0, [pc, #16]	@ (8003cbc <BSP_SD_WriteBlocks+0x1c>)
 8003cac:	f7fe ffba 	bl	8002c24 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8003cb0:	3800      	subs	r0, #0
 8003cb2:	bf18      	it	ne
 8003cb4:	2001      	movne	r0, #1
 8003cb6:	b003      	add	sp, #12
 8003cb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cbc:	24000440 	.word	0x24000440

08003cc0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8003cc0:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003cc2:	4803      	ldr	r0, [pc, #12]	@ (8003cd0 <BSP_SD_GetCardState+0x10>)
 8003cc4:	f7ff fbdc 	bl	8003480 <HAL_SD_GetCardState>
}
 8003cc8:	3804      	subs	r0, #4
 8003cca:	bf18      	it	ne
 8003ccc:	2001      	movne	r0, #1
 8003cce:	bd08      	pop	{r3, pc}
 8003cd0:	24000440 	.word	0x24000440

08003cd4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003cd4:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8003cd6:	4801      	ldr	r0, [pc, #4]	@ (8003cdc <BSP_SD_GetCardInfo+0x8>)
 8003cd8:	f7ff bb08 	b.w	80032ec <HAL_SD_GetCardInfo>
 8003cdc:	24000440 	.word	0x24000440

08003ce0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8003ce0:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8003ce8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003cec:	b002      	add	sp, #8
 8003cee:	4770      	bx	lr

08003cf0 <BSP_SD_Init>:
{
 8003cf0:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8003cf2:	f7ff fff5 	bl	8003ce0 <BSP_SD_IsDetected>
 8003cf6:	2801      	cmp	r0, #1
 8003cf8:	d10c      	bne.n	8003d14 <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 8003cfa:	4807      	ldr	r0, [pc, #28]	@ (8003d18 <BSP_SD_Init+0x28>)
 8003cfc:	f7ff fbd4 	bl	80034a8 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8003d00:	b938      	cbnz	r0, 8003d12 <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8003d02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003d06:	4804      	ldr	r0, [pc, #16]	@ (8003d18 <BSP_SD_Init+0x28>)
 8003d08:	f7ff fb02 	bl	8003310 <HAL_SD_ConfigWideBusOperation>
 8003d0c:	3800      	subs	r0, #0
 8003d0e:	bf18      	it	ne
 8003d10:	2001      	movne	r0, #1
}
 8003d12:	bd08      	pop	{r3, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 8003d14:	2002      	movs	r0, #2
 8003d16:	e7fc      	b.n	8003d12 <BSP_SD_Init+0x22>
 8003d18:	24000440 	.word	0x24000440

08003d1c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003d1c:	4b12      	ldr	r3, [pc, #72]	@ (8003d68 <SD_ioctl+0x4c>)
{
 8003d1e:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003d20:	781c      	ldrb	r4, [r3, #0]
{
 8003d22:	b08b      	sub	sp, #44	@ 0x2c
 8003d24:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003d26:	f014 0401 	ands.w	r4, r4, #1
 8003d2a:	d119      	bne.n	8003d60 <SD_ioctl+0x44>

  switch (cmd)
 8003d2c:	2903      	cmp	r1, #3
 8003d2e:	d819      	bhi.n	8003d64 <SD_ioctl+0x48>
 8003d30:	e8df f001 	tbb	[pc, r1]
 8003d34:	1008020d 	.word	0x1008020d
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003d38:	a801      	add	r0, sp, #4
 8003d3a:	f7ff ffcb 	bl	8003cd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003d3e:	9b07      	ldr	r3, [sp, #28]
    break;

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003d40:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8003d42:	e004      	b.n	8003d4e <SD_ioctl+0x32>
    BSP_SD_GetCardInfo(&CardInfo);
 8003d44:	a801      	add	r0, sp, #4
 8003d46:	f7ff ffc5 	bl	8003cd4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003d4a:	9b08      	ldr	r3, [sp, #32]
 8003d4c:	802b      	strh	r3, [r5, #0]
  default:
    res = RES_PARERR;
  }

  return res;
}
 8003d4e:	4620      	mov	r0, r4
 8003d50:	b00b      	add	sp, #44	@ 0x2c
 8003d52:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8003d54:	a801      	add	r0, sp, #4
 8003d56:	f7ff ffbd 	bl	8003cd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003d5a:	9b08      	ldr	r3, [sp, #32]
 8003d5c:	0a5b      	lsrs	r3, r3, #9
 8003d5e:	e7ef      	b.n	8003d40 <SD_ioctl+0x24>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003d60:	2403      	movs	r4, #3
 8003d62:	e7f4      	b.n	8003d4e <SD_ioctl+0x32>
    res = RES_PARERR;
 8003d64:	2404      	movs	r4, #4
 8003d66:	e7f2      	b.n	8003d4e <SD_ioctl+0x32>
 8003d68:	24000010 	.word	0x24000010

08003d6c <SD_read>:
{
 8003d6c:	b508      	push	{r3, lr}
 8003d6e:	4608      	mov	r0, r1
 8003d70:	4611      	mov	r1, r2
 8003d72:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003d74:	f04f 33ff 	mov.w	r3, #4294967295
 8003d78:	f7ff ff82 	bl	8003c80 <BSP_SD_ReadBlocks>
 8003d7c:	b920      	cbnz	r0, 8003d88 <SD_read+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003d7e:	f7ff ff9f 	bl	8003cc0 <BSP_SD_GetCardState>
 8003d82:	2800      	cmp	r0, #0
 8003d84:	d1fb      	bne.n	8003d7e <SD_read+0x12>
}
 8003d86:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8003d88:	2001      	movs	r0, #1
 8003d8a:	e7fc      	b.n	8003d86 <SD_read+0x1a>

08003d8c <SD_status>:
{
 8003d8c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	4c05      	ldr	r4, [pc, #20]	@ (8003da8 <SD_status+0x1c>)
 8003d92:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8003d94:	f7ff ff94 	bl	8003cc0 <BSP_SD_GetCardState>
 8003d98:	b918      	cbnz	r0, 8003da2 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8003d9a:	7823      	ldrb	r3, [r4, #0]
 8003d9c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003da0:	7023      	strb	r3, [r4, #0]
  return Stat;
 8003da2:	7820      	ldrb	r0, [r4, #0]
}
 8003da4:	bd10      	pop	{r4, pc}
 8003da6:	bf00      	nop
 8003da8:	24000010 	.word	0x24000010

08003dac <SD_write>:
{
 8003dac:	b508      	push	{r3, lr}
 8003dae:	4608      	mov	r0, r1
 8003db0:	4611      	mov	r1, r2
 8003db2:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003db4:	f04f 33ff 	mov.w	r3, #4294967295
 8003db8:	f7ff ff72 	bl	8003ca0 <BSP_SD_WriteBlocks>
 8003dbc:	b920      	cbnz	r0, 8003dc8 <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003dbe:	f7ff ff7f 	bl	8003cc0 <BSP_SD_GetCardState>
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	d1fb      	bne.n	8003dbe <SD_write+0x12>
}
 8003dc6:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8003dc8:	2001      	movs	r0, #1
 8003dca:	e7fc      	b.n	8003dc6 <SD_write+0x1a>

08003dcc <SD_initialize>:
{
 8003dcc:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 8003dce:	4c09      	ldr	r4, [pc, #36]	@ (8003df4 <SD_initialize+0x28>)
 8003dd0:	2501      	movs	r5, #1
 8003dd2:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_Init() == MSD_OK)
 8003dd4:	f7ff ff8c 	bl	8003cf0 <BSP_SD_Init>
 8003dd8:	b950      	cbnz	r0, 8003df0 <SD_initialize+0x24>
  Stat = STA_NOINIT;
 8003dda:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8003ddc:	f7ff ff70 	bl	8003cc0 <BSP_SD_GetCardState>
 8003de0:	b918      	cbnz	r0, 8003dea <SD_initialize+0x1e>
    Stat &= ~STA_NOINIT;
 8003de2:	7823      	ldrb	r3, [r4, #0]
 8003de4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003de8:	7023      	strb	r3, [r4, #0]
  return Stat;
 8003dea:	7823      	ldrb	r3, [r4, #0]
 8003dec:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8003dee:	7023      	strb	r3, [r4, #0]
  return Stat;
 8003df0:	7820      	ldrb	r0, [r4, #0]
}
 8003df2:	bd38      	pop	{r3, r4, r5, pc}
 8003df4:	24000010 	.word	0x24000010

08003df8 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8003df8:	4770      	bx	lr
	...

08003dfc <write_file>:
f_read (file, buf , sizeofbuf, &BytesReadfile);
return BytesReadfile;
}

size_t write_file (FIL  *file, uint8_t *buf, uint32_t sizeofbuf)
{
 8003dfc:	b510      	push	{r4, lr}
static size_t BytesWritefile;
f_write (file, buf , sizeofbuf, &BytesWritefile);
 8003dfe:	4c03      	ldr	r4, [pc, #12]	@ (8003e0c <write_file+0x10>)
 8003e00:	4623      	mov	r3, r4
 8003e02:	f000 ff81 	bl	8004d08 <f_write>
return BytesWritefile;
}
 8003e06:	6820      	ldr	r0, [r4, #0]
 8003e08:	bd10      	pop	{r4, pc}
 8003e0a:	bf00      	nop
 8003e0c:	240006fc 	.word	0x240006fc

08003e10 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003e10:	4b03      	ldr	r3, [pc, #12]	@ (8003e20 <disk_status+0x10>)
 8003e12:	181a      	adds	r2, r3, r0
 8003e14:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	7a10      	ldrb	r0, [r2, #8]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4718      	bx	r3
 8003e20:	24000728 	.word	0x24000728

08003e24 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003e24:	b538      	push	{r3, r4, r5, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8003e26:	4d08      	ldr	r5, [pc, #32]	@ (8003e48 <disk_initialize+0x24>)
{
 8003e28:	4604      	mov	r4, r0
  if(disk.is_initialized[pdrv] == 0)
 8003e2a:	5c2b      	ldrb	r3, [r5, r0]
 8003e2c:	b953      	cbnz	r3, 8003e44 <disk_initialize+0x20>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003e2e:	eb05 0280 	add.w	r2, r5, r0, lsl #2
 8003e32:	182b      	adds	r3, r5, r0
 8003e34:	6852      	ldr	r2, [r2, #4]
 8003e36:	7a18      	ldrb	r0, [r3, #8]
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	4790      	blx	r2
    if(stat == RES_OK)
 8003e3c:	b908      	cbnz	r0, 8003e42 <disk_initialize+0x1e>
    {
      disk.is_initialized[pdrv] = 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	552b      	strb	r3, [r5, r4]
    }
  }
  return stat;
}
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
  DSTATUS stat = RES_OK;
 8003e44:	2000      	movs	r0, #0
 8003e46:	e7fc      	b.n	8003e42 <disk_initialize+0x1e>
 8003e48:	24000728 	.word	0x24000728

08003e4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003e4c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003e4e:	4c05      	ldr	r4, [pc, #20]	@ (8003e64 <disk_read+0x18>)
 8003e50:	1825      	adds	r5, r4, r0
 8003e52:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8003e56:	6860      	ldr	r0, [r4, #4]
 8003e58:	6884      	ldr	r4, [r0, #8]
 8003e5a:	7a28      	ldrb	r0, [r5, #8]
 8003e5c:	46a4      	mov	ip, r4
  return res;
}
 8003e5e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003e60:	4760      	bx	ip
 8003e62:	bf00      	nop
 8003e64:	24000728 	.word	0x24000728

08003e68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003e68:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003e6a:	4c05      	ldr	r4, [pc, #20]	@ (8003e80 <disk_write+0x18>)
 8003e6c:	1825      	adds	r5, r4, r0
 8003e6e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8003e72:	6860      	ldr	r0, [r4, #4]
 8003e74:	68c4      	ldr	r4, [r0, #12]
 8003e76:	7a28      	ldrb	r0, [r5, #8]
 8003e78:	46a4      	mov	ip, r4
  return res;
}
 8003e7a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003e7c:	4760      	bx	ip
 8003e7e:	bf00      	nop
 8003e80:	24000728 	.word	0x24000728

08003e84 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003e84:	4b05      	ldr	r3, [pc, #20]	@ (8003e9c <disk_ioctl+0x18>)
{
 8003e86:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003e88:	181c      	adds	r4, r3, r0
 8003e8a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	7a20      	ldrb	r0, [r4, #8]
 8003e92:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8003e94:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003e98:	4718      	bx	r3
 8003e9a:	bf00      	nop
 8003e9c:	24000728 	.word	0x24000728

08003ea0 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8003ea0:	6800      	ldr	r0, [r0, #0]
 8003ea2:	4770      	bx	lr

08003ea4 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8003ea4:	0a0b      	lsrs	r3, r1, #8
 8003ea6:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ea8:	7043      	strb	r3, [r0, #1]
 8003eaa:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8003eac:	0e09      	lsrs	r1, r1, #24
 8003eae:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8003eb0:	70c1      	strb	r1, [r0, #3]
}
 8003eb2:	4770      	bx	lr

08003eb4 <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8003eb4:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 8003eb6:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8003eba:	4290      	cmp	r0, r2
 8003ebc:	d1fb      	bne.n	8003eb6 <mem_set+0x2>
}
 8003ebe:	4770      	bx	lr

08003ec0 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f30 <chk_lock+0x70>)
{
 8003ec2:	4602      	mov	r2, r0
		if (Files[i].fs) {	/* Existing entry */
 8003ec4:	6818      	ldr	r0, [r3, #0]
{
 8003ec6:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8003ec8:	b160      	cbz	r0, 8003ee4 <chk_lock+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003eca:	6814      	ldr	r4, [r2, #0]
 8003ecc:	42a0      	cmp	r0, r4
 8003ece:	d107      	bne.n	8003ee0 <chk_lock+0x20>
 8003ed0:	685c      	ldr	r4, [r3, #4]
 8003ed2:	6890      	ldr	r0, [r2, #8]
 8003ed4:	4284      	cmp	r4, r0
 8003ed6:	d103      	bne.n	8003ee0 <chk_lock+0x20>
				Files[i].clu == dp->obj.sclust &&
 8003ed8:	689c      	ldr	r4, [r3, #8]
 8003eda:	6950      	ldr	r0, [r2, #20]
 8003edc:	4284      	cmp	r4, r0
 8003ede:	d012      	beq.n	8003f06 <chk_lock+0x46>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003ee0:	2400      	movs	r4, #0
 8003ee2:	e000      	b.n	8003ee6 <chk_lock+0x26>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8003ee4:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8003ee6:	6918      	ldr	r0, [r3, #16]
 8003ee8:	b1b8      	cbz	r0, 8003f1a <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003eea:	6815      	ldr	r5, [r2, #0]
 8003eec:	42a8      	cmp	r0, r5
 8003eee:	d107      	bne.n	8003f00 <chk_lock+0x40>
 8003ef0:	695d      	ldr	r5, [r3, #20]
 8003ef2:	6890      	ldr	r0, [r2, #8]
 8003ef4:	4285      	cmp	r5, r0
 8003ef6:	d103      	bne.n	8003f00 <chk_lock+0x40>
				Files[i].clu == dp->obj.sclust &&
 8003ef8:	6998      	ldr	r0, [r3, #24]
 8003efa:	6952      	ldr	r2, [r2, #20]
 8003efc:	4290      	cmp	r0, r2
 8003efe:	d006      	beq.n	8003f0e <chk_lock+0x4e>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003f00:	b13c      	cbz	r4, 8003f12 <chk_lock+0x52>
 8003f02:	2000      	movs	r0, #0
 8003f04:	e009      	b.n	8003f1a <chk_lock+0x5a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003f06:	2200      	movs	r2, #0
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003f08:	b141      	cbz	r1, 8003f1c <chk_lock+0x5c>
 8003f0a:	2010      	movs	r0, #16
 8003f0c:	e005      	b.n	8003f1a <chk_lock+0x5a>
 8003f0e:	2201      	movs	r2, #1
 8003f10:	e7fa      	b.n	8003f08 <chk_lock+0x48>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003f12:	2902      	cmp	r1, #2
 8003f14:	bf0c      	ite	eq
 8003f16:	2000      	moveq	r0, #0
 8003f18:	2012      	movne	r0, #18
}
 8003f1a:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003f1c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003f20:	8998      	ldrh	r0, [r3, #12]
 8003f22:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8003f26:	4258      	negs	r0, r3
 8003f28:	4158      	adcs	r0, r3
 8003f2a:	0100      	lsls	r0, r0, #4
 8003f2c:	e7f5      	b.n	8003f1a <chk_lock+0x5a>
 8003f2e:	bf00      	nop
 8003f30:	24000700 	.word	0x24000700

08003f34 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8003f34:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb4 <inc_lock+0x80>)
{
 8003f36:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8003f38:	6813      	ldr	r3, [r2, #0]
 8003f3a:	6806      	ldr	r6, [r0, #0]
 8003f3c:	429e      	cmp	r6, r3
 8003f3e:	d107      	bne.n	8003f50 <inc_lock+0x1c>
 8003f40:	6855      	ldr	r5, [r2, #4]
 8003f42:	6884      	ldr	r4, [r0, #8]
 8003f44:	42a5      	cmp	r5, r4
 8003f46:	d103      	bne.n	8003f50 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 8003f48:	6895      	ldr	r5, [r2, #8]
 8003f4a:	6944      	ldr	r4, [r0, #20]
 8003f4c:	42a5      	cmp	r5, r4
 8003f4e:	d019      	beq.n	8003f84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003f50:	6914      	ldr	r4, [r2, #16]
 8003f52:	42b4      	cmp	r4, r6
 8003f54:	d118      	bne.n	8003f88 <inc_lock+0x54>
 8003f56:	6957      	ldr	r7, [r2, #20]
 8003f58:	6885      	ldr	r5, [r0, #8]
 8003f5a:	42af      	cmp	r7, r5
 8003f5c:	d114      	bne.n	8003f88 <inc_lock+0x54>
			Files[i].clu == dp->obj.sclust &&
 8003f5e:	6997      	ldr	r7, [r2, #24]
 8003f60:	6945      	ldr	r5, [r0, #20]
 8003f62:	42af      	cmp	r7, r5
 8003f64:	d110      	bne.n	8003f88 <inc_lock+0x54>
 8003f66:	2301      	movs	r3, #1
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003f68:	eb02 1003 	add.w	r0, r2, r3, lsl #4
 8003f6c:	8980      	ldrh	r0, [r0, #12]
 8003f6e:	b9e9      	cbnz	r1, 8003fac <inc_lock+0x78>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003f70:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8003f74:	8989      	ldrh	r1, [r1, #12]
 8003f76:	3101      	adds	r1, #1
 8003f78:	b289      	uxth	r1, r1
 8003f7a:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 8003f7e:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003f80:	8191      	strh	r1, [r2, #12]
}
 8003f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003f84:	2300      	movs	r3, #0
 8003f86:	e7ef      	b.n	8003f68 <inc_lock+0x34>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003f88:	b10b      	cbz	r3, 8003f8e <inc_lock+0x5a>
 8003f8a:	b98c      	cbnz	r4, 8003fb0 <inc_lock+0x7c>
 8003f8c:	2301      	movs	r3, #1
		Files[i].fs = dp->obj.fs;
 8003f8e:	011d      	lsls	r5, r3, #4
 8003f90:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 8003f94:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 8003f96:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8003f98:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 8003f9a:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 8003f9c:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	81a0      	strh	r0, [r4, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003fa2:	2900      	cmp	r1, #0
 8003fa4:	d0e4      	beq.n	8003f70 <inc_lock+0x3c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003fa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003faa:	e7e6      	b.n	8003f7a <inc_lock+0x46>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003fac:	2800      	cmp	r0, #0
 8003fae:	d0fa      	beq.n	8003fa6 <inc_lock+0x72>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	e7e6      	b.n	8003f82 <inc_lock+0x4e>
 8003fb4:	24000700 	.word	0x24000700

08003fb8 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003fb8:	3801      	subs	r0, #1
 8003fba:	2801      	cmp	r0, #1
 8003fbc:	d815      	bhi.n	8003fea <dec_lock+0x32>
		n = Files[i].ctr;
 8003fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8003ff0 <dec_lock+0x38>)
 8003fc0:	0101      	lsls	r1, r0, #4
 8003fc2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8003fc6:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fcc:	d104      	bne.n	8003fd8 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	5053      	str	r3, [r2, r1]
 8003fd6:	e006      	b.n	8003fe6 <dec_lock+0x2e>
		if (n > 0) n--;				/* Decrement read mode open count */
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0fa      	beq.n	8003fd2 <dec_lock+0x1a>
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8003fe0:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f5      	beq.n	8003fd2 <dec_lock+0x1a>
		res = FR_OK;
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003fea:	2002      	movs	r0, #2
	}
	return res;
}
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	24000700 	.word	0x24000700

08003ff4 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003ff4:	4b05      	ldr	r3, [pc, #20]	@ (800400c <clear_lock+0x18>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4290      	cmp	r0, r2
 8003ffa:	bf04      	itt	eq
 8003ffc:	2200      	moveq	r2, #0
 8003ffe:	601a      	streq	r2, [r3, #0]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	4290      	cmp	r0, r2
 8004004:	bf04      	itt	eq
 8004006:	2200      	moveq	r2, #0
 8004008:	611a      	streq	r2, [r3, #16]
	}
}
 800400a:	4770      	bx	lr
 800400c:	24000700 	.word	0x24000700

08004010 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004010:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 8004012:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004014:	3b02      	subs	r3, #2
 8004016:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8004018:	bf83      	ittte	hi
 800401a:	8943      	ldrhhi	r3, [r0, #10]
 800401c:	6a80      	ldrhi	r0, [r0, #40]	@ 0x28
 800401e:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004022:	2000      	movls	r0, #0
}
 8004024:	4770      	bx	lr

08004026 <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004026:	6802      	ldr	r2, [r0, #0]
 8004028:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800402a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800402c:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800402e:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004030:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004034:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004036:	b130      	cbz	r0, 8004046 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8004038:	4281      	cmp	r1, r0
 800403a:	d302      	bcc.n	8004042 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 800403c:	1a09      	subs	r1, r1, r0
 800403e:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004040:	e7f8      	b.n	8004034 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8004042:	6858      	ldr	r0, [r3, #4]
 8004044:	4408      	add	r0, r1
}
 8004046:	4770      	bx	lr

08004048 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004048:	6803      	ldr	r3, [r0, #0]
{
 800404a:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 800404c:	b18b      	cbz	r3, 8004072 <get_ldnumber+0x2a>
 800404e:	4619      	mov	r1, r3
 8004050:	460a      	mov	r2, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004056:	2c20      	cmp	r4, #32
 8004058:	d909      	bls.n	800406e <get_ldnumber+0x26>
 800405a:	2c3a      	cmp	r4, #58	@ 0x3a
 800405c:	d1f8      	bne.n	8004050 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800405e:	7819      	ldrb	r1, [r3, #0]
 8004060:	2930      	cmp	r1, #48	@ 0x30
 8004062:	d106      	bne.n	8004072 <get_ldnumber+0x2a>
			i = *tp++ - '0';
 8004064:	3301      	adds	r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004066:	429a      	cmp	r2, r3
 8004068:	d103      	bne.n	8004072 <get_ldnumber+0x2a>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
					vol = (int)i;
					*path = ++tt;
 800406a:	3201      	adds	r2, #1
 800406c:	6002      	str	r2, [r0, #0]
					vol = (int)i;
 800406e:	2000      	movs	r0, #0
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8004070:	bd10      	pop	{r4, pc}
	int vol = -1;
 8004072:	f04f 30ff 	mov.w	r0, #4294967295
 8004076:	e7fb      	b.n	8004070 <get_ldnumber+0x28>

08004078 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800407c:	4604      	mov	r4, r0
 800407e:	b918      	cbnz	r0, 8004088 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 8004080:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004082:	2300      	movs	r3, #0
 8004084:	602b      	str	r3, [r5, #0]
	return res;
}
 8004086:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004088:	6803      	ldr	r3, [r0, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f8      	beq.n	8004080 <validate+0x8>
 800408e:	781a      	ldrb	r2, [r3, #0]
 8004090:	2a00      	cmp	r2, #0
 8004092:	d0f5      	beq.n	8004080 <validate+0x8>
 8004094:	8881      	ldrh	r1, [r0, #4]
 8004096:	88da      	ldrh	r2, [r3, #6]
 8004098:	4291      	cmp	r1, r2
 800409a:	d1f1      	bne.n	8004080 <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800409c:	7858      	ldrb	r0, [r3, #1]
 800409e:	f7ff feb7 	bl	8003e10 <disk_status>
 80040a2:	f010 0001 	ands.w	r0, r0, #1
 80040a6:	d1eb      	bne.n	8004080 <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	e7eb      	b.n	8004084 <validate+0xc>

080040ac <sync_window>:
{
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80040ae:	78c3      	ldrb	r3, [r0, #3]
{
 80040b0:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80040b2:	b90b      	cbnz	r3, 80040b8 <sync_window+0xc>
	FRESULT res = FR_OK;
 80040b4:	2000      	movs	r0, #0
}
 80040b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 80040b8:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80040ba:	f100 0730 	add.w	r7, r0, #48	@ 0x30
 80040be:	2301      	movs	r3, #1
 80040c0:	7840      	ldrb	r0, [r0, #1]
 80040c2:	462a      	mov	r2, r5
 80040c4:	4639      	mov	r1, r7
 80040c6:	f7ff fecf 	bl	8003e68 <disk_write>
 80040ca:	b990      	cbnz	r0, 80040f2 <sync_window+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80040cc:	6a23      	ldr	r3, [r4, #32]
 80040ce:	69a2      	ldr	r2, [r4, #24]
 80040d0:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 80040d2:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d2ed      	bcs.n	80040b4 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80040d8:	78a6      	ldrb	r6, [r4, #2]
 80040da:	2e01      	cmp	r6, #1
 80040dc:	d9ea      	bls.n	80040b4 <sync_window+0x8>
					wsect += fs->fsize;
 80040de:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 80040e0:	4639      	mov	r1, r7
 80040e2:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80040e4:	3e01      	subs	r6, #1
					wsect += fs->fsize;
 80040e6:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80040e8:	2301      	movs	r3, #1
 80040ea:	462a      	mov	r2, r5
 80040ec:	f7ff febc 	bl	8003e68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80040f0:	e7f3      	b.n	80040da <sync_window+0x2e>
			res = FR_DISK_ERR;
 80040f2:	2001      	movs	r0, #1
 80040f4:	e7df      	b.n	80040b6 <sync_window+0xa>

080040f6 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80040f6:	3801      	subs	r0, #1
 80040f8:	440a      	add	r2, r1
			*d++ = *s++;
 80040fa:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 80040fe:	4291      	cmp	r1, r2
			*d++ = *s++;
 8004100:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8004104:	d1f9      	bne.n	80040fa <mem_cpy.part.0+0x4>
}
 8004106:	4770      	bx	lr

08004108 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8004108:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800410c:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800410e:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8004110:	7803      	ldrb	r3, [r0, #0]
 8004112:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004114:	bf01      	itttt	eq
 8004116:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004118:	750a      	strbeq	r2, [r1, #20]
 800411a:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800411c:	754a      	strbeq	r2, [r1, #21]
}
 800411e:	4770      	bx	lr

08004120 <move_window>:
{
 8004120:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004122:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 8004124:	4605      	mov	r5, r0
 8004126:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004128:	428b      	cmp	r3, r1
 800412a:	d010      	beq.n	800414e <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 800412c:	f7ff ffbe 	bl	80040ac <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004130:	b960      	cbnz	r0, 800414c <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004132:	4622      	mov	r2, r4
 8004134:	2301      	movs	r3, #1
 8004136:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 800413a:	7868      	ldrb	r0, [r5, #1]
 800413c:	f7ff fe86 	bl	8003e4c <disk_read>
				res = FR_DISK_ERR;
 8004140:	2800      	cmp	r0, #0
 8004142:	bf1c      	itt	ne
 8004144:	f04f 34ff 	movne.w	r4, #4294967295
 8004148:	2001      	movne	r0, #1
			fs->winsect = sector;
 800414a:	62ec      	str	r4, [r5, #44]	@ 0x2c
}
 800414c:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 800414e:	2000      	movs	r0, #0
 8004150:	e7fc      	b.n	800414c <move_window+0x2c>
	...

08004154 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004154:	2300      	movs	r3, #0
{
 8004156:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004158:	70c3      	strb	r3, [r0, #3]
 800415a:	f04f 33ff 	mov.w	r3, #4294967295
{
 800415e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004160:	62c3      	str	r3, [r0, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004162:	f7ff ffdd 	bl	8004120 <move_window>
 8004166:	4603      	mov	r3, r0
 8004168:	bb18      	cbnz	r0, 80041b2 <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800416a:	f8b4 122e 	ldrh.w	r1, [r4, #558]	@ 0x22e
 800416e:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8004172:	4291      	cmp	r1, r2
 8004174:	d11f      	bne.n	80041b6 <check_fs+0x62>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004176:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
 800417a:	2ae9      	cmp	r2, #233	@ 0xe9
 800417c:	d005      	beq.n	800418a <check_fs+0x36>
 800417e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004180:	490f      	ldr	r1, [pc, #60]	@ (80041c0 <check_fs+0x6c>)
 8004182:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8004186:	428a      	cmp	r2, r1
 8004188:	d117      	bne.n	80041ba <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800418a:	f104 0066 	add.w	r0, r4, #102	@ 0x66
 800418e:	4a0d      	ldr	r2, [pc, #52]	@ (80041c4 <check_fs+0x70>)
 8004190:	f7ff fe86 	bl	8003ea0 <ld_dword>
 8004194:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8004198:	4290      	cmp	r0, r2
 800419a:	d008      	beq.n	80041ae <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800419c:	4b0a      	ldr	r3, [pc, #40]	@ (80041c8 <check_fs+0x74>)
 800419e:	f104 0082 	add.w	r0, r4, #130	@ 0x82
 80041a2:	f7ff fe7d 	bl	8003ea0 <ld_dword>
 80041a6:	1ac3      	subs	r3, r0, r3
 80041a8:	bf18      	it	ne
 80041aa:	2301      	movne	r3, #1
 80041ac:	005b      	lsls	r3, r3, #1
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80041b2:	2304      	movs	r3, #4
 80041b4:	e7fb      	b.n	80041ae <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80041b6:	2303      	movs	r3, #3
 80041b8:	e7f9      	b.n	80041ae <check_fs+0x5a>
	return 2;
 80041ba:	2302      	movs	r3, #2
 80041bc:	e7f7      	b.n	80041ae <check_fs+0x5a>
 80041be:	bf00      	nop
 80041c0:	009000eb 	.word	0x009000eb
 80041c4:	00544146 	.word	0x00544146
 80041c8:	33544146 	.word	0x33544146

080041cc <find_volume>:
	*rfs = 0;
 80041cc:	2300      	movs	r3, #0
{
 80041ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041d0:	b085      	sub	sp, #20
	*rfs = 0;
 80041d2:	600b      	str	r3, [r1, #0]
{
 80041d4:	460f      	mov	r7, r1
 80041d6:	4616      	mov	r6, r2
	vol = get_ldnumber(path);
 80041d8:	f7ff ff36 	bl	8004048 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80041dc:	1e05      	subs	r5, r0, #0
 80041de:	f2c0 810e 	blt.w	80043fe <find_volume+0x232>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80041e2:	4b8a      	ldr	r3, [pc, #552]	@ (800440c <find_volume+0x240>)
 80041e4:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80041e8:	2c00      	cmp	r4, #0
 80041ea:	f000 810a 	beq.w	8004402 <find_volume+0x236>
	*rfs = fs;							/* Return pointer to the file system object */
 80041ee:	603c      	str	r4, [r7, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80041f0:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80041f4:	7823      	ldrb	r3, [r4, #0]
 80041f6:	b16b      	cbz	r3, 8004214 <find_volume+0x48>
		stat = disk_status(fs->drv);
 80041f8:	7860      	ldrb	r0, [r4, #1]
 80041fa:	f7ff fe09 	bl	8003e10 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80041fe:	07c7      	lsls	r7, r0, #31
 8004200:	d408      	bmi.n	8004214 <find_volume+0x48>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004202:	2e00      	cmp	r6, #0
 8004204:	f000 80d6 	beq.w	80043b4 <find_volume+0x1e8>
 8004208:	0740      	lsls	r0, r0, #29
 800420a:	f140 80d3 	bpl.w	80043b4 <find_volume+0x1e8>
				return FR_WRITE_PROTECTED;
 800420e:	200a      	movs	r0, #10
}
 8004210:	b005      	add	sp, #20
 8004212:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8004214:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004216:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 8004218:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800421a:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800421c:	f7ff fe02 	bl	8003e24 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004220:	07c1      	lsls	r1, r0, #31
 8004222:	f100 80f0 	bmi.w	8004406 <find_volume+0x23a>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004226:	b10e      	cbz	r6, 800422c <find_volume+0x60>
 8004228:	0742      	lsls	r2, r0, #29
 800422a:	d4f0      	bmi.n	800420e <find_volume+0x42>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800422c:	2100      	movs	r1, #0
 800422e:	4620      	mov	r0, r4
 8004230:	f7ff ff90 	bl	8004154 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004234:	2802      	cmp	r0, #2
 8004236:	f040 80c7 	bne.w	80043c8 <find_volume+0x1fc>
 800423a:	466f      	mov	r7, sp
 800423c:	f504 73fb 	add.w	r3, r4, #502	@ 0x1f6
 8004240:	f204 2136 	addw	r1, r4, #566	@ 0x236
 8004244:	463a      	mov	r2, r7
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004246:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 800424a:	b110      	cbz	r0, 8004252 <find_volume+0x86>
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fe27 	bl	8003ea0 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004252:	3310      	adds	r3, #16
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004254:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004258:	428b      	cmp	r3, r1
 800425a:	d1f4      	bne.n	8004246 <find_volume+0x7a>
 800425c:	2500      	movs	r5, #0
			bsect = br[i];
 800425e:	f857 6b04 	ldr.w	r6, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004262:	2e00      	cmp	r6, #0
 8004264:	f000 80a8 	beq.w	80043b8 <find_volume+0x1ec>
 8004268:	4631      	mov	r1, r6
 800426a:	4620      	mov	r0, r4
 800426c:	f7ff ff72 	bl	8004154 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004270:	2801      	cmp	r0, #1
 8004272:	f200 80a2 	bhi.w	80043ba <find_volume+0x1ee>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004276:	f8b4 303b 	ldrh.w	r3, [r4, #59]	@ 0x3b
 800427a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800427e:	f040 80a9 	bne.w	80043d4 <find_volume+0x208>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004282:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004286:	b921      	cbnz	r1, 8004292 <find_volume+0xc6>
 8004288:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800428c:	f7ff fe08 	bl	8003ea0 <ld_dword>
 8004290:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004292:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
		fs->fsize = fasize;
 8004296:	61a1      	str	r1, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004298:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800429a:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800429c:	2b01      	cmp	r3, #1
 800429e:	f200 8099 	bhi.w	80043d4 <find_volume+0x208>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80042a2:	f894 503d 	ldrb.w	r5, [r4, #61]	@ 0x3d
 80042a6:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80042a8:	2d00      	cmp	r5, #0
 80042aa:	f000 8093 	beq.w	80043d4 <find_volume+0x208>
 80042ae:	1e6b      	subs	r3, r5, #1
 80042b0:	422b      	tst	r3, r5
 80042b2:	f040 808f 	bne.w	80043d4 <find_volume+0x208>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80042b6:	f8b4 7041 	ldrh.w	r7, [r4, #65]	@ 0x41
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80042ba:	073b      	lsls	r3, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80042bc:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80042be:	f040 8089 	bne.w	80043d4 <find_volume+0x208>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80042c2:	f8b4 0043 	ldrh.w	r0, [r4, #67]	@ 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80042c6:	b918      	cbnz	r0, 80042d0 <find_volume+0x104>
 80042c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80042cc:	f7ff fde8 	bl	8003ea0 <ld_dword>
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80042d0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d07e      	beq.n	80043d4 <find_volume+0x208>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80042d6:	fb01 fe02 	mul.w	lr, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80042da:	eb03 1c17 	add.w	ip, r3, r7, lsr #4
 80042de:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80042e0:	4560      	cmp	r0, ip
 80042e2:	d377      	bcc.n	80043d4 <find_volume+0x208>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80042e4:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80042e8:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80042ea:	fbb0 f2f5 	udiv	r2, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80042ee:	d371      	bcc.n	80043d4 <find_volume+0x208>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80042f0:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 80042f4:	4282      	cmp	r2, r0
 80042f6:	d871      	bhi.n	80043dc <find_volume+0x210>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80042f8:	f640 75f5 	movw	r5, #4085	@ 0xff5
 80042fc:	42aa      	cmp	r2, r5
 80042fe:	bf94      	ite	ls
 8004300:	2501      	movls	r5, #1
 8004302:	2502      	movhi	r5, #2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004304:	3202      	adds	r2, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004306:	4433      	add	r3, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8004308:	eb06 000c 	add.w	r0, r6, ip
		if (fmt == FS_FAT32) {
 800430c:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800430e:	6162      	str	r2, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004310:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004312:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004314:	62a0      	str	r0, [r4, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8004316:	d163      	bne.n	80043e0 <find_volume+0x214>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004318:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800431c:	433b      	orrs	r3, r7
 800431e:	d159      	bne.n	80043d4 <find_volume+0x208>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004320:	0092      	lsls	r2, r2, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004322:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8004326:	f7ff fdbb 	bl	8003ea0 <ld_dword>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800432a:	f202 12ff 	addw	r2, r2, #511	@ 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800432e:	6260      	str	r0, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004330:	ebb1 2f52 	cmp.w	r1, r2, lsr #9
 8004334:	d34e      	bcc.n	80043d4 <find_volume+0x208>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004336:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800433a:	2d03      	cmp	r5, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800433c:	e9c4 3303 	strd	r3, r3, [r4, #12]
		fs->fsi_flag = 0x80;
 8004340:	f04f 0380 	mov.w	r3, #128	@ 0x80
 8004344:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004346:	d12b      	bne.n	80043a0 <find_volume+0x1d4>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004348:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 800434c:	2b01      	cmp	r3, #1
 800434e:	d127      	bne.n	80043a0 <find_volume+0x1d4>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004350:	1c71      	adds	r1, r6, #1
 8004352:	4620      	mov	r0, r4
 8004354:	f7ff fee4 	bl	8004120 <move_window>
 8004358:	bb10      	cbnz	r0, 80043a0 <find_volume+0x1d4>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800435a:	f8b4 222e 	ldrh.w	r2, [r4, #558]	@ 0x22e
 800435e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
			fs->fsi_flag = 0;
 8004362:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004364:	429a      	cmp	r2, r3
 8004366:	d11b      	bne.n	80043a0 <find_volume+0x1d4>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004368:	4b29      	ldr	r3, [pc, #164]	@ (8004410 <find_volume+0x244>)
 800436a:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800436e:	f7ff fd97 	bl	8003ea0 <ld_dword>
 8004372:	4298      	cmp	r0, r3
 8004374:	d114      	bne.n	80043a0 <find_volume+0x1d4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004376:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
 800437a:	f504 7005 	add.w	r0, r4, #532	@ 0x214
 800437e:	f7ff fd8f 	bl	8003ea0 <ld_dword>
 8004382:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004386:	3320      	adds	r3, #32
 8004388:	4298      	cmp	r0, r3
 800438a:	d109      	bne.n	80043a0 <find_volume+0x1d4>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800438c:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 8004390:	f7ff fd86 	bl	8003ea0 <ld_dword>
 8004394:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004396:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 800439a:	f7ff fd81 	bl	8003ea0 <ld_dword>
 800439e:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 80043a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004414 <find_volume+0x248>)
	clear_lock(fs);
 80043a2:	4620      	mov	r0, r4
	fs->fs_type = fmt;		/* FAT sub-type */
 80043a4:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80043a6:	8813      	ldrh	r3, [r2, #0]
 80043a8:	3301      	adds	r3, #1
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	80e3      	strh	r3, [r4, #6]
 80043ae:	8013      	strh	r3, [r2, #0]
	clear_lock(fs);
 80043b0:	f7ff fe20 	bl	8003ff4 <clear_lock>
			return FR_OK;				/* The file system object is valid */
 80043b4:	2000      	movs	r0, #0
 80043b6:	e72b      	b.n	8004210 <find_volume+0x44>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80043b8:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80043ba:	3501      	adds	r5, #1
 80043bc:	2d04      	cmp	r5, #4
 80043be:	f47f af4e 	bne.w	800425e <find_volume+0x92>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80043c2:	2804      	cmp	r0, #4
 80043c4:	d106      	bne.n	80043d4 <find_volume+0x208>
 80043c6:	e001      	b.n	80043cc <find_volume+0x200>
 80043c8:	2804      	cmp	r0, #4
 80043ca:	d101      	bne.n	80043d0 <find_volume+0x204>
 80043cc:	2001      	movs	r0, #1
 80043ce:	e71f      	b.n	8004210 <find_volume+0x44>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80043d0:	2801      	cmp	r0, #1
 80043d2:	d901      	bls.n	80043d8 <find_volume+0x20c>
 80043d4:	200d      	movs	r0, #13
 80043d6:	e71b      	b.n	8004210 <find_volume+0x44>
 80043d8:	2600      	movs	r6, #0
 80043da:	e74c      	b.n	8004276 <find_volume+0xaa>
		fmt = FS_FAT32;
 80043dc:	2503      	movs	r5, #3
 80043de:	e791      	b.n	8004304 <find_volume+0x138>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80043e0:	2f00      	cmp	r7, #0
 80043e2:	d0f7      	beq.n	80043d4 <find_volume+0x208>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80043e4:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80043e6:	eb03 000e 	add.w	r0, r3, lr
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80043ea:	ea4f 0342 	mov.w	r3, r2, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80043ee:	bf1b      	ittet	ne
 80043f0:	189b      	addne	r3, r3, r2
 80043f2:	f002 0201 	andne.w	r2, r2, #1
 80043f6:	461a      	moveq	r2, r3
 80043f8:	eb02 0253 	addne.w	r2, r2, r3, lsr #1
 80043fc:	e795      	b.n	800432a <find_volume+0x15e>
	if (vol < 0) return FR_INVALID_DRIVE;
 80043fe:	200b      	movs	r0, #11
 8004400:	e706      	b.n	8004210 <find_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004402:	200c      	movs	r0, #12
 8004404:	e704      	b.n	8004210 <find_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004406:	2003      	movs	r0, #3
 8004408:	e702      	b.n	8004210 <find_volume+0x44>
 800440a:	bf00      	nop
 800440c:	24000724 	.word	0x24000724
 8004410:	41615252 	.word	0x41615252
 8004414:	24000720 	.word	0x24000720

08004418 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004418:	2901      	cmp	r1, #1
{
 800441a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800441e:	4606      	mov	r6, r0
 8004420:	460c      	mov	r4, r1
 8004422:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004424:	d96e      	bls.n	8004504 <put_fat+0xec>
 8004426:	6943      	ldr	r3, [r0, #20]
 8004428:	428b      	cmp	r3, r1
 800442a:	d96b      	bls.n	8004504 <put_fat+0xec>
		switch (fs->fs_type) {
 800442c:	7803      	ldrb	r3, [r0, #0]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d03d      	beq.n	80044ae <put_fat+0x96>
 8004432:	2b03      	cmp	r3, #3
 8004434:	d04e      	beq.n	80044d4 <put_fat+0xbc>
 8004436:	2b01      	cmp	r3, #1
 8004438:	d164      	bne.n	8004504 <put_fat+0xec>
			bc = (UINT)clst; bc += bc / 2;
 800443a:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800443e:	6a01      	ldr	r1, [r0, #32]
 8004440:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8004444:	f7ff fe6c 	bl	8004120 <move_window>
			if (res != FR_OK) break;
 8004448:	4605      	mov	r5, r0
 800444a:	bb28      	cbnz	r0, 8004498 <put_fat+0x80>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800444c:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 8004450:	f106 0930 	add.w	r9, r6, #48	@ 0x30
 8004454:	f108 0a01 	add.w	sl, r8, #1
 8004458:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800445c:	b2fb      	uxtb	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800445e:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004460:	bf1f      	itttt	ne
 8004462:	f819 2008 	ldrbne.w	r2, [r9, r8]
 8004466:	f002 020f 	andne.w	r2, r2, #15
 800446a:	ea42 1303 	orrne.w	r3, r2, r3, lsl #4
 800446e:	b2db      	uxtbne	r3, r3
 8004470:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 8004474:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004476:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 8004478:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800447a:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800447e:	f7ff fe4f 	bl	8004120 <move_window>
			if (res != FR_OK) break;
 8004482:	4605      	mov	r5, r0
 8004484:	b940      	cbnz	r0, 8004498 <put_fat+0x80>
			p = fs->win + bc % SS(fs);
 8004486:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800448a:	b144      	cbz	r4, 800449e <put_fat+0x86>
 800448c:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8004490:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8004494:	2301      	movs	r3, #1
 8004496:	70f3      	strb	r3, [r6, #3]
}
 8004498:	4628      	mov	r0, r5
 800449a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800449e:	f819 300a 	ldrb.w	r3, [r9, sl]
 80044a2:	f3c7 2703 	ubfx	r7, r7, #8, #4
 80044a6:	f023 030f 	bic.w	r3, r3, #15
 80044aa:	431f      	orrs	r7, r3
 80044ac:	e7f0      	b.n	8004490 <put_fat+0x78>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80044ae:	6a01      	ldr	r1, [r0, #32]
 80044b0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80044b4:	f7ff fe34 	bl	8004120 <move_window>
			if (res != FR_OK) break;
 80044b8:	4605      	mov	r5, r0
 80044ba:	2800      	cmp	r0, #0
 80044bc:	d1ec      	bne.n	8004498 <put_fat+0x80>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80044be:	0064      	lsls	r4, r4, #1
 80044c0:	f106 0330 	add.w	r3, r6, #48	@ 0x30
 80044c4:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 80044c8:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80044ca:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80044cc:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 80044d0:	7057      	strb	r7, [r2, #1]
			fs->wflag = 1;
 80044d2:	e7df      	b.n	8004494 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80044d4:	6a01      	ldr	r1, [r0, #32]
 80044d6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80044da:	f7ff fe21 	bl	8004120 <move_window>
			if (res != FR_OK) break;
 80044de:	4605      	mov	r5, r0
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d1d9      	bne.n	8004498 <put_fat+0x80>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80044e4:	00a4      	lsls	r4, r4, #2
 80044e6:	f106 0330 	add.w	r3, r6, #48	@ 0x30
 80044ea:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 80044ee:	4423      	add	r3, r4
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fcd5 	bl	8003ea0 <ld_dword>
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80044f6:	4601      	mov	r1, r0
 80044f8:	4618      	mov	r0, r3
 80044fa:	f367 011b 	bfi	r1, r7, #0, #28
 80044fe:	f7ff fcd1 	bl	8003ea4 <st_dword>
 8004502:	e7c7      	b.n	8004494 <put_fat+0x7c>
	FRESULT res = FR_INT_ERR;
 8004504:	2502      	movs	r5, #2
 8004506:	e7c7      	b.n	8004498 <put_fat+0x80>

08004508 <sync_fs>:
{
 8004508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450a:	4604      	mov	r4, r0
	res = sync_window(fs);
 800450c:	f7ff fdce 	bl	80040ac <sync_window>
 8004510:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8004512:	2800      	cmp	r0, #0
 8004514:	d142      	bne.n	800459c <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004516:	7823      	ldrb	r3, [r4, #0]
 8004518:	2b03      	cmp	r3, #3
 800451a:	d137      	bne.n	800458c <sync_fs+0x84>
 800451c:	7927      	ldrb	r7, [r4, #4]
 800451e:	2f01      	cmp	r7, #1
 8004520:	d134      	bne.n	800458c <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8004522:	f104 0630 	add.w	r6, r4, #48	@ 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8004526:	2355      	movs	r3, #85	@ 0x55
			mem_set(fs->win, 0, SS(fs));
 8004528:	4601      	mov	r1, r0
 800452a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800452e:	4630      	mov	r0, r6
 8004530:	f7ff fcc0 	bl	8003eb4 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8004534:	f884 322e 	strb.w	r3, [r4, #558]	@ 0x22e
	*ptr++ = (BYTE)val;
 8004538:	23aa      	movs	r3, #170	@ 0xaa
	*ptr++ = (BYTE)val;
 800453a:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800453c:	2172      	movs	r1, #114	@ 0x72
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800453e:	f504 7006 	add.w	r0, r4, #536	@ 0x218
	*ptr++ = (BYTE)val;
 8004542:	f884 322f 	strb.w	r3, [r4, #559]	@ 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 8004546:	2352      	movs	r3, #82	@ 0x52
	*ptr++ = (BYTE)val;
 8004548:	f884 2033 	strb.w	r2, [r4, #51]	@ 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 800454c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8004550:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 8004554:	2361      	movs	r3, #97	@ 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 8004556:	f884 1214 	strb.w	r1, [r4, #532]	@ 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 800455a:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
	*ptr++ = (BYTE)val;
 800455e:	f884 3217 	strb.w	r3, [r4, #535]	@ 0x217
	*ptr++ = (BYTE)val; val >>= 8;
 8004562:	f884 1215 	strb.w	r1, [r4, #533]	@ 0x215
	*ptr++ = (BYTE)val; val >>= 8;
 8004566:	f884 2216 	strb.w	r2, [r4, #534]	@ 0x216
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800456a:	6921      	ldr	r1, [r4, #16]
 800456c:	f7ff fc9a 	bl	8003ea4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004570:	68e1      	ldr	r1, [r4, #12]
 8004572:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 8004576:	f7ff fc95 	bl	8003ea4 <st_dword>
			fs->winsect = fs->volbase + 1;
 800457a:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800457c:	463b      	mov	r3, r7
 800457e:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 8004580:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004582:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8004584:	62e2      	str	r2, [r4, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004586:	f7ff fc6f 	bl	8003e68 <disk_write>
			fs->fsi_flag = 0;
 800458a:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800458c:	2200      	movs	r2, #0
 800458e:	7860      	ldrb	r0, [r4, #1]
 8004590:	4611      	mov	r1, r2
 8004592:	f7ff fc77 	bl	8003e84 <disk_ioctl>
 8004596:	3800      	subs	r0, #0
 8004598:	bf18      	it	ne
 800459a:	2001      	movne	r0, #1
}
 800459c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800459e <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 800459e:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 80045a0:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80045a2:	bf04      	itt	eq
 80045a4:	8a8a      	ldrheq	r2, [r1, #20]
 80045a6:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	4770      	bx	lr

080045ae <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80045ae:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80045b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b2:	4606      	mov	r6, r0
 80045b4:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80045b6:	d94e      	bls.n	8004656 <get_fat.isra.0+0xa8>
 80045b8:	6943      	ldr	r3, [r0, #20]
 80045ba:	4299      	cmp	r1, r3
 80045bc:	d24b      	bcs.n	8004656 <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 80045be:	7803      	ldrb	r3, [r0, #0]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d029      	beq.n	8004618 <get_fat.isra.0+0x6a>
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d034      	beq.n	8004632 <get_fat.isra.0+0x84>
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d144      	bne.n	8004656 <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 80045cc:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045d0:	6a01      	ldr	r1, [r0, #32]
 80045d2:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 80045d6:	f7ff fda3 	bl	8004120 <move_window>
 80045da:	b110      	cbz	r0, 80045e2 <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80045dc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80045e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80045e2:	1c6f      	adds	r7, r5, #1
 80045e4:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045e8:	6a31      	ldr	r1, [r6, #32]
 80045ea:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 80045ec:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045ee:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80045f2:	f895 5030 	ldrb.w	r5, [r5, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045f6:	f7ff fd93 	bl	8004120 <move_window>
 80045fa:	2800      	cmp	r0, #0
 80045fc:	d1ee      	bne.n	80045dc <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80045fe:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8004602:	4437      	add	r7, r6
 8004604:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004608:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800460c:	07e3      	lsls	r3, r4, #31
 800460e:	bf4c      	ite	mi
 8004610:	0900      	lsrmi	r0, r0, #4
 8004612:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004616:	e7e3      	b.n	80045e0 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004618:	6a01      	ldr	r1, [r0, #32]
 800461a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800461e:	f7ff fd7f 	bl	8004120 <move_window>
 8004622:	2800      	cmp	r0, #0
 8004624:	d1da      	bne.n	80045dc <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004626:	0064      	lsls	r4, r4, #1
 8004628:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 800462c:	4434      	add	r4, r6
 800462e:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
			break;
 8004630:	e7d6      	b.n	80045e0 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004632:	6a01      	ldr	r1, [r0, #32]
 8004634:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004638:	f7ff fd72 	bl	8004120 <move_window>
 800463c:	2800      	cmp	r0, #0
 800463e:	d1cd      	bne.n	80045dc <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004640:	00a4      	lsls	r4, r4, #2
 8004642:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 8004646:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 800464a:	4420      	add	r0, r4
 800464c:	f7ff fc28 	bl	8003ea0 <ld_dword>
 8004650:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 8004654:	e7c4      	b.n	80045e0 <get_fat.isra.0+0x32>
		val = 1;	/* Internal error */
 8004656:	2001      	movs	r0, #1
	return val;
 8004658:	e7c2      	b.n	80045e0 <get_fat.isra.0+0x32>

0800465a <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800465a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dp->dptr = ofs;				/* Set current offset */
 800465c:	2300      	movs	r3, #0
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800465e:	6886      	ldr	r6, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8004660:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8004662:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8004664:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004666:	b9b6      	cbnz	r6, 8004696 <dir_sdi.constprop.0+0x3c>
 8004668:	782b      	ldrb	r3, [r5, #0]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <dir_sdi.constprop.0+0x18>
		clst = fs->dirbase;
 800466e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004670:	b983      	cbnz	r3, 8004694 <dir_sdi.constprop.0+0x3a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004672:	892b      	ldrh	r3, [r5, #8]
 8004674:	b90b      	cbnz	r3, 800467a <dir_sdi.constprop.0+0x20>
		return FR_INT_ERR;
 8004676:	2002      	movs	r0, #2
}
 8004678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dp->sect = fs->dirbase;
 800467a:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800467c:	2200      	movs	r2, #0
	dp->clust = clst;					/* Current cluster# */
 800467e:	e9c4 2006 	strd	r2, r0, [r4, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004682:	2800      	cmp	r0, #0
 8004684:	d0f7      	beq.n	8004676 <dir_sdi.constprop.0+0x1c>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004686:	eb00 2056 	add.w	r0, r0, r6, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800468a:	3530      	adds	r5, #48	@ 0x30
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800468c:	61e0      	str	r0, [r4, #28]
	return FR_OK;
 800468e:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004690:	6225      	str	r5, [r4, #32]
	return FR_OK;
 8004692:	e7f1      	b.n	8004678 <dir_sdi.constprop.0+0x1e>
 8004694:	461e      	mov	r6, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004696:	896f      	ldrh	r7, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004698:	4632      	mov	r2, r6
 800469a:	2600      	movs	r6, #0
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800469c:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800469e:	42b7      	cmp	r7, r6
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80046a0:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 80046a2:	d903      	bls.n	80046ac <dir_sdi.constprop.0+0x52>
		dp->sect = clust2sect(fs, clst);
 80046a4:	4628      	mov	r0, r5
 80046a6:	f7ff fcb3 	bl	8004010 <clust2sect>
 80046aa:	e7e8      	b.n	800467e <dir_sdi.constprop.0+0x24>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80046ac:	6820      	ldr	r0, [r4, #0]
 80046ae:	f7ff ff7e 	bl	80045ae <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80046b2:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80046b4:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80046b6:	d006      	beq.n	80046c6 <dir_sdi.constprop.0+0x6c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80046b8:	2801      	cmp	r0, #1
 80046ba:	d9dc      	bls.n	8004676 <dir_sdi.constprop.0+0x1c>
 80046bc:	696b      	ldr	r3, [r5, #20]
 80046be:	4298      	cmp	r0, r3
 80046c0:	d2d9      	bcs.n	8004676 <dir_sdi.constprop.0+0x1c>
			ofs -= csz;
 80046c2:	1bf6      	subs	r6, r6, r7
 80046c4:	e7eb      	b.n	800469e <dir_sdi.constprop.0+0x44>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80046c6:	2001      	movs	r0, #1
 80046c8:	e7d6      	b.n	8004678 <dir_sdi.constprop.0+0x1e>

080046ca <remove_chain>:
{
 80046ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046cc:	460c      	mov	r4, r1
 80046ce:	4606      	mov	r6, r0
 80046d0:	4611      	mov	r1, r2
	FATFS *fs = obj->fs;
 80046d2:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80046d4:	2c01      	cmp	r4, #1
 80046d6:	d92b      	bls.n	8004730 <remove_chain+0x66>
 80046d8:	696b      	ldr	r3, [r5, #20]
 80046da:	42a3      	cmp	r3, r4
 80046dc:	d928      	bls.n	8004730 <remove_chain+0x66>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80046de:	b12a      	cbz	r2, 80046ec <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80046e0:	f04f 32ff 	mov.w	r2, #4294967295
 80046e4:	4628      	mov	r0, r5
 80046e6:	f7ff fe97 	bl	8004418 <put_fat>
		if (res != FR_OK) return res;
 80046ea:	b938      	cbnz	r0, 80046fc <remove_chain+0x32>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80046ec:	4621      	mov	r1, r4
 80046ee:	6830      	ldr	r0, [r6, #0]
 80046f0:	4627      	mov	r7, r4
 80046f2:	f7ff ff5c 	bl	80045ae <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 80046f6:	4604      	mov	r4, r0
 80046f8:	b908      	cbnz	r0, 80046fe <remove_chain+0x34>
	return FR_OK;
 80046fa:	2000      	movs	r0, #0
}
 80046fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80046fe:	2801      	cmp	r0, #1
 8004700:	d016      	beq.n	8004730 <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004702:	1c43      	adds	r3, r0, #1
 8004704:	d016      	beq.n	8004734 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004706:	2200      	movs	r2, #0
 8004708:	4639      	mov	r1, r7
 800470a:	4628      	mov	r0, r5
 800470c:	f7ff fe84 	bl	8004418 <put_fat>
			if (res != FR_OK) return res;
 8004710:	2800      	cmp	r0, #0
 8004712:	d1f3      	bne.n	80046fc <remove_chain+0x32>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004714:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8004718:	1e91      	subs	r1, r2, #2
 800471a:	428b      	cmp	r3, r1
 800471c:	d205      	bcs.n	800472a <remove_chain+0x60>
			fs->free_clst++;
 800471e:	3301      	adds	r3, #1
 8004720:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8004722:	792b      	ldrb	r3, [r5, #4]
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800472a:	42a2      	cmp	r2, r4
 800472c:	d8de      	bhi.n	80046ec <remove_chain+0x22>
 800472e:	e7e4      	b.n	80046fa <remove_chain+0x30>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004730:	2002      	movs	r0, #2
 8004732:	e7e3      	b.n	80046fc <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004734:	2001      	movs	r0, #1
 8004736:	e7e1      	b.n	80046fc <remove_chain+0x32>

08004738 <create_chain>:
{
 8004738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800473c:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800473e:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8004740:	460f      	mov	r7, r1
 8004742:	b971      	cbnz	r1, 8004762 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004744:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004746:	b1ee      	cbz	r6, 8004784 <create_chain+0x4c>
 8004748:	696b      	ldr	r3, [r5, #20]
 800474a:	429e      	cmp	r6, r3
 800474c:	bf28      	it	cs
 800474e:	2601      	movcs	r6, #1
		ncl = scl;	/* Start cluster */
 8004750:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8004752:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004754:	696b      	ldr	r3, [r5, #20]
 8004756:	42a3      	cmp	r3, r4
 8004758:	d817      	bhi.n	800478a <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
 800475a:	2e01      	cmp	r6, #1
 800475c:	d114      	bne.n	8004788 <create_chain+0x50>
 800475e:	2400      	movs	r4, #0
 8004760:	e006      	b.n	8004770 <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004762:	4628      	mov	r0, r5
 8004764:	f7ff ff23 	bl	80045ae <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004768:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800476a:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800476c:	d803      	bhi.n	8004776 <create_chain+0x3e>
 800476e:	2401      	movs	r4, #1
}
 8004770:	4620      	mov	r0, r4
 8004772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004776:	1c43      	adds	r3, r0, #1
 8004778:	d030      	beq.n	80047dc <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800477a:	696b      	ldr	r3, [r5, #20]
 800477c:	4283      	cmp	r3, r0
 800477e:	d8f7      	bhi.n	8004770 <create_chain+0x38>
		scl = clst;
 8004780:	463e      	mov	r6, r7
 8004782:	e7e5      	b.n	8004750 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004784:	2601      	movs	r6, #1
 8004786:	e7e3      	b.n	8004750 <create_chain+0x18>
				ncl = 2;
 8004788:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800478a:	4621      	mov	r1, r4
 800478c:	f8d8 0000 	ldr.w	r0, [r8]
 8004790:	f7ff ff0d 	bl	80045ae <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 8004794:	b130      	cbz	r0, 80047a4 <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004796:	2801      	cmp	r0, #1
 8004798:	d0e9      	beq.n	800476e <create_chain+0x36>
 800479a:	3001      	adds	r0, #1
 800479c:	d01e      	beq.n	80047dc <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
 800479e:	42b4      	cmp	r4, r6
 80047a0:	d1d7      	bne.n	8004752 <create_chain+0x1a>
 80047a2:	e7dc      	b.n	800475e <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80047a4:	f04f 32ff 	mov.w	r2, #4294967295
 80047a8:	4621      	mov	r1, r4
 80047aa:	4628      	mov	r0, r5
 80047ac:	f7ff fe34 	bl	8004418 <put_fat>
		if (res == FR_OK && clst != 0) {
 80047b0:	b990      	cbnz	r0, 80047d8 <create_chain+0xa0>
 80047b2:	b957      	cbnz	r7, 80047ca <create_chain+0x92>
		fs->last_clst = ncl;
 80047b4:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80047b6:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 80047ba:	3a02      	subs	r2, #2
 80047bc:	4293      	cmp	r3, r2
 80047be:	d910      	bls.n	80047e2 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 80047c0:	792b      	ldrb	r3, [r5, #4]
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	712b      	strb	r3, [r5, #4]
 80047c8:	e7d2      	b.n	8004770 <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80047ca:	4622      	mov	r2, r4
 80047cc:	4639      	mov	r1, r7
 80047ce:	4628      	mov	r0, r5
 80047d0:	f7ff fe22 	bl	8004418 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d0ed      	beq.n	80047b4 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80047d8:	2801      	cmp	r0, #1
 80047da:	d1c8      	bne.n	800476e <create_chain+0x36>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80047dc:	f04f 34ff 	mov.w	r4, #4294967295
 80047e0:	e7c6      	b.n	8004770 <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80047e2:	3b01      	subs	r3, #1
 80047e4:	612b      	str	r3, [r5, #16]
 80047e6:	e7eb      	b.n	80047c0 <create_chain+0x88>

080047e8 <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80047e8:	6943      	ldr	r3, [r0, #20]
{
 80047ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80047ee:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80047f2:	69c3      	ldr	r3, [r0, #28]
{
 80047f4:	4605      	mov	r5, r0
 80047f6:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80047f8:	b18b      	cbz	r3, 800481e <dir_next+0x36>
 80047fa:	f5b8 1f00 	cmp.w	r8, #2097152	@ 0x200000
 80047fe:	d20e      	bcs.n	800481e <dir_next+0x36>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004800:	f3c8 0708 	ubfx	r7, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8004804:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004806:	2f00      	cmp	r7, #0
 8004808:	d14f      	bne.n	80048aa <dir_next+0xc2>
		dp->sect++;				/* Next sector */
 800480a:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800480c:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800480e:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8004810:	b941      	cbnz	r1, 8004824 <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004812:	8923      	ldrh	r3, [r4, #8]
 8004814:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8004818:	d847      	bhi.n	80048aa <dir_next+0xc2>
				dp->sect = 0; return FR_NO_FILE;
 800481a:	2300      	movs	r3, #0
 800481c:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800481e:	2004      	movs	r0, #4
}
 8004820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004824:	f8b4 900a 	ldrh.w	r9, [r4, #10]
 8004828:	f109 39ff 	add.w	r9, r9, #4294967295
 800482c:	ea19 2958 	ands.w	r9, r9, r8, lsr #9
 8004830:	d13b      	bne.n	80048aa <dir_next+0xc2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004832:	4620      	mov	r0, r4
 8004834:	f7ff febb 	bl	80045ae <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004838:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800483a:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800483c:	d801      	bhi.n	8004842 <dir_next+0x5a>
 800483e:	2002      	movs	r0, #2
 8004840:	e7ee      	b.n	8004820 <dir_next+0x38>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004842:	1c42      	adds	r2, r0, #1
 8004844:	d101      	bne.n	800484a <dir_next+0x62>
 8004846:	2001      	movs	r0, #1
 8004848:	e7ea      	b.n	8004820 <dir_next+0x38>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800484a:	6963      	ldr	r3, [r4, #20]
 800484c:	4283      	cmp	r3, r0
 800484e:	d826      	bhi.n	800489e <dir_next+0xb6>
					if (!stretch) {								/* If no stretch, report EOT */
 8004850:	f1ba 0f00 	cmp.w	sl, #0
 8004854:	d0e1      	beq.n	800481a <dir_next+0x32>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004856:	69a9      	ldr	r1, [r5, #24]
 8004858:	4628      	mov	r0, r5
 800485a:	f7ff ff6d 	bl	8004738 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800485e:	4606      	mov	r6, r0
 8004860:	2800      	cmp	r0, #0
 8004862:	d035      	beq.n	80048d0 <dir_next+0xe8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004864:	2801      	cmp	r0, #1
 8004866:	d0ea      	beq.n	800483e <dir_next+0x56>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d0ec      	beq.n	8004846 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800486c:	4620      	mov	r0, r4
 800486e:	f7ff fc1d 	bl	80040ac <sync_window>
 8004872:	4601      	mov	r1, r0
 8004874:	2800      	cmp	r0, #0
 8004876:	d1e6      	bne.n	8004846 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004878:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800487c:	f44f 7200 	mov.w	r2, #512	@ 0x200
						fs->wflag = 1;
 8004880:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004884:	f7ff fb16 	bl	8003eb4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004888:	4631      	mov	r1, r6
 800488a:	4620      	mov	r0, r4
 800488c:	f7ff fbc0 	bl	8004010 <clust2sect>
 8004890:	8963      	ldrh	r3, [r4, #10]
 8004892:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8004894:	4599      	cmp	r9, r3
 8004896:	d30f      	bcc.n	80048b8 <dir_next+0xd0>
					fs->winsect -= n;							/* Restore window offset */
 8004898:	eba0 0009 	sub.w	r0, r0, r9
 800489c:	62e0      	str	r0, [r4, #44]	@ 0x2c
				dp->sect = clust2sect(fs, clst);
 800489e:	4631      	mov	r1, r6
 80048a0:	4620      	mov	r0, r4
				dp->clust = clst;		/* Initialize data for new cluster */
 80048a2:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80048a4:	f7ff fbb4 	bl	8004010 <clust2sect>
 80048a8:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80048aa:	3430      	adds	r4, #48	@ 0x30
	return FR_OK;
 80048ac:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 80048ae:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80048b2:	443c      	add	r4, r7
 80048b4:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80048b6:	e7b3      	b.n	8004820 <dir_next+0x38>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80048b8:	4620      	mov	r0, r4
						fs->wflag = 1;
 80048ba:	f884 a003 	strb.w	sl, [r4, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80048be:	f7ff fbf5 	bl	80040ac <sync_window>
 80048c2:	2800      	cmp	r0, #0
 80048c4:	d1bf      	bne.n	8004846 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80048c6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80048c8:	f109 0901 	add.w	r9, r9, #1
 80048cc:	3001      	adds	r0, #1
 80048ce:	e7df      	b.n	8004890 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80048d0:	2007      	movs	r0, #7
 80048d2:	e7a5      	b.n	8004820 <dir_next+0x38>

080048d4 <follow_path>:
{
 80048d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048d8:	4681      	mov	r9, r0
	FATFS *fs = obj->fs;
 80048da:	6806      	ldr	r6, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80048dc:	460c      	mov	r4, r1
 80048de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80048e4:	d0fa      	beq.n	80048dc <follow_path+0x8>
 80048e6:	2b5c      	cmp	r3, #92	@ 0x5c
 80048e8:	d0f8      	beq.n	80048dc <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 80048ea:	2300      	movs	r3, #0
 80048ec:	f8c9 3008 	str.w	r3, [r9, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80048f0:	7823      	ldrb	r3, [r4, #0]
 80048f2:	2b1f      	cmp	r3, #31
 80048f4:	d95d      	bls.n	80049b2 <follow_path+0xde>
	p = *path; sfn = dp->fn;
 80048f6:	f109 0524 	add.w	r5, r9, #36	@ 0x24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80048fa:	4f54      	ldr	r7, [pc, #336]	@ (8004a4c <follow_path+0x178>)
	mem_set(sfn, ' ', 11);
 80048fc:	220b      	movs	r2, #11
 80048fe:	4628      	mov	r0, r5
 8004900:	2120      	movs	r1, #32
		c = (BYTE)p[si++];
 8004902:	f1c4 0802 	rsb	r8, r4, #2
	mem_set(sfn, ' ', 11);
 8004906:	f7ff fad5 	bl	8003eb4 <mem_set>
	si = i = 0; ni = 8;
 800490a:	f104 3cff 	add.w	ip, r4, #4294967295
 800490e:	2200      	movs	r2, #0
 8004910:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 8004912:	eb08 010c 	add.w	r1, r8, ip
 8004916:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 800491a:	2b20      	cmp	r3, #32
 800491c:	d908      	bls.n	8004930 <follow_path+0x5c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800491e:	2b2f      	cmp	r3, #47	@ 0x2f
 8004920:	d001      	beq.n	8004926 <follow_path+0x52>
 8004922:	2b5c      	cmp	r3, #92	@ 0x5c
 8004924:	d14f      	bne.n	80049c6 <follow_path+0xf2>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004926:	5c60      	ldrb	r0, [r4, r1]
 8004928:	282f      	cmp	r0, #47	@ 0x2f
 800492a:	d04a      	beq.n	80049c2 <follow_path+0xee>
 800492c:	285c      	cmp	r0, #92	@ 0x5c
 800492e:	d048      	beq.n	80049c2 <follow_path+0xee>
	*path = p + si;						/* Return pointer to the next segment */
 8004930:	440c      	add	r4, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004932:	2a00      	cmp	r2, #0
 8004934:	d056      	beq.n	80049e4 <follow_path+0x110>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004936:	f899 2024 	ldrb.w	r2, [r9, #36]	@ 0x24
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800493a:	4648      	mov	r0, r9
	FATFS *fs = dp->obj.fs;
 800493c:	f8d9 8000 	ldr.w	r8, [r9]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004940:	2ae5      	cmp	r2, #229	@ 0xe5
 8004942:	bf04      	itt	eq
 8004944:	2205      	moveq	r2, #5
 8004946:	f889 2024 	strbeq.w	r2, [r9, #36]	@ 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800494a:	2b20      	cmp	r3, #32
 800494c:	bf8c      	ite	hi
 800494e:	2300      	movhi	r3, #0
 8004950:	2301      	movls	r3, #1
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	f889 302f 	strb.w	r3, [r9, #47]	@ 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004958:	f7ff fe7f 	bl	800465a <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800495c:	2800      	cmp	r0, #0
 800495e:	d164      	bne.n	8004a2a <follow_path+0x156>
		res = move_window(fs, dp->sect);
 8004960:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8004964:	4640      	mov	r0, r8
 8004966:	f7ff fbdb 	bl	8004120 <move_window>
		if (res != FR_OK) break;
 800496a:	2800      	cmp	r0, #0
 800496c:	d147      	bne.n	80049fe <follow_path+0x12a>
		c = dp->dir[DIR_Name];
 800496e:	f8d9 3020 	ldr.w	r3, [r9, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004972:	781a      	ldrb	r2, [r3, #0]
 8004974:	2a00      	cmp	r2, #0
 8004976:	d060      	beq.n	8004a3a <follow_path+0x166>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004978:	7ada      	ldrb	r2, [r3, #11]
 800497a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800497e:	f889 2006 	strb.w	r2, [r9, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004982:	7ad8      	ldrb	r0, [r3, #11]
 8004984:	f010 0008 	ands.w	r0, r0, #8
 8004988:	d10c      	bne.n	80049a4 <follow_path+0xd0>
 800498a:	f103 0c0b 	add.w	ip, r3, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800498e:	4629      	mov	r1, r5
		r = *d++ - *s++;
 8004990:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004994:	f811 eb01 	ldrb.w	lr, [r1], #1
	} while (--cnt && r == 0);
 8004998:	4563      	cmp	r3, ip
		r = *d++ - *s++;
 800499a:	eba2 020e 	sub.w	r2, r2, lr
	} while (--cnt && r == 0);
 800499e:	d02c      	beq.n	80049fa <follow_path+0x126>
 80049a0:	2a00      	cmp	r2, #0
 80049a2:	d0f5      	beq.n	8004990 <follow_path+0xbc>
		res = dir_next(dp, 0);	/* Next entry */
 80049a4:	2100      	movs	r1, #0
 80049a6:	4648      	mov	r0, r9
 80049a8:	f7ff ff1e 	bl	80047e8 <dir_next>
	} while (res == FR_OK);
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d0d7      	beq.n	8004960 <follow_path+0x8c>
 80049b0:	e025      	b.n	80049fe <follow_path+0x12a>
		dp->fn[NSFLAG] = NS_NONAME;
 80049b2:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 80049b4:	4648      	mov	r0, r9
		dp->fn[NSFLAG] = NS_NONAME;
 80049b6:	f889 302f 	strb.w	r3, [r9, #47]	@ 0x2f
}
 80049ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 80049be:	f7ff be4c 	b.w	800465a <dir_sdi.constprop.0>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80049c2:	3101      	adds	r1, #1
 80049c4:	e7af      	b.n	8004926 <follow_path+0x52>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80049c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80049c8:	d03b      	beq.n	8004a42 <follow_path+0x16e>
 80049ca:	4290      	cmp	r0, r2
 80049cc:	d90a      	bls.n	80049e4 <follow_path+0x110>
		if (c >= 0x80) {				/* Extended character? */
 80049ce:	0619      	lsls	r1, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80049d0:	f8df e07c 	ldr.w	lr, [pc, #124]	@ 8004a50 <follow_path+0x17c>
 80049d4:	bf44      	itt	mi
 80049d6:	3b80      	submi	r3, #128	@ 0x80
 80049d8:	5cfb      	ldrbmi	r3, [r7, r3]
	while (*str && *str != chr) str++;
 80049da:	f81e 1b01 	ldrb.w	r1, [lr], #1
 80049de:	b119      	cbz	r1, 80049e8 <follow_path+0x114>
 80049e0:	428b      	cmp	r3, r1
 80049e2:	d1fa      	bne.n	80049da <follow_path+0x106>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80049e4:	2006      	movs	r0, #6
	return res;
 80049e6:	e026      	b.n	8004a36 <follow_path+0x162>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80049e8:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 80049ec:	2919      	cmp	r1, #25
 80049ee:	bf9c      	itt	ls
 80049f0:	3b20      	subls	r3, #32
 80049f2:	b2db      	uxtbls	r3, r3
			sfn[i++] = c;
 80049f4:	54ab      	strb	r3, [r5, r2]
 80049f6:	3201      	adds	r2, #1
 80049f8:	e78b      	b.n	8004912 <follow_path+0x3e>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80049fa:	2a00      	cmp	r2, #0
 80049fc:	d1d2      	bne.n	80049a4 <follow_path+0xd0>
			ns = dp->fn[NSFLAG];
 80049fe:	f899 302f 	ldrb.w	r3, [r9, #47]	@ 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8004a02:	b9a0      	cbnz	r0, 8004a2e <follow_path+0x15a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004a04:	075a      	lsls	r2, r3, #29
 8004a06:	d416      	bmi.n	8004a36 <follow_path+0x162>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004a08:	f899 3006 	ldrb.w	r3, [r9, #6]
 8004a0c:	06db      	lsls	r3, r3, #27
 8004a0e:	d516      	bpl.n	8004a3e <follow_path+0x16a>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004a10:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004a14:	f106 0130 	add.w	r1, r6, #48	@ 0x30
 8004a18:	7830      	ldrb	r0, [r6, #0]
 8004a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1e:	4419      	add	r1, r3
 8004a20:	f7ff fdbd 	bl	800459e <ld_clust.isra.0>
 8004a24:	f8c9 0008 	str.w	r0, [r9, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004a28:	e768      	b.n	80048fc <follow_path+0x28>
			ns = dp->fn[NSFLAG];
 8004a2a:	f899 302f 	ldrb.w	r3, [r9, #47]	@ 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004a2e:	2804      	cmp	r0, #4
 8004a30:	d101      	bne.n	8004a36 <follow_path+0x162>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004a32:	0759      	lsls	r1, r3, #29
 8004a34:	d503      	bpl.n	8004a3e <follow_path+0x16a>
}
 8004a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004a3a:	2004      	movs	r0, #4
 8004a3c:	e7df      	b.n	80049fe <follow_path+0x12a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004a3e:	2005      	movs	r0, #5
 8004a40:	e7f9      	b.n	8004a36 <follow_path+0x162>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004a42:	280b      	cmp	r0, #11
 8004a44:	d0ce      	beq.n	80049e4 <follow_path+0x110>
			i = 8; ni = 11;				/* Goto extension */
 8004a46:	2208      	movs	r2, #8
 8004a48:	200b      	movs	r0, #11
 8004a4a:	e762      	b.n	8004912 <follow_path+0x3e>
 8004a4c:	08011530 	.word	0x08011530
 8004a50:	08010279 	.word	0x08010279

08004a54 <dir_register>:
{
 8004a54:	b570      	push	{r4, r5, r6, lr}
 8004a56:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8004a58:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8004a5a:	f7ff fdfe 	bl	800465a <dir_sdi.constprop.0>
	if (res == FR_OK) {
 8004a5e:	4604      	mov	r4, r0
 8004a60:	b978      	cbnz	r0, 8004a82 <dir_register+0x2e>
			res = move_window(fs, dp->sect);
 8004a62:	69e9      	ldr	r1, [r5, #28]
 8004a64:	4630      	mov	r0, r6
 8004a66:	f7ff fb5b 	bl	8004120 <move_window>
			if (res != FR_OK) break;
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	b948      	cbnz	r0, 8004a82 <dir_register+0x2e>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004a6e:	6a2b      	ldr	r3, [r5, #32]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2be5      	cmp	r3, #229	@ 0xe5
 8004a74:	d00a      	beq.n	8004a8c <dir_register+0x38>
 8004a76:	b14b      	cbz	r3, 8004a8c <dir_register+0x38>
			res = dir_next(dp, 1);
 8004a78:	2101      	movs	r1, #1
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	f7ff feb4 	bl	80047e8 <dir_next>
 8004a80:	e7ed      	b.n	8004a5e <dir_register+0xa>
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004a82:	2c04      	cmp	r4, #4
 8004a84:	bf08      	it	eq
 8004a86:	2407      	moveq	r4, #7
}
 8004a88:	4620      	mov	r0, r4
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
 8004a8c:	69e9      	ldr	r1, [r5, #28]
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f7ff fb46 	bl	8004120 <move_window>
		if (res == FR_OK) {
 8004a94:	4604      	mov	r4, r0
 8004a96:	2800      	cmp	r0, #0
 8004a98:	d1f6      	bne.n	8004a88 <dir_register+0x34>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	6a28      	ldr	r0, [r5, #32]
 8004aa0:	f7ff fa08 	bl	8003eb4 <mem_set>
	if (cnt) {
 8004aa4:	220b      	movs	r2, #11
 8004aa6:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 8004aaa:	6a28      	ldr	r0, [r5, #32]
 8004aac:	f7ff fb23 	bl	80040f6 <mem_cpy.part.0>
			fs->wflag = 1;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	70f3      	strb	r3, [r6, #3]
 8004ab4:	e7e8      	b.n	8004a88 <dir_register+0x34>
	...

08004ab8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004ab8:	b530      	push	{r4, r5, lr}
 8004aba:	b085      	sub	sp, #20
 8004abc:	4614      	mov	r4, r2
 8004abe:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004ac2:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 8004ac4:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8004ac6:	f7ff fabf 	bl	8004048 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004aca:	1e01      	subs	r1, r0, #0
 8004acc:	db19      	blt.n	8004b02 <f_mount+0x4a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004ace:	4d0e      	ldr	r5, [pc, #56]	@ (8004b08 <f_mount+0x50>)
 8004ad0:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]

	if (cfs) {
 8004ad4:	b118      	cbz	r0, 8004ade <f_mount+0x26>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004ad6:	f7ff fa8d 	bl	8003ff4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004ada:	2300      	movs	r3, #0
 8004adc:	7003      	strb	r3, [r0, #0]
	}

	if (fs) {
 8004ade:	9b01      	ldr	r3, [sp, #4]
 8004ae0:	b923      	cbnz	r3, 8004aec <f_mount+0x34>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004ae2:	f845 3021 	str.w	r3, [r5, r1, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004ae6:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8004ae8:	b005      	add	sp, #20
 8004aea:	bd30      	pop	{r4, r5, pc}
		fs->fs_type = 0;				/* Clear new fs object */
 8004aec:	2200      	movs	r2, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004aee:	2c01      	cmp	r4, #1
	FatFs[vol] = fs;					/* Register new fs object */
 8004af0:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 8004af4:	701a      	strb	r2, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004af6:	d1f6      	bne.n	8004ae6 <f_mount+0x2e>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004af8:	a901      	add	r1, sp, #4
 8004afa:	4668      	mov	r0, sp
 8004afc:	f7ff fb66 	bl	80041cc <find_volume>
	LEAVE_FF(fs, res);
 8004b00:	e7f2      	b.n	8004ae8 <f_mount+0x30>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004b02:	200b      	movs	r0, #11
 8004b04:	e7f0      	b.n	8004ae8 <f_mount+0x30>
 8004b06:	bf00      	nop
 8004b08:	24000724 	.word	0x24000724

08004b0c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b10:	b091      	sub	sp, #68	@ 0x44
 8004b12:	4690      	mov	r8, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004b14:	4604      	mov	r4, r0
{
 8004b16:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	f000 80f0 	beq.w	8004cfe <f_open+0x1f2>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004b1e:	f002 063f 	and.w	r6, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 8004b22:	a903      	add	r1, sp, #12
 8004b24:	a801      	add	r0, sp, #4
 8004b26:	4632      	mov	r2, r6
 8004b28:	f7ff fb50 	bl	80041cc <find_volume>
	if (res == FR_OK) {
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d16f      	bne.n	8004c12 <f_open+0x106>
		dj.obj.fs = fs;
 8004b32:	9d03      	ldr	r5, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004b34:	a804      	add	r0, sp, #16
 8004b36:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8004b38:	9504      	str	r5, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8004b3a:	f7ff fecb 	bl	80048d4 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004b3e:	b958      	cbnz	r0, 8004b58 <f_open+0x4c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004b40:	f99d 303f 	ldrsb.w	r3, [sp, #63]	@ 0x3f
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	db6b      	blt.n	8004c20 <f_open+0x114>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004b48:	f018 0f3e 	tst.w	r8, #62	@ 0x3e
 8004b4c:	a804      	add	r0, sp, #16
 8004b4e:	bf14      	ite	ne
 8004b50:	2101      	movne	r1, #1
 8004b52:	2100      	moveq	r1, #0
 8004b54:	f7ff f9b4 	bl	8003ec0 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004b58:	f018 0f1c 	tst.w	r8, #28
 8004b5c:	d06c      	beq.n	8004c38 <f_open+0x12c>
			if (res != FR_OK) {					/* No file, create new */
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d060      	beq.n	8004c24 <f_open+0x118>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004b62:	2804      	cmp	r0, #4
 8004b64:	d155      	bne.n	8004c12 <f_open+0x106>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b66:	4b67      	ldr	r3, [pc, #412]	@ (8004d04 <f_open+0x1f8>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	b11a      	cbz	r2, 8004b74 <f_open+0x68>
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f040 80c1 	bne.w	8004cf6 <f_open+0x1ea>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004b74:	a804      	add	r0, sp, #16
 8004b76:	f7ff ff6d 	bl	8004a54 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d149      	bne.n	8004c12 <f_open+0x106>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004b7e:	f046 0608 	orr.w	r6, r6, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004b82:	0730      	lsls	r0, r6, #28
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004b84:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004b88:	d533      	bpl.n	8004bf2 <f_open+0xe6>
				dw = GET_FATTIME();
 8004b8a:	f7ff f877 	bl	8003c7c <get_fattime>
 8004b8e:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004b90:	4601      	mov	r1, r0
 8004b92:	f108 000e 	add.w	r0, r8, #14
 8004b96:	f7ff f985 	bl	8003ea4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	f108 0016 	add.w	r0, r8, #22
 8004ba0:	f7ff f980 	bl	8003ea4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004ba4:	2320      	movs	r3, #32
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004ba6:	4641      	mov	r1, r8
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004ba8:	f888 300b 	strb.w	r3, [r8, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004bac:	7828      	ldrb	r0, [r5, #0]
 8004bae:	f7ff fcf6 	bl	800459e <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004bb2:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004bb4:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f7ff faa6 	bl	8004108 <st_clust>
	*ptr++ = (BYTE)val; val >>= 8;
 8004bbc:	2200      	movs	r2, #0
					st_dword(dj.dir + DIR_FileSize, 0);
					fs->wflag = 1;
 8004bbe:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8004bc0:	770a      	strb	r2, [r1, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bc2:	774a      	strb	r2, [r1, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bc4:	778a      	strb	r2, [r1, #30]
	*ptr++ = (BYTE)val;
 8004bc6:	77ca      	strb	r2, [r1, #31]
					fs->wflag = 1;
 8004bc8:	70eb      	strb	r3, [r5, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004bca:	f1b8 0f00 	cmp.w	r8, #0
 8004bce:	d00e      	beq.n	8004bee <f_open+0xe2>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 8004bd4:	f8d5 902c 	ldr.w	r9, [r5, #44]	@ 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8004bd8:	f7ff fd77 	bl	80046ca <remove_chain>
						if (res == FR_OK) {
 8004bdc:	b9c8      	cbnz	r0, 8004c12 <f_open+0x106>
							res = move_window(fs, dw);
 8004bde:	4649      	mov	r1, r9
 8004be0:	4628      	mov	r0, r5
 8004be2:	f7ff fa9d 	bl	8004120 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004be6:	f108 33ff 	add.w	r3, r8, #4294967295
 8004bea:	60eb      	str	r3, [r5, #12]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8004bec:	b988      	cbnz	r0, 8004c12 <f_open+0x106>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
				mode |= FA_MODIFIED;
 8004bee:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004bf2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
			fp->dir_ptr = dj.dir;
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004bf4:	2e01      	cmp	r6, #1
			fp->dir_ptr = dj.dir;
 8004bf6:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004bfa:	a804      	add	r0, sp, #16
 8004bfc:	bf94      	ite	ls
 8004bfe:	2100      	movls	r1, #0
 8004c00:	2101      	movhi	r1, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004c02:	6263      	str	r3, [r4, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8004c04:	f8c4 8028 	str.w	r8, [r4, #40]	@ 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004c08:	f7ff f994 	bl	8003f34 <inc_lock>
 8004c0c:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004c0e:	bb00      	cbnz	r0, 8004c52 <f_open+0x146>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clust2sect(fs, clst)) == 0) {
						res = FR_INT_ERR;
 8004c10:	2002      	movs	r0, #2
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004c12:	2300      	movs	r3, #0
 8004c14:	4607      	mov	r7, r0
 8004c16:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8004c18:	4638      	mov	r0, r7
 8004c1a:	b011      	add	sp, #68	@ 0x44
 8004c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				res = FR_INVALID_NAME;
 8004c20:	2006      	movs	r0, #6
 8004c22:	e799      	b.n	8004b58 <f_open+0x4c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004c24:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004c28:	f013 0f11 	tst.w	r3, #17
 8004c2c:	d10f      	bne.n	8004c4e <f_open+0x142>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004c2e:	f018 0f04 	tst.w	r8, #4
 8004c32:	d0a6      	beq.n	8004b82 <f_open+0x76>
 8004c34:	2008      	movs	r0, #8
 8004c36:	e7ec      	b.n	8004c12 <f_open+0x106>
			if (res == FR_OK) {					/* Following succeeded */
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	d1ea      	bne.n	8004c12 <f_open+0x106>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004c3c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004c40:	06da      	lsls	r2, r3, #27
 8004c42:	d45a      	bmi.n	8004cfa <f_open+0x1ee>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004c44:	f018 0f02 	tst.w	r8, #2
 8004c48:	d0d3      	beq.n	8004bf2 <f_open+0xe6>
 8004c4a:	07d8      	lsls	r0, r3, #31
 8004c4c:	d5d1      	bpl.n	8004bf2 <f_open+0xe6>
						res = FR_DENIED;
 8004c4e:	2007      	movs	r0, #7
 8004c50:	e7df      	b.n	8004c12 <f_open+0x106>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004c52:	7828      	ldrb	r0, [r5, #0]
 8004c54:	4641      	mov	r1, r8
 8004c56:	f7ff fca2 	bl	800459e <ld_clust.isra.0>
 8004c5a:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004c5c:	f108 001c 	add.w	r0, r8, #28
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004c60:	2100      	movs	r1, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004c62:	f7ff f91d 	bl	8003ea0 <ld_dword>
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004c66:	f104 0830 	add.w	r8, r4, #48	@ 0x30
			fp->obj.id = fs->id;
 8004c6a:	88eb      	ldrh	r3, [r5, #6]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004c70:	60e0      	str	r0, [r4, #12]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004c72:	4640      	mov	r0, r8
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004c74:	62e1      	str	r1, [r4, #44]	@ 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004c76:	6025      	str	r5, [r4, #0]
			fp->obj.id = fs->id;
 8004c78:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 8004c7a:	7526      	strb	r6, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8004c7c:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004c7e:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004c80:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004c82:	f7ff f917 	bl	8003eb4 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004c86:	06b2      	lsls	r2, r6, #26
 8004c88:	d5c6      	bpl.n	8004c18 <f_open+0x10c>
 8004c8a:	68e6      	ldr	r6, [r4, #12]
 8004c8c:	2e00      	cmp	r6, #0
 8004c8e:	d0c3      	beq.n	8004c18 <f_open+0x10c>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004c90:	896b      	ldrh	r3, [r5, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004c92:	68a1      	ldr	r1, [r4, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004c94:	ebb6 2f43 	cmp.w	r6, r3, lsl #9
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004c98:	61a6      	str	r6, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004c9a:	ea4f 2943 	mov.w	r9, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004c9e:	d910      	bls.n	8004cc2 <f_open+0x1b6>
					clst = get_fat(&fp->obj, clst);
 8004ca0:	6820      	ldr	r0, [r4, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004ca2:	eba6 0609 	sub.w	r6, r6, r9
					clst = get_fat(&fp->obj, clst);
 8004ca6:	f7ff fc82 	bl	80045ae <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8004caa:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8004cac:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8004cae:	d91e      	bls.n	8004cee <f_open+0x1e2>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004cb0:	1c43      	adds	r3, r0, #1
 8004cb2:	d01e      	beq.n	8004cf2 <f_open+0x1e6>
 8004cb4:	454e      	cmp	r6, r9
 8004cb6:	d8f3      	bhi.n	8004ca0 <f_open+0x194>
 8004cb8:	2000      	movs	r0, #0
				fp->clust = clst;
 8004cba:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d1a8      	bne.n	8004c12 <f_open+0x106>
 8004cc0:	e000      	b.n	8004cc4 <f_open+0x1b8>
				fp->clust = clst;
 8004cc2:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004cc4:	f3c6 0308 	ubfx	r3, r6, #0, #9
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0a5      	beq.n	8004c18 <f_open+0x10c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004ccc:	4628      	mov	r0, r5
 8004cce:	f7ff f99f 	bl	8004010 <clust2sect>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d09c      	beq.n	8004c10 <f_open+0x104>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004cd6:	eb00 2256 	add.w	r2, r0, r6, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	4641      	mov	r1, r8
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004cde:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004ce0:	7868      	ldrb	r0, [r5, #1]
 8004ce2:	f7ff f8b3 	bl	8003e4c <disk_read>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d096      	beq.n	8004c18 <f_open+0x10c>
 8004cea:	2001      	movs	r0, #1
 8004cec:	e791      	b.n	8004c12 <f_open+0x106>
					if (clst <= 1) res = FR_INT_ERR;
 8004cee:	2002      	movs	r0, #2
 8004cf0:	e7e3      	b.n	8004cba <f_open+0x1ae>
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	e7e1      	b.n	8004cba <f_open+0x1ae>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004cf6:	2012      	movs	r0, #18
 8004cf8:	e78b      	b.n	8004c12 <f_open+0x106>
					res = FR_NO_FILE;
 8004cfa:	2004      	movs	r0, #4
 8004cfc:	e789      	b.n	8004c12 <f_open+0x106>
	if (!fp) return FR_INVALID_OBJECT;
 8004cfe:	2709      	movs	r7, #9
 8004d00:	e78a      	b.n	8004c18 <f_open+0x10c>
 8004d02:	bf00      	nop
 8004d04:	24000700 	.word	0x24000700

08004d08 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d0c:	469a      	mov	sl, r3
 8004d0e:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8004d10:	2300      	movs	r3, #0
{
 8004d12:	4688      	mov	r8, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004d14:	a903      	add	r1, sp, #12
{
 8004d16:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
 8004d18:	f8ca 3000 	str.w	r3, [sl]
{
 8004d1c:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004d1e:	f7ff f9ab 	bl	8004078 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004d22:	4605      	mov	r5, r0
 8004d24:	bb68      	cbnz	r0, 8004d82 <f_write+0x7a>
 8004d26:	7d65      	ldrb	r5, [r4, #21]
 8004d28:	bb5d      	cbnz	r5, 8004d82 <f_write+0x7a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004d2a:	7d23      	ldrb	r3, [r4, #20]
 8004d2c:	079a      	lsls	r2, r3, #30
 8004d2e:	f140 80b3 	bpl.w	8004e98 <f_write+0x190>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004d32:	69a3      	ldr	r3, [r4, #24]
 8004d34:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004d36:	bf28      	it	cs
 8004d38:	43de      	mvncs	r6, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004d3a:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8004d3e:	9300      	str	r3, [sp, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8004d40:	b1de      	cbz	r6, 8004d7a <f_write+0x72>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004d42:	69a1      	ldr	r1, [r4, #24]
 8004d44:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f040 8092 	bne.w	8004e72 <f_write+0x16a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004d4e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004d52:	f8b9 700a 	ldrh.w	r7, [r9, #10]
 8004d56:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8004d58:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8004d5c:	d124      	bne.n	8004da8 <f_write+0xa0>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004d5e:	b931      	cbnz	r1, 8004d6e <f_write+0x66>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004d60:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8004d62:	b9a0      	cbnz	r0, 8004d8e <f_write+0x86>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004d64:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004d66:	4620      	mov	r0, r4
 8004d68:	f7ff fce6 	bl	8004738 <create_chain>
 8004d6c:	e004      	b.n	8004d78 <f_write+0x70>
					if (fp->cltbl) {
 8004d6e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004d70:	b15b      	cbz	r3, 8004d8a <f_write+0x82>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004d72:	4620      	mov	r0, r4
 8004d74:	f7ff f957 	bl	8004026 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004d78:	b948      	cbnz	r0, 8004d8e <f_write+0x86>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004d7a:	7d23      	ldrb	r3, [r4, #20]
 8004d7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d80:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 8004d82:	4628      	mov	r0, r5
 8004d84:	b005      	add	sp, #20
 8004d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004d8a:	69e1      	ldr	r1, [r4, #28]
 8004d8c:	e7eb      	b.n	8004d66 <f_write+0x5e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004d8e:	2801      	cmp	r0, #1
 8004d90:	d102      	bne.n	8004d98 <f_write+0x90>
 8004d92:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004d94:	7565      	strb	r5, [r4, #21]
 8004d96:	e7f4      	b.n	8004d82 <f_write+0x7a>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d101      	bne.n	8004da0 <f_write+0x98>
 8004d9c:	2501      	movs	r5, #1
 8004d9e:	e7f9      	b.n	8004d94 <f_write+0x8c>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004da0:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8004da2:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004da4:	b903      	cbnz	r3, 8004da8 <f_write+0xa0>
 8004da6:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004da8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	da0d      	bge.n	8004dcc <f_write+0xc4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004db0:	2301      	movs	r3, #1
 8004db2:	6a22      	ldr	r2, [r4, #32]
 8004db4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8004db8:	f899 0001 	ldrb.w	r0, [r9, #1]
 8004dbc:	f7ff f854 	bl	8003e68 <disk_write>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	d1eb      	bne.n	8004d9c <f_write+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004dc4:	7d23      	ldrb	r3, [r4, #20]
 8004dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dca:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004dcc:	69e1      	ldr	r1, [r4, #28]
 8004dce:	4648      	mov	r0, r9
 8004dd0:	f7ff f91e 	bl	8004010 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	d0dc      	beq.n	8004d92 <f_write+0x8a>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004dd8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
			sect += csect;
 8004ddc:	eb07 0b00 	add.w	fp, r7, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004de0:	d334      	bcc.n	8004e4c <f_write+0x144>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004de2:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8004de6:	eb07 2056 	add.w	r0, r7, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004dea:	0a73      	lsrs	r3, r6, #9
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004dec:	465a      	mov	r2, fp
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004dee:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004df0:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 8004df4:	bf88      	it	hi
 8004df6:	1bcb      	subhi	r3, r1, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004df8:	4641      	mov	r1, r8
 8004dfa:	9301      	str	r3, [sp, #4]
 8004dfc:	f7ff f834 	bl	8003e68 <disk_write>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d1cb      	bne.n	8004d9c <f_write+0x94>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004e04:	6a21      	ldr	r1, [r4, #32]
 8004e06:	9b01      	ldr	r3, [sp, #4]
 8004e08:	eba1 010b 	sub.w	r1, r1, fp
 8004e0c:	4299      	cmp	r1, r3
 8004e0e:	d20c      	bcs.n	8004e2a <f_write+0x122>
	if (cnt) {
 8004e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e14:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 8004e18:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004e1c:	f7ff f96b 	bl	80040f6 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004e20:	7d22      	ldrb	r2, [r4, #20]
 8004e22:	9b01      	ldr	r3, [sp, #4]
 8004e24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e28:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004e2a:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004e2c:	69a3      	ldr	r3, [r4, #24]
 8004e2e:	44b8      	add	r8, r7
 8004e30:	68e2      	ldr	r2, [r4, #12]
 8004e32:	1bf6      	subs	r6, r6, r7
 8004e34:	443b      	add	r3, r7
 8004e36:	61a3      	str	r3, [r4, #24]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	bf2c      	ite	cs
 8004e3c:	60e2      	strcs	r2, [r4, #12]
 8004e3e:	60e3      	strcc	r3, [r4, #12]
 8004e40:	f8da 3000 	ldr.w	r3, [sl]
 8004e44:	443b      	add	r3, r7
 8004e46:	f8ca 3000 	str.w	r3, [sl]
 8004e4a:	e779      	b.n	8004d40 <f_write+0x38>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004e4c:	6a21      	ldr	r1, [r4, #32]
				fp->fptr < fp->obj.objsize &&
 8004e4e:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004e50:	4559      	cmp	r1, fp
 8004e52:	d00c      	beq.n	8004e6e <f_write+0x166>
 8004e54:	68e1      	ldr	r1, [r4, #12]
 8004e56:	4299      	cmp	r1, r3
 8004e58:	d909      	bls.n	8004e6e <f_write+0x166>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	465a      	mov	r2, fp
 8004e5e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8004e62:	f899 0001 	ldrb.w	r0, [r9, #1]
 8004e66:	f7fe fff1 	bl	8003e4c <disk_read>
				fp->fptr < fp->obj.objsize &&
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d196      	bne.n	8004d9c <f_write+0x94>
			fp->sect = sect;
 8004e6e:	f8c4 b020 	str.w	fp, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004e72:	69a0      	ldr	r0, [r4, #24]
 8004e74:	4641      	mov	r1, r8
 8004e76:	9b00      	ldr	r3, [sp, #0]
 8004e78:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8004e7c:	f5c0 7700 	rsb	r7, r0, #512	@ 0x200
 8004e80:	4418      	add	r0, r3
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8004e82:	42b7      	cmp	r7, r6
 8004e84:	bf28      	it	cs
 8004e86:	4637      	movcs	r7, r6
	if (cnt) {
 8004e88:	463a      	mov	r2, r7
 8004e8a:	f7ff f934 	bl	80040f6 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8004e8e:	7d23      	ldrb	r3, [r4, #20]
 8004e90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e94:	7523      	strb	r3, [r4, #20]
 8004e96:	e7c9      	b.n	8004e2c <f_write+0x124>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004e98:	2507      	movs	r5, #7
 8004e9a:	e772      	b.n	8004d82 <f_write+0x7a>

08004e9c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004e9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004ea0:	a901      	add	r1, sp, #4
{
 8004ea2:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004ea4:	f7ff f8e8 	bl	8004078 <validate>
	if (res == FR_OK) {
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d13b      	bne.n	8004f26 <f_sync+0x8a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004eae:	7d2b      	ldrb	r3, [r5, #20]
 8004eb0:	f013 0440 	ands.w	r4, r3, #64	@ 0x40
 8004eb4:	d037      	beq.n	8004f26 <f_sync+0x8a>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004eb6:	061b      	lsls	r3, r3, #24
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004eb8:	9f01      	ldr	r7, [sp, #4]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004eba:	d50b      	bpl.n	8004ed4 <f_sync+0x38>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	6a2a      	ldr	r2, [r5, #32]
 8004ec0:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 8004ec4:	7878      	ldrb	r0, [r7, #1]
 8004ec6:	f7fe ffcf 	bl	8003e68 <disk_write>
 8004eca:	bb80      	cbnz	r0, 8004f2e <f_sync+0x92>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004ecc:	7d2b      	ldrb	r3, [r5, #20]
 8004ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ed2:	752b      	strb	r3, [r5, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8004ed4:	f7fe fed2 	bl	8003c7c <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004ed8:	6a69      	ldr	r1, [r5, #36]	@ 0x24
			tm = GET_FATTIME();				/* Modified time */
 8004eda:	4680      	mov	r8, r0
				res = move_window(fs, fp->dir_sect);
 8004edc:	4638      	mov	r0, r7
 8004ede:	f7ff f91f 	bl	8004120 <move_window>
				if (res == FR_OK) {
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	b9f8      	cbnz	r0, 8004f26 <f_sync+0x8a>
					dir = fp->dir_ptr;
 8004ee6:	6aae      	ldr	r6, [r5, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004ee8:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004eea:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004eec:	f043 0320 	orr.w	r3, r3, #32
 8004ef0:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004ef2:	68aa      	ldr	r2, [r5, #8]
 8004ef4:	6828      	ldr	r0, [r5, #0]
 8004ef6:	f7ff f907 	bl	8004108 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004efa:	68e9      	ldr	r1, [r5, #12]
 8004efc:	f106 001c 	add.w	r0, r6, #28
 8004f00:	f7fe ffd0 	bl	8003ea4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004f04:	4641      	mov	r1, r8
 8004f06:	f106 0016 	add.w	r0, r6, #22
 8004f0a:	f7fe ffcb 	bl	8003ea4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8004f0e:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8004f10:	74b4      	strb	r4, [r6, #18]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004f12:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val;
 8004f14:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 8004f16:	70fb      	strb	r3, [r7, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004f18:	f7ff faf6 	bl	8004508 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004f1c:	7d2b      	ldrb	r3, [r5, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004f1e:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004f20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f24:	752b      	strb	r3, [r5, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8004f26:	4620      	mov	r0, r4
 8004f28:	b002      	add	sp, #8
 8004f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004f2e:	2401      	movs	r4, #1
 8004f30:	e7f9      	b.n	8004f26 <f_sync+0x8a>

08004f32 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8004f32:	b513      	push	{r0, r1, r4, lr}
 8004f34:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004f36:	f7ff ffb1 	bl	8004e9c <f_sync>
	if (res == FR_OK)
 8004f3a:	b948      	cbnz	r0, 8004f50 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8004f3c:	a901      	add	r1, sp, #4
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f7ff f89a 	bl	8004078 <validate>
		if (res == FR_OK) {
 8004f44:	b920      	cbnz	r0, 8004f50 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8004f46:	6920      	ldr	r0, [r4, #16]
 8004f48:	f7ff f836 	bl	8003fb8 <dec_lock>
			if (res == FR_OK)
 8004f4c:	b900      	cbnz	r0, 8004f50 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8004f4e:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8004f50:	b002      	add	sp, #8
 8004f52:	bd10      	pop	{r4, pc}

08004f54 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8004f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	460f      	mov	r7, r1
 8004f5c:	4616      	mov	r6, r2
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8004f5e:	2200      	movs	r2, #0
{
 8004f60:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, 0);
 8004f62:	a903      	add	r1, sp, #12
 8004f64:	a801      	add	r0, sp, #4
 8004f66:	f7ff f931 	bl	80041cc <find_volume>
	if (res == FR_OK) {
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	b940      	cbnz	r0, 8004f80 <f_getfree+0x2c>
		*fatfs = fs;				/* Return ptr to the fs object */
 8004f6e:	9c03      	ldr	r4, [sp, #12]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8004f70:	e9d4 3804 	ldrd	r3, r8, [r4, #16]
		*fatfs = fs;				/* Return ptr to the fs object */
 8004f74:	6034      	str	r4, [r6, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 8004f76:	f1a8 0202 	sub.w	r2, r8, #2
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d804      	bhi.n	8004f88 <f_getfree+0x34>
			*nclst = fs->free_clst;
 8004f7e:	603b      	str	r3, [r7, #0]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
		}
	}

	LEAVE_FF(fs, res);
}
 8004f80:	4628      	mov	r0, r5
 8004f82:	b005      	add	sp, #20
 8004f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8004f88:	7823      	ldrb	r3, [r4, #0]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d118      	bne.n	8004fc0 <f_getfree+0x6c>
				clst = 2; obj.fs = fs;
 8004f8e:	f04f 0802 	mov.w	r8, #2
			nfree = 0;
 8004f92:	4606      	mov	r6, r0
					stat = get_fat(&obj, clst);
 8004f94:	4641      	mov	r1, r8
 8004f96:	4620      	mov	r0, r4
 8004f98:	f7ff fb09 	bl	80045ae <get_fat.isra.0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	d036      	beq.n	800500e <f_getfree+0xba>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8004fa0:	2801      	cmp	r0, #1
 8004fa2:	d036      	beq.n	8005012 <f_getfree+0xbe>
					if (stat == 0) nfree++;
 8004fa4:	b900      	cbnz	r0, 8004fa8 <f_getfree+0x54>
 8004fa6:	3601      	adds	r6, #1
				} while (++clst < fs->n_fatent);
 8004fa8:	f108 0801 	add.w	r8, r8, #1
 8004fac:	6963      	ldr	r3, [r4, #20]
 8004fae:	4543      	cmp	r3, r8
 8004fb0:	d8f0      	bhi.n	8004f94 <f_getfree+0x40>
			*nclst = nfree;			/* Return the free clusters */
 8004fb2:	603e      	str	r6, [r7, #0]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8004fb4:	7923      	ldrb	r3, [r4, #4]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8004fb6:	6126      	str	r6, [r4, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8004fb8:	f043 0301 	orr.w	r3, r3, #1
 8004fbc:	7123      	strb	r3, [r4, #4]
 8004fbe:	e7df      	b.n	8004f80 <f_getfree+0x2c>
					clst = fs->n_fatent; sect = fs->fatbase;
 8004fc0:	6a21      	ldr	r1, [r4, #32]
					i = 0; p = 0;
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4602      	mov	r2, r0
			nfree = 0;
 8004fc6:	4606      	mov	r6, r0
						if (i == 0) {
 8004fc8:	b952      	cbnz	r2, 8004fe0 <f_getfree+0x8c>
							res = move_window(fs, sect++);
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f101 0901 	add.w	r9, r1, #1
 8004fd0:	f7ff f8a6 	bl	8004120 <move_window>
							if (res != FR_OK) break;
 8004fd4:	b9f8      	cbnz	r0, 8005016 <f_getfree+0xc2>
							p = fs->win;
 8004fd6:	f104 0330 	add.w	r3, r4, #48	@ 0x30
							res = move_window(fs, sect++);
 8004fda:	4649      	mov	r1, r9
							i = SS(fs);
 8004fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
						if (fs->fs_type == FS_FAT16) {
 8004fe0:	7820      	ldrb	r0, [r4, #0]
 8004fe2:	2802      	cmp	r0, #2
 8004fe4:	d108      	bne.n	8004ff8 <f_getfree+0xa4>
							if (ld_word(p) == 0) nfree++;
 8004fe6:	8818      	ldrh	r0, [r3, #0]
 8004fe8:	b900      	cbnz	r0, 8004fec <f_getfree+0x98>
 8004fea:	3601      	adds	r6, #1
							p += 2; i -= 2;
 8004fec:	3302      	adds	r3, #2
 8004fee:	3a02      	subs	r2, #2
					} while (--clst);
 8004ff0:	f1b8 0801 	subs.w	r8, r8, #1
 8004ff4:	d1e8      	bne.n	8004fc8 <f_getfree+0x74>
 8004ff6:	e7dc      	b.n	8004fb2 <f_getfree+0x5e>
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8004ff8:	4618      	mov	r0, r3
							p += 4; i -= 4;
 8004ffa:	3a04      	subs	r2, #4
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8004ffc:	f7fe ff50 	bl	8003ea0 <ld_dword>
 8005000:	f030 4070 	bics.w	r0, r0, #4026531840	@ 0xf0000000
							p += 4; i -= 4;
 8005004:	f103 0304 	add.w	r3, r3, #4
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8005008:	bf08      	it	eq
 800500a:	3601      	addeq	r6, #1
							p += 4; i -= 4;
 800500c:	e7f0      	b.n	8004ff0 <f_getfree+0x9c>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800500e:	2501      	movs	r5, #1
 8005010:	e7cf      	b.n	8004fb2 <f_getfree+0x5e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005012:	2502      	movs	r5, #2
 8005014:	e7cd      	b.n	8004fb2 <f_getfree+0x5e>
							res = move_window(fs, sect++);
 8005016:	4605      	mov	r5, r0
 8005018:	e7cb      	b.n	8004fb2 <f_getfree+0x5e>
	...

0800501c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800501c:	4b0e      	ldr	r3, [pc, #56]	@ (8005058 <FATFS_LinkDriverEx+0x3c>)
{
 800501e:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8005020:	7a5c      	ldrb	r4, [r3, #9]
{
 8005022:	4605      	mov	r5, r0
  if(disk.nbr < _VOLUMES)
 8005024:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 8005028:	b9a4      	cbnz	r4, 8005054 <FATFS_LinkDriverEx+0x38>
  {
    disk.is_initialized[disk.nbr] = 0;
 800502a:	7a5c      	ldrb	r4, [r3, #9]
 800502c:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800502e:	7a5c      	ldrb	r4, [r3, #9]
 8005030:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005034:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8005036:	7a5c      	ldrb	r4, [r3, #9]
 8005038:	441c      	add	r4, r3
 800503a:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800503c:	7a5a      	ldrb	r2, [r3, #9]
 800503e:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8005040:	3230      	adds	r2, #48	@ 0x30
    DiskNum = disk.nbr++;
 8005042:	b2e4      	uxtb	r4, r4
 8005044:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8005046:	233a      	movs	r3, #58	@ 0x3a
    path[0] = DiskNum + '0';
 8005048:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800504a:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800504c:	232f      	movs	r3, #47	@ 0x2f
    path[3] = 0;
 800504e:	70c8      	strb	r0, [r1, #3]
    path[2] = '/';
 8005050:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 8005052:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8005054:	2001      	movs	r0, #1
 8005056:	e7fc      	b.n	8005052 <FATFS_LinkDriverEx+0x36>
 8005058:	24000728 	.word	0x24000728

0800505c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800505c:	2200      	movs	r2, #0
 800505e:	f7ff bfdd 	b.w	800501c <FATFS_LinkDriverEx>
	...

08005064 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8005064:	4a0a      	ldr	r2, [pc, #40]	@ (8005090 <FATFS_UnLinkDriverEx+0x2c>)
 8005066:	7a53      	ldrb	r3, [r2, #9]
 8005068:	b17b      	cbz	r3, 800508a <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 800506a:	7803      	ldrb	r3, [r0, #0]
 800506c:	3b30      	subs	r3, #48	@ 0x30
    if(disk.drv[DiskNum] != 0)
 800506e:	b2db      	uxtb	r3, r3
 8005070:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005074:	6848      	ldr	r0, [r1, #4]
 8005076:	b140      	cbz	r0, 800508a <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
 8005078:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 800507a:	4413      	add	r3, r2
 800507c:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 800507e:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 8005080:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8005082:	3b01      	subs	r3, #1
 8005084:	b2db      	uxtb	r3, r3
 8005086:	7253      	strb	r3, [r2, #9]
      ret = 0;
 8005088:	4770      	bx	lr
  uint8_t ret = 1;
 800508a:	2001      	movs	r0, #1
    }
  }

  return ret;
}
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	24000728 	.word	0x24000728

08005094 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 8005094:	2100      	movs	r1, #0
 8005096:	f7ff bfe5 	b.w	8005064 <FATFS_UnLinkDriverEx>
	...

0800509c <jpeg_CreateCompress>:
jpeg_CreateCompress (j_compress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 800509c:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 800509e:	2950      	cmp	r1, #80	@ 0x50
{
 80050a0:	b570      	push	{r4, r5, r6, lr}
 80050a2:	4604      	mov	r4, r0
 80050a4:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 80050a6:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 80050a8:	d007      	beq.n	80050ba <jpeg_CreateCompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 80050aa:	6803      	ldr	r3, [r0, #0]
 80050ac:	260d      	movs	r6, #13
 80050ae:	2250      	movs	r2, #80	@ 0x50
 80050b0:	61d9      	str	r1, [r3, #28]
 80050b2:	e9c3 6205 	strd	r6, r2, [r3, #20]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_compress_struct))
 80050ba:	f5b5 7fd8 	cmp.w	r5, #432	@ 0x1b0
 80050be:	d009      	beq.n	80050d4 <jpeg_CreateCompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	2116      	movs	r1, #22
 80050c4:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80050c8:	4620      	mov	r0, r4
 80050ca:	61dd      	str	r5, [r3, #28]
 80050cc:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4798      	blx	r3
   * client_data, so we have to save and restore those fields.
   * Note: if application hasn't set client_data, tools like Purify may
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
 80050d4:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_compress_struct));
 80050d6:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 80050da:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_compress_struct));
 80050dc:	2100      	movs	r1, #0
 80050de:	4620      	mov	r0, r4
 80050e0:	f00a fce6 	bl	800fab0 <memset>
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = FALSE;

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 80050e4:	4620      	mov	r0, r4
    cinfo->err = err;
 80050e6:	6026      	str	r6, [r4, #0]
    cinfo->client_data = client_data;
 80050e8:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 80050ea:	f00a fb79 	bl	800f7e0 <jinit_memory_mgr>
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
  }

  /* Must do it here for emit_dqt in case jpeg_write_tables is used */
  cinfo->block_size = DCTSIZE;
 80050ee:	2108      	movs	r1, #8
  cinfo->progress = NULL;
 80050f0:	2300      	movs	r3, #0
    cinfo->q_scale_factor[i] = 100;
 80050f2:	2264      	movs	r2, #100	@ 0x64
  cinfo->block_size = DCTSIZE;
 80050f4:	f8c4 1178 	str.w	r1, [r4, #376]	@ 0x178
  cinfo->natural_order = jpeg_natural_order;
  cinfo->lim_Se = DCTSIZE2-1;

  cinfo->script_space = NULL;

  cinfo->input_gamma = 1.0;	/* in case application forgets */
 80050f8:	2000      	movs	r0, #0
  cinfo->natural_order = jpeg_natural_order;
 80050fa:	4913      	ldr	r1, [pc, #76]	@ (8005148 <jpeg_CreateCompress+0xac>)
  cinfo->progress = NULL;
 80050fc:	60a3      	str	r3, [r4, #8]
  cinfo->natural_order = jpeg_natural_order;
 80050fe:	f8c4 117c 	str.w	r1, [r4, #380]	@ 0x17c
  cinfo->lim_Se = DCTSIZE2-1;
 8005102:	213f      	movs	r1, #63	@ 0x3f
  cinfo->dest = NULL;
 8005104:	61a3      	str	r3, [r4, #24]
  cinfo->lim_Se = DCTSIZE2-1;
 8005106:	f8c4 1180 	str.w	r1, [r4, #384]	@ 0x180
  cinfo->input_gamma = 1.0;	/* in case application forgets */
 800510a:	4910      	ldr	r1, [pc, #64]	@ (800514c <jpeg_CreateCompress+0xb0>)
    cinfo->q_scale_factor[i] = 100;
 800510c:	66a2      	str	r2, [r4, #104]	@ 0x68
    cinfo->quant_tbl_ptrs[i] = NULL;
 800510e:	65e3      	str	r3, [r4, #92]	@ 0x5c
    cinfo->q_scale_factor[i] = 100;
 8005110:	66e2      	str	r2, [r4, #108]	@ 0x6c
    cinfo->quant_tbl_ptrs[i] = NULL;
 8005112:	6623      	str	r3, [r4, #96]	@ 0x60
    cinfo->q_scale_factor[i] = 100;
 8005114:	6722      	str	r2, [r4, #112]	@ 0x70
    cinfo->quant_tbl_ptrs[i] = NULL;
 8005116:	6663      	str	r3, [r4, #100]	@ 0x64
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8005118:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800511c:	67e3      	str	r3, [r4, #124]	@ 0x7c
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800511e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8005122:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8005126:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800512a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800512e:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  cinfo->script_space = NULL;
 8005132:	f8c4 31a8 	str.w	r3, [r4, #424]	@ 0x1a8

  /* OK, I'm ready */
  cinfo->global_state = CSTATE_START;
 8005136:	6162      	str	r2, [r4, #20]
    cinfo->quant_tbl_ptrs[i] = NULL;
 8005138:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800513c:	e9c4 231d 	strd	r2, r3, [r4, #116]	@ 0x74
  cinfo->input_gamma = 1.0;	/* in case application forgets */
 8005140:	e9c4 010c 	strd	r0, r1, [r4, #48]	@ 0x30
}
 8005144:	bd70      	pop	{r4, r5, r6, pc}
 8005146:	bf00      	nop
 8005148:	08012194 	.word	0x08012194
 800514c:	3ff00000 	.word	0x3ff00000

08005150 <jpeg_destroy_compress>:
 */

GLOBAL(void)
jpeg_destroy_compress (j_compress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 8005150:	f004 b8e6 	b.w	8009320 <jpeg_destroy>

08005154 <jpeg_suppress_tables>:
 * jcparam.o would be linked whether the application used it or not.
 */

GLOBAL(void)
jpeg_suppress_tables (j_compress_ptr cinfo, boolean suppress)
{
 8005154:	b510      	push	{r4, lr}
 8005156:	f100 0354 	add.w	r3, r0, #84	@ 0x54
 800515a:	f100 0464 	add.w	r4, r0, #100	@ 0x64
  int i;
  JQUANT_TBL * qtbl;
  JHUFF_TBL * htbl;

  for (i = 0; i < NUM_QUANT_TBLS; i++) {
    if ((qtbl = cinfo->quant_tbl_ptrs[i]) != NULL)
 800515e:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8005162:	b10a      	cbz	r2, 8005168 <jpeg_suppress_tables+0x14>
      qtbl->sent_table = suppress;
 8005164:	f8c2 1080 	str.w	r1, [r2, #128]	@ 0x80
  for (i = 0; i < NUM_QUANT_TBLS; i++) {
 8005168:	42a3      	cmp	r3, r4
 800516a:	d1f8      	bne.n	800515e <jpeg_suppress_tables+0xa>
 800516c:	f100 0374 	add.w	r3, r0, #116	@ 0x74
 8005170:	3084      	adds	r0, #132	@ 0x84
  }

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    if ((htbl = cinfo->dc_huff_tbl_ptrs[i]) != NULL)
 8005172:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8005176:	b10a      	cbz	r2, 800517c <jpeg_suppress_tables+0x28>
      htbl->sent_table = suppress;
 8005178:	f8c2 1114 	str.w	r1, [r2, #276]	@ 0x114
    if ((htbl = cinfo->ac_huff_tbl_ptrs[i]) != NULL)
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	b10a      	cbz	r2, 8005184 <jpeg_suppress_tables+0x30>
      htbl->sent_table = suppress;
 8005180:	f8c2 1114 	str.w	r1, [r2, #276]	@ 0x114
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
 8005184:	4283      	cmp	r3, r0
 8005186:	d1f4      	bne.n	8005172 <jpeg_suppress_tables+0x1e>
  }
}
 8005188:	bd10      	pop	{r4, pc}

0800518a <jpeg_finish_compress>:
GLOBAL(void)
jpeg_finish_compress (j_compress_ptr cinfo)
{
  JDIMENSION iMCU_row;

  if (cinfo->global_state == CSTATE_SCANNING ||
 800518a:	6942      	ldr	r2, [r0, #20]
 800518c:	f1a2 0365 	sub.w	r3, r2, #101	@ 0x65
 8005190:	2b01      	cmp	r3, #1
{
 8005192:	b570      	push	{r4, r5, r6, lr}
 8005194:	4604      	mov	r4, r0
  if (cinfo->global_state == CSTATE_SCANNING ||
 8005196:	d821      	bhi.n	80051dc <jpeg_finish_compress+0x52>
      cinfo->global_state == CSTATE_RAW_OK) {
    /* Terminate first pass */
    if (cinfo->next_scanline < cinfo->image_height)
 8005198:	f8d0 2104 	ldr.w	r2, [r0, #260]	@ 0x104
 800519c:	6a03      	ldr	r3, [r0, #32]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d204      	bcs.n	80051ac <jpeg_finish_compress+0x22>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 80051a2:	6803      	ldr	r3, [r0, #0]
 80051a4:	2245      	movs	r2, #69	@ 0x45
 80051a6:	615a      	str	r2, [r3, #20]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4798      	blx	r3
    (*cinfo->master->finish_pass) (cinfo);
 80051ac:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
 80051b0:	4620      	mov	r0, r4
 80051b2:	689b      	ldr	r3, [r3, #8]
  } else if (cinfo->global_state != CSTATE_WRCOEFS)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80051b4:	4798      	blx	r3
      }
      /* We bypass the main controller and invoke coef controller directly;
       * all work is being done from the coefficient buffer.
       */
      if (! (*cinfo->coef->compress_data) (cinfo, (JSAMPIMAGE) NULL))
	ERREXIT(cinfo, JERR_CANT_SUSPEND);
 80051b6:	2619      	movs	r6, #25
  while (! cinfo->master->is_last_pass) {
 80051b8:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
 80051bc:	691d      	ldr	r5, [r3, #16]
 80051be:	b1ad      	cbz	r5, 80051ec <jpeg_finish_compress+0x62>
    }
    (*cinfo->master->finish_pass) (cinfo);
  }
  /* Write EOI, do final cleanup */
  (*cinfo->marker->write_file_trailer) (cinfo);
 80051c0:	f8d4 3194 	ldr.w	r3, [r4, #404]	@ 0x194
 80051c4:	4620      	mov	r0, r4
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	4798      	blx	r3
  (*cinfo->dest->term_destination) (cinfo);
 80051ca:	69a3      	ldr	r3, [r4, #24]
 80051cc:	4620      	mov	r0, r4
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 80051d2:	4620      	mov	r0, r4
}
 80051d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  jpeg_abort((j_common_ptr) cinfo);
 80051d8:	f004 b890 	b.w	80092fc <jpeg_abort>
  } else if (cinfo->global_state != CSTATE_WRCOEFS)
 80051dc:	2a67      	cmp	r2, #103	@ 0x67
 80051de:	d0ea      	beq.n	80051b6 <jpeg_finish_compress+0x2c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80051e0:	6803      	ldr	r3, [r0, #0]
 80051e2:	2115      	movs	r1, #21
 80051e4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	e7e3      	b.n	80051b4 <jpeg_finish_compress+0x2a>
    (*cinfo->master->prepare_for_pass) (cinfo);
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4620      	mov	r0, r4
 80051f0:	4798      	blx	r3
    for (iMCU_row = 0; iMCU_row < cinfo->total_iMCU_rows; iMCU_row++) {
 80051f2:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 80051f6:	42aa      	cmp	r2, r5
 80051f8:	d805      	bhi.n	8005206 <jpeg_finish_compress+0x7c>
    (*cinfo->master->finish_pass) (cinfo);
 80051fa:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
 80051fe:	4620      	mov	r0, r4
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	4798      	blx	r3
 8005204:	e7d8      	b.n	80051b8 <jpeg_finish_compress+0x2e>
      if (cinfo->progress != NULL) {
 8005206:	68a3      	ldr	r3, [r4, #8]
 8005208:	b123      	cbz	r3, 8005214 <jpeg_finish_compress+0x8a>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800520a:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows;
 800520c:	e9c3 5201 	strd	r5, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4798      	blx	r3
      if (! (*cinfo->coef->compress_data) (cinfo, (JSAMPIMAGE) NULL))
 8005214:	f8d4 3190 	ldr.w	r3, [r4, #400]	@ 0x190
 8005218:	2100      	movs	r1, #0
 800521a:	4620      	mov	r0, r4
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	4798      	blx	r3
 8005220:	b920      	cbnz	r0, 800522c <jpeg_finish_compress+0xa2>
	ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	4620      	mov	r0, r4
 8005226:	615e      	str	r6, [r3, #20]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4798      	blx	r3
    for (iMCU_row = 0; iMCU_row < cinfo->total_iMCU_rows; iMCU_row++) {
 800522c:	3501      	adds	r5, #1
 800522e:	e7e0      	b.n	80051f2 <jpeg_finish_compress+0x68>

08005230 <jpeg_start_compress>:
 */

GLOBAL(void)
jpeg_start_compress (j_compress_ptr cinfo, boolean write_all_tables)
{
  if (cinfo->global_state != CSTATE_START)
 8005230:	6942      	ldr	r2, [r0, #20]
 8005232:	2a64      	cmp	r2, #100	@ 0x64
{
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4604      	mov	r4, r0
 8005238:	460d      	mov	r5, r1
  if (cinfo->global_state != CSTATE_START)
 800523a:	d005      	beq.n	8005248 <jpeg_start_compress+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800523c:	6803      	ldr	r3, [r0, #0]
 800523e:	2115      	movs	r1, #21
 8005240:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4798      	blx	r3

  if (write_all_tables)
 8005248:	b11d      	cbz	r5, 8005252 <jpeg_start_compress+0x22>
    jpeg_suppress_tables(cinfo, FALSE);	/* mark all tables to be written */
 800524a:	2100      	movs	r1, #0
 800524c:	4620      	mov	r0, r4
 800524e:	f7ff ff81 	bl	8005154 <jpeg_suppress_tables>

  /* (Re)initialize error mgr and destination modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	4620      	mov	r0, r4
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	4798      	blx	r3
  (*cinfo->dest->init_destination) (cinfo);
 800525a:	69a3      	ldr	r3, [r4, #24]
 800525c:	4620      	mov	r0, r4
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	4798      	blx	r3
  /* Perform master selection of active modules */
  jinit_compress_master(cinfo);
 8005262:	4620      	mov	r0, r4
 8005264:	f002 fe44 	bl	8007ef0 <jinit_compress_master>
  /* Set up for the first pass */
  (*cinfo->master->prepare_for_pass) (cinfo);
 8005268:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
 800526c:	4620      	mov	r0, r4
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4798      	blx	r3
  /* Ready for application to drive first pass through jpeg_write_scanlines
   * or jpeg_write_raw_data.
   */
  cinfo->next_scanline = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
  cinfo->global_state = (cinfo->raw_data_in ? CSTATE_RAW_OK : CSTATE_SCANNING);
 8005278:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf0c      	ite	eq
 8005280:	2365      	moveq	r3, #101	@ 0x65
 8005282:	2366      	movne	r3, #102	@ 0x66
 8005284:	6163      	str	r3, [r4, #20]
}
 8005286:	bd38      	pop	{r3, r4, r5, pc}

08005288 <jpeg_write_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_write_scanlines (j_compress_ptr cinfo, JSAMPARRAY scanlines,
		      JDIMENSION num_lines)
{
 8005288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800528a:	4616      	mov	r6, r2
  JDIMENSION row_ctr, rows_left;

  if (cinfo->global_state != CSTATE_SCANNING)
 800528c:	6942      	ldr	r2, [r0, #20]
{
 800528e:	4604      	mov	r4, r0
 8005290:	460d      	mov	r5, r1
  if (cinfo->global_state != CSTATE_SCANNING)
 8005292:	2a65      	cmp	r2, #101	@ 0x65
 8005294:	d005      	beq.n	80052a2 <jpeg_write_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8005296:	6803      	ldr	r3, [r0, #0]
 8005298:	2115      	movs	r1, #21
 800529a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4798      	blx	r3
  if (cinfo->next_scanline >= cinfo->image_height)
 80052a2:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 80052a6:	6a23      	ldr	r3, [r4, #32]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d307      	bcc.n	80052bc <jpeg_write_scanlines+0x34>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	227e      	movs	r2, #126	@ 0x7e
 80052b0:	f04f 31ff 	mov.w	r1, #4294967295
 80052b4:	4620      	mov	r0, r4
 80052b6:	615a      	str	r2, [r3, #20]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4798      	blx	r3

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
 80052bc:	68a0      	ldr	r0, [r4, #8]
 80052be:	b138      	cbz	r0, 80052d0 <jpeg_write_scanlines+0x48>
    cinfo->progress->pass_counter = (long) cinfo->next_scanline;
 80052c0:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 80052c4:	6043      	str	r3, [r0, #4]
    cinfo->progress->pass_limit = (long) cinfo->image_height;
 80052c6:	6a23      	ldr	r3, [r4, #32]
 80052c8:	6083      	str	r3, [r0, #8]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 80052ca:	6803      	ldr	r3, [r0, #0]
 80052cc:	4620      	mov	r0, r4
 80052ce:	4798      	blx	r3
  /* Give master control module another chance if this is first call to
   * jpeg_write_scanlines.  This lets output of the frame/scan headers be
   * delayed so that application can write COM, etc, markers between
   * jpeg_start_compress and jpeg_write_scanlines.
   */
  if (cinfo->master->call_pass_startup)
 80052d0:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	b112      	cbz	r2, 80052de <jpeg_write_scanlines+0x56>
    (*cinfo->master->pass_startup) (cinfo);
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	4620      	mov	r0, r4
 80052dc:	4798      	blx	r3

  /* Ignore any extra scanlines at bottom of image. */
  rows_left = cinfo->image_height - cinfo->next_scanline;
 80052de:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
  if (num_lines > rows_left)
    num_lines = rows_left;

  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, num_lines);
 80052e2:	4620      	mov	r0, r4
  rows_left = cinfo->image_height - cinfo->next_scanline;
 80052e4:	6a23      	ldr	r3, [r4, #32]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, num_lines);
 80052e6:	4629      	mov	r1, r5
  rows_left = cinfo->image_height - cinfo->next_scanline;
 80052e8:	1a9b      	subs	r3, r3, r2
  row_ctr = 0;
 80052ea:	2200      	movs	r2, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, num_lines);
 80052ec:	42b3      	cmp	r3, r6
  row_ctr = 0;
 80052ee:	9201      	str	r2, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, num_lines);
 80052f0:	f8d4 2188 	ldr.w	r2, [r4, #392]	@ 0x188
 80052f4:	bf28      	it	cs
 80052f6:	4633      	movcs	r3, r6
 80052f8:	6857      	ldr	r7, [r2, #4]
 80052fa:	aa01      	add	r2, sp, #4
 80052fc:	47b8      	blx	r7
  cinfo->next_scanline += row_ctr;
 80052fe:	9801      	ldr	r0, [sp, #4]
 8005300:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 8005304:	4403      	add	r3, r0
 8005306:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
  return row_ctr;
}
 800530a:	b003      	add	sp, #12
 800530c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005310 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_compress_ptr cinfo, boolean gather_statistics)
{
 8005310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005314:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8005316:	f8d0 51a4 	ldr.w	r5, [r0, #420]	@ 0x1a4
  int ci, tbl;
  jpeg_component_info * compptr;

  if (gather_statistics)
 800531a:	b121      	cbz	r1, 8005326 <start_pass+0x16>
    /* Make sure to avoid that in the master control logic!
     * We are fully adaptive here and need no extra
     * statistics gathering pass!
     */
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 800531c:	6803      	ldr	r3, [r0, #0]
 800531e:	2231      	movs	r2, #49	@ 0x31
 8005320:	615a      	str	r2, [r3, #20]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4798      	blx	r3

  /* We assume jcmaster.c already validated the progressive scan parameters. */

  /* Select execution routines */
  if (cinfo->progressive_mode) {
 8005326:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 800532a:	b34b      	cbz	r3, 8005380 <start_pass+0x70>
    if (cinfo->Ah == 0) {
 800532c:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
      if (cinfo->Ss == 0)
 8005330:	f8d4 2168 	ldr.w	r2, [r4, #360]	@ 0x168
    if (cinfo->Ah == 0) {
 8005334:	bb0b      	cbnz	r3, 800537a <start_pass+0x6a>
      if (cinfo->Ss == 0)
 8005336:	4b3a      	ldr	r3, [pc, #232]	@ (8005420 <start_pass+0x110>)
 8005338:	493a      	ldr	r1, [pc, #232]	@ (8005424 <start_pass+0x114>)
	entropy->pub.encode_mcu = encode_mcu_DC_first;
      else
	entropy->pub.encode_mcu = encode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
 800533a:	2a00      	cmp	r2, #0
 800533c:	bf18      	it	ne
 800533e:	460b      	movne	r3, r1
 8005340:	f105 0724 	add.w	r7, r5, #36	@ 0x24
 8005344:	f504 7990 	add.w	r9, r4, #288	@ 0x120
	entropy->pub.encode_mcu = encode_mcu_DC_refine;
 8005348:	f04f 0800 	mov.w	r8, #0
 800534c:	606b      	str	r3, [r5, #4]
    }
  } else
    entropy->pub.encode_mcu = encode_mcu;

  /* Allocate & initialize requested statistics areas */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800534e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8005352:	4543      	cmp	r3, r8
 8005354:	dc16      	bgt.n	8005384 <start_pass+0x74>
    }
  }

  /* Initialize arithmetic encoding variables */
  entropy->c = 0;
  entropy->a = 0x10000L;
 8005356:	2300      	movs	r3, #0
 8005358:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  entropy->sc = 0;
  entropy->zc = 0;
  entropy->ct = 11;
  entropy->buffer = -1;  /* empty */
 800535c:	210b      	movs	r1, #11
  entropy->a = 0x10000L;
 800535e:	e9c5 3203 	strd	r3, r2, [r5, #12]
  entropy->buffer = -1;  /* empty */
 8005362:	f04f 32ff 	mov.w	r2, #4294967295
 8005366:	e9c5 1207 	strd	r1, r2, [r5, #28]

  /* Initialize restart stuff */
  entropy->restarts_to_go = cinfo->restart_interval;
 800536a:	f8d4 20ec 	ldr.w	r2, [r4, #236]	@ 0xec
  entropy->zc = 0;
 800536e:	e9c5 3305 	strd	r3, r3, [r5, #20]
  entropy->next_restart_num = 0;
 8005372:	e9c5 2311 	strd	r2, r3, [r5, #68]	@ 0x44
}
 8005376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cinfo->Ss == 0)
 800537a:	4b2b      	ldr	r3, [pc, #172]	@ (8005428 <start_pass+0x118>)
 800537c:	492b      	ldr	r1, [pc, #172]	@ (800542c <start_pass+0x11c>)
 800537e:	e7dc      	b.n	800533a <start_pass+0x2a>
 8005380:	4b2b      	ldr	r3, [pc, #172]	@ (8005430 <start_pass+0x120>)
 8005382:	e7dd      	b.n	8005340 <start_pass+0x30>
    if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 8005384:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
    compptr = cinfo->cur_comp_info[ci];
 8005388:	f859 af04 	ldr.w	sl, [r9, #4]!
    if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 800538c:	bb03      	cbnz	r3, 80053d0 <start_pass+0xc0>
 800538e:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
 8005392:	b9eb      	cbnz	r3, 80053d0 <start_pass+0xc0>
      tbl = compptr->dc_tbl_no;
 8005394:	f8da 6014 	ldr.w	r6, [sl, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8005398:	2e0f      	cmp	r6, #15
 800539a:	d906      	bls.n	80053aa <start_pass+0x9a>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	2232      	movs	r2, #50	@ 0x32
 80053a0:	4620      	mov	r0, r4
 80053a2:	e9c3 2605 	strd	r2, r6, [r3, #20]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 80053aa:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80053ae:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 80053b0:	b933      	cbnz	r3, 80053c0 <start_pass+0xb0>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 80053b2:	6863      	ldr	r3, [r4, #4]
 80053b4:	2240      	movs	r2, #64	@ 0x40
 80053b6:	2101      	movs	r1, #1
 80053b8:	4620      	mov	r0, r4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4798      	blx	r3
 80053be:	64f0      	str	r0, [r6, #76]	@ 0x4c
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 80053c0:	2240      	movs	r2, #64	@ 0x40
 80053c2:	2100      	movs	r1, #0
 80053c4:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80053c6:	f00a fb73 	bl	800fab0 <memset>
      entropy->last_dc_val[ci] = 0;
 80053ca:	2300      	movs	r3, #0
 80053cc:	603b      	str	r3, [r7, #0]
      entropy->dc_context[ci] = 0;
 80053ce:	613b      	str	r3, [r7, #16]
    if (cinfo->Se) {
 80053d0:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 80053d4:	b1fb      	cbz	r3, 8005416 <start_pass+0x106>
      tbl = compptr->ac_tbl_no;
 80053d6:	f8da 6018 	ldr.w	r6, [sl, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 80053da:	2e0f      	cmp	r6, #15
 80053dc:	d906      	bls.n	80053ec <start_pass+0xdc>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	2232      	movs	r2, #50	@ 0x32
 80053e2:	4620      	mov	r0, r4
 80053e4:	e9c3 2605 	strd	r2, r6, [r3, #20]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4798      	blx	r3
      if (entropy->ac_stats[tbl] == NULL)
 80053ec:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80053f0:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 80053f4:	b943      	cbnz	r3, 8005408 <start_pass+0xf8>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 80053f6:	6863      	ldr	r3, [r4, #4]
 80053f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053fc:	2101      	movs	r1, #1
 80053fe:	4620      	mov	r0, r4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4798      	blx	r3
 8005404:	f8c6 008c 	str.w	r0, [r6, #140]	@ 0x8c
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8005408:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800540c:	2100      	movs	r1, #0
 800540e:	f8d6 008c 	ldr.w	r0, [r6, #140]	@ 0x8c
 8005412:	f00a fb4d 	bl	800fab0 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8005416:	f108 0801 	add.w	r8, r8, #1
 800541a:	3704      	adds	r7, #4
 800541c:	e797      	b.n	800534e <start_pass+0x3e>
 800541e:	bf00      	nop
 8005420:	08005d7d 	.word	0x08005d7d
 8005424:	08005bdf 	.word	0x08005bdf
 8005428:	08005b7b 	.word	0x08005b7b
 800542c:	08005a29 	.word	0x08005a29
 8005430:	0800577d 	.word	0x0800577d

08005434 <emit_byte>:
  struct jpeg_destination_mgr * dest = cinfo->dest;
 8005434:	698b      	ldr	r3, [r1, #24]
  *dest->next_output_byte++ = (JOCTET) val;
 8005436:	681a      	ldr	r2, [r3, #0]
{
 8005438:	b510      	push	{r4, lr}
 800543a:	460c      	mov	r4, r1
  *dest->next_output_byte++ = (JOCTET) val;
 800543c:	1c51      	adds	r1, r2, #1
 800543e:	6019      	str	r1, [r3, #0]
 8005440:	7010      	strb	r0, [r2, #0]
  if (--dest->free_in_buffer == 0)
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	3a01      	subs	r2, #1
 8005446:	605a      	str	r2, [r3, #4]
 8005448:	b95a      	cbnz	r2, 8005462 <emit_byte+0x2e>
    if (! (*dest->empty_output_buffer) (cinfo))
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4620      	mov	r0, r4
 800544e:	4798      	blx	r3
 8005450:	b938      	cbnz	r0, 8005462 <emit_byte+0x2e>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	2219      	movs	r2, #25
 8005456:	4620      	mov	r0, r4
 8005458:	615a      	str	r2, [r3, #20]
 800545a:	681b      	ldr	r3, [r3, #0]
}
 800545c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8005460:	4718      	bx	r3
}
 8005462:	bd10      	pop	{r4, pc}

08005464 <finish_pass>:
{
 8005464:	b538      	push	{r3, r4, r5, lr}
  arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 8005466:	f8d0 41a4 	ldr.w	r4, [r0, #420]	@ 0x1a4
{
 800546a:	4605      	mov	r5, r0
  if ((temp = (e->a - 1 + e->c) & 0xFFFF0000L) < e->c)
 800546c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8005470:	3b01      	subs	r3, #1
 8005472:	4413      	add	r3, r2
 8005474:	f36f 030f 	bfc	r3, #0, #16
 8005478:	429a      	cmp	r2, r3
  e->c <<= e->ct;
 800547a:	69e2      	ldr	r2, [r4, #28]
    e->c = temp + 0x8000L;
 800547c:	bfc8      	it	gt
 800547e:	f503 4300 	addgt.w	r3, r3, #32768	@ 0x8000
  e->c <<= e->ct;
 8005482:	4093      	lsls	r3, r2
    if (e->buffer >= 0) {
 8005484:	6a22      	ldr	r2, [r4, #32]
  if (e->c & 0xF8000000L) {
 8005486:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
  e->c <<= e->ct;
 800548a:	60e3      	str	r3, [r4, #12]
  if (e->c & 0xF8000000L) {
 800548c:	d34b      	bcc.n	8005526 <finish_pass+0xc2>
    if (e->buffer >= 0) {
 800548e:	2a00      	cmp	r2, #0
      if (e->zc)
 8005490:	69a3      	ldr	r3, [r4, #24]
    if (e->buffer >= 0) {
 8005492:	db0d      	blt.n	80054b0 <finish_pass+0x4c>
      if (e->zc)
 8005494:	2b00      	cmp	r3, #0
 8005496:	d13e      	bne.n	8005516 <finish_pass+0xb2>
      emit_byte(e->buffer + 1, cinfo);
 8005498:	6a20      	ldr	r0, [r4, #32]
 800549a:	4629      	mov	r1, r5
 800549c:	3001      	adds	r0, #1
 800549e:	f7ff ffc9 	bl	8005434 <emit_byte>
      if (e->buffer + 1 == 0xFF)
 80054a2:	6a23      	ldr	r3, [r4, #32]
 80054a4:	2bfe      	cmp	r3, #254	@ 0xfe
 80054a6:	d103      	bne.n	80054b0 <finish_pass+0x4c>
	emit_byte(0x00, cinfo);
 80054a8:	4629      	mov	r1, r5
 80054aa:	2000      	movs	r0, #0
 80054ac:	f7ff ffc2 	bl	8005434 <emit_byte>
    e->zc += e->sc;  /* carry-over converts stacked 0xFF bytes to 0x00 */
 80054b0:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 80054b4:	4413      	add	r3, r2
 80054b6:	61a3      	str	r3, [r4, #24]
    e->sc = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	6163      	str	r3, [r4, #20]
  if (e->c & 0x7FFF800L) {
 80054bc:	68e2      	ldr	r2, [r4, #12]
 80054be:	4b36      	ldr	r3, [pc, #216]	@ (8005598 <finish_pass+0x134>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d066      	beq.n	8005594 <finish_pass+0x130>
    if (e->zc)  /* output final pending zero bytes */
 80054c6:	69a3      	ldr	r3, [r4, #24]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d15b      	bne.n	8005584 <finish_pass+0x120>
    emit_byte((e->c >> 19) & 0xFF, cinfo);
 80054cc:	68e0      	ldr	r0, [r4, #12]
 80054ce:	4629      	mov	r1, r5
 80054d0:	f3c0 40c7 	ubfx	r0, r0, #19, #8
 80054d4:	f7ff ffae 	bl	8005434 <emit_byte>
    if (((e->c >> 19) & 0xFF) == 0xFF)
 80054d8:	68e3      	ldr	r3, [r4, #12]
 80054da:	f003 63ff 	and.w	r3, r3, #133693440	@ 0x7f80000
 80054de:	f1b3 6fff 	cmp.w	r3, #133693440	@ 0x7f80000
 80054e2:	d103      	bne.n	80054ec <finish_pass+0x88>
      emit_byte(0x00, cinfo);
 80054e4:	4629      	mov	r1, r5
 80054e6:	2000      	movs	r0, #0
 80054e8:	f7ff ffa4 	bl	8005434 <emit_byte>
    if (e->c & 0x7F800L) {
 80054ec:	68e0      	ldr	r0, [r4, #12]
 80054ee:	f410 2fff 	tst.w	r0, #522240	@ 0x7f800
 80054f2:	d04f      	beq.n	8005594 <finish_pass+0x130>
      emit_byte((e->c >> 11) & 0xFF, cinfo);
 80054f4:	4629      	mov	r1, r5
 80054f6:	f3c0 20c7 	ubfx	r0, r0, #11, #8
 80054fa:	f7ff ff9b 	bl	8005434 <emit_byte>
      if (((e->c >> 11) & 0xFF) == 0xFF)
 80054fe:	68e3      	ldr	r3, [r4, #12]
 8005500:	f403 23ff 	and.w	r3, r3, #522240	@ 0x7f800
 8005504:	f5b3 2fff 	cmp.w	r3, #522240	@ 0x7f800
 8005508:	d144      	bne.n	8005594 <finish_pass+0x130>
	emit_byte(0x00, cinfo);
 800550a:	4629      	mov	r1, r5
 800550c:	2000      	movs	r0, #0
}
 800550e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	emit_byte(0x00, cinfo);
 8005512:	f7ff bf8f 	b.w	8005434 <emit_byte>
	do emit_byte(0x00, cinfo);
 8005516:	4629      	mov	r1, r5
 8005518:	2000      	movs	r0, #0
 800551a:	f7ff ff8b 	bl	8005434 <emit_byte>
	while (--e->zc);
 800551e:	69a3      	ldr	r3, [r4, #24]
 8005520:	3b01      	subs	r3, #1
 8005522:	61a3      	str	r3, [r4, #24]
 8005524:	e7b6      	b.n	8005494 <finish_pass+0x30>
    if (e->buffer == 0)
 8005526:	2a00      	cmp	r2, #0
 8005528:	d10f      	bne.n	800554a <finish_pass+0xe6>
      ++e->zc;
 800552a:	69a3      	ldr	r3, [r4, #24]
 800552c:	3301      	adds	r3, #1
 800552e:	61a3      	str	r3, [r4, #24]
    if (e->sc) {
 8005530:	6963      	ldr	r3, [r4, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0c2      	beq.n	80054bc <finish_pass+0x58>
      if (e->zc)
 8005536:	69a3      	ldr	r3, [r4, #24]
 8005538:	b1b3      	cbz	r3, 8005568 <finish_pass+0x104>
	do emit_byte(0x00, cinfo);
 800553a:	4629      	mov	r1, r5
 800553c:	2000      	movs	r0, #0
 800553e:	f7ff ff79 	bl	8005434 <emit_byte>
	while (--e->zc);
 8005542:	69a3      	ldr	r3, [r4, #24]
 8005544:	3b01      	subs	r3, #1
 8005546:	61a3      	str	r3, [r4, #24]
 8005548:	e7f6      	b.n	8005538 <finish_pass+0xd4>
    else if (e->buffer >= 0) {
 800554a:	dbf1      	blt.n	8005530 <finish_pass+0xcc>
      if (e->zc)
 800554c:	69a3      	ldr	r3, [r4, #24]
	do emit_byte(0x00, cinfo);
 800554e:	4629      	mov	r1, r5
      if (e->zc)
 8005550:	b91b      	cbnz	r3, 800555a <finish_pass+0xf6>
      emit_byte(e->buffer, cinfo);
 8005552:	6a20      	ldr	r0, [r4, #32]
 8005554:	f7ff ff6e 	bl	8005434 <emit_byte>
 8005558:	e7ea      	b.n	8005530 <finish_pass+0xcc>
	do emit_byte(0x00, cinfo);
 800555a:	2000      	movs	r0, #0
 800555c:	f7ff ff6a 	bl	8005434 <emit_byte>
	while (--e->zc);
 8005560:	69a3      	ldr	r3, [r4, #24]
 8005562:	3b01      	subs	r3, #1
 8005564:	61a3      	str	r3, [r4, #24]
 8005566:	e7f2      	b.n	800554e <finish_pass+0xea>
	emit_byte(0xFF, cinfo);
 8005568:	4629      	mov	r1, r5
 800556a:	20ff      	movs	r0, #255	@ 0xff
 800556c:	f7ff ff62 	bl	8005434 <emit_byte>
	emit_byte(0x00, cinfo);
 8005570:	4629      	mov	r1, r5
 8005572:	2000      	movs	r0, #0
 8005574:	f7ff ff5e 	bl	8005434 <emit_byte>
      } while (--e->sc);
 8005578:	6963      	ldr	r3, [r4, #20]
 800557a:	3b01      	subs	r3, #1
 800557c:	6163      	str	r3, [r4, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f2      	bne.n	8005568 <finish_pass+0x104>
 8005582:	e79b      	b.n	80054bc <finish_pass+0x58>
      do emit_byte(0x00, cinfo);
 8005584:	4629      	mov	r1, r5
 8005586:	2000      	movs	r0, #0
 8005588:	f7ff ff54 	bl	8005434 <emit_byte>
      while (--e->zc);
 800558c:	69a3      	ldr	r3, [r4, #24]
 800558e:	3b01      	subs	r3, #1
 8005590:	61a3      	str	r3, [r4, #24]
 8005592:	e799      	b.n	80054c8 <finish_pass+0x64>
}
 8005594:	bd38      	pop	{r3, r4, r5, pc}
 8005596:	bf00      	nop
 8005598:	07fff800 	.word	0x07fff800

0800559c <arith_encode>:
{
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sv = *st;
 800559e:	780b      	ldrb	r3, [r1, #0]
{
 80055a0:	4605      	mov	r5, r0
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 80055a2:	f8d0 41a4 	ldr.w	r4, [r0, #420]	@ 0x1a4
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 80055a6:	f003 067f 	and.w	r6, r3, #127	@ 0x7f
 80055aa:	484c      	ldr	r0, [pc, #304]	@ (80056dc <arith_encode+0x140>)
  if (val != (sv >> 7)) {
 80055ac:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 80055b0:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
  e->a -= qe;
 80055b4:	6920      	ldr	r0, [r4, #16]
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 80055b6:	ea4f 4726 	mov.w	r7, r6, asr #16
  e->a -= qe;
 80055ba:	eba0 4026 	sub.w	r0, r0, r6, asr #16
 80055be:	6120      	str	r0, [r4, #16]
  if (val != (sv >> 7)) {
 80055c0:	d034      	beq.n	800562c <arith_encode+0x90>
    if (e->a >= qe) {
 80055c2:	42b8      	cmp	r0, r7
    *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 80055c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
      e->c += e->a;
 80055c8:	bfa8      	it	ge
 80055ca:	68e2      	ldrge	r2, [r4, #12]
    *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 80055cc:	ea83 0306 	eor.w	r3, r3, r6
      e->c += e->a;
 80055d0:	bfa4      	itt	ge
 80055d2:	1812      	addge	r2, r2, r0
      e->a = qe;
 80055d4:	e9c4 2703 	strdge	r2, r7, [r4, #12]
    *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 80055d8:	b2db      	uxtb	r3, r3
	e->sc = 0;
 80055da:	2700      	movs	r7, #0
    *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 80055dc:	700b      	strb	r3, [r1, #0]
    e->a <<= 1;
 80055de:	6923      	ldr	r3, [r4, #16]
    e->c <<= 1;
 80055e0:	68e6      	ldr	r6, [r4, #12]
    e->a <<= 1;
 80055e2:	005b      	lsls	r3, r3, #1
    e->c <<= 1;
 80055e4:	0076      	lsls	r6, r6, #1
    e->a <<= 1;
 80055e6:	6123      	str	r3, [r4, #16]
    if (--e->ct == 0) {
 80055e8:	69e3      	ldr	r3, [r4, #28]
    e->c <<= 1;
 80055ea:	60e6      	str	r6, [r4, #12]
    if (--e->ct == 0) {
 80055ec:	3b01      	subs	r3, #1
 80055ee:	61e3      	str	r3, [r4, #28]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d13d      	bne.n	8005670 <arith_encode+0xd4>
      temp = e->c >> 19;
 80055f4:	14f6      	asrs	r6, r6, #19
      if (temp > 0xFF) {
 80055f6:	2eff      	cmp	r6, #255	@ 0xff
 80055f8:	dd2f      	ble.n	800565a <arith_encode+0xbe>
	if (e->buffer >= 0) {
 80055fa:	6a22      	ldr	r2, [r4, #32]
	  if (e->zc)
 80055fc:	69a3      	ldr	r3, [r4, #24]
	if (e->buffer >= 0) {
 80055fe:	2a00      	cmp	r2, #0
 8005600:	db0c      	blt.n	800561c <arith_encode+0x80>
	  if (e->zc)
 8005602:	bb13      	cbnz	r3, 800564a <arith_encode+0xae>
	  emit_byte(e->buffer + 1, cinfo);
 8005604:	6a20      	ldr	r0, [r4, #32]
 8005606:	4629      	mov	r1, r5
 8005608:	3001      	adds	r0, #1
 800560a:	f7ff ff13 	bl	8005434 <emit_byte>
	  if (e->buffer + 1 == 0xFF)
 800560e:	6a23      	ldr	r3, [r4, #32]
 8005610:	2bfe      	cmp	r3, #254	@ 0xfe
 8005612:	d103      	bne.n	800561c <arith_encode+0x80>
	    emit_byte(0x00, cinfo);
 8005614:	4629      	mov	r1, r5
 8005616:	2000      	movs	r0, #0
 8005618:	f7ff ff0c 	bl	8005434 <emit_byte>
	e->zc += e->sc;  /* carry-over converts stacked 0xFF bytes to 0x00 */
 800561c:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8005620:	4413      	add	r3, r2
	e->sc = 0;
 8005622:	e9c4 7305 	strd	r7, r3, [r4, #20]
	e->buffer = temp & 0xFF;  /* new output byte (can still overflow) */
 8005626:	b2f6      	uxtb	r6, r6
 8005628:	6226      	str	r6, [r4, #32]
 800562a:	e01a      	b.n	8005662 <arith_encode+0xc6>
    if (e->a >= 0x8000L)
 800562c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005630:	da22      	bge.n	8005678 <arith_encode+0xdc>
    if (e->a < qe) {
 8005632:	42b8      	cmp	r0, r7
    *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8005634:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
      e->c += e->a;
 8005638:	bfb8      	it	lt
 800563a:	68e2      	ldrlt	r2, [r4, #12]
    *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800563c:	ea83 2326 	eor.w	r3, r3, r6, asr #8
      e->c += e->a;
 8005640:	bfbc      	itt	lt
 8005642:	1812      	addlt	r2, r2, r0
      e->a = qe;
 8005644:	e9c4 2703 	strdlt	r2, r7, [r4, #12]
    *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8005648:	e7c6      	b.n	80055d8 <arith_encode+0x3c>
	    do emit_byte(0x00, cinfo);
 800564a:	4629      	mov	r1, r5
 800564c:	2000      	movs	r0, #0
 800564e:	f7ff fef1 	bl	8005434 <emit_byte>
	    while (--e->zc);
 8005652:	69a3      	ldr	r3, [r4, #24]
 8005654:	3b01      	subs	r3, #1
 8005656:	61a3      	str	r3, [r4, #24]
 8005658:	e7d3      	b.n	8005602 <arith_encode+0x66>
      } else if (temp == 0xFF) {
 800565a:	d10e      	bne.n	800567a <arith_encode+0xde>
	++e->sc;  /* stack 0xFF byte (which might overflow later) */
 800565c:	6963      	ldr	r3, [r4, #20]
 800565e:	3301      	adds	r3, #1
 8005660:	6163      	str	r3, [r4, #20]
      e->c &= 0x7FFFFL;
 8005662:	68e3      	ldr	r3, [r4, #12]
 8005664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005668:	60e3      	str	r3, [r4, #12]
      e->ct += 8;
 800566a:	69e3      	ldr	r3, [r4, #28]
 800566c:	3308      	adds	r3, #8
 800566e:	61e3      	str	r3, [r4, #28]
  } while (e->a < 0x8000L);
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005676:	dbb2      	blt.n	80055de <arith_encode+0x42>
}
 8005678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (e->buffer == 0)
 800567a:	6a23      	ldr	r3, [r4, #32]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10f      	bne.n	80056a0 <arith_encode+0x104>
	  ++e->zc;
 8005680:	69a3      	ldr	r3, [r4, #24]
 8005682:	3301      	adds	r3, #1
 8005684:	61a3      	str	r3, [r4, #24]
	if (e->sc) {
 8005686:	6963      	ldr	r3, [r4, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0cc      	beq.n	8005626 <arith_encode+0x8a>
	  if (e->zc)
 800568c:	69a3      	ldr	r3, [r4, #24]
 800568e:	b1b3      	cbz	r3, 80056be <arith_encode+0x122>
	    do emit_byte(0x00, cinfo);
 8005690:	4629      	mov	r1, r5
 8005692:	2000      	movs	r0, #0
 8005694:	f7ff fece 	bl	8005434 <emit_byte>
	    while (--e->zc);
 8005698:	69a3      	ldr	r3, [r4, #24]
 800569a:	3b01      	subs	r3, #1
 800569c:	61a3      	str	r3, [r4, #24]
 800569e:	e7f6      	b.n	800568e <arith_encode+0xf2>
	else if (e->buffer >= 0) {
 80056a0:	dbf1      	blt.n	8005686 <arith_encode+0xea>
	  if (e->zc)
 80056a2:	69a3      	ldr	r3, [r4, #24]
	    do emit_byte(0x00, cinfo);
 80056a4:	4629      	mov	r1, r5
	  if (e->zc)
 80056a6:	b91b      	cbnz	r3, 80056b0 <arith_encode+0x114>
	  emit_byte(e->buffer, cinfo);
 80056a8:	6a20      	ldr	r0, [r4, #32]
 80056aa:	f7ff fec3 	bl	8005434 <emit_byte>
 80056ae:	e7ea      	b.n	8005686 <arith_encode+0xea>
	    do emit_byte(0x00, cinfo);
 80056b0:	2000      	movs	r0, #0
 80056b2:	f7ff febf 	bl	8005434 <emit_byte>
	    while (--e->zc);
 80056b6:	69a3      	ldr	r3, [r4, #24]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	61a3      	str	r3, [r4, #24]
 80056bc:	e7f2      	b.n	80056a4 <arith_encode+0x108>
	    emit_byte(0xFF, cinfo);
 80056be:	4629      	mov	r1, r5
 80056c0:	20ff      	movs	r0, #255	@ 0xff
 80056c2:	f7ff feb7 	bl	8005434 <emit_byte>
	    emit_byte(0x00, cinfo);
 80056c6:	4629      	mov	r1, r5
 80056c8:	2000      	movs	r0, #0
 80056ca:	f7ff feb3 	bl	8005434 <emit_byte>
	  } while (--e->sc);
 80056ce:	6963      	ldr	r3, [r4, #20]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	6163      	str	r3, [r4, #20]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1f2      	bne.n	80056be <arith_encode+0x122>
 80056d8:	e7a5      	b.n	8005626 <arith_encode+0x8a>
 80056da:	bf00      	nop
 80056dc:	080115b0 	.word	0x080115b0

080056e0 <emit_restart>:
{
 80056e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056e4:	4604      	mov	r4, r0
 80056e6:	460e      	mov	r6, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 80056e8:	f8d0 51a4 	ldr.w	r5, [r0, #420]	@ 0x1a4
  finish_pass(cinfo);
 80056ec:	f7ff feba 	bl	8005464 <finish_pass>
  emit_byte(0xFF, cinfo);
 80056f0:	4621      	mov	r1, r4
 80056f2:	20ff      	movs	r0, #255	@ 0xff
 80056f4:	f7ff fe9e 	bl	8005434 <emit_byte>
  emit_byte(JPEG_RST0 + restart_num, cinfo);
 80056f8:	f504 7990 	add.w	r9, r4, #288	@ 0x120
 80056fc:	f106 00d0 	add.w	r0, r6, #208	@ 0xd0
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8005700:	f04f 0800 	mov.w	r8, #0
 8005704:	f105 0624 	add.w	r6, r5, #36	@ 0x24
  emit_byte(JPEG_RST0 + restart_num, cinfo);
 8005708:	4621      	mov	r1, r4
 800570a:	f7ff fe93 	bl	8005434 <emit_byte>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800570e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8005712:	4543      	cmp	r3, r8
 8005714:	dc0d      	bgt.n	8005732 <emit_restart+0x52>
  entropy->a = 0x10000L;
 8005716:	2300      	movs	r3, #0
 8005718:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  entropy->zc = 0;
 800571c:	e9c5 3305 	strd	r3, r3, [r5, #20]
  entropy->a = 0x10000L;
 8005720:	e9c5 3203 	strd	r3, r2, [r5, #12]
  entropy->buffer = -1;  /* empty */
 8005724:	220b      	movs	r2, #11
 8005726:	f04f 33ff 	mov.w	r3, #4294967295
 800572a:	e9c5 2307 	strd	r2, r3, [r5, #28]
}
 800572e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 8005732:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
    compptr = cinfo->cur_comp_info[ci];
 8005736:	f859 af04 	ldr.w	sl, [r9, #4]!
    if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 800573a:	b96b      	cbnz	r3, 8005758 <emit_restart+0x78>
 800573c:	f8d4 7170 	ldr.w	r7, [r4, #368]	@ 0x170
 8005740:	b957      	cbnz	r7, 8005758 <emit_restart+0x78>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 8005742:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005746:	2240      	movs	r2, #64	@ 0x40
 8005748:	4639      	mov	r1, r7
 800574a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800574e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005750:	f00a f9ae 	bl	800fab0 <memset>
      entropy->last_dc_val[ci] = 0;
 8005754:	6037      	str	r7, [r6, #0]
      entropy->dc_context[ci] = 0;
 8005756:	6137      	str	r7, [r6, #16]
    if (cinfo->Se) {
 8005758:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 800575c:	b153      	cbz	r3, 8005774 <emit_restart+0x94>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800575e:	f8da 3018 	ldr.w	r3, [sl, #24]
 8005762:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005766:	2100      	movs	r1, #0
 8005768:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800576c:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8005770:	f00a f99e 	bl	800fab0 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8005774:	f108 0801 	add.w	r8, r8, #1
 8005778:	3604      	adds	r6, #4
 800577a:	e7c8      	b.n	800570e <emit_restart+0x2e>

0800577c <encode_mcu>:
{
 800577c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 8005780:	f8d0 30ec 	ldr.w	r3, [r0, #236]	@ 0xec
{
 8005784:	b089      	sub	sp, #36	@ 0x24
 8005786:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8005788:	f8d0 61a4 	ldr.w	r6, [r0, #420]	@ 0x1a4
{
 800578c:	9107      	str	r1, [sp, #28]
  if (cinfo->restart_interval) {
 800578e:	b17b      	cbz	r3, 80057b0 <encode_mcu+0x34>
    if (entropy->restarts_to_go == 0) {
 8005790:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8005792:	b953      	cbnz	r3, 80057aa <encode_mcu+0x2e>
      emit_restart(cinfo, entropy->next_restart_num);
 8005794:	6cb1      	ldr	r1, [r6, #72]	@ 0x48
 8005796:	f7ff ffa3 	bl	80056e0 <emit_restart>
      entropy->restarts_to_go = cinfo->restart_interval;
 800579a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
 800579e:	6473      	str	r3, [r6, #68]	@ 0x44
      entropy->next_restart_num++;
 80057a0:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 80057a2:	3301      	adds	r3, #1
      entropy->next_restart_num &= 7;
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	64b3      	str	r3, [r6, #72]	@ 0x48
    entropy->restarts_to_go--;
 80057aa:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 80057ac:	3b01      	subs	r3, #1
 80057ae:	6473      	str	r3, [r6, #68]	@ 0x44
  natural_order = cinfo->natural_order;
 80057b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057b4:	9305      	str	r3, [sp, #20]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80057b6:	f504 739e 	add.w	r3, r4, #316	@ 0x13c
 80057ba:	9306      	str	r3, [sp, #24]
 80057bc:	2300      	movs	r3, #0
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	9a01      	ldr	r2, [sp, #4]
 80057c2:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
 80057c6:	4293      	cmp	r3, r2
 80057c8:	dc03      	bgt.n	80057d2 <encode_mcu+0x56>
}
 80057ca:	2001      	movs	r0, #1
 80057cc:	b009      	add	sp, #36	@ 0x24
 80057ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    block = MCU_data[blkn];
 80057d2:	9b07      	ldr	r3, [sp, #28]
 80057d4:	9a01      	ldr	r2, [sp, #4]
 80057d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057da:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 80057dc:	9b06      	ldr	r3, [sp, #24]
 80057de:	f853 7f04 	ldr.w	r7, [r3, #4]!
 80057e2:	9306      	str	r3, [sp, #24]
    compptr = cinfo->cur_comp_info[ci];
 80057e4:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 80057e8:	eb06 0787 	add.w	r7, r6, r7, lsl #2
 80057ec:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
    tbl = compptr->dc_tbl_no;
 80057f0:	f8d3 9014 	ldr.w	r9, [r3, #20]
    compptr = cinfo->cur_comp_info[ci];
 80057f4:	9303      	str	r3, [sp, #12]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 80057f6:	eb06 0b89 	add.w	fp, r6, r9, lsl #2
 80057fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fc:	f8db 504c 	ldr.w	r5, [fp, #76]	@ 0x4c
 8005800:	441d      	add	r5, r3
    if ((v = (*block)[0] - entropy->last_dc_val[ci]) == 0) {
 8005802:	9b02      	ldr	r3, [sp, #8]
 8005804:	f9b3 a000 	ldrsh.w	sl, [r3]
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	ebba 0803 	subs.w	r8, sl, r3
 800580e:	d12d      	bne.n	800586c <encode_mcu+0xf0>
      arith_encode(cinfo, st, 0);
 8005810:	4642      	mov	r2, r8
 8005812:	4629      	mov	r1, r5
 8005814:	4620      	mov	r0, r4
 8005816:	f7ff fec1 	bl	800559c <arith_encode>
      entropy->dc_context[ci] = 0;	/* zero diff category */
 800581a:	f8c7 8034 	str.w	r8, [r7, #52]	@ 0x34
    if ((ke = cinfo->lim_Se) == 0) continue;
 800581e:	f8d4 8180 	ldr.w	r8, [r4, #384]	@ 0x180
 8005822:	f1b8 0f00 	cmp.w	r8, #0
 8005826:	d01e      	beq.n	8005866 <encode_mcu+0xea>
    tbl = compptr->ac_tbl_no;
 8005828:	9b03      	ldr	r3, [sp, #12]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	9303      	str	r3, [sp, #12]
      if ((*block)[natural_order[ke]]) break;
 800582e:	9b05      	ldr	r3, [sp, #20]
 8005830:	9a02      	ldr	r2, [sp, #8]
 8005832:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005836:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f040 80ef 	bne.w	8005a1e <encode_mcu+0x2a2>
    } while (--ke);
 8005840:	f1b8 0501 	subs.w	r5, r8, #1
 8005844:	d175      	bne.n	8005932 <encode_mcu+0x1b6>
    if (k < cinfo->lim_Se) {
 8005846:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800584a:	429d      	cmp	r5, r3
 800584c:	da0b      	bge.n	8005866 <encode_mcu+0xea>
      st = entropy->ac_stats[tbl] + 3 * k;
 800584e:	9b03      	ldr	r3, [sp, #12]
 8005850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
      arith_encode(cinfo, st, 1);
 8005854:	2201      	movs	r2, #1
 8005856:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 8005858:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 800585c:	f8d9 108c 	ldr.w	r1, [r9, #140]	@ 0x8c
      arith_encode(cinfo, st, 1);
 8005860:	4429      	add	r1, r5
 8005862:	f7ff fe9b 	bl	800559c <arith_encode>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8005866:	9b01      	ldr	r3, [sp, #4]
 8005868:	3301      	adds	r3, #1
 800586a:	e7a8      	b.n	80057be <encode_mcu+0x42>
      arith_encode(cinfo, st, 1);
 800586c:	4629      	mov	r1, r5
 800586e:	2201      	movs	r2, #1
 8005870:	4620      	mov	r0, r4
      entropy->last_dc_val[ci] = (*block)[0];
 8005872:	f8c7 a024 	str.w	sl, [r7, #36]	@ 0x24
 8005876:	9304      	str	r3, [sp, #16]
      arith_encode(cinfo, st, 1);
 8005878:	f7ff fe90 	bl	800559c <arith_encode>
      if (v > 0) {
 800587c:	f1b8 0f00 	cmp.w	r8, #0
	arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
 8005880:	f105 0101 	add.w	r1, r5, #1
      if (v > 0) {
 8005884:	9b04      	ldr	r3, [sp, #16]
 8005886:	dd35      	ble.n	80058f4 <encode_mcu+0x178>
	arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
 8005888:	2200      	movs	r2, #0
 800588a:	4620      	mov	r0, r4
 800588c:	f7ff fe86 	bl	800559c <arith_encode>
	st += 2;			/* Table F.4: SP = S0 + 2 */
 8005890:	3502      	adds	r5, #2
	entropy->dc_context[ci] = 4;	/* small positive diff category */
 8005892:	2304      	movs	r3, #4
      if (v -= 1) {
 8005894:	f1b8 0801 	subs.w	r8, r8, #1
	entropy->dc_context[ci] = 4;	/* small positive diff category */
 8005898:	637b      	str	r3, [r7, #52]	@ 0x34
      if (v -= 1) {
 800589a:	d03d      	beq.n	8005918 <encode_mcu+0x19c>
	arith_encode(cinfo, st, 1);
 800589c:	4629      	mov	r1, r5
 800589e:	2201      	movs	r2, #1
 80058a0:	4620      	mov	r0, r4
	m = 1;
 80058a2:	f04f 0a01 	mov.w	sl, #1
	arith_encode(cinfo, st, 1);
 80058a6:	f7ff fe79 	bl	800559c <arith_encode>
	st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
 80058aa:	f8db 504c 	ldr.w	r5, [fp, #76]	@ 0x4c
	v2 = v;
 80058ae:	46c3      	mov	fp, r8
	st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
 80058b0:	3514      	adds	r5, #20
	while (v2 >>= 1) {
 80058b2:	ea5f 0b6b 	movs.w	fp, fp, asr #1
 80058b6:	d126      	bne.n	8005906 <encode_mcu+0x18a>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 80058b8:	44a1      	add	r9, r4
      arith_encode(cinfo, st, 0);
 80058ba:	2200      	movs	r2, #0
 80058bc:	4629      	mov	r1, r5
 80058be:	4620      	mov	r0, r4
 80058c0:	f7ff fe6c 	bl	800559c <arith_encode>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 80058c4:	f899 3098 	ldrb.w	r3, [r9, #152]	@ 0x98
 80058c8:	2201      	movs	r2, #1
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	ebba 0f63 	cmp.w	sl, r3, asr #1
 80058d2:	da23      	bge.n	800591c <encode_mcu+0x1a0>
	entropy->dc_context[ci] = 0;	/* zero diff category */
 80058d4:	2300      	movs	r3, #0
	entropy->dc_context[ci] += 8;	/* large diff category */
 80058d6:	637b      	str	r3, [r7, #52]	@ 0x34
      st += 14;
 80058d8:	350e      	adds	r5, #14
      while (m >>= 1)
 80058da:	ea5f 0a6a 	movs.w	sl, sl, asr #1
 80058de:	d09e      	beq.n	800581e <encode_mcu+0xa2>
	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 80058e0:	ea18 0f0a 	tst.w	r8, sl
 80058e4:	4629      	mov	r1, r5
 80058e6:	4620      	mov	r0, r4
 80058e8:	bf14      	ite	ne
 80058ea:	2201      	movne	r2, #1
 80058ec:	2200      	moveq	r2, #0
 80058ee:	f7ff fe55 	bl	800559c <arith_encode>
 80058f2:	e7f2      	b.n	80058da <encode_mcu+0x15e>
	arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
 80058f4:	2201      	movs	r2, #1
 80058f6:	4620      	mov	r0, r4
	v = -v;
 80058f8:	eba3 080a 	sub.w	r8, r3, sl
	st += 3;			/* Table F.4: SN = S0 + 3 */
 80058fc:	3503      	adds	r5, #3
	arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
 80058fe:	f7ff fe4d 	bl	800559c <arith_encode>
	st += 3;			/* Table F.4: SN = S0 + 3 */
 8005902:	2308      	movs	r3, #8
 8005904:	e7c6      	b.n	8005894 <encode_mcu+0x118>
	  arith_encode(cinfo, st, 1);
 8005906:	4629      	mov	r1, r5
 8005908:	2201      	movs	r2, #1
 800590a:	4620      	mov	r0, r4
	  m <<= 1;
 800590c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
	  st += 1;
 8005910:	3501      	adds	r5, #1
	  arith_encode(cinfo, st, 1);
 8005912:	f7ff fe43 	bl	800559c <arith_encode>
	  st += 1;
 8005916:	e7cc      	b.n	80058b2 <encode_mcu+0x136>
      m = 0;
 8005918:	46c2      	mov	sl, r8
 800591a:	e7cd      	b.n	80058b8 <encode_mcu+0x13c>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800591c:	f899 30a8 	ldrb.w	r3, [r9, #168]	@ 0xa8
 8005920:	2201      	movs	r2, #1
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	ebba 0f63 	cmp.w	sl, r3, asr #1
 800592a:	ddd5      	ble.n	80058d8 <encode_mcu+0x15c>
	entropy->dc_context[ci] += 8;	/* large diff category */
 800592c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592e:	3308      	adds	r3, #8
 8005930:	e7d1      	b.n	80058d6 <encode_mcu+0x15a>
    } while (--ke);
 8005932:	46a8      	mov	r8, r5
 8005934:	e77b      	b.n	800582e <encode_mcu+0xb2>
      st = entropy->ac_stats[tbl] + 3 * k;
 8005936:	f8db 108c 	ldr.w	r1, [fp, #140]	@ 0x8c
 800593a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
      arith_encode(cinfo, st, 0);	/* EOB decision */
 800593e:	2200      	movs	r2, #0
 8005940:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 8005942:	eb01 0a03 	add.w	sl, r1, r3
      arith_encode(cinfo, st, 0);	/* EOB decision */
 8005946:	4651      	mov	r1, sl
 8005948:	f7ff fe28 	bl	800559c <arith_encode>
      while ((v = (*block)[natural_order[++k]]) == 0) {
 800594c:	3501      	adds	r5, #1
 800594e:	9b05      	ldr	r3, [sp, #20]
 8005950:	9a02      	ldr	r2, [sp, #8]
	arith_encode(cinfo, st + 1, 0);
 8005952:	f10a 0101 	add.w	r1, sl, #1
      while ((v = (*block)[natural_order[++k]]) == 0) {
 8005956:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800595a:	f932 7013 	ldrsh.w	r7, [r2, r3, lsl #1]
 800595e:	2f00      	cmp	r7, #0
 8005960:	d03d      	beq.n	80059de <encode_mcu+0x262>
      arith_encode(cinfo, st + 1, 1);
 8005962:	2201      	movs	r2, #1
 8005964:	4620      	mov	r0, r4
 8005966:	f7ff fe19 	bl	800559c <arith_encode>
      if (v > 0) {
 800596a:	2f00      	cmp	r7, #0
 800596c:	f106 01cc 	add.w	r1, r6, #204	@ 0xcc
	arith_encode(cinfo, entropy->fixed_bin, 1);
 8005970:	4620      	mov	r0, r4
	v = -v;
 8005972:	bfd6      	itet	le
 8005974:	427f      	negle	r7, r7
	arith_encode(cinfo, entropy->fixed_bin, 0);
 8005976:	2200      	movgt	r2, #0
	arith_encode(cinfo, entropy->fixed_bin, 1);
 8005978:	2201      	movle	r2, #1
      st += 2;
 800597a:	f10a 0a02 	add.w	sl, sl, #2
	arith_encode(cinfo, entropy->fixed_bin, 1);
 800597e:	f7ff fe0d 	bl	800559c <arith_encode>
      if (v -= 1) {
 8005982:	3f01      	subs	r7, #1
 8005984:	d03c      	beq.n	8005a00 <encode_mcu+0x284>
	arith_encode(cinfo, st, 1);
 8005986:	2201      	movs	r2, #1
 8005988:	4651      	mov	r1, sl
 800598a:	4620      	mov	r0, r4
 800598c:	f7ff fe06 	bl	800559c <arith_encode>
	if (v2 >>= 1) {
 8005990:	107b      	asrs	r3, r7, #1
 8005992:	9304      	str	r3, [sp, #16]
 8005994:	d036      	beq.n	8005a04 <encode_mcu+0x288>
	  arith_encode(cinfo, st, 1);
 8005996:	4651      	mov	r1, sl
 8005998:	2201      	movs	r2, #1
 800599a:	4620      	mov	r0, r4
	  m <<= 1;
 800599c:	f04f 0902 	mov.w	r9, #2
	  arith_encode(cinfo, st, 1);
 80059a0:	f7ff fdfc 	bl	800559c <arith_encode>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 80059a4:	9b03      	ldr	r3, [sp, #12]
	  st = entropy->ac_stats[tbl] +
 80059a6:	f8db 108c 	ldr.w	r1, [fp, #140]	@ 0x8c
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 80059aa:	18e3      	adds	r3, r4, r3
 80059ac:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 80059b0:	42ab      	cmp	r3, r5
 80059b2:	bfb4      	ite	lt
 80059b4:	23d9      	movlt	r3, #217	@ 0xd9
 80059b6:	23bd      	movge	r3, #189	@ 0xbd
	  st = entropy->ac_stats[tbl] +
 80059b8:	eb01 0a03 	add.w	sl, r1, r3
	  while (v2 >>= 1) {
 80059bc:	9b04      	ldr	r3, [sp, #16]
 80059be:	105b      	asrs	r3, r3, #1
 80059c0:	9304      	str	r3, [sp, #16]
 80059c2:	d113      	bne.n	80059ec <encode_mcu+0x270>
      arith_encode(cinfo, st, 0);
 80059c4:	4651      	mov	r1, sl
      st += 14;
 80059c6:	f10a 0a0e 	add.w	sl, sl, #14
      arith_encode(cinfo, st, 0);
 80059ca:	2200      	movs	r2, #0
 80059cc:	4620      	mov	r0, r4
 80059ce:	f7ff fde5 	bl	800559c <arith_encode>
      while (m >>= 1)
 80059d2:	ea5f 0969 	movs.w	r9, r9, asr #1
 80059d6:	d118      	bne.n	8005a0a <encode_mcu+0x28e>
    for (k = 0; k < ke;) {
 80059d8:	4545      	cmp	r5, r8
 80059da:	dbac      	blt.n	8005936 <encode_mcu+0x1ba>
 80059dc:	e733      	b.n	8005846 <encode_mcu+0xca>
	arith_encode(cinfo, st + 1, 0);
 80059de:	463a      	mov	r2, r7
 80059e0:	4620      	mov	r0, r4
	st += 3;
 80059e2:	f10a 0a03 	add.w	sl, sl, #3
	arith_encode(cinfo, st + 1, 0);
 80059e6:	f7ff fdd9 	bl	800559c <arith_encode>
	st += 3;
 80059ea:	e7af      	b.n	800594c <encode_mcu+0x1d0>
	    arith_encode(cinfo, st, 1);
 80059ec:	4651      	mov	r1, sl
 80059ee:	2201      	movs	r2, #1
 80059f0:	4620      	mov	r0, r4
	    m <<= 1;
 80059f2:	ea4f 0949 	mov.w	r9, r9, lsl #1
	    st += 1;
 80059f6:	f10a 0a01 	add.w	sl, sl, #1
	    arith_encode(cinfo, st, 1);
 80059fa:	f7ff fdcf 	bl	800559c <arith_encode>
	    st += 1;
 80059fe:	e7dd      	b.n	80059bc <encode_mcu+0x240>
      m = 0;
 8005a00:	46b9      	mov	r9, r7
 8005a02:	e7df      	b.n	80059c4 <encode_mcu+0x248>
	m = 1;
 8005a04:	f04f 0901 	mov.w	r9, #1
 8005a08:	e7dc      	b.n	80059c4 <encode_mcu+0x248>
	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 8005a0a:	ea17 0f09 	tst.w	r7, r9
 8005a0e:	4651      	mov	r1, sl
 8005a10:	4620      	mov	r0, r4
 8005a12:	bf14      	ite	ne
 8005a14:	2201      	movne	r2, #1
 8005a16:	2200      	moveq	r2, #0
 8005a18:	f7ff fdc0 	bl	800559c <arith_encode>
 8005a1c:	e7d9      	b.n	80059d2 <encode_mcu+0x256>
 8005a1e:	9b03      	ldr	r3, [sp, #12]
    for (k = 0; k < ke;) {
 8005a20:	2500      	movs	r5, #0
 8005a22:	eb06 0b83 	add.w	fp, r6, r3, lsl #2
 8005a26:	e7d7      	b.n	80059d8 <encode_mcu+0x25c>

08005a28 <encode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 8005a28:	f8d0 30ec 	ldr.w	r3, [r0, #236]	@ 0xec
{
 8005a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a30:	4604      	mov	r4, r0
 8005a32:	b085      	sub	sp, #20
 8005a34:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8005a36:	f8d0 61a4 	ldr.w	r6, [r0, #420]	@ 0x1a4
  if (cinfo->restart_interval) {
 8005a3a:	b17b      	cbz	r3, 8005a5c <encode_mcu_AC_refine+0x34>
    if (entropy->restarts_to_go == 0) {
 8005a3c:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8005a3e:	b953      	cbnz	r3, 8005a56 <encode_mcu_AC_refine+0x2e>
      emit_restart(cinfo, entropy->next_restart_num);
 8005a40:	6cb1      	ldr	r1, [r6, #72]	@ 0x48
 8005a42:	f7ff fe4d 	bl	80056e0 <emit_restart>
      entropy->restarts_to_go = cinfo->restart_interval;
 8005a46:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
 8005a4a:	6473      	str	r3, [r6, #68]	@ 0x44
      entropy->next_restart_num++;
 8005a4c:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8005a4e:	3301      	adds	r3, #1
      entropy->next_restart_num &= 7;
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	64b3      	str	r3, [r6, #72]	@ 0x48
    entropy->restarts_to_go--;
 8005a56:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	6473      	str	r3, [r6, #68]	@ 0x44
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8005a5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
  natural_order = cinfo->natural_order;
 8005a60:	f8d4 917c 	ldr.w	r9, [r4, #380]	@ 0x17c
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8005a64:	699b      	ldr	r3, [r3, #24]
  block = MCU_data[0];
 8005a66:	f8d5 a000 	ldr.w	sl, [r5]
  for (ke = cinfo->Se; ke > 0; ke--)
 8005a6a:	f8d4 716c 	ldr.w	r7, [r4, #364]	@ 0x16c
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8005a6e:	9301      	str	r3, [sp, #4]
  for (ke = cinfo->Se; ke > 0; ke--)
 8005a70:	2f00      	cmp	r7, #0
 8005a72:	dc1e      	bgt.n	8005ab2 <encode_mcu_AC_refine+0x8a>
 8005a74:	46b8      	mov	r8, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8005a76:	9b01      	ldr	r3, [sp, #4]
  for (k = cinfo->Ss; k <= ke; k++) {
 8005a78:	f8d4 5168 	ldr.w	r5, [r4, #360]	@ 0x168
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8005a7c:	3322      	adds	r3, #34	@ 0x22
 8005a7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a82:	9303      	str	r3, [sp, #12]
  for (k = cinfo->Ss; k <= ke; k++) {
 8005a84:	42bd      	cmp	r5, r7
 8005a86:	dd34      	ble.n	8005af2 <encode_mcu_AC_refine+0xca>
  if (k <= cinfo->Se) {
 8005a88:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 8005a8c:	42ab      	cmp	r3, r5
 8005a8e:	db0c      	blt.n	8005aaa <encode_mcu_AC_refine+0x82>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8005a90:	9b01      	ldr	r3, [sp, #4]
 8005a92:	3d01      	subs	r5, #1
    arith_encode(cinfo, st, 1);
 8005a94:	2201      	movs	r2, #1
 8005a96:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8005a98:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8005a9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005aa0:	f8d6 108c 	ldr.w	r1, [r6, #140]	@ 0x8c
    arith_encode(cinfo, st, 1);
 8005aa4:	4429      	add	r1, r5
 8005aa6:	f7ff fd79 	bl	800559c <arith_encode>
}
 8005aaa:	2001      	movs	r0, #1
 8005aac:	b005      	add	sp, #20
 8005aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((v = (*block)[natural_order[ke]]) >= 0) {
 8005ab2:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
      if (v >>= cinfo->Al) break;
 8005ab6:	f8d4 2174 	ldr.w	r2, [r4, #372]	@ 0x174
    if ((v = (*block)[natural_order[ke]]) >= 0) {
 8005aba:	f93a 3013 	ldrsh.w	r3, [sl, r3, lsl #1]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	db13      	blt.n	8005aea <encode_mcu_AC_refine+0xc2>
      if (v >>= cinfo->Al) break;
 8005ac2:	4113      	asrs	r3, r2
 8005ac4:	d013      	beq.n	8005aee <encode_mcu_AC_refine+0xc6>
 8005ac6:	46b8      	mov	r8, r7
  for (kex = ke; kex > 0; kex--)
 8005ac8:	f1b8 0f00 	cmp.w	r8, #0
 8005acc:	d0d3      	beq.n	8005a76 <encode_mcu_AC_refine+0x4e>
    if ((v = (*block)[natural_order[kex]]) >= 0) {
 8005ace:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
      if (v >>= cinfo->Ah) break;
 8005ad2:	f8d4 2170 	ldr.w	r2, [r4, #368]	@ 0x170
    if ((v = (*block)[natural_order[kex]]) >= 0) {
 8005ad6:	f93a 3013 	ldrsh.w	r3, [sl, r3, lsl #1]
 8005ada:	2b00      	cmp	r3, #0
      v = -v;
 8005adc:	bfb8      	it	lt
 8005ade:	425b      	neglt	r3, r3
      if (v >>= cinfo->Ah) break;
 8005ae0:	4113      	asrs	r3, r2
 8005ae2:	d1c8      	bne.n	8005a76 <encode_mcu_AC_refine+0x4e>
  for (kex = ke; kex > 0; kex--)
 8005ae4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ae8:	e7ee      	b.n	8005ac8 <encode_mcu_AC_refine+0xa0>
      v = -v;
 8005aea:	425b      	negs	r3, r3
      if (v >>= cinfo->Al) break;
 8005aec:	e7e9      	b.n	8005ac2 <encode_mcu_AC_refine+0x9a>
  for (ke = cinfo->Se; ke > 0; ke--)
 8005aee:	3f01      	subs	r7, #1
 8005af0:	e7be      	b.n	8005a70 <encode_mcu_AC_refine+0x48>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8005af2:	1e6b      	subs	r3, r5, #1
 8005af4:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 8005af6:	4545      	cmp	r5, r8
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8005af8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005afc:	6852      	ldr	r2, [r2, #4]
 8005afe:	eb02 0b03 	add.w	fp, r2, r3
    if (k > kex)
 8005b02:	dd04      	ble.n	8005b0e <encode_mcu_AC_refine+0xe6>
      arith_encode(cinfo, st, 0);	/* EOB decision */
 8005b04:	2200      	movs	r2, #0
 8005b06:	4659      	mov	r1, fp
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f7ff fd47 	bl	800559c <arith_encode>
      if ((v = (*block)[natural_order[k]]) >= 0) {
 8005b0e:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
 8005b12:	3501      	adds	r5, #1
	if (v >>= cinfo->Al) {
 8005b14:	f8d4 1174 	ldr.w	r1, [r4, #372]	@ 0x174
      if ((v = (*block)[natural_order[k]]) >= 0) {
 8005b18:	f93a 2012 	ldrsh.w	r2, [sl, r2, lsl #1]
 8005b1c:	2a00      	cmp	r2, #0
 8005b1e:	db16      	blt.n	8005b4e <encode_mcu_AC_refine+0x126>
	if (v >>= cinfo->Al) {
 8005b20:	410a      	asrs	r2, r1
 8005b22:	d021      	beq.n	8005b68 <encode_mcu_AC_refine+0x140>
	  if (v >> 1)			/* previously nonzero coef */
 8005b24:	1053      	asrs	r3, r2, #1
 8005b26:	9302      	str	r3, [sp, #8]
 8005b28:	d007      	beq.n	8005b3a <encode_mcu_AC_refine+0x112>
	    arith_encode(cinfo, st + 2, (v & 1));
 8005b2a:	f002 0201 	and.w	r2, r2, #1
 8005b2e:	f10b 0102 	add.w	r1, fp, #2
	    arith_encode(cinfo, entropy->fixed_bin, 1);
 8005b32:	4620      	mov	r0, r4
 8005b34:	f7ff fd32 	bl	800559c <arith_encode>
 8005b38:	e7a4      	b.n	8005a84 <encode_mcu_AC_refine+0x5c>
	    arith_encode(cinfo, st + 1, 1);
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	eb0b 0102 	add.w	r1, fp, r2
 8005b42:	f7ff fd2b 	bl	800559c <arith_encode>
	    arith_encode(cinfo, entropy->fixed_bin, 0);
 8005b46:	9a02      	ldr	r2, [sp, #8]
	    arith_encode(cinfo, entropy->fixed_bin, 1);
 8005b48:	f106 01cc 	add.w	r1, r6, #204	@ 0xcc
 8005b4c:	e7f1      	b.n	8005b32 <encode_mcu_AC_refine+0x10a>
	v = -v;
 8005b4e:	4252      	negs	r2, r2
	if (v >>= cinfo->Al) {
 8005b50:	410a      	asrs	r2, r1
 8005b52:	d009      	beq.n	8005b68 <encode_mcu_AC_refine+0x140>
	  if (v >> 1)			/* previously nonzero coef */
 8005b54:	0851      	lsrs	r1, r2, #1
 8005b56:	d1e8      	bne.n	8005b2a <encode_mcu_AC_refine+0x102>
	    arith_encode(cinfo, st + 1, 1);
 8005b58:	2201      	movs	r2, #1
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	eb0b 0102 	add.w	r1, fp, r2
 8005b60:	f7ff fd1c 	bl	800559c <arith_encode>
	    arith_encode(cinfo, entropy->fixed_bin, 1);
 8005b64:	2201      	movs	r2, #1
 8005b66:	e7ef      	b.n	8005b48 <encode_mcu_AC_refine+0x120>
      arith_encode(cinfo, st + 1, 0); st += 3; k++;
 8005b68:	f10b 0101 	add.w	r1, fp, #1
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f10b 0b03 	add.w	fp, fp, #3
 8005b74:	f7ff fd12 	bl	800559c <arith_encode>
      if ((v = (*block)[natural_order[k]]) >= 0) {
 8005b78:	e7c9      	b.n	8005b0e <encode_mcu_AC_refine+0xe6>

08005b7a <encode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 8005b7a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	@ 0xec
{
 8005b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b82:	4605      	mov	r5, r0
 8005b84:	460f      	mov	r7, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8005b86:	f8d0 41a4 	ldr.w	r4, [r0, #420]	@ 0x1a4
  if (cinfo->restart_interval) {
 8005b8a:	b17b      	cbz	r3, 8005bac <encode_mcu_DC_refine+0x32>
    if (entropy->restarts_to_go == 0) {
 8005b8c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005b8e:	b953      	cbnz	r3, 8005ba6 <encode_mcu_DC_refine+0x2c>
      emit_restart(cinfo, entropy->next_restart_num);
 8005b90:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005b92:	f7ff fda5 	bl	80056e0 <emit_restart>
      entropy->restarts_to_go = cinfo->restart_interval;
 8005b96:	f8d5 30ec 	ldr.w	r3, [r5, #236]	@ 0xec
 8005b9a:	6463      	str	r3, [r4, #68]	@ 0x44
      entropy->next_restart_num++;
 8005b9c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005b9e:	3301      	adds	r3, #1
      entropy->next_restart_num &= 7;
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	64a3      	str	r3, [r4, #72]	@ 0x48
    entropy->restarts_to_go--;
 8005ba6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	6463      	str	r3, [r4, #68]	@ 0x44
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 8005bac:	34cc      	adds	r4, #204	@ 0xcc
  Al = cinfo->Al;
 8005bae:	f8d5 8174 	ldr.w	r8, [r5, #372]	@ 0x174
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8005bb2:	2600      	movs	r6, #0
 8005bb4:	f8d5 313c 	ldr.w	r3, [r5, #316]	@ 0x13c
 8005bb8:	42b3      	cmp	r3, r6
 8005bba:	dc02      	bgt.n	8005bc2 <encode_mcu_DC_refine+0x48>
}
 8005bbc:	2001      	movs	r0, #1
 8005bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    arith_encode(cinfo, st, (MCU_data[blkn][0][0] >> Al) & 1);
 8005bc2:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4628      	mov	r0, r5
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8005bca:	3601      	adds	r6, #1
    arith_encode(cinfo, st, (MCU_data[blkn][0][0] >> Al) & 1);
 8005bcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005bd0:	fa42 f208 	asr.w	r2, r2, r8
 8005bd4:	f002 0201 	and.w	r2, r2, #1
 8005bd8:	f7ff fce0 	bl	800559c <arith_encode>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8005bdc:	e7ea      	b.n	8005bb4 <encode_mcu_DC_refine+0x3a>

08005bde <encode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 8005bde:	f8d0 30ec 	ldr.w	r3, [r0, #236]	@ 0xec
{
 8005be2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be6:	4604      	mov	r4, r0
 8005be8:	b085      	sub	sp, #20
 8005bea:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8005bec:	f8d0 71a4 	ldr.w	r7, [r0, #420]	@ 0x1a4
  if (cinfo->restart_interval) {
 8005bf0:	b17b      	cbz	r3, 8005c12 <encode_mcu_AC_first+0x34>
    if (entropy->restarts_to_go == 0) {
 8005bf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bf4:	b953      	cbnz	r3, 8005c0c <encode_mcu_AC_first+0x2e>
      emit_restart(cinfo, entropy->next_restart_num);
 8005bf6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005bf8:	f7ff fd72 	bl	80056e0 <emit_restart>
      entropy->restarts_to_go = cinfo->restart_interval;
 8005bfc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
 8005c00:	647b      	str	r3, [r7, #68]	@ 0x44
      entropy->next_restart_num++;
 8005c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c04:	3301      	adds	r3, #1
      entropy->next_restart_num &= 7;
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
    entropy->restarts_to_go--;
 8005c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	647b      	str	r3, [r7, #68]	@ 0x44
  block = MCU_data[0];
 8005c12:	682b      	ldr	r3, [r5, #0]
  natural_order = cinfo->natural_order;
 8005c14:	f8d4 a17c 	ldr.w	sl, [r4, #380]	@ 0x17c
  block = MCU_data[0];
 8005c18:	9303      	str	r3, [sp, #12]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8005c1a:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
  for (ke = cinfo->Se; ke > 0; ke--)
 8005c1e:	f8d4 916c 	ldr.w	r9, [r4, #364]	@ 0x16c
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	9300      	str	r3, [sp, #0]
  for (ke = cinfo->Se; ke > 0; ke--)
 8005c26:	f1b9 0f00 	cmp.w	r9, #0
 8005c2a:	dc1b      	bgt.n	8005c64 <encode_mcu_AC_first+0x86>
  for (k = cinfo->Ss; k <= ke; k++) {
 8005c2c:	9b00      	ldr	r3, [sp, #0]
 8005c2e:	f8d4 6168 	ldr.w	r6, [r4, #360]	@ 0x168
 8005c32:	eb07 0b83 	add.w	fp, r7, r3, lsl #2
 8005c36:	454e      	cmp	r6, r9
 8005c38:	dd23      	ble.n	8005c82 <encode_mcu_AC_first+0xa4>
  if (k <= cinfo->Se) {
 8005c3a:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 8005c3e:	42b3      	cmp	r3, r6
 8005c40:	db0c      	blt.n	8005c5c <encode_mcu_AC_first+0x7e>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8005c42:	9b00      	ldr	r3, [sp, #0]
 8005c44:	3e01      	subs	r6, #1
    arith_encode(cinfo, st, 1);
 8005c46:	2201      	movs	r2, #1
 8005c48:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8005c4a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8005c4e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8005c52:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
    arith_encode(cinfo, st, 1);
 8005c56:	4431      	add	r1, r6
 8005c58:	f7ff fca0 	bl	800559c <arith_encode>
}
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	b005      	add	sp, #20
 8005c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((v = (*block)[natural_order[ke]]) >= 0) {
 8005c64:	9a03      	ldr	r2, [sp, #12]
 8005c66:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
 8005c6a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      if (v >>= cinfo->Al) break;
 8005c6e:	f8d4 2174 	ldr.w	r2, [r4, #372]	@ 0x174
    if ((v = (*block)[natural_order[ke]]) >= 0) {
 8005c72:	2b00      	cmp	r3, #0
      v = -v;
 8005c74:	bfb8      	it	lt
 8005c76:	425b      	neglt	r3, r3
      if (v >>= cinfo->Al) break;
 8005c78:	4113      	asrs	r3, r2
 8005c7a:	d1d7      	bne.n	8005c2c <encode_mcu_AC_first+0x4e>
  for (ke = cinfo->Se; ke > 0; ke--)
 8005c7c:	f109 39ff 	add.w	r9, r9, #4294967295
 8005c80:	e7d1      	b.n	8005c26 <encode_mcu_AC_first+0x48>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8005c82:	1e73      	subs	r3, r6, #1
 8005c84:	f8db 508c 	ldr.w	r5, [fp, #140]	@ 0x8c
    arith_encode(cinfo, st, 0);		/* EOB decision */
 8005c88:	2200      	movs	r2, #0
 8005c8a:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8005c8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005c90:	441d      	add	r5, r3
    arith_encode(cinfo, st, 0);		/* EOB decision */
 8005c92:	4629      	mov	r1, r5
 8005c94:	f7ff fc82 	bl	800559c <arith_encode>
      if ((v = (*block)[natural_order[k]]) >= 0) {
 8005c98:	9a03      	ldr	r2, [sp, #12]
 8005c9a:	1c69      	adds	r1, r5, #1
 8005c9c:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8005ca0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
	if (v >>= cinfo->Al) {
 8005ca4:	f8d4 2174 	ldr.w	r2, [r4, #372]	@ 0x174
      if ((v = (*block)[natural_order[k]]) >= 0) {
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	db3c      	blt.n	8005d26 <encode_mcu_AC_first+0x148>
	if (v >>= cinfo->Al) {
 8005cac:	fa53 f802 	asrs.w	r8, r3, r2
 8005cb0:	d043      	beq.n	8005d3a <encode_mcu_AC_first+0x15c>
	  arith_encode(cinfo, st + 1, 1);
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f7ff fc71 	bl	800559c <arith_encode>
	  arith_encode(cinfo, entropy->fixed_bin, 0);
 8005cba:	2200      	movs	r2, #0
	  arith_encode(cinfo, entropy->fixed_bin, 1);
 8005cbc:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f7ff fc6b 	bl	800559c <arith_encode>
    if (v -= 1) {
 8005cc6:	f1b8 0301 	subs.w	r3, r8, #1
    st += 2;
 8005cca:	f105 0502 	add.w	r5, r5, #2
    if (v -= 1) {
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	d043      	beq.n	8005d5a <encode_mcu_AC_first+0x17c>
      arith_encode(cinfo, st, 1);
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f7ff fc60 	bl	800559c <arith_encode>
      if (v2 >>= 1) {
 8005cdc:	9b01      	ldr	r3, [sp, #4]
 8005cde:	105b      	asrs	r3, r3, #1
 8005ce0:	9302      	str	r3, [sp, #8]
 8005ce2:	d03d      	beq.n	8005d60 <encode_mcu_AC_first+0x182>
	arith_encode(cinfo, st, 1);
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	4620      	mov	r0, r4
	m <<= 1;
 8005cea:	f04f 0802 	mov.w	r8, #2
	arith_encode(cinfo, st, 1);
 8005cee:	f7ff fc55 	bl	800559c <arith_encode>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8005cf2:	9b00      	ldr	r3, [sp, #0]
	st = entropy->ac_stats[tbl] +
 8005cf4:	f8db 108c 	ldr.w	r1, [fp, #140]	@ 0x8c
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8005cf8:	18e3      	adds	r3, r4, r3
 8005cfa:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8005cfe:	42b3      	cmp	r3, r6
 8005d00:	bfb4      	ite	lt
 8005d02:	23d9      	movlt	r3, #217	@ 0xd9
 8005d04:	23bd      	movge	r3, #189	@ 0xbd
	st = entropy->ac_stats[tbl] +
 8005d06:	18cd      	adds	r5, r1, r3
	while (v2 >>= 1) {
 8005d08:	9b02      	ldr	r3, [sp, #8]
 8005d0a:	105b      	asrs	r3, r3, #1
 8005d0c:	9302      	str	r3, [sp, #8]
 8005d0e:	d11b      	bne.n	8005d48 <encode_mcu_AC_first+0x16a>
    arith_encode(cinfo, st, 0);
 8005d10:	4629      	mov	r1, r5
    st += 14;
 8005d12:	350e      	adds	r5, #14
    arith_encode(cinfo, st, 0);
 8005d14:	2200      	movs	r2, #0
 8005d16:	4620      	mov	r0, r4
 8005d18:	f7ff fc40 	bl	800559c <arith_encode>
    while (m >>= 1)
 8005d1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005d20:	d121      	bne.n	8005d66 <encode_mcu_AC_first+0x188>
  for (k = cinfo->Ss; k <= ke; k++) {
 8005d22:	3601      	adds	r6, #1
 8005d24:	e787      	b.n	8005c36 <encode_mcu_AC_first+0x58>
	v = -v;
 8005d26:	425b      	negs	r3, r3
	if (v >>= cinfo->Al) {
 8005d28:	fa53 f802 	asrs.w	r8, r3, r2
 8005d2c:	d005      	beq.n	8005d3a <encode_mcu_AC_first+0x15c>
	  arith_encode(cinfo, st + 1, 1);
 8005d2e:	2201      	movs	r2, #1
 8005d30:	4620      	mov	r0, r4
 8005d32:	f7ff fc33 	bl	800559c <arith_encode>
	  arith_encode(cinfo, entropy->fixed_bin, 1);
 8005d36:	2201      	movs	r2, #1
 8005d38:	e7c0      	b.n	8005cbc <encode_mcu_AC_first+0xde>
      arith_encode(cinfo, st + 1, 0); st += 3; k++;
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	3503      	adds	r5, #3
 8005d40:	3601      	adds	r6, #1
 8005d42:	f7ff fc2b 	bl	800559c <arith_encode>
      if ((v = (*block)[natural_order[k]]) >= 0) {
 8005d46:	e7a7      	b.n	8005c98 <encode_mcu_AC_first+0xba>
	  arith_encode(cinfo, st, 1);
 8005d48:	4629      	mov	r1, r5
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	4620      	mov	r0, r4
	  m <<= 1;
 8005d4e:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st += 1;
 8005d52:	3501      	adds	r5, #1
	  arith_encode(cinfo, st, 1);
 8005d54:	f7ff fc22 	bl	800559c <arith_encode>
	  st += 1;
 8005d58:	e7d6      	b.n	8005d08 <encode_mcu_AC_first+0x12a>
    m = 0;
 8005d5a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005d5e:	e7d7      	b.n	8005d10 <encode_mcu_AC_first+0x132>
      m = 1;
 8005d60:	f04f 0801 	mov.w	r8, #1
 8005d64:	e7d4      	b.n	8005d10 <encode_mcu_AC_first+0x132>
      arith_encode(cinfo, st, (m & v) ? 1 : 0);
 8005d66:	9b01      	ldr	r3, [sp, #4]
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	ea13 0f08 	tst.w	r3, r8
 8005d70:	bf14      	ite	ne
 8005d72:	2201      	movne	r2, #1
 8005d74:	2200      	moveq	r2, #0
 8005d76:	f7ff fc11 	bl	800559c <arith_encode>
 8005d7a:	e7cf      	b.n	8005d1c <encode_mcu_AC_first+0x13e>

08005d7c <encode_mcu_DC_first>:
{
 8005d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 8005d80:	f8d0 30ec 	ldr.w	r3, [r0, #236]	@ 0xec
{
 8005d84:	b085      	sub	sp, #20
 8005d86:	4605      	mov	r5, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8005d88:	f8d0 81a4 	ldr.w	r8, [r0, #420]	@ 0x1a4
{
 8005d8c:	9102      	str	r1, [sp, #8]
  if (cinfo->restart_interval) {
 8005d8e:	b1b3      	cbz	r3, 8005dbe <encode_mcu_DC_first+0x42>
    if (entropy->restarts_to_go == 0) {
 8005d90:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
 8005d94:	b973      	cbnz	r3, 8005db4 <encode_mcu_DC_first+0x38>
      emit_restart(cinfo, entropy->next_restart_num);
 8005d96:	f8d8 1048 	ldr.w	r1, [r8, #72]	@ 0x48
 8005d9a:	f7ff fca1 	bl	80056e0 <emit_restart>
      entropy->restarts_to_go = cinfo->restart_interval;
 8005d9e:	f8d5 30ec 	ldr.w	r3, [r5, #236]	@ 0xec
 8005da2:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
      entropy->next_restart_num++;
 8005da6:	f8d8 3048 	ldr.w	r3, [r8, #72]	@ 0x48
 8005daa:	3301      	adds	r3, #1
      entropy->next_restart_num &= 7;
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	f8c8 3048 	str.w	r3, [r8, #72]	@ 0x48
    entropy->restarts_to_go--;
 8005db4:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
 8005db8:	3b01      	subs	r3, #1
 8005dba:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
 8005dbe:	f505 739e 	add.w	r3, r5, #316	@ 0x13c
      m = 0;
 8005dc2:	f04f 0a00 	mov.w	sl, #0
 8005dc6:	9300      	str	r3, [sp, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8005dc8:	f8d5 313c 	ldr.w	r3, [r5, #316]	@ 0x13c
 8005dcc:	4553      	cmp	r3, sl
 8005dce:	dc03      	bgt.n	8005dd8 <encode_mcu_DC_first+0x5c>
}
 8005dd0:	2001      	movs	r0, #1
 8005dd2:	b005      	add	sp, #20
 8005dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ci = cinfo->MCU_membership[blkn];
 8005dd8:	9b00      	ldr	r3, [sp, #0]
 8005dda:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8005dde:	9300      	str	r3, [sp, #0]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 8005de0:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8005de4:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8005de8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	9301      	str	r3, [sp, #4]
    m = IRIGHT_SHIFT((int) ((*block)[0]), cinfo->Al);
 8005df0:	9b02      	ldr	r3, [sp, #8]
 8005df2:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 8005df6:	f9b3 9000 	ldrsh.w	r9, [r3]
 8005dfa:	f8d5 3174 	ldr.w	r3, [r5, #372]	@ 0x174
 8005dfe:	fa49 f903 	asr.w	r9, r9, r3
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8005e02:	9b01      	ldr	r3, [sp, #4]
 8005e04:	eb08 0b83 	add.w	fp, r8, r3, lsl #2
 8005e08:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8005e0a:	f8db 404c 	ldr.w	r4, [fp, #76]	@ 0x4c
 8005e0e:	441c      	add	r4, r3
    if ((v = m - entropy->last_dc_val[ci]) == 0) {
 8005e10:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8005e12:	ebb9 0703 	subs.w	r7, r9, r3
 8005e16:	d108      	bne.n	8005e2a <encode_mcu_DC_first+0xae>
      arith_encode(cinfo, st, 0);
 8005e18:	463a      	mov	r2, r7
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	f7ff fbbd 	bl	800559c <arith_encode>
      entropy->dc_context[ci] = 0;	/* zero diff category */
 8005e22:	6377      	str	r7, [r6, #52]	@ 0x34
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8005e24:	f10a 0a01 	add.w	sl, sl, #1
 8005e28:	e7ce      	b.n	8005dc8 <encode_mcu_DC_first+0x4c>
      arith_encode(cinfo, st, 1);
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	4628      	mov	r0, r5
      entropy->last_dc_val[ci] = m;
 8005e30:	f8c6 9024 	str.w	r9, [r6, #36]	@ 0x24
 8005e34:	9303      	str	r3, [sp, #12]
      arith_encode(cinfo, st, 1);
 8005e36:	f7ff fbb1 	bl	800559c <arith_encode>
      if (v > 0) {
 8005e3a:	2f00      	cmp	r7, #0
	arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
 8005e3c:	f104 0101 	add.w	r1, r4, #1
      if (v > 0) {
 8005e40:	9b03      	ldr	r3, [sp, #12]
 8005e42:	dd35      	ble.n	8005eb0 <encode_mcu_DC_first+0x134>
	arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
 8005e44:	2200      	movs	r2, #0
 8005e46:	4628      	mov	r0, r5
 8005e48:	f7ff fba8 	bl	800559c <arith_encode>
	st += 2;			/* Table F.4: SP = S0 + 2 */
 8005e4c:	3402      	adds	r4, #2
	entropy->dc_context[ci] = 4;	/* small positive diff category */
 8005e4e:	2304      	movs	r3, #4
      if (v -= 1) {
 8005e50:	3f01      	subs	r7, #1
	entropy->dc_context[ci] = 4;	/* small positive diff category */
 8005e52:	6373      	str	r3, [r6, #52]	@ 0x34
      if (v -= 1) {
 8005e54:	d03e      	beq.n	8005ed4 <encode_mcu_DC_first+0x158>
	arith_encode(cinfo, st, 1);
 8005e56:	4621      	mov	r1, r4
 8005e58:	2201      	movs	r2, #1
 8005e5a:	4628      	mov	r0, r5
	m = 1;
 8005e5c:	f04f 0901 	mov.w	r9, #1
	arith_encode(cinfo, st, 1);
 8005e60:	f7ff fb9c 	bl	800559c <arith_encode>
	st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
 8005e64:	f8db 404c 	ldr.w	r4, [fp, #76]	@ 0x4c
	v2 = v;
 8005e68:	46bb      	mov	fp, r7
	st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
 8005e6a:	3414      	adds	r4, #20
	while (v2 >>= 1) {
 8005e6c:	ea5f 0b6b 	movs.w	fp, fp, asr #1
 8005e70:	d127      	bne.n	8005ec2 <encode_mcu_DC_first+0x146>
      arith_encode(cinfo, st, 0);
 8005e72:	2200      	movs	r2, #0
 8005e74:	4621      	mov	r1, r4
 8005e76:	4628      	mov	r0, r5
 8005e78:	f7ff fb90 	bl	800559c <arith_encode>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8005e7c:	9b01      	ldr	r3, [sp, #4]
 8005e7e:	2101      	movs	r1, #1
 8005e80:	442b      	add	r3, r5
 8005e82:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8005e86:	fa01 f202 	lsl.w	r2, r1, r2
 8005e8a:	ebb9 0f62 	cmp.w	r9, r2, asr #1
 8005e8e:	da23      	bge.n	8005ed8 <encode_mcu_DC_first+0x15c>
	entropy->dc_context[ci] = 0;	/* zero diff category */
 8005e90:	2300      	movs	r3, #0
	entropy->dc_context[ci] += 8;	/* large diff category */
 8005e92:	6373      	str	r3, [r6, #52]	@ 0x34
      st += 14;
 8005e94:	340e      	adds	r4, #14
      while (m >>= 1)
 8005e96:	ea5f 0969 	movs.w	r9, r9, asr #1
 8005e9a:	d0c3      	beq.n	8005e24 <encode_mcu_DC_first+0xa8>
	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 8005e9c:	ea17 0f09 	tst.w	r7, r9
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	bf14      	ite	ne
 8005ea6:	2201      	movne	r2, #1
 8005ea8:	2200      	moveq	r2, #0
 8005eaa:	f7ff fb77 	bl	800559c <arith_encode>
 8005eae:	e7f2      	b.n	8005e96 <encode_mcu_DC_first+0x11a>
	arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	4628      	mov	r0, r5
	v = -v;
 8005eb4:	eba3 0709 	sub.w	r7, r3, r9
	st += 3;			/* Table F.4: SN = S0 + 3 */
 8005eb8:	3403      	adds	r4, #3
	arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
 8005eba:	f7ff fb6f 	bl	800559c <arith_encode>
	st += 3;			/* Table F.4: SN = S0 + 3 */
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	e7c6      	b.n	8005e50 <encode_mcu_DC_first+0xd4>
	  arith_encode(cinfo, st, 1);
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	4628      	mov	r0, r5
	  m <<= 1;
 8005ec8:	ea4f 0949 	mov.w	r9, r9, lsl #1
	  st += 1;
 8005ecc:	3401      	adds	r4, #1
	  arith_encode(cinfo, st, 1);
 8005ece:	f7ff fb65 	bl	800559c <arith_encode>
	  st += 1;
 8005ed2:	e7cb      	b.n	8005e6c <encode_mcu_DC_first+0xf0>
      m = 0;
 8005ed4:	46b9      	mov	r9, r7
 8005ed6:	e7cc      	b.n	8005e72 <encode_mcu_DC_first+0xf6>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8005ed8:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8005edc:	2201      	movs	r2, #1
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	ebb9 0f63 	cmp.w	r9, r3, asr #1
 8005ee6:	ddd5      	ble.n	8005e94 <encode_mcu_DC_first+0x118>
	entropy->dc_context[ci] += 8;	/* large diff category */
 8005ee8:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8005eea:	3308      	adds	r3, #8
 8005eec:	e7d1      	b.n	8005e92 <encode_mcu_DC_first+0x116>
	...

08005ef0 <jinit_arith_encoder>:
 * Module initialization routine for arithmetic entropy encoding.
 */

GLOBAL(void)
jinit_arith_encoder (j_compress_ptr cinfo)
{
 8005ef0:	b538      	push	{r3, r4, r5, lr}
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8005ef2:	6843      	ldr	r3, [r0, #4]
 8005ef4:	22d0      	movs	r2, #208	@ 0xd0
 8005ef6:	2101      	movs	r1, #1
{
 8005ef8:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4798      	blx	r3
				SIZEOF(arith_entropy_encoder));
  cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
  entropy->pub.start_pass = start_pass;
 8005efe:	4b08      	ldr	r3, [pc, #32]	@ (8005f20 <jinit_arith_encoder+0x30>)
  cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
 8005f00:	f8c5 01a4 	str.w	r0, [r5, #420]	@ 0x1a4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8005f04:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass;
 8005f06:	6003      	str	r3, [r0, #0]
  entropy->pub.finish_pass = finish_pass;

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 8005f08:	2280      	movs	r2, #128	@ 0x80
  entropy->pub.finish_pass = finish_pass;
 8005f0a:	4b06      	ldr	r3, [pc, #24]	@ (8005f24 <jinit_arith_encoder+0x34>)
    entropy->dc_stats[i] = NULL;
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	304c      	adds	r0, #76	@ 0x4c
  entropy->pub.finish_pass = finish_pass;
 8005f10:	f840 3c44 	str.w	r3, [r0, #-68]
    entropy->dc_stats[i] = NULL;
 8005f14:	f009 fdcc 	bl	800fab0 <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 8005f18:	2371      	movs	r3, #113	@ 0x71
 8005f1a:	f884 30cc 	strb.w	r3, [r4, #204]	@ 0xcc
}
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	08005311 	.word	0x08005311
 8005f24:	08005465 	.word	0x08005465

08005f28 <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 8005f28:	f8d0 2120 	ldr.w	r2, [r0, #288]	@ 0x120
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8005f2c:	f8d0 3190 	ldr.w	r3, [r0, #400]	@ 0x190
  if (cinfo->comps_in_scan > 1) {
 8005f30:	2a01      	cmp	r2, #1
 8005f32:	dc0e      	bgt.n	8005f52 <start_iMCU_row+0x2a>
    coef->MCU_rows_per_iMCU_row = 1;
  } else {
    if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
 8005f34:	f8d0 211c 	ldr.w	r2, [r0, #284]	@ 0x11c
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 8005f38:	f8d0 1124 	ldr.w	r1, [r0, #292]	@ 0x124
    if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
 8005f3c:	3a01      	subs	r2, #1
 8005f3e:	6898      	ldr	r0, [r3, #8]
 8005f40:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 8005f42:	bf34      	ite	cc
 8005f44:	68ca      	ldrcc	r2, [r1, #12]
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 8005f46:	6cca      	ldrcs	r2, [r1, #76]	@ 0x4c
    coef->MCU_rows_per_iMCU_row = 1;
 8005f48:	615a      	str	r2, [r3, #20]
  }

  coef->mcu_ctr = 0;
 8005f4a:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 8005f4c:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
 8005f50:	4770      	bx	lr
 8005f52:	2201      	movs	r2, #1
 8005f54:	e7f8      	b.n	8005f48 <start_iMCU_row+0x20>
	...

08005f58 <start_pass_coef>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_coef (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
 8005f58:	b570      	push	{r4, r5, r6, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;

  coef->iMCU_row_num = 0;
 8005f5a:	2300      	movs	r3, #0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8005f5c:	f8d0 5190 	ldr.w	r5, [r0, #400]	@ 0x190
{
 8005f60:	460e      	mov	r6, r1
 8005f62:	4604      	mov	r4, r0
  coef->iMCU_row_num = 0;
 8005f64:	60ab      	str	r3, [r5, #8]
  start_iMCU_row(cinfo);
 8005f66:	f7ff ffdf 	bl	8005f28 <start_iMCU_row>

  switch (pass_mode) {
 8005f6a:	2e02      	cmp	r6, #2
 8005f6c:	d016      	beq.n	8005f9c <start_pass_coef+0x44>
 8005f6e:	2e03      	cmp	r6, #3
 8005f70:	d00b      	beq.n	8005f8a <start_pass_coef+0x32>
 8005f72:	b9ee      	cbnz	r6, 8005fb0 <start_pass_coef+0x58>
  case JBUF_PASS_THRU:
    if (coef->whole_image[0] != NULL)
 8005f74:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8005f76:	b12b      	cbz	r3, 8005f84 <start_pass_coef+0x2c>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	2203      	movs	r2, #3
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	615a      	str	r2, [r3, #20]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4798      	blx	r3
    coef->pub.compress_data = compress_data;
 8005f84:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc0 <start_pass_coef+0x68>)
    coef->pub.compress_data = compress_first_pass;
    break;
  case JBUF_CRANK_DEST:
    if (coef->whole_image[0] == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    coef->pub.compress_data = compress_output;
 8005f86:	606b      	str	r3, [r5, #4]
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
}
 8005f88:	bd70      	pop	{r4, r5, r6, pc}
    if (coef->whole_image[0] == NULL)
 8005f8a:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8005f8c:	b923      	cbnz	r3, 8005f98 <start_pass_coef+0x40>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	4620      	mov	r0, r4
 8005f92:	615e      	str	r6, [r3, #20]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4798      	blx	r3
    coef->pub.compress_data = compress_first_pass;
 8005f98:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc4 <start_pass_coef+0x6c>)
 8005f9a:	e7f4      	b.n	8005f86 <start_pass_coef+0x2e>
    if (coef->whole_image[0] == NULL)
 8005f9c:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8005f9e:	b92b      	cbnz	r3, 8005fac <start_pass_coef+0x54>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	615a      	str	r2, [r3, #20]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4798      	blx	r3
    coef->pub.compress_data = compress_output;
 8005fac:	4b06      	ldr	r3, [pc, #24]	@ (8005fc8 <start_pass_coef+0x70>)
 8005fae:	e7ea      	b.n	8005f86 <start_pass_coef+0x2e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	2203      	movs	r2, #3
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	615a      	str	r2, [r3, #20]
 8005fb8:	681b      	ldr	r3, [r3, #0]
}
 8005fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8005fbe:	4718      	bx	r3
 8005fc0:	08006265 	.word	0x08006265
 8005fc4:	080060df 	.word	0x080060df
 8005fc8:	08005fcd 	.word	0x08005fcd

08005fcc <compress_output>:
 * NB: input_buf is ignored; it is likely to be a NULL pointer.
 */

METHODDEF(boolean)
compress_output (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
 8005fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd0:	f500 7b90 	add.w	fp, r0, #288	@ 0x120
 8005fd4:	b08f      	sub	sp, #60	@ 0x3c

  /* Align the virtual buffers for the components used in this scan.
   * NB: during first pass, this is safe only because the buffers will
   * already be aligned properly, so jmemmgr.c won't need to do any I/O.
   */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8005fd6:	2600      	movs	r6, #0
{
 8005fd8:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8005fda:	f8d0 5190 	ldr.w	r5, [r0, #400]	@ 0x190
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8005fde:	465f      	mov	r7, fp
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 8005fe0:	46b0      	mov	r8, r6
 8005fe2:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8005fe6:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8005fea:	42b3      	cmp	r3, r6
 8005fec:	dc0d      	bgt.n	800600a <compress_output+0x3e>
       coef->iMCU_row_num * compptr->v_samp_factor,
       (JDIMENSION) compptr->v_samp_factor, FALSE);
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8005fee:	692e      	ldr	r6, [r5, #16]
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 8005ff0:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8005ff4:	696b      	ldr	r3, [r5, #20]
 8005ff6:	42b3      	cmp	r3, r6
 8005ff8:	dc1b      	bgt.n	8006032 <compress_output+0x66>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->mcu_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  coef->iMCU_row_num++;
 8005ffa:	68ab      	ldr	r3, [r5, #8]
  start_iMCU_row(cinfo);
 8005ffc:	4620      	mov	r0, r4
  coef->iMCU_row_num++;
 8005ffe:	3301      	adds	r3, #1
 8006000:	60ab      	str	r3, [r5, #8]
  start_iMCU_row(cinfo);
 8006002:	f7ff ff91 	bl	8005f28 <start_iMCU_row>
  return TRUE;
 8006006:	2001      	movs	r0, #1
 8006008:	e043      	b.n	8006092 <compress_output+0xc6>
    compptr = cinfo->cur_comp_info[ci];
 800600a:	f857 1f04 	ldr.w	r1, [r7, #4]!
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800600e:	6860      	ldr	r0, [r4, #4]
       coef->iMCU_row_num * compptr->v_samp_factor,
 8006010:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 8006012:	6849      	ldr	r1, [r1, #4]
 8006014:	68aa      	ldr	r2, [r5, #8]
 8006016:	3110      	adds	r1, #16
 8006018:	f8cd 8000 	str.w	r8, [sp]
 800601c:	435a      	muls	r2, r3
 800601e:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8006022:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8006026:	4620      	mov	r0, r4
 8006028:	47d0      	blx	sl
 800602a:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800602e:	3601      	adds	r6, #1
 8006030:	e7d9      	b.n	8005fe6 <compress_output+0x1a>
    for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
 8006032:	00b3      	lsls	r3, r6, #2
 8006034:	68ef      	ldr	r7, [r5, #12]
 8006036:	9308      	str	r3, [sp, #32]
 8006038:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
 800603c:	42bb      	cmp	r3, r7
 800603e:	f04f 0300 	mov.w	r3, #0
 8006042:	d949      	bls.n	80060d8 <compress_output+0x10c>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8006044:	f8d4 2120 	ldr.w	r2, [r4, #288]	@ 0x120
 8006048:	46da      	mov	sl, fp
      blkn = 0;			/* index of current DCT block within MCU */
 800604a:	9303      	str	r3, [sp, #12]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800604c:	9206      	str	r2, [sp, #24]
 800604e:	e013      	b.n	8006078 <compress_output+0xac>
	compptr = cinfo->cur_comp_info[ci];
 8006050:	f85a 2f04 	ldr.w	r2, [sl, #4]!
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8006054:	f04f 0c00 	mov.w	ip, #0
 8006058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800605c:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	@ 0x38
 8006060:	9205      	str	r2, [sp, #20]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 8006062:	fb07 f20e 	mul.w	r2, r7, lr
 8006066:	01d2      	lsls	r2, r2, #7
 8006068:	9204      	str	r2, [sp, #16]
 800606a:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800606e:	9209      	str	r2, [sp, #36]	@ 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8006070:	9a05      	ldr	r2, [sp, #20]
 8006072:	4562      	cmp	r2, ip
 8006074:	dc10      	bgt.n	8006098 <compress_output+0xcc>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8006076:	3301      	adds	r3, #1
 8006078:	9a06      	ldr	r2, [sp, #24]
 800607a:	429a      	cmp	r2, r3
 800607c:	dce8      	bgt.n	8006050 <compress_output+0x84>
      if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
 800607e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	@ 0x1a4
 8006082:	f105 0118 	add.w	r1, r5, #24
 8006086:	4620      	mov	r0, r4
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	4798      	blx	r3
 800608c:	bb10      	cbnz	r0, 80060d4 <compress_output+0x108>
	coef->mcu_ctr = MCU_col_num;
 800608e:	e9c5 7603 	strd	r7, r6, [r5, #12]
}
 8006092:	b00f      	add	sp, #60	@ 0x3c
 8006094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 8006098:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 800609c:	9904      	ldr	r1, [sp, #16]
 800609e:	f852 2008 	ldr.w	r2, [r2, r8]
 80060a2:	440a      	add	r2, r1
 80060a4:	9207      	str	r2, [sp, #28]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 80060a6:	9a03      	ldr	r2, [sp, #12]
 80060a8:	1d51      	adds	r1, r2, #5
 80060aa:	2200      	movs	r2, #0
 80060ac:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80060b0:	9807      	ldr	r0, [sp, #28]
 80060b2:	4596      	cmp	lr, r2
 80060b4:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
 80060b8:	dc08      	bgt.n	80060cc <compress_output+0x100>
 80060ba:	9903      	ldr	r1, [sp, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 80060bc:	f10c 0c01 	add.w	ip, ip, #1
 80060c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060c2:	f108 0804 	add.w	r8, r8, #4
 80060c6:	4411      	add	r1, r2
 80060c8:	9103      	str	r1, [sp, #12]
 80060ca:	e7d1      	b.n	8006070 <compress_output+0xa4>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 80060cc:	3201      	adds	r2, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 80060ce:	f841 0f04 	str.w	r0, [r1, #4]!
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 80060d2:	e7ed      	b.n	80060b0 <compress_output+0xe4>
	 MCU_col_num++) {
 80060d4:	3701      	adds	r7, #1
 80060d6:	e7af      	b.n	8006038 <compress_output+0x6c>
       yoffset++) {
 80060d8:	3601      	adds	r6, #1
    coef->mcu_ctr = 0;
 80060da:	60eb      	str	r3, [r5, #12]
       yoffset++) {
 80060dc:	e78a      	b.n	8005ff4 <compress_output+0x28>

080060de <compress_first_pass>:
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 80060de:	f8d0 311c 	ldr.w	r3, [r0, #284]	@ 0x11c
{
 80060e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 80060e6:	3b01      	subs	r3, #1
{
 80060e8:	b08f      	sub	sp, #60	@ 0x3c
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 80060ea:	f8d0 b190 	ldr.w	fp, [r0, #400]	@ 0x190
{
 80060ee:	4605      	mov	r5, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 80060f0:	9308      	str	r3, [sp, #32]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80060f2:	f04f 0800 	mov.w	r8, #0
 80060f6:	f10b 033c 	add.w	r3, fp, #60	@ 0x3c
 80060fa:	6d47      	ldr	r7, [r0, #84]	@ 0x54
{
 80060fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80060fe:	930a      	str	r3, [sp, #40]	@ 0x28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8006100:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8006102:	4543      	cmp	r3, r8
 8006104:	dc06      	bgt.n	8006114 <compress_first_pass+0x36>
  return compress_output(cinfo, input_buf);
 8006106:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006108:	4628      	mov	r0, r5
}
 800610a:	b00f      	add	sp, #60	@ 0x3c
 800610c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return compress_output(cinfo, input_buf);
 8006110:	f7ff bf5c 	b.w	8005fcc <compress_output>
    buffer = (*cinfo->mem->access_virt_barray)
 8006114:	2001      	movs	r0, #1
       coef->iMCU_row_num * compptr->v_samp_factor,
 8006116:	68fb      	ldr	r3, [r7, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 8006118:	6869      	ldr	r1, [r5, #4]
 800611a:	f8db 2008 	ldr.w	r2, [fp, #8]
 800611e:	9000      	str	r0, [sp, #0]
 8006120:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006122:	435a      	muls	r2, r3
 8006124:	6a0c      	ldr	r4, [r1, #32]
 8006126:	f850 1f04 	ldr.w	r1, [r0, #4]!
 800612a:	900a      	str	r0, [sp, #40]	@ 0x28
 800612c:	4628      	mov	r0, r5
 800612e:	47a0      	blx	r4
    if (coef->iMCU_row_num < last_iMCU_row)
 8006130:	f8db 3008 	ldr.w	r3, [fp, #8]
 8006134:	9a08      	ldr	r2, [sp, #32]
 8006136:	68fe      	ldr	r6, [r7, #12]
 8006138:	4293      	cmp	r3, r2
    buffer = (*cinfo->mem->access_virt_barray)
 800613a:	9009      	str	r0, [sp, #36]	@ 0x24
    if (coef->iMCU_row_num < last_iMCU_row)
 800613c:	d224      	bcs.n	8006188 <compress_first_pass+0xaa>
      block_rows = compptr->v_samp_factor;
 800613e:	9605      	str	r6, [sp, #20]
    h_samp_factor = compptr->h_samp_factor;
 8006140:	68bb      	ldr	r3, [r7, #8]
    for (block_row = 0; block_row < block_rows; block_row++) {
 8006142:	f04f 0a00 	mov.w	sl, #0
    blocks_across = compptr->width_in_blocks;
 8006146:	f8d7 901c 	ldr.w	r9, [r7, #28]
    h_samp_factor = compptr->h_samp_factor;
 800614a:	9306      	str	r3, [sp, #24]
    ndummy = (int) (blocks_across % h_samp_factor);
 800614c:	fbb9 f4f3 	udiv	r4, r9, r3
 8006150:	fb03 9414 	mls	r4, r3, r4, r9
    if (ndummy > 0)
 8006154:	2c00      	cmp	r4, #0
      ndummy = h_samp_factor - ndummy;
 8006156:	bfc8      	it	gt
 8006158:	1b1c      	subgt	r4, r3, r4
    forward_DCT = cinfo->fdct->forward_DCT[ci];
 800615a:	f8d5 31a0 	ldr.w	r3, [r5, #416]	@ 0x1a0
 800615e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	461e      	mov	r6, r3
	thisblockrow += blocks_across; /* => first dummy block */
 8006166:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 800616a:	9307      	str	r3, [sp, #28]
	FMEMZERO((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
 800616c:	01e3      	lsls	r3, r4, #7
 800616e:	930c      	str	r3, [sp, #48]	@ 0x30
    for (block_row = 0; block_row < block_rows; block_row++) {
 8006170:	9b05      	ldr	r3, [sp, #20]
 8006172:	459a      	cmp	sl, r3
 8006174:	db12      	blt.n	800619c <compress_first_pass+0xbe>
    if (coef->iMCU_row_num == last_iMCU_row) {
 8006176:	f8db 3008 	ldr.w	r3, [fp, #8]
 800617a:	9a08      	ldr	r2, [sp, #32]
 800617c:	4293      	cmp	r3, r2
 800617e:	d036      	beq.n	80061ee <compress_first_pass+0x110>
       ci++, compptr++) {
 8006180:	f108 0801 	add.w	r8, r8, #1
 8006184:	3758      	adds	r7, #88	@ 0x58
 8006186:	e7bb      	b.n	8006100 <compress_first_pass+0x22>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	fbb3 f2f6 	udiv	r2, r3, r6
 800618e:	fb06 3312 	mls	r3, r6, r2, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	bf08      	it	eq
 8006196:	4633      	moveq	r3, r6
 8006198:	9305      	str	r3, [sp, #20]
 800619a:	e7d1      	b.n	8006140 <compress_first_pass+0x62>
      thisblockrow = buffer[block_row];
 800619c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
      (*forward_DCT) (cinfo, compptr, input_buf[ci], thisblockrow,
 800619e:	2200      	movs	r2, #0
 80061a0:	4639      	mov	r1, r7
 80061a2:	4628      	mov	r0, r5
      thisblockrow = buffer[block_row];
 80061a4:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
      (*forward_DCT) (cinfo, compptr, input_buf[ci], thisblockrow,
 80061a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80061ac:	9201      	str	r2, [sp, #4]
		      (JDIMENSION) (block_row * compptr->DCT_v_scaled_size),
 80061ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
      (*forward_DCT) (cinfo, compptr, input_buf[ci], thisblockrow,
 80061b0:	930d      	str	r3, [sp, #52]	@ 0x34
		      (JDIMENSION) (block_row * compptr->DCT_v_scaled_size),
 80061b2:	fb02 f20a 	mul.w	r2, r2, sl
      (*forward_DCT) (cinfo, compptr, input_buf[ci], thisblockrow,
 80061b6:	9200      	str	r2, [sp, #0]
 80061b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80061ba:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 80061be:	47b0      	blx	r6
      if (ndummy > 0) {
 80061c0:	2c00      	cmp	r4, #0
 80061c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061c4:	dc02      	bgt.n	80061cc <compress_first_pass+0xee>
    for (block_row = 0; block_row < block_rows; block_row++) {
 80061c6:	f10a 0a01 	add.w	sl, sl, #1
 80061ca:	e7d1      	b.n	8006170 <compress_first_pass+0x92>
	thisblockrow += blocks_across; /* => first dummy block */
 80061cc:	9a07      	ldr	r2, [sp, #28]
	FMEMZERO((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
 80061ce:	2100      	movs	r1, #0
	thisblockrow += blocks_across; /* => first dummy block */
 80061d0:	4413      	add	r3, r2
	FMEMZERO((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
 80061d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80061d4:	4618      	mov	r0, r3
 80061d6:	f009 fc6b 	bl	800fab0 <memset>
	for (bi = 0; bi < ndummy; bi++) {
 80061da:	2200      	movs	r2, #0
	FMEMZERO((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
 80061dc:	4603      	mov	r3, r0
	lastDC = thisblockrow[-1][0];
 80061de:	f930 0c80 	ldrsh.w	r0, [r0, #-128]
	  thisblockrow[bi][0] = lastDC;
 80061e2:	01d1      	lsls	r1, r2, #7
	for (bi = 0; bi < ndummy; bi++) {
 80061e4:	3201      	adds	r2, #1
 80061e6:	4294      	cmp	r4, r2
	  thisblockrow[bi][0] = lastDC;
 80061e8:	5258      	strh	r0, [r3, r1]
	for (bi = 0; bi < ndummy; bi++) {
 80061ea:	d1fa      	bne.n	80061e2 <compress_first_pass+0x104>
 80061ec:	e7eb      	b.n	80061c6 <compress_first_pass+0xe8>
      blocks_across += ndummy;	/* include lower right corner */
 80061ee:	444c      	add	r4, r9
      MCUs_across = blocks_across / h_samp_factor;
 80061f0:	9b06      	ldr	r3, [sp, #24]
 80061f2:	9a05      	ldr	r2, [sp, #20]
 80061f4:	fbb4 f3f3 	udiv	r3, r4, r3
 80061f8:	930d      	str	r3, [sp, #52]	@ 0x34
	FMEMZERO((void FAR *) thisblockrow,
 80061fa:	01e3      	lsls	r3, r4, #7
 80061fc:	930c      	str	r3, [sp, #48]	@ 0x30
	  lastDC = lastblockrow[h_samp_factor-1][0];
 80061fe:	9b06      	ldr	r3, [sp, #24]
 8006200:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8006204:	3b01      	subs	r3, #1
 8006206:	01db      	lsls	r3, r3, #7
	  thisblockrow += h_samp_factor; /* advance to next MCU in row */
 8006208:	f103 0a80 	add.w	sl, r3, #128	@ 0x80
	  lastDC = lastblockrow[h_samp_factor-1][0];
 800620c:	9307      	str	r3, [sp, #28]
 800620e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006210:	eb03 0482 	add.w	r4, r3, r2, lsl #2
      for (block_row = block_rows; block_row < compptr->v_samp_factor;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	9a05      	ldr	r2, [sp, #20]
 8006218:	4293      	cmp	r3, r2
 800621a:	ddb1      	ble.n	8006180 <compress_first_pass+0xa2>
	thisblockrow = buffer[block_row];
 800621c:	f854 3b04 	ldr.w	r3, [r4], #4
	FMEMZERO((void FAR *) thisblockrow,
 8006220:	2100      	movs	r1, #0
 8006222:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006224:	4618      	mov	r0, r3
	lastblockrow = buffer[block_row-1];
 8006226:	f854 9c08 	ldr.w	r9, [r4, #-8]
	FMEMZERO((void FAR *) thisblockrow,
 800622a:	f009 fc41 	bl	800fab0 <memset>
 800622e:	9a07      	ldr	r2, [sp, #28]
 8006230:	4603      	mov	r3, r0
	for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++) {
 8006232:	2100      	movs	r1, #0
 8006234:	4491      	add	r9, r2
 8006236:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006238:	4291      	cmp	r1, r2
 800623a:	d103      	bne.n	8006244 <compress_first_pass+0x166>
	   block_row++) {
 800623c:	9b05      	ldr	r3, [sp, #20]
 800623e:	3301      	adds	r3, #1
 8006240:	9305      	str	r3, [sp, #20]
 8006242:	e7e7      	b.n	8006214 <compress_first_pass+0x136>
	  lastDC = lastblockrow[h_samp_factor-1][0];
 8006244:	f9b9 0000 	ldrsh.w	r0, [r9]
	  for (bi = 0; bi < h_samp_factor; bi++) {
 8006248:	2200      	movs	r2, #0
 800624a:	9e06      	ldr	r6, [sp, #24]
 800624c:	42b2      	cmp	r2, r6
 800624e:	db03      	blt.n	8006258 <compress_first_pass+0x17a>
	  thisblockrow += h_samp_factor; /* advance to next MCU in row */
 8006250:	4453      	add	r3, sl
	for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++) {
 8006252:	3101      	adds	r1, #1
 8006254:	44d1      	add	r9, sl
 8006256:	e7ee      	b.n	8006236 <compress_first_pass+0x158>
	    thisblockrow[bi][0] = lastDC;
 8006258:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
	  for (bi = 0; bi < h_samp_factor; bi++) {
 800625c:	3201      	adds	r2, #1
	    thisblockrow[bi][0] = lastDC;
 800625e:	f823 000c 	strh.w	r0, [r3, ip]
	  for (bi = 0; bi < h_samp_factor; bi++) {
 8006262:	e7f2      	b.n	800624a <compress_first_pass+0x16c>

08006264 <compress_data>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 8006264:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
{
 8006268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800626c:	3b01      	subs	r3, #1
{
 800626e:	b091      	sub	sp, #68	@ 0x44
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8006270:	f8d0 5190 	ldr.w	r5, [r0, #400]	@ 0x190
{
 8006274:	4606      	mov	r6, r0
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 8006276:	9308      	str	r3, [sp, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8006278:	f8d0 311c 	ldr.w	r3, [r0, #284]	@ 0x11c
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800627c:	f8d5 8010 	ldr.w	r8, [r5, #16]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8006280:	3b01      	subs	r3, #1
{
 8006282:	910c      	str	r1, [sp, #48]	@ 0x30
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8006284:	930a      	str	r3, [sp, #40]	@ 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8006286:	696b      	ldr	r3, [r5, #20]
 8006288:	4543      	cmp	r3, r8
 800628a:	dc07      	bgt.n	800629c <compress_data+0x38>
  coef->iMCU_row_num++;
 800628c:	68ab      	ldr	r3, [r5, #8]
  start_iMCU_row(cinfo);
 800628e:	4630      	mov	r0, r6
  coef->iMCU_row_num++;
 8006290:	3301      	adds	r3, #1
 8006292:	60ab      	str	r3, [r5, #8]
  start_iMCU_row(cinfo);
 8006294:	f7ff fe48 	bl	8005f28 <start_iMCU_row>
  return TRUE;
 8006298:	2001      	movs	r0, #1
 800629a:	e042      	b.n	8006322 <compress_data+0xbe>
      if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
 800629c:	f105 0318 	add.w	r3, r5, #24
    for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col;
 80062a0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
      if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
 80062a4:	930e      	str	r3, [sp, #56]	@ 0x38
    for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col;
 80062a6:	9b08      	ldr	r3, [sp, #32]
 80062a8:	459a      	cmp	sl, r3
 80062aa:	f200 809b 	bhi.w	80063e4 <compress_data+0x180>
 80062ae:	f506 7390 	add.w	r3, r6, #288	@ 0x120
 80062b2:	9309      	str	r3, [sp, #36]	@ 0x24
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80062b4:	2300      	movs	r3, #0
      blkn = 0;
 80062b6:	4699      	mov	r9, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80062b8:	9306      	str	r3, [sp, #24]
 80062ba:	e023      	b.n	8006304 <compress_data+0xa0>
	compptr = cinfo->cur_comp_info[ci];
 80062bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 80062be:	f04f 0b00 	mov.w	fp, #0
	compptr = cinfo->cur_comp_info[ci];
 80062c2:	f853 4f04 	ldr.w	r4, [r3, #4]!
	forward_DCT = cinfo->fdct->forward_DCT[compptr->component_index];
 80062c6:	6862      	ldr	r2, [r4, #4]
	compptr = cinfo->cur_comp_info[ci];
 80062c8:	9309      	str	r3, [sp, #36]	@ 0x24
	forward_DCT = cinfo->fdct->forward_DCT[compptr->component_index];
 80062ca:	f8d6 31a0 	ldr.w	r3, [r6, #416]	@ 0x1a0
 80062ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	461f      	mov	r7, r3
						: compptr->last_col_width;
 80062d6:	9b08      	ldr	r3, [sp, #32]
 80062d8:	459a      	cmp	sl, r3
 80062da:	bf34      	ite	cc
 80062dc:	6ba3      	ldrcc	r3, [r4, #56]	@ 0x38
 80062de:	6ca3      	ldrcs	r3, [r4, #72]	@ 0x48
 80062e0:	9305      	str	r3, [sp, #20]
	xpos = MCU_col_num * compptr->MCU_sample_width;
 80062e2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80062e4:	fb03 f30a 	mul.w	r3, r3, sl
 80062e8:	930b      	str	r3, [sp, #44]	@ 0x2c
	ypos = yoffset * compptr->DCT_v_scaled_size;
 80062ea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80062ec:	fb03 f308 	mul.w	r3, r3, r8
 80062f0:	9307      	str	r3, [sp, #28]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 80062f2:	9b05      	ldr	r3, [sp, #20]
 80062f4:	3305      	adds	r3, #5
 80062f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80062f8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80062fa:	455b      	cmp	r3, fp
 80062fc:	dc14      	bgt.n	8006328 <compress_data+0xc4>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80062fe:	9b06      	ldr	r3, [sp, #24]
 8006300:	3301      	adds	r3, #1
 8006302:	9306      	str	r3, [sp, #24]
 8006304:	f8d6 3120 	ldr.w	r3, [r6, #288]	@ 0x120
 8006308:	9a06      	ldr	r2, [sp, #24]
 800630a:	4293      	cmp	r3, r2
 800630c:	dcd6      	bgt.n	80062bc <compress_data+0x58>
      if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
 800630e:	f8d6 31a4 	ldr.w	r3, [r6, #420]	@ 0x1a4
 8006312:	4630      	mov	r0, r6
 8006314:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	4798      	blx	r3
 800631a:	2800      	cmp	r0, #0
 800631c:	d15f      	bne.n	80063de <compress_data+0x17a>
	coef->mcu_ctr = MCU_col_num;
 800631e:	e9c5 a803 	strd	sl, r8, [r5, #12]
}
 8006322:	b011      	add	sp, #68	@ 0x44
 8006324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  if (coef->iMCU_row_num < last_iMCU_row ||
 8006328:	68aa      	ldr	r2, [r5, #8]
 800632a:	eb05 0389 	add.w	r3, r5, r9, lsl #2
 800632e:	990a      	ldr	r1, [sp, #40]	@ 0x28
	    FMEMZERO((void FAR *) coef->MCU_buffer[blkn],
 8006330:	6998      	ldr	r0, [r3, #24]
	  if (coef->iMCU_row_num < last_iMCU_row ||
 8006332:	428a      	cmp	r2, r1
 8006334:	d304      	bcc.n	8006340 <compress_data+0xdc>
 8006336:	eb0b 0208 	add.w	r2, fp, r8
 800633a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800633c:	4291      	cmp	r1, r2
 800633e:	dd35      	ble.n	80063ac <compress_data+0x148>
	    (*forward_DCT) (cinfo, compptr,
 8006340:	9b05      	ldr	r3, [sp, #20]
			    input_buf[compptr->component_index],
 8006342:	6862      	ldr	r2, [r4, #4]
	    (*forward_DCT) (cinfo, compptr,
 8006344:	9302      	str	r3, [sp, #8]
 8006346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006348:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800634a:	9301      	str	r3, [sp, #4]
 800634c:	9b07      	ldr	r3, [sp, #28]
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	4603      	mov	r3, r0
 8006352:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006356:	4630      	mov	r0, r6
 8006358:	4621      	mov	r1, r4
 800635a:	47b8      	blx	r7
	    if (blockcnt < compptr->MCU_width) {
 800635c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800635e:	9b05      	ldr	r3, [sp, #20]
 8006360:	429a      	cmp	r2, r3
 8006362:	dc08      	bgt.n	8006376 <compress_data+0x112>
	  blkn += compptr->MCU_width;
 8006364:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8006366:	f10b 0b01 	add.w	fp, fp, #1
	  ypos += compptr->DCT_v_scaled_size;
 800636a:	9a07      	ldr	r2, [sp, #28]
	  blkn += compptr->MCU_width;
 800636c:	4499      	add	r9, r3
	  ypos += compptr->DCT_v_scaled_size;
 800636e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006370:	441a      	add	r2, r3
 8006372:	9207      	str	r2, [sp, #28]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8006374:	e7c0      	b.n	80062f8 <compress_data+0x94>
	      FMEMZERO((void FAR *) coef->MCU_buffer[blkn + blockcnt],
 8006376:	9b05      	ldr	r3, [sp, #20]
 8006378:	2100      	movs	r1, #0
 800637a:	1ad2      	subs	r2, r2, r3
 800637c:	444b      	add	r3, r9
 800637e:	3306      	adds	r3, #6
 8006380:	01d2      	lsls	r2, r2, #7
 8006382:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8006386:	f009 fb93 	bl	800fab0 <memset>
	      for (bi = blockcnt; bi < compptr->MCU_width; bi++) {
 800638a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800638c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800638e:	444b      	add	r3, r9
 8006390:	9a05      	ldr	r2, [sp, #20]
 8006392:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006396:	4291      	cmp	r1, r2
 8006398:	dde4      	ble.n	8006364 <compress_data+0x100>
		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
 800639a:	6818      	ldr	r0, [r3, #0]
	      for (bi = blockcnt; bi < compptr->MCU_width; bi++) {
 800639c:	3201      	adds	r2, #1
		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
 800639e:	f9b0 c000 	ldrsh.w	ip, [r0]
 80063a2:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80063a6:	f8a0 c000 	strh.w	ip, [r0]
	      for (bi = blockcnt; bi < compptr->MCU_width; bi++) {
 80063aa:	e7f4      	b.n	8006396 <compress_data+0x132>
	    FMEMZERO((void FAR *) coef->MCU_buffer[blkn],
 80063ac:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80063ae:	2100      	movs	r1, #0
 80063b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80063b2:	01d2      	lsls	r2, r2, #7
 80063b4:	f009 fb7c 	bl	800fab0 <memset>
	    for (bi = 0; bi < compptr->MCU_width; bi++) {
 80063b8:	f109 0205 	add.w	r2, r9, #5
 80063bc:	f8d4 c038 	ldr.w	ip, [r4, #56]	@ 0x38
 80063c0:	2100      	movs	r1, #0
 80063c2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80063c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063c8:	458c      	cmp	ip, r1
 80063ca:	ddcb      	ble.n	8006364 <compress_data+0x100>
	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
 80063cc:	6958      	ldr	r0, [r3, #20]
	    for (bi = 0; bi < compptr->MCU_width; bi++) {
 80063ce:	3101      	adds	r1, #1
	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
 80063d0:	f9b0 e000 	ldrsh.w	lr, [r0]
 80063d4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80063d8:	f8a0 e000 	strh.w	lr, [r0]
	    for (bi = 0; bi < compptr->MCU_width; bi++) {
 80063dc:	e7f4      	b.n	80063c8 <compress_data+0x164>
	 MCU_col_num++) {
 80063de:	f10a 0a01 	add.w	sl, sl, #1
 80063e2:	e760      	b.n	80062a6 <compress_data+0x42>
    coef->mcu_ctr = 0;
 80063e4:	2300      	movs	r3, #0
       yoffset++) {
 80063e6:	f108 0801 	add.w	r8, r8, #1
    coef->mcu_ctr = 0;
 80063ea:	60eb      	str	r3, [r5, #12]
       yoffset++) {
 80063ec:	e74b      	b.n	8006286 <compress_data+0x22>
	...

080063f0 <jinit_c_coef_controller>:
jinit_c_coef_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80063f0:	6843      	ldr	r3, [r0, #4]
{
 80063f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80063f6:	681b      	ldr	r3, [r3, #0]
{
 80063f8:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80063fa:	2268      	movs	r2, #104	@ 0x68
 80063fc:	2101      	movs	r1, #1
{
 80063fe:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006400:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_c_coef_controller *) coef;
  coef->pub.start_pass = start_pass_coef;
 8006402:	4b1f      	ldr	r3, [pc, #124]	@ (8006480 <jinit_c_coef_controller+0x90>)
 8006404:	4605      	mov	r5, r0
  cinfo->coef = (struct jpeg_c_coef_controller *) coef;
 8006406:	f8c4 0190 	str.w	r0, [r4, #400]	@ 0x190
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800640a:	4606      	mov	r6, r0
  coef->pub.start_pass = start_pass_coef;
 800640c:	f845 3b3c 	str.w	r3, [r5], #60

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 8006410:	b327      	cbz	r7, 800645c <jinit_c_coef_controller+0x6c>
    /* Allocate a full-image virtual array for each component, */
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    int ci;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8006412:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8006414:	2700      	movs	r7, #0
 8006416:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006418:	42bb      	cmp	r3, r7
 800641a:	dc02      	bgt.n	8006422 <jinit_c_coef_controller+0x32>
    for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
      coef->MCU_buffer[i] = buffer + i;
    }
    coef->whole_image[0] = NULL; /* flag for no virtual arrays */
  }
}
 800641c:	b003      	add	sp, #12
 800641e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 8006422:	6863      	ldr	r3, [r4, #4]
	 ci++, compptr++) {
 8006424:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 8006426:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 8006428:	3658      	adds	r6, #88	@ 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800642a:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800642e:	f8d3 9014 	ldr.w	r9, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 8006432:	f009 fa42 	bl	800f8ba <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 8006436:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800643a:	4680      	mov	r8, r0
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800643c:	f856 0c38 	ldr.w	r0, [r6, #-56]
 8006440:	f009 fa3b 	bl	800f8ba <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 8006444:	f856 3c4c 	ldr.w	r3, [r6, #-76]
 8006448:	2200      	movs	r2, #0
 800644a:	2101      	movs	r1, #1
 800644c:	e9cd 0300 	strd	r0, r3, [sp]
 8006450:	4643      	mov	r3, r8
 8006452:	4620      	mov	r0, r4
 8006454:	47c8      	blx	r9
 8006456:	f845 0f04 	str.w	r0, [r5, #4]!
	 ci++, compptr++) {
 800645a:	e7dc      	b.n	8006416 <jinit_c_coef_controller+0x26>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800645c:	6863      	ldr	r3, [r4, #4]
 800645e:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8006462:	2101      	movs	r1, #1
 8006464:	4620      	mov	r0, r4
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	4798      	blx	r3
    for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
 800646a:	f106 0314 	add.w	r3, r6, #20
      coef->MCU_buffer[i] = buffer + i;
 800646e:	f843 0f04 	str.w	r0, [r3, #4]!
    for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
 8006472:	42ab      	cmp	r3, r5
 8006474:	f100 0080 	add.w	r0, r0, #128	@ 0x80
 8006478:	d1f9      	bne.n	800646e <jinit_c_coef_controller+0x7e>
    coef->whole_image[0] = NULL; /* flag for no virtual arrays */
 800647a:	2300      	movs	r3, #0
 800647c:	6433      	str	r3, [r6, #64]	@ 0x40
}
 800647e:	e7cd      	b.n	800641c <jinit_c_coef_controller+0x2c>
 8006480:	08005f59 	.word	0x08005f59

08006484 <rgb_ycc_start>:
 * Initialize for RGB->YCC colorspace conversion.
 */

METHODDEF(void)
rgb_ycc_start (j_compress_ptr cinfo)
{
 8006484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 * rgb_ycc_tab;
  INT32 i;

  /* Allocate and fill in the conversion tables. */
  cconvert->rgb_ycc_tab = rgb_ycc_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006488:	6843      	ldr	r3, [r0, #4]
 800648a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800648e:	f8d0 4198 	ldr.w	r4, [r0, #408]	@ 0x198
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006492:	2101      	movs	r1, #1
 8006494:	681b      	ldr	r3, [r3, #0]
				(TABLE_SIZE * SIZEOF(INT32)));

  for (i = 0; i <= MAXJSAMPLE; i++) {
    rgb_ycc_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 8006496:	f644 498b 	movw	r9, #19595	@ 0x4c8b
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800649a:	4798      	blx	r3
    rgb_ycc_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800649c:	f249 6846 	movw	r8, #38470	@ 0x9646
  cconvert->rgb_ycc_tab = rgb_ycc_tab = (INT32 *)
 80064a0:	60a0      	str	r0, [r4, #8]
  for (i = 0; i <= MAXJSAMPLE; i++) {
 80064a2:	1f02      	subs	r2, r0, #4
 80064a4:	2300      	movs	r3, #0
 80064a6:	f600 70fc 	addw	r0, r0, #4092	@ 0xffc
    rgb_ycc_tab[i+B_Y_OFF] = FIX(0.11400) * i     + ONE_HALF;
 80064aa:	f641 5e2f 	movw	lr, #7471	@ 0x1d2f
    rgb_ycc_tab[i+R_CB_OFF] = (-FIX(0.16874)) * i;
 80064ae:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 800651c <rgb_ycc_start+0x98>
    rgb_ycc_tab[i+G_CB_OFF] = (-FIX(0.33126)) * i;
 80064b2:	4f16      	ldr	r7, [pc, #88]	@ (800650c <rgb_ycc_start+0x88>)
    /* We use a rounding fudge-factor of 0.5-epsilon for Cb and Cr.
     * This ensures that the maximum output will round to MAXJSAMPLE
     * not MAXJSAMPLE+1, and thus that we don't have to range-limit.
     */
    rgb_ycc_tab[i+B_CB_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
 80064b4:	4e16      	ldr	r6, [pc, #88]	@ (8006510 <rgb_ycc_start+0x8c>)
/*  B=>Cb and R=>Cr tables are the same
    rgb_ycc_tab[i+R_CR_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
*/
    rgb_ycc_tab[i+G_CR_OFF] = (-FIX(0.41869)) * i;
 80064b6:	4d17      	ldr	r5, [pc, #92]	@ (8006514 <rgb_ycc_start+0x90>)
    rgb_ycc_tab[i+B_CR_OFF] = (-FIX(0.08131)) * i;
 80064b8:	4c17      	ldr	r4, [pc, #92]	@ (8006518 <rgb_ycc_start+0x94>)
    rgb_ycc_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 80064ba:	fb09 f103 	mul.w	r1, r9, r3
 80064be:	f842 1f04 	str.w	r1, [r2, #4]!
    rgb_ycc_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 80064c2:	fb08 f103 	mul.w	r1, r8, r3
 80064c6:	f8c2 1400 	str.w	r1, [r2, #1024]	@ 0x400
    rgb_ycc_tab[i+B_Y_OFF] = FIX(0.11400) * i     + ONE_HALF;
 80064ca:	fb0e f103 	mul.w	r1, lr, r3
 80064ce:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 80064d2:	f8c2 1800 	str.w	r1, [r2, #2048]	@ 0x800
    rgb_ycc_tab[i+R_CB_OFF] = (-FIX(0.16874)) * i;
 80064d6:	fb0c f103 	mul.w	r1, ip, r3
 80064da:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
    rgb_ycc_tab[i+G_CB_OFF] = (-FIX(0.33126)) * i;
 80064de:	fb07 f103 	mul.w	r1, r7, r3
 80064e2:	f840 1f04 	str.w	r1, [r0, #4]!
    rgb_ycc_tab[i+B_CB_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
 80064e6:	eb06 31c3 	add.w	r1, r6, r3, lsl #15
 80064ea:	f8c0 1400 	str.w	r1, [r0, #1024]	@ 0x400
    rgb_ycc_tab[i+G_CR_OFF] = (-FIX(0.41869)) * i;
 80064ee:	fb05 f103 	mul.w	r1, r5, r3
 80064f2:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
    rgb_ycc_tab[i+B_CR_OFF] = (-FIX(0.08131)) * i;
 80064f6:	fb04 f103 	mul.w	r1, r4, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 80064fa:	3301      	adds	r3, #1
 80064fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
    rgb_ycc_tab[i+B_CR_OFF] = (-FIX(0.08131)) * i;
 8006500:	f8c0 1c00 	str.w	r1, [r0, #3072]	@ 0xc00
  for (i = 0; i <= MAXJSAMPLE; i++) {
 8006504:	d1d9      	bne.n	80064ba <rgb_ycc_start+0x36>
  }
}
 8006506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800650a:	bf00      	nop
 800650c:	ffffab33 	.word	0xffffab33
 8006510:	00807fff 	.word	0x00807fff
 8006514:	ffff94d1 	.word	0xffff94d1
 8006518:	ffffeb2f 	.word	0xffffeb2f
 800651c:	ffffd4cd 	.word	0xffffd4cd

08006520 <rgb_ycc_convert>:

METHODDEF(void)
rgb_ycc_convert (j_compress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		 JDIMENSION output_row, int num_rows)
{
 8006520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
 8006524:	f8d0 4198 	ldr.w	r4, [r0, #408]	@ 0x198
 8006528:	ebc1 0b83 	rsb	fp, r1, r3, lsl #2
  register JSAMPROW inptr;
  register JSAMPROW outptr0, outptr1, outptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
 800652c:	69c0      	ldr	r0, [r0, #28]
  register INT32 * ctab = cconvert->rgb_ycc_tab;
 800652e:	68a4      	ldr	r4, [r4, #8]
  JDIMENSION num_cols = cinfo->image_width;
 8006530:	9001      	str	r0, [sp, #4]

  while (--num_rows >= 0) {
 8006532:	1f08      	subs	r0, r1, #4
 8006534:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006536:	3b01      	subs	r3, #1
 8006538:	930c      	str	r3, [sp, #48]	@ 0x30
 800653a:	d502      	bpl.n	8006542 <rgb_ycc_convert+0x22>
      outptr2[col] = (JSAMPLE)
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
		 >> SCALEBITS);
    }
  }
}
 800653c:	b003      	add	sp, #12
 800653e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = *input_buf++;
 8006542:	3004      	adds	r0, #4
    outptr0 = output_buf[0][output_row];
 8006544:	6813      	ldr	r3, [r2, #0]
 8006546:	6801      	ldr	r1, [r0, #0]
 8006548:	eb00 070b 	add.w	r7, r0, fp
    for (col = 0; col < num_cols; col++) {
 800654c:	59dd      	ldr	r5, [r3, r7]
    outptr1 = output_buf[1][output_row];
 800654e:	6853      	ldr	r3, [r2, #4]
 8006550:	59de      	ldr	r6, [r3, r7]
    outptr2 = output_buf[2][output_row];
 8006552:	6893      	ldr	r3, [r2, #8]
 8006554:	3e01      	subs	r6, #1
 8006556:	59db      	ldr	r3, [r3, r7]
 8006558:	f103 3cff 	add.w	ip, r3, #4294967295
 800655c:	9b01      	ldr	r3, [sp, #4]
 800655e:	eb03 0e05 	add.w	lr, r3, r5
    for (col = 0; col < num_cols; col++) {
 8006562:	4575      	cmp	r5, lr
 8006564:	f101 0103 	add.w	r1, r1, #3
 8006568:	d0e4      	beq.n	8006534 <rgb_ycc_convert+0x14>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800656a:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 800656e:	f811 ac03 	ldrb.w	sl, [r1, #-3]
 8006572:	f811 8c01 	ldrb.w	r8, [r1, #-1]
 8006576:	f509 7980 	add.w	r9, r9, #256	@ 0x100
 800657a:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 800657e:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 8006582:	f854 7029 	ldr.w	r7, [r4, r9, lsl #2]
 8006586:	f508 7800 	add.w	r8, r8, #512	@ 0x200
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 800658a:	eb04 0989 	add.w	r9, r4, r9, lsl #2
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800658e:	443b      	add	r3, r7
 8006590:	f854 7028 	ldr.w	r7, [r4, r8, lsl #2]
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 8006594:	eb04 0888 	add.w	r8, r4, r8, lsl #2
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 8006598:	443b      	add	r3, r7
		 >> SCALEBITS);
 800659a:	141b      	asrs	r3, r3, #16
      outptr0[col] = (JSAMPLE)
 800659c:	f805 3b01 	strb.w	r3, [r5], #1
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 80065a0:	f8da 7c00 	ldr.w	r7, [sl, #3072]	@ 0xc00
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
 80065a4:	f50a 5aa0 	add.w	sl, sl, #5120	@ 0x1400
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 80065a8:	f8d9 3c00 	ldr.w	r3, [r9, #3072]	@ 0xc00
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
 80065ac:	f509 59a0 	add.w	r9, r9, #5120	@ 0x1400
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 80065b0:	443b      	add	r3, r7
 80065b2:	f8d8 7c00 	ldr.w	r7, [r8, #3072]	@ 0xc00
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
 80065b6:	f508 58a0 	add.w	r8, r8, #5120	@ 0x1400
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 80065ba:	443b      	add	r3, r7
		 >> SCALEBITS);
 80065bc:	141b      	asrs	r3, r3, #16
      outptr1[col] = (JSAMPLE)
 80065be:	f806 3f01 	strb.w	r3, [r6, #1]!
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
 80065c2:	f8d9 7000 	ldr.w	r7, [r9]
 80065c6:	f8da 3000 	ldr.w	r3, [sl]
 80065ca:	443b      	add	r3, r7
 80065cc:	f8d8 7000 	ldr.w	r7, [r8]
 80065d0:	443b      	add	r3, r7
		 >> SCALEBITS);
 80065d2:	141b      	asrs	r3, r3, #16
      outptr2[col] = (JSAMPLE)
 80065d4:	f80c 3f01 	strb.w	r3, [ip, #1]!
    for (col = 0; col < num_cols; col++) {
 80065d8:	e7c3      	b.n	8006562 <rgb_ycc_convert+0x42>

080065da <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_compress_ptr cinfo,
		  JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		  JDIMENSION output_row, int num_rows)
{
 80065da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
 80065de:	f8d0 4198 	ldr.w	r4, [r0, #408]	@ 0x198
 80065e2:	1f0f      	subs	r7, r1, #4
{
 80065e4:	9d06      	ldr	r5, [sp, #24]
 80065e6:	ebc1 0183 	rsb	r1, r1, r3, lsl #2
  register INT32 * ctab = cconvert->rgb_ycc_tab;
 80065ea:	68a6      	ldr	r6, [r4, #8]
  register JSAMPROW inptr;
  register JSAMPROW outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
 80065ec:	f8d0 e01c 	ldr.w	lr, [r0, #28]

  while (--num_rows >= 0) {
 80065f0:	3d01      	subs	r5, #1
 80065f2:	d501      	bpl.n	80065f8 <rgb_gray_convert+0x1e>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 80065f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (col = 0; col < num_cols; col++) {
 80065f8:	f857 3f04 	ldr.w	r3, [r7, #4]!
    outptr = output_buf[0][output_row];
 80065fc:	6810      	ldr	r0, [r2, #0]
 80065fe:	4438      	add	r0, r7
 8006600:	5844      	ldr	r4, [r0, r1]
 8006602:	eb0e 0804 	add.w	r8, lr, r4
    for (col = 0; col < num_cols; col++) {
 8006606:	4544      	cmp	r4, r8
 8006608:	f103 0303 	add.w	r3, r3, #3
 800660c:	d0f0      	beq.n	80065f0 <rgb_gray_convert+0x16>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800660e:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8006612:	f813 cc03 	ldrb.w	ip, [r3, #-3]
 8006616:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 800661a:	f856 c02c 	ldr.w	ip, [r6, ip, lsl #2]
 800661e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8006622:	4460      	add	r0, ip
 8006624:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 8006628:	f50c 7c00 	add.w	ip, ip, #512	@ 0x200
 800662c:	f856 c02c 	ldr.w	ip, [r6, ip, lsl #2]
 8006630:	4460      	add	r0, ip
		 >> SCALEBITS);
 8006632:	1400      	asrs	r0, r0, #16
      outptr[col] = (JSAMPLE)
 8006634:	f804 0b01 	strb.w	r0, [r4], #1
    for (col = 0; col < num_cols; col++) {
 8006638:	e7e5      	b.n	8006606 <rgb_gray_convert+0x2c>

0800663a <cmyk_ycck_convert>:

METHODDEF(void)
cmyk_ycck_convert (j_compress_ptr cinfo,
		   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		   JDIMENSION output_row, int num_rows)
{
 800663a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
 800663e:	f8d0 4198 	ldr.w	r4, [r0, #408]	@ 0x198
{
 8006642:	b087      	sub	sp, #28
  register JSAMPROW inptr;
  register JSAMPROW outptr0, outptr1, outptr2, outptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
 8006644:	69c0      	ldr	r0, [r0, #28]
 8006646:	f1a1 0c04 	sub.w	ip, r1, #4
  register INT32 * ctab = cconvert->rgb_ycc_tab;
 800664a:	68a4      	ldr	r4, [r4, #8]
  JDIMENSION num_cols = cinfo->image_width;
 800664c:	ebc1 0883 	rsb	r8, r1, r3, lsl #2
      outptr0[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
      /* Cb */
      outptr1[col] = (JSAMPLE)
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 8006650:	f240 5eff 	movw	lr, #1535	@ 0x5ff
  JDIMENSION num_cols = cinfo->image_width;
 8006654:	9001      	str	r0, [sp, #4]
  while (--num_rows >= 0) {
 8006656:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006658:	3b01      	subs	r3, #1
 800665a:	9310      	str	r3, [sp, #64]	@ 0x40
 800665c:	d502      	bpl.n	8006664 <cmyk_ycck_convert+0x2a>
      outptr2[col] = (JSAMPLE)
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
		 >> SCALEBITS);
    }
  }
}
 800665e:	b007      	add	sp, #28
 8006660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = *input_buf++;
 8006664:	f10c 0c04 	add.w	ip, ip, #4
    outptr0 = output_buf[0][output_row];
 8006668:	6813      	ldr	r3, [r2, #0]
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
 800666a:	f240 69ff 	movw	r9, #1791	@ 0x6ff
 800666e:	f240 7aff 	movw	sl, #2047	@ 0x7ff
    outptr0 = output_buf[0][output_row];
 8006672:	eb0c 0108 	add.w	r1, ip, r8
 8006676:	f8dc 0000 	ldr.w	r0, [ip]
 800667a:	585b      	ldr	r3, [r3, r1]
 800667c:	9302      	str	r3, [sp, #8]
    outptr1 = output_buf[1][output_row];
 800667e:	6853      	ldr	r3, [r2, #4]
 8006680:	585b      	ldr	r3, [r3, r1]
 8006682:	9303      	str	r3, [sp, #12]
    outptr2 = output_buf[2][output_row];
 8006684:	6893      	ldr	r3, [r2, #8]
 8006686:	585b      	ldr	r3, [r3, r1]
 8006688:	9304      	str	r3, [sp, #16]
    outptr3 = output_buf[3][output_row];
 800668a:	68d3      	ldr	r3, [r2, #12]
 800668c:	585b      	ldr	r3, [r3, r1]
 800668e:	9305      	str	r3, [sp, #20]
    for (col = 0; col < num_cols; col++) {
 8006690:	2300      	movs	r3, #0
 8006692:	9901      	ldr	r1, [sp, #4]
 8006694:	3004      	adds	r0, #4
 8006696:	428b      	cmp	r3, r1
 8006698:	d0dd      	beq.n	8006656 <cmyk_ycck_convert+0x1c>
      b = MAXJSAMPLE - GETJSAMPLE(inptr[2]);
 800669a:	f810 1c02 	ldrb.w	r1, [r0, #-2]
      g = MAXJSAMPLE - GETJSAMPLE(inptr[1]);
 800669e:	f810 6c03 	ldrb.w	r6, [r0, #-3]
      b = MAXJSAMPLE - GETJSAMPLE(inptr[2]);
 80066a2:	9100      	str	r1, [sp, #0]
      outptr3[col] = inptr[3];	/* don't need GETJSAMPLE here */
 80066a4:	9d05      	ldr	r5, [sp, #20]
 80066a6:	f810 1c01 	ldrb.w	r1, [r0, #-1]
      r = MAXJSAMPLE - GETJSAMPLE(inptr[0]);
 80066aa:	f810 7c04 	ldrb.w	r7, [r0, #-4]
      outptr3[col] = inptr[3];	/* don't need GETJSAMPLE here */
 80066ae:	54e9      	strb	r1, [r5, r3]
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 80066b0:	f5c6 71ff 	rsb	r1, r6, #510	@ 0x1fe
      r = MAXJSAMPLE - GETJSAMPLE(inptr[0]);
 80066b4:	f1c7 0bff 	rsb	fp, r7, #255	@ 0xff
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 80066b8:	9d00      	ldr	r5, [sp, #0]
 80066ba:	3101      	adds	r1, #1
 80066bc:	f854 b02b 	ldr.w	fp, [r4, fp, lsl #2]
 80066c0:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 80066c4:	4459      	add	r1, fp
 80066c6:	f5c5 7b3f 	rsb	fp, r5, #764	@ 0x2fc
      outptr0[col] = (JSAMPLE)
 80066ca:	9d02      	ldr	r5, [sp, #8]
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 80066cc:	f10b 0b03 	add.w	fp, fp, #3
 80066d0:	f854 b02b 	ldr.w	fp, [r4, fp, lsl #2]
 80066d4:	4459      	add	r1, fp
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 80066d6:	f5c7 7b7f 	rsb	fp, r7, #1020	@ 0x3fc
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
 80066da:	ebae 0707 	sub.w	r7, lr, r7
		 >> SCALEBITS);
 80066de:	1409      	asrs	r1, r1, #16
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 80066e0:	f10b 0b03 	add.w	fp, fp, #3
      outptr0[col] = (JSAMPLE)
 80066e4:	54e9      	strb	r1, [r5, r3]
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 80066e6:	f5c6 619f 	rsb	r1, r6, #1272	@ 0x4f8
 80066ea:	f854 b02b 	ldr.w	fp, [r4, fp, lsl #2]
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
 80066ee:	eba9 0606 	sub.w	r6, r9, r6
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 80066f2:	3107      	adds	r1, #7
 80066f4:	9d00      	ldr	r5, [sp, #0]
 80066f6:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 80066fa:	4459      	add	r1, fp
 80066fc:	ebae 0b05 	sub.w	fp, lr, r5
      outptr1[col] = (JSAMPLE)
 8006700:	9d03      	ldr	r5, [sp, #12]
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 8006702:	f854 b02b 	ldr.w	fp, [r4, fp, lsl #2]
 8006706:	4459      	add	r1, fp
		 >> SCALEBITS);
 8006708:	1409      	asrs	r1, r1, #16
      outptr1[col] = (JSAMPLE)
 800670a:	54e9      	strb	r1, [r5, r3]
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
 800670c:	f854 1027 	ldr.w	r1, [r4, r7, lsl #2]
 8006710:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8006714:	440e      	add	r6, r1
 8006716:	9900      	ldr	r1, [sp, #0]
 8006718:	ebaa 0501 	sub.w	r5, sl, r1
 800671c:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
 8006720:	440e      	add	r6, r1
      outptr2[col] = (JSAMPLE)
 8006722:	9904      	ldr	r1, [sp, #16]
		 >> SCALEBITS);
 8006724:	1436      	asrs	r6, r6, #16
      outptr2[col] = (JSAMPLE)
 8006726:	54ce      	strb	r6, [r1, r3]
    for (col = 0; col < num_cols; col++) {
 8006728:	3301      	adds	r3, #1
 800672a:	e7b2      	b.n	8006692 <cmyk_ycck_convert+0x58>

0800672c <grayscale_convert>:

METHODDEF(void)
grayscale_convert (j_compress_ptr cinfo,
		   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		   JDIMENSION output_row, int num_rows)
{
 800672c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800672e:	9c05      	ldr	r4, [sp, #20]
  register JSAMPROW inptr;
  register JSAMPROW outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
 8006730:	69c6      	ldr	r6, [r0, #28]
  int instride = cinfo->input_components;
 8006732:	6a47      	ldr	r7, [r0, #36]	@ 0x24

  while (--num_rows >= 0) {
 8006734:	1f08      	subs	r0, r1, #4
 8006736:	ebc1 0183 	rsb	r1, r1, r3, lsl #2
 800673a:	3c01      	subs	r4, #1
 800673c:	d500      	bpl.n	8006740 <grayscale_convert+0x14>
    for (col = 0; col < num_cols; col++) {
      outptr[col] = inptr[0];	/* don't need GETJSAMPLE() here */
      inptr += instride;
    }
  }
}
 800673e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = *input_buf++;
 8006740:	f850 5f04 	ldr.w	r5, [r0, #4]!
    outptr = output_buf[0][output_row];
 8006744:	6813      	ldr	r3, [r2, #0]
 8006746:	4403      	add	r3, r0
 8006748:	585b      	ldr	r3, [r3, r1]
 800674a:	eb06 0c03 	add.w	ip, r6, r3
    for (col = 0; col < num_cols; col++) {
 800674e:	4563      	cmp	r3, ip
 8006750:	d0f3      	beq.n	800673a <grayscale_convert+0xe>
      outptr[col] = inptr[0];	/* don't need GETJSAMPLE() here */
 8006752:	f895 e000 	ldrb.w	lr, [r5]
      inptr += instride;
 8006756:	443d      	add	r5, r7
      outptr[col] = inptr[0];	/* don't need GETJSAMPLE() here */
 8006758:	f803 eb01 	strb.w	lr, [r3], #1
    for (col = 0; col < num_cols; col++) {
 800675c:	e7f7      	b.n	800674e <grayscale_convert+0x22>

0800675e <rgb_convert>:

METHODDEF(void)
rgb_convert (j_compress_ptr cinfo,
	     JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	     JDIMENSION output_row, int num_rows)
{
 800675e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006762:	9f06      	ldr	r7, [sp, #24]
 8006764:	1f0d      	subs	r5, r1, #4
  register JSAMPROW inptr;
  register JSAMPROW outptr0, outptr1, outptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
 8006766:	f8d0 e01c 	ldr.w	lr, [r0, #28]

  while (--num_rows >= 0) {
 800676a:	ebc1 0183 	rsb	r1, r1, r3, lsl #2
 800676e:	3f01      	subs	r7, #1
 8006770:	d501      	bpl.n	8006776 <rgb_convert+0x18>
      outptr1[col] = inptr[RGB_GREEN];
      outptr2[col] = inptr[RGB_BLUE];
      inptr += RGB_PIXELSIZE;
    }
  }
}
 8006772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr = *input_buf++;
 8006776:	3504      	adds	r5, #4
    outptr0 = output_buf[0][output_row];
 8006778:	6810      	ldr	r0, [r2, #0]
    outptr2 = output_buf[2][output_row];
 800677a:	6894      	ldr	r4, [r2, #8]
    outptr0 = output_buf[0][output_row];
 800677c:	eb05 0c01 	add.w	ip, r5, r1
    for (col = 0; col < num_cols; col++) {
 8006780:	682b      	ldr	r3, [r5, #0]
 8006782:	f850 600c 	ldr.w	r6, [r0, ip]
    outptr1 = output_buf[1][output_row];
 8006786:	6850      	ldr	r0, [r2, #4]
 8006788:	f854 400c 	ldr.w	r4, [r4, ip]
 800678c:	f850 000c 	ldr.w	r0, [r0, ip]
 8006790:	eb0e 0c06 	add.w	ip, lr, r6
 8006794:	3c01      	subs	r4, #1
 8006796:	3801      	subs	r0, #1
    for (col = 0; col < num_cols; col++) {
 8006798:	4566      	cmp	r6, ip
 800679a:	f103 0303 	add.w	r3, r3, #3
 800679e:	d0e6      	beq.n	800676e <rgb_convert+0x10>
      outptr0[col] = inptr[RGB_RED];
 80067a0:	f813 8c03 	ldrb.w	r8, [r3, #-3]
 80067a4:	f806 8b01 	strb.w	r8, [r6], #1
      outptr1[col] = inptr[RGB_GREEN];
 80067a8:	f813 8c02 	ldrb.w	r8, [r3, #-2]
 80067ac:	f800 8f01 	strb.w	r8, [r0, #1]!
      outptr2[col] = inptr[RGB_BLUE];
 80067b0:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 80067b4:	f804 8f01 	strb.w	r8, [r4, #1]!
    for (col = 0; col < num_cols; col++) {
 80067b8:	e7ee      	b.n	8006798 <rgb_convert+0x3a>

080067ba <null_convert>:

METHODDEF(void)
null_convert (j_compress_ptr cinfo,
	      JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	      JDIMENSION output_row, int num_rows)
{
 80067ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067be:	9d07      	ldr	r5, [sp, #28]
 80067c0:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
  register JSAMPROW inptr;
  register JSAMPROW outptr;
  register JDIMENSION col;
  register int ci;
  int nc = cinfo->num_components;
 80067c4:	6cc7      	ldr	r7, [r0, #76]	@ 0x4c
  JDIMENSION num_cols = cinfo->image_width;
 80067c6:	f8d0 e01c 	ldr.w	lr, [r0, #28]

  while (--num_rows >= 0) {
 80067ca:	3d01      	subs	r5, #1
 80067cc:	d417      	bmi.n	80067fe <null_convert+0x44>
    /* It seems fastest to make a separate pass for each component. */
    for (ci = 0; ci < nc; ci++) {
      inptr = *input_buf;
      outptr = output_buf[ci][output_row];
 80067ce:	eb01 0c03 	add.w	ip, r1, r3
    for (ci = 0; ci < nc; ci++) {
 80067d2:	2000      	movs	r0, #0
 80067d4:	e009      	b.n	80067ea <null_convert+0x30>
      outptr = output_buf[ci][output_row];
 80067d6:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
      inptr = *input_buf;
 80067da:	680e      	ldr	r6, [r1, #0]
      for (col = 0; col < num_cols; col++) {
 80067dc:	f854 400c 	ldr.w	r4, [r4, ip]
 80067e0:	eb0e 0804 	add.w	r8, lr, r4
 80067e4:	4544      	cmp	r4, r8
 80067e6:	d104      	bne.n	80067f2 <null_convert+0x38>
    for (ci = 0; ci < nc; ci++) {
 80067e8:	3001      	adds	r0, #1
 80067ea:	42b8      	cmp	r0, r7
 80067ec:	dbf3      	blt.n	80067d6 <null_convert+0x1c>
	outptr[col] = inptr[ci]; /* don't need GETJSAMPLE() here */
	inptr += nc;
      }
    }
    input_buf++;
 80067ee:	3104      	adds	r1, #4
    output_row++;
 80067f0:	e7eb      	b.n	80067ca <null_convert+0x10>
	outptr[col] = inptr[ci]; /* don't need GETJSAMPLE() here */
 80067f2:	f816 9000 	ldrb.w	r9, [r6, r0]
	inptr += nc;
 80067f6:	443e      	add	r6, r7
	outptr[col] = inptr[ci]; /* don't need GETJSAMPLE() here */
 80067f8:	f804 9b01 	strb.w	r9, [r4], #1
      for (col = 0; col < num_cols; col++) {
 80067fc:	e7f2      	b.n	80067e4 <null_convert+0x2a>
  }
}
 80067fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006802 <null_method>:

METHODDEF(void)
null_method (j_compress_ptr cinfo)
{
  /* no work needed */
}
 8006802:	4770      	bx	lr

08006804 <jinit_color_converter>:
jinit_color_converter (j_compress_ptr cinfo)
{
  my_cconvert_ptr cconvert;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006804:	6843      	ldr	r3, [r0, #4]
 8006806:	220c      	movs	r2, #12
 8006808:	2101      	movs	r1, #1
 800680a:	681b      	ldr	r3, [r3, #0]
{
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006810:	4798      	blx	r3
				SIZEOF(my_color_converter));
  cinfo->cconvert = (struct jpeg_color_converter *) cconvert;
  /* set start_pass to null method until we find out differently */
  cconvert->pub.start_pass = null_method;
 8006812:	4b4e      	ldr	r3, [pc, #312]	@ (800694c <jinit_color_converter+0x148>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006814:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_converter *) cconvert;
 8006816:	f8c4 0198 	str.w	r0, [r4, #408]	@ 0x198
  cconvert->pub.start_pass = null_method;
 800681a:	6003      	str	r3, [r0, #0]

  /* Make sure input_components agrees with in_color_space */
  switch (cinfo->in_color_space) {
 800681c:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8006820:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006822:	3a01      	subs	r2, #1
 8006824:	2a04      	cmp	r2, #4
 8006826:	d811      	bhi.n	800684c <jinit_color_converter+0x48>
 8006828:	e8df f002 	tbb	[pc, r2]
 800682c:	0e0c0c03 	.word	0x0e0c0c03
 8006830:	0e          	.byte	0x0e
 8006831:	00          	.byte	0x00
  case JCS_GRAYSCALE:
    if (cinfo->input_components != 1)
 8006832:	2b01      	cmp	r3, #1
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;

  case JCS_CMYK:
  case JCS_YCCK:
    if (cinfo->input_components != 4)
 8006834:	d00c      	beq.n	8006850 <jinit_color_converter+0x4c>
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->input_components < 1)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	220a      	movs	r2, #10
 800683a:	4620      	mov	r0, r4
 800683c:	615a      	str	r2, [r3, #20]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4798      	blx	r3
 8006842:	e005      	b.n	8006850 <jinit_color_converter+0x4c>
    if (cinfo->input_components != 3)
 8006844:	2b03      	cmp	r3, #3
 8006846:	e7f5      	b.n	8006834 <jinit_color_converter+0x30>
    if (cinfo->input_components != 4)
 8006848:	2b04      	cmp	r3, #4
 800684a:	e7f3      	b.n	8006834 <jinit_color_converter+0x30>
    if (cinfo->input_components < 1)
 800684c:	2b00      	cmp	r3, #0
 800684e:	ddf2      	ble.n	8006836 <jinit_color_converter+0x32>
    break;
  }

  /* Check num_components, set conversion method based on requested space */
  switch (cinfo->jpeg_color_space) {
 8006850:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8006854:	1e5a      	subs	r2, r3, #1
 8006856:	2a04      	cmp	r2, #4
 8006858:	d868      	bhi.n	800692c <jinit_color_converter+0x128>
 800685a:	e8df f002 	tbb	[pc, r2]
 800685e:	1b03      	.short	0x1b03
 8006860:	3f2a      	.short	0x3f2a
 8006862:	4c          	.byte	0x4c
 8006863:	00          	.byte	0x00
  case JCS_GRAYSCALE:
    if (cinfo->num_components != 1)
 8006864:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006866:	2b01      	cmp	r3, #1
 8006868:	d005      	beq.n	8006876 <jinit_color_converter+0x72>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	220b      	movs	r2, #11
 800686e:	4620      	mov	r0, r4
 8006870:	615a      	str	r2, [r3, #20]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4798      	blx	r3
    if (cinfo->in_color_space == JCS_GRAYSCALE ||
 8006876:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800687a:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
 800687e:	2a01      	cmp	r2, #1
 8006880:	d102      	bne.n	8006888 <jinit_color_converter+0x84>
	cinfo->in_color_space == JCS_YCbCr)
      cconvert->pub.color_convert = grayscale_convert;
 8006882:	4b33      	ldr	r3, [pc, #204]	@ (8006950 <jinit_color_converter+0x14c>)

  default:			/* allow null conversion of JCS_UNKNOWN */
    if (cinfo->jpeg_color_space != cinfo->in_color_space ||
	cinfo->num_components != cinfo->input_components)
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    cconvert->pub.color_convert = null_convert;
 8006884:	606b      	str	r3, [r5, #4]
    break;
  }
}
 8006886:	bd70      	pop	{r4, r5, r6, pc}
    else if (cinfo->in_color_space == JCS_RGB) {
 8006888:	2b02      	cmp	r3, #2
 800688a:	d147      	bne.n	800691c <jinit_color_converter+0x118>
      cconvert->pub.start_pass = rgb_ycc_start;
 800688c:	4b31      	ldr	r3, [pc, #196]	@ (8006954 <jinit_color_converter+0x150>)
 800688e:	602b      	str	r3, [r5, #0]
      cconvert->pub.color_convert = rgb_gray_convert;
 8006890:	4b31      	ldr	r3, [pc, #196]	@ (8006958 <jinit_color_converter+0x154>)
 8006892:	e7f7      	b.n	8006884 <jinit_color_converter+0x80>
    if (cinfo->num_components != 3)
 8006894:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006896:	2b03      	cmp	r3, #3
 8006898:	d005      	beq.n	80068a6 <jinit_color_converter+0xa2>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	220b      	movs	r2, #11
 800689e:	4620      	mov	r0, r4
 80068a0:	615a      	str	r2, [r3, #20]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4798      	blx	r3
    if (cinfo->in_color_space == JCS_RGB)
 80068a6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d136      	bne.n	800691c <jinit_color_converter+0x118>
      cconvert->pub.color_convert = rgb_convert;
 80068ae:	4b2b      	ldr	r3, [pc, #172]	@ (800695c <jinit_color_converter+0x158>)
 80068b0:	e7e8      	b.n	8006884 <jinit_color_converter+0x80>
    if (cinfo->num_components != 3)
 80068b2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d005      	beq.n	80068c4 <jinit_color_converter+0xc0>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	220b      	movs	r2, #11
 80068bc:	4620      	mov	r0, r4
 80068be:	615a      	str	r2, [r3, #20]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4798      	blx	r3
    if (cinfo->in_color_space == JCS_RGB) {
 80068c4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d103      	bne.n	80068d4 <jinit_color_converter+0xd0>
      cconvert->pub.start_pass = rgb_ycc_start;
 80068cc:	4b21      	ldr	r3, [pc, #132]	@ (8006954 <jinit_color_converter+0x150>)
 80068ce:	602b      	str	r3, [r5, #0]
      cconvert->pub.color_convert = rgb_ycc_convert;
 80068d0:	4b23      	ldr	r3, [pc, #140]	@ (8006960 <jinit_color_converter+0x15c>)
 80068d2:	e7d7      	b.n	8006884 <jinit_color_converter+0x80>
    } else if (cinfo->in_color_space == JCS_YCbCr)
 80068d4:	2b03      	cmp	r3, #3
    } else if (cinfo->in_color_space == JCS_YCCK)
 80068d6:	d121      	bne.n	800691c <jinit_color_converter+0x118>
    cconvert->pub.color_convert = null_convert;
 80068d8:	4b22      	ldr	r3, [pc, #136]	@ (8006964 <jinit_color_converter+0x160>)
 80068da:	e7d3      	b.n	8006884 <jinit_color_converter+0x80>
    if (cinfo->num_components != 4)
 80068dc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d005      	beq.n	80068ee <jinit_color_converter+0xea>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	220b      	movs	r2, #11
 80068e6:	4620      	mov	r0, r4
 80068e8:	615a      	str	r2, [r3, #20]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4798      	blx	r3
    if (cinfo->in_color_space == JCS_CMYK)
 80068ee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	e7ef      	b.n	80068d6 <jinit_color_converter+0xd2>
    if (cinfo->num_components != 4)
 80068f6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d005      	beq.n	8006908 <jinit_color_converter+0x104>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	220b      	movs	r2, #11
 8006900:	4620      	mov	r0, r4
 8006902:	615a      	str	r2, [r3, #20]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4798      	blx	r3
    if (cinfo->in_color_space == JCS_CMYK) {
 8006908:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800690c:	2b04      	cmp	r3, #4
 800690e:	d103      	bne.n	8006918 <jinit_color_converter+0x114>
      cconvert->pub.start_pass = rgb_ycc_start;
 8006910:	4b10      	ldr	r3, [pc, #64]	@ (8006954 <jinit_color_converter+0x150>)
 8006912:	602b      	str	r3, [r5, #0]
      cconvert->pub.color_convert = cmyk_ycck_convert;
 8006914:	4b14      	ldr	r3, [pc, #80]	@ (8006968 <jinit_color_converter+0x164>)
 8006916:	e7b5      	b.n	8006884 <jinit_color_converter+0x80>
    } else if (cinfo->in_color_space == JCS_YCCK)
 8006918:	2b05      	cmp	r3, #5
 800691a:	e7dc      	b.n	80068d6 <jinit_color_converter+0xd2>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	221c      	movs	r2, #28
 8006920:	4620      	mov	r0, r4
 8006922:	615a      	str	r2, [r3, #20]
 8006924:	681b      	ldr	r3, [r3, #0]
}
 8006926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800692a:	4718      	bx	r3
    if (cinfo->jpeg_color_space != cinfo->in_color_space ||
 800692c:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8006930:	429a      	cmp	r2, r3
 8006932:	d103      	bne.n	800693c <jinit_color_converter+0x138>
 8006934:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8006936:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006938:	429a      	cmp	r2, r3
 800693a:	d0cd      	beq.n	80068d8 <jinit_color_converter+0xd4>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	221c      	movs	r2, #28
 8006940:	4620      	mov	r0, r4
 8006942:	615a      	str	r2, [r3, #20]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4798      	blx	r3
 8006948:	e7c6      	b.n	80068d8 <jinit_color_converter+0xd4>
 800694a:	bf00      	nop
 800694c:	08006803 	.word	0x08006803
 8006950:	0800672d 	.word	0x0800672d
 8006954:	08006485 	.word	0x08006485
 8006958:	080065db 	.word	0x080065db
 800695c:	0800675f 	.word	0x0800675f
 8006960:	08006521 	.word	0x08006521
 8006964:	080067bb 	.word	0x080067bb
 8006968:	0800663b 	.word	0x0800663b

0800696c <forward_DCT>:
forward_DCT (j_compress_ptr cinfo, jpeg_component_info * compptr,
	     JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
	     JDIMENSION start_row, JDIMENSION start_col,
	     JDIMENSION num_blocks)
/* This version is used for integer DCT implementations. */
{
 800696c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006970:	460c      	mov	r4, r1
 8006972:	4698      	mov	r8, r3
  /* This routine is heavily used, so it's worth coding it tightly. */
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
  forward_DCT_method_ptr do_dct = fdct->do_dct[compptr->component_index];
 8006974:	6849      	ldr	r1, [r1, #4]
{
 8006976:	b0c1      	sub	sp, #260	@ 0x104
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
 8006978:	f8d0 31a0 	ldr.w	r3, [r0, #416]	@ 0x1a0
  DCTELEM workspace[DCTSIZE2];	/* work area for FDCT subroutine */
  JDIMENSION bi;

  sample_data += start_row;	/* fold in the vertical offset once */

  for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
 800697c:	2600      	movs	r6, #0
{
 800697e:	f8dd 912c 	ldr.w	r9, [sp, #300]	@ 0x12c
  forward_DCT_method_ptr do_dct = fdct->do_dct[compptr->component_index];
 8006982:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006986:	f8d1 b02c 	ldr.w	fp, [r1, #44]	@ 0x2c
  DCTELEM * divisors = fdct->divisors[compptr->quant_tbl_no];
 800698a:	6921      	ldr	r1, [r4, #16]
 800698c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006990:	f8d3 a054 	ldr.w	sl, [r3, #84]	@ 0x54
  sample_data += start_row;	/* fold in the vertical offset once */
 8006994:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 8006996:	eb02 0783 	add.w	r7, r2, r3, lsl #2
  for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
 800699a:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 800699c:	429e      	cmp	r6, r3
 800699e:	d102      	bne.n	80069a6 <forward_DCT+0x3a>
	}
	output_ptr[i] = (JCOEF) temp;
      }
    }
  }
}
 80069a0:	b041      	add	sp, #260	@ 0x104
 80069a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    (*do_dct) (workspace, sample_data, start_col);
 80069a6:	464a      	mov	r2, r9
 80069a8:	4639      	mov	r1, r7
 80069aa:	4668      	mov	r0, sp
 80069ac:	47d8      	blx	fp
      for (i = 0; i < DCTSIZE2; i++) {
 80069ae:	f1aa 0304 	sub.w	r3, sl, #4
 80069b2:	4669      	mov	r1, sp
 80069b4:	eb08 12c6 	add.w	r2, r8, r6, lsl #7
 80069b8:	f10a 0efc 	add.w	lr, sl, #252	@ 0xfc
	temp = workspace[i];
 80069bc:	f851 0b04 	ldr.w	r0, [r1], #4
	qval = divisors[i];
 80069c0:	f853 5f04 	ldr.w	r5, [r3, #4]!
	if (temp < 0) {
 80069c4:	2800      	cmp	r0, #0
	  temp += qval>>1;	/* for rounding */
 80069c6:	ea4f 0c65 	mov.w	ip, r5, asr #1
	if (temp < 0) {
 80069ca:	da0f      	bge.n	80069ec <forward_DCT+0x80>
	  temp += qval>>1;	/* for rounding */
 80069cc:	ebac 0000 	sub.w	r0, ip, r0
	  DIVIDE_BY(temp, qval);
 80069d0:	42a8      	cmp	r0, r5
 80069d2:	bfac      	ite	ge
 80069d4:	fb90 f0f5 	sdivge	r0, r0, r5
 80069d8:	2000      	movlt	r0, #0
	  temp = -temp;
 80069da:	4240      	negs	r0, r0
      for (i = 0; i < DCTSIZE2; i++) {
 80069dc:	4573      	cmp	r3, lr
	output_ptr[i] = (JCOEF) temp;
 80069de:	f822 0b02 	strh.w	r0, [r2], #2
      for (i = 0; i < DCTSIZE2; i++) {
 80069e2:	d1eb      	bne.n	80069bc <forward_DCT+0x50>
  for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
 80069e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80069e6:	3601      	adds	r6, #1
 80069e8:	4499      	add	r9, r3
 80069ea:	e7d6      	b.n	800699a <forward_DCT+0x2e>
	  temp += qval>>1;	/* for rounding */
 80069ec:	4460      	add	r0, ip
	  DIVIDE_BY(temp, qval);
 80069ee:	4285      	cmp	r5, r0
 80069f0:	bfd4      	ite	le
 80069f2:	fb90 f0f5 	sdivle	r0, r0, r5
 80069f6:	2000      	movgt	r0, #0
 80069f8:	e7f0      	b.n	80069dc <forward_DCT+0x70>
	...

080069fc <forward_DCT_float>:
forward_DCT_float (j_compress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
		   JDIMENSION start_row, JDIMENSION start_col,
		   JDIMENSION num_blocks)
/* This version is used for floating-point DCT implementations. */
{
 80069fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a00:	460c      	mov	r4, r1
 8006a02:	4698      	mov	r8, r3
  /* This routine is heavily used, so it's worth coding it tightly. */
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
  float_DCT_method_ptr do_dct = fdct->do_float_dct[compptr->component_index];
 8006a04:	6849      	ldr	r1, [r1, #4]
  FAST_FLOAT workspace[DCTSIZE2]; /* work area for FDCT subroutine */
  JDIMENSION bi;

  sample_data += start_row;	/* fold in the vertical offset once */

  for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
 8006a06:	2500      	movs	r5, #0
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
 8006a08:	f8d0 31a0 	ldr.w	r3, [r0, #416]	@ 0x1a0
  float_DCT_method_ptr do_dct = fdct->do_float_dct[compptr->component_index];
 8006a0c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006a10:	6e4f      	ldr	r7, [r1, #100]	@ 0x64
  FAST_FLOAT * divisors = fdct->float_divisors[compptr->quant_tbl_no];
 8006a12:	6921      	ldr	r1, [r4, #16]
{
 8006a14:	ed2d 8b02 	vpush	{d8}
  FAST_FLOAT * divisors = fdct->float_divisors[compptr->quant_tbl_no];
 8006a18:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 8006a1c:	b0c1      	sub	sp, #260	@ 0x104
	 * Since C does not specify the direction of rounding for negative
	 * quotients, we have to force the dividend positive for portability.
	 * The maximum coefficient size is +-16K (for 12-bit data), so this
	 * code should work for either 16-bit or 32-bit ints.
	 */
	output_ptr[i] = (JCOEF) ((int) (temp + (FAST_FLOAT) 16384.5) - 16384);
 8006a1e:	ed9f 8a18 	vldr	s16, [pc, #96]	@ 8006a80 <forward_DCT_float+0x84>
  FAST_FLOAT * divisors = fdct->float_divisors[compptr->quant_tbl_no];
 8006a22:	f8d3 a08c 	ldr.w	sl, [r3, #140]	@ 0x8c
  sample_data += start_row;	/* fold in the vertical offset once */
 8006a26:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
{
 8006a28:	f8dd 9134 	ldr.w	r9, [sp, #308]	@ 0x134
 8006a2c:	f50a 7b80 	add.w	fp, sl, #256	@ 0x100
  sample_data += start_row;	/* fold in the vertical offset once */
 8006a30:	eb02 0683 	add.w	r6, r2, r3, lsl #2
  for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
 8006a34:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8006a36:	429d      	cmp	r5, r3
 8006a38:	d104      	bne.n	8006a44 <forward_DCT_float+0x48>
      }
    }
  }
}
 8006a3a:	b041      	add	sp, #260	@ 0x104
 8006a3c:	ecbd 8b02 	vpop	{d8}
 8006a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    (*do_dct) (workspace, sample_data, start_col);
 8006a44:	4631      	mov	r1, r6
 8006a46:	4668      	mov	r0, sp
 8006a48:	464a      	mov	r2, r9
 8006a4a:	47b8      	blx	r7
      for (i = 0; i < DCTSIZE2; i++) {
 8006a4c:	46ec      	mov	ip, sp
 8006a4e:	4651      	mov	r1, sl
 8006a50:	eb08 10c5 	add.w	r0, r8, r5, lsl #7
	output_ptr[i] = (JCOEF) ((int) (temp + (FAST_FLOAT) 16384.5) - 16384);
 8006a54:	eef0 7a48 	vmov.f32	s15, s16
	temp = workspace[i] * divisors[i];
 8006a58:	ecb1 7a01 	vldmia	r1!, {s14}
 8006a5c:	ecfc 6a01 	vldmia	ip!, {s13}
      for (i = 0; i < DCTSIZE2; i++) {
 8006a60:	458b      	cmp	fp, r1
	output_ptr[i] = (JCOEF) ((int) (temp + (FAST_FLOAT) 16384.5) - 16384);
 8006a62:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a6a:	ee17 2a90 	vmov	r2, s15
 8006a6e:	f5a2 4280 	sub.w	r2, r2, #16384	@ 0x4000
 8006a72:	f820 2b02 	strh.w	r2, [r0], #2
      for (i = 0; i < DCTSIZE2; i++) {
 8006a76:	d1ed      	bne.n	8006a54 <forward_DCT_float+0x58>
  for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
 8006a78:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006a7a:	3501      	adds	r5, #1
 8006a7c:	4491      	add	r9, r2
 8006a7e:	e7d9      	b.n	8006a34 <forward_DCT_float+0x38>
 8006a80:	46800100 	.word	0x46800100

08006a84 <start_pass_fdctmgr>:
 * first scan.  Hence all components should be examined here.
 */

METHODDEF(void)
start_pass_fdctmgr (j_compress_ptr cinfo)
{
 8006a84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
 8006a88:	f8d0 a1a0 	ldr.w	sl, [r0, #416]	@ 0x1a0
  int ci, qtblno, i;
  jpeg_component_info *compptr;
  int method = 0;
 8006a8c:	f04f 0800 	mov.w	r8, #0
{
 8006a90:	4605      	mov	r5, r0
  JQUANT_TBL * qtbl;
  DCTELEM * dtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8006a92:	f8d0 9054 	ldr.w	r9, [r0, #84]	@ 0x54
 8006a96:	f10a 0404 	add.w	r4, sl, #4
 8006a9a:	46c3      	mov	fp, r8
 8006a9c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8006a9e:	455b      	cmp	r3, fp
 8006aa0:	dc01      	bgt.n	8006aa6 <start_pass_fdctmgr+0x22>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 8006aa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 8006aa6:	e9d9 1209 	ldrd	r1, r2, [r9, #36]	@ 0x24
 8006aaa:	f240 700e 	movw	r0, #1806	@ 0x70e
 8006aae:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 8006ab2:	4283      	cmp	r3, r0
 8006ab4:	f000 8106 	beq.w	8006cc4 <start_pass_fdctmgr+0x240>
 8006ab8:	dc5a      	bgt.n	8006b70 <start_pass_fdctmgr+0xec>
 8006aba:	f240 4004 	movw	r0, #1028	@ 0x404
 8006abe:	4283      	cmp	r3, r0
 8006ac0:	f000 80e0 	beq.w	8006c84 <start_pass_fdctmgr+0x200>
 8006ac4:	dc2f      	bgt.n	8006b26 <start_pass_fdctmgr+0xa2>
 8006ac6:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8006aca:	f000 8103 	beq.w	8006cd4 <start_pass_fdctmgr+0x250>
 8006ace:	dc1a      	bgt.n	8006b06 <start_pass_fdctmgr+0x82>
 8006ad0:	f240 2001 	movw	r0, #513	@ 0x201
 8006ad4:	4283      	cmp	r3, r0
 8006ad6:	f000 80f1 	beq.w	8006cbc <start_pass_fdctmgr+0x238>
 8006ada:	dc0e      	bgt.n	8006afa <start_pass_fdctmgr+0x76>
 8006adc:	f240 1001 	movw	r0, #257	@ 0x101
 8006ae0:	4283      	cmp	r3, r0
 8006ae2:	f000 8090 	beq.w	8006c06 <start_pass_fdctmgr+0x182>
 8006ae6:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8006aea:	f000 80f5 	beq.w	8006cd8 <start_pass_fdctmgr+0x254>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 8006aee:	682b      	ldr	r3, [r5, #0]
 8006af0:	2007      	movs	r0, #7
 8006af2:	61da      	str	r2, [r3, #28]
 8006af4:	e9c3 0105 	strd	r0, r1, [r3, #20]
 8006af8:	e105      	b.n	8006d06 <start_pass_fdctmgr+0x282>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 8006afa:	f240 2002 	movw	r0, #514	@ 0x202
 8006afe:	4283      	cmp	r3, r0
 8006b00:	d1f5      	bne.n	8006aee <start_pass_fdctmgr+0x6a>
      fdct->do_dct[ci] = jpeg_fdct_2x2;
 8006b02:	4b91      	ldr	r3, [pc, #580]	@ (8006d48 <start_pass_fdctmgr+0x2c4>)
 8006b04:	e080      	b.n	8006c08 <start_pass_fdctmgr+0x184>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 8006b06:	f240 3006 	movw	r0, #774	@ 0x306
 8006b0a:	4283      	cmp	r3, r0
 8006b0c:	f000 80e0 	beq.w	8006cd0 <start_pass_fdctmgr+0x24c>
 8006b10:	f240 4002 	movw	r0, #1026	@ 0x402
 8006b14:	4283      	cmp	r3, r0
 8006b16:	f000 80cf 	beq.w	8006cb8 <start_pass_fdctmgr+0x234>
 8006b1a:	f240 3003 	movw	r0, #771	@ 0x303
 8006b1e:	4283      	cmp	r3, r0
 8006b20:	d1e5      	bne.n	8006aee <start_pass_fdctmgr+0x6a>
      fdct->do_dct[ci] = jpeg_fdct_3x3;
 8006b22:	4b8a      	ldr	r3, [pc, #552]	@ (8006d4c <start_pass_fdctmgr+0x2c8>)
 8006b24:	e070      	b.n	8006c08 <start_pass_fdctmgr+0x184>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 8006b26:	f240 6003 	movw	r0, #1539	@ 0x603
 8006b2a:	4283      	cmp	r3, r0
 8006b2c:	f000 80c2 	beq.w	8006cb4 <start_pass_fdctmgr+0x230>
 8006b30:	dc0e      	bgt.n	8006b50 <start_pass_fdctmgr+0xcc>
 8006b32:	f240 5005 	movw	r0, #1285	@ 0x505
 8006b36:	4283      	cmp	r3, r0
 8006b38:	f000 80a6 	beq.w	8006c88 <start_pass_fdctmgr+0x204>
 8006b3c:	f240 500a 	movw	r0, #1290	@ 0x50a
 8006b40:	4283      	cmp	r3, r0
 8006b42:	f000 80c3 	beq.w	8006ccc <start_pass_fdctmgr+0x248>
 8006b46:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 8006b4a:	d1d0      	bne.n	8006aee <start_pass_fdctmgr+0x6a>
      fdct->do_dct[ci] = jpeg_fdct_4x8;
 8006b4c:	4b80      	ldr	r3, [pc, #512]	@ (8006d50 <start_pass_fdctmgr+0x2cc>)
 8006b4e:	e05b      	b.n	8006c08 <start_pass_fdctmgr+0x184>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 8006b50:	f240 600c 	movw	r0, #1548	@ 0x60c
 8006b54:	4283      	cmp	r3, r0
 8006b56:	f000 80b7 	beq.w	8006cc8 <start_pass_fdctmgr+0x244>
 8006b5a:	f240 7007 	movw	r0, #1799	@ 0x707
 8006b5e:	4283      	cmp	r3, r0
 8006b60:	f000 8094 	beq.w	8006c8c <start_pass_fdctmgr+0x208>
 8006b64:	f240 6006 	movw	r0, #1542	@ 0x606
 8006b68:	4283      	cmp	r3, r0
 8006b6a:	d1c0      	bne.n	8006aee <start_pass_fdctmgr+0x6a>
      fdct->do_dct[ci] = jpeg_fdct_6x6;
 8006b6c:	4b79      	ldr	r3, [pc, #484]	@ (8006d54 <start_pass_fdctmgr+0x2d0>)
 8006b6e:	e04b      	b.n	8006c08 <start_pass_fdctmgr+0x184>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 8006b70:	f640 4006 	movw	r0, #3078	@ 0xc06
 8006b74:	4283      	cmp	r3, r0
 8006b76:	f000 809b 	beq.w	8006cb0 <start_pass_fdctmgr+0x22c>
 8006b7a:	dc22      	bgt.n	8006bc2 <start_pass_fdctmgr+0x13e>
 8006b7c:	f640 1009 	movw	r0, #2313	@ 0x909
 8006b80:	4283      	cmp	r3, r0
 8006b82:	f000 8085 	beq.w	8006c90 <start_pass_fdctmgr+0x20c>
 8006b86:	dc0e      	bgt.n	8006ba6 <start_pass_fdctmgr+0x122>
 8006b88:	f640 0008 	movw	r0, #2056	@ 0x808
 8006b8c:	4283      	cmp	r3, r0
 8006b8e:	f000 80a5 	beq.w	8006cdc <start_pass_fdctmgr+0x258>
 8006b92:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8006b96:	f000 8093 	beq.w	8006cc0 <start_pass_fdctmgr+0x23c>
 8006b9a:	f640 0004 	movw	r0, #2052	@ 0x804
 8006b9e:	4283      	cmp	r3, r0
 8006ba0:	d1a5      	bne.n	8006aee <start_pass_fdctmgr+0x6a>
      fdct->do_dct[ci] = jpeg_fdct_8x4;
 8006ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8006d58 <start_pass_fdctmgr+0x2d4>)
 8006ba4:	e030      	b.n	8006c08 <start_pass_fdctmgr+0x184>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 8006ba6:	f640 200a 	movw	r0, #2570	@ 0xa0a
 8006baa:	4283      	cmp	r3, r0
 8006bac:	d072      	beq.n	8006c94 <start_pass_fdctmgr+0x210>
 8006bae:	f640 300b 	movw	r0, #2827	@ 0xb0b
 8006bb2:	4283      	cmp	r3, r0
 8006bb4:	d070      	beq.n	8006c98 <start_pass_fdctmgr+0x214>
 8006bb6:	f640 2005 	movw	r0, #2565	@ 0xa05
 8006bba:	4283      	cmp	r3, r0
 8006bbc:	d197      	bne.n	8006aee <start_pass_fdctmgr+0x6a>
      fdct->do_dct[ci] = jpeg_fdct_10x5;
 8006bbe:	4b67      	ldr	r3, [pc, #412]	@ (8006d5c <start_pass_fdctmgr+0x2d8>)
 8006bc0:	e022      	b.n	8006c08 <start_pass_fdctmgr+0x184>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 8006bc2:	f640 600e 	movw	r0, #3598	@ 0xe0e
 8006bc6:	4283      	cmp	r3, r0
 8006bc8:	d06a      	beq.n	8006ca0 <start_pass_fdctmgr+0x21c>
 8006bca:	dc0d      	bgt.n	8006be8 <start_pass_fdctmgr+0x164>
 8006bcc:	f640 500d 	movw	r0, #3341	@ 0xd0d
 8006bd0:	4283      	cmp	r3, r0
 8006bd2:	d063      	beq.n	8006c9c <start_pass_fdctmgr+0x218>
 8006bd4:	f640 6007 	movw	r0, #3591	@ 0xe07
 8006bd8:	4283      	cmp	r3, r0
 8006bda:	d067      	beq.n	8006cac <start_pass_fdctmgr+0x228>
 8006bdc:	f640 400c 	movw	r0, #3084	@ 0xc0c
 8006be0:	4283      	cmp	r3, r0
 8006be2:	d184      	bne.n	8006aee <start_pass_fdctmgr+0x6a>
      fdct->do_dct[ci] = jpeg_fdct_12x12;
 8006be4:	4b5e      	ldr	r3, [pc, #376]	@ (8006d60 <start_pass_fdctmgr+0x2dc>)
 8006be6:	e00f      	b.n	8006c08 <start_pass_fdctmgr+0x184>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 8006be8:	f241 0008 	movw	r0, #4104	@ 0x1008
 8006bec:	4283      	cmp	r3, r0
 8006bee:	d05b      	beq.n	8006ca8 <start_pass_fdctmgr+0x224>
 8006bf0:	f241 0010 	movw	r0, #4112	@ 0x1010
 8006bf4:	4283      	cmp	r3, r0
 8006bf6:	d055      	beq.n	8006ca4 <start_pass_fdctmgr+0x220>
 8006bf8:	f640 700f 	movw	r0, #3855	@ 0xf0f
 8006bfc:	4283      	cmp	r3, r0
 8006bfe:	f47f af76 	bne.w	8006aee <start_pass_fdctmgr+0x6a>
      fdct->do_dct[ci] = jpeg_fdct_15x15;
 8006c02:	4b58      	ldr	r3, [pc, #352]	@ (8006d64 <start_pass_fdctmgr+0x2e0>)
 8006c04:	e000      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_1x1;
 8006c06:	4b58      	ldr	r3, [pc, #352]	@ (8006d68 <start_pass_fdctmgr+0x2e4>)
      method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
 8006c08:	f04f 0800 	mov.w	r8, #0
      fdct->do_dct[ci] = jpeg_fdct_2x2;
 8006c0c:	62a3      	str	r3, [r4, #40]	@ 0x28
    qtblno = compptr->quant_tbl_no;
 8006c0e:	f8d9 6010 	ldr.w	r6, [r9, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 8006c12:	2e03      	cmp	r6, #3
 8006c14:	f106 0716 	add.w	r7, r6, #22
 8006c18:	d802      	bhi.n	8006c20 <start_pass_fdctmgr+0x19c>
 8006c1a:	f855 3027 	ldr.w	r3, [r5, r7, lsl #2]
 8006c1e:	b933      	cbnz	r3, 8006c2e <start_pass_fdctmgr+0x1aa>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	2236      	movs	r2, #54	@ 0x36
 8006c24:	4628      	mov	r0, r5
 8006c26:	e9c3 2605 	strd	r2, r6, [r3, #20]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4798      	blx	r3
    switch (method) {
 8006c2e:	f1b8 0f01 	cmp.w	r8, #1
    qtbl = cinfo->quant_tbl_ptrs[qtblno];
 8006c32:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    switch (method) {
 8006c36:	d06a      	beq.n	8006d0e <start_pass_fdctmgr+0x28a>
 8006c38:	f1b8 0f02 	cmp.w	r8, #2
 8006c3c:	f000 80cc 	beq.w	8006dd8 <start_pass_fdctmgr+0x354>
 8006c40:	f1b8 0f00 	cmp.w	r8, #0
 8006c44:	f040 8103 	bne.w	8006e4e <start_pass_fdctmgr+0x3ca>
      if (fdct->divisors[qtblno] == NULL) {
 8006c48:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8006c4c:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8006c4e:	b93b      	cbnz	r3, 8006c60 <start_pass_fdctmgr+0x1dc>
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006c50:	686b      	ldr	r3, [r5, #4]
 8006c52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c56:	2101      	movs	r1, #1
 8006c58:	4628      	mov	r0, r5
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4798      	blx	r3
	fdct->divisors[qtblno] = (DCTELEM *)
 8006c5e:	6570      	str	r0, [r6, #84]	@ 0x54
      dtbl = fdct->divisors[qtblno];
 8006c60:	6d71      	ldr	r1, [r6, #84]	@ 0x54
      for (i = 0; i < DCTSIZE2; i++) {
 8006c62:	2300      	movs	r3, #0
	dtbl[i] = ((DCTELEM) qtbl->quantval[i]) << 3;
 8006c64:	f837 2013 	ldrh.w	r2, [r7, r3, lsl #1]
 8006c68:	00d2      	lsls	r2, r2, #3
 8006c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for (i = 0; i < DCTSIZE2; i++) {
 8006c6e:	3301      	adds	r3, #1
 8006c70:	2b40      	cmp	r3, #64	@ 0x40
 8006c72:	d1f7      	bne.n	8006c64 <start_pass_fdctmgr+0x1e0>
      fdct->pub.forward_DCT[ci] = forward_DCT;
 8006c74:	4b3d      	ldr	r3, [pc, #244]	@ (8006d6c <start_pass_fdctmgr+0x2e8>)
      fdct->pub.forward_DCT[ci] = forward_DCT_float;
 8006c76:	6023      	str	r3, [r4, #0]
       ci++, compptr++) {
 8006c78:	f10b 0b01 	add.w	fp, fp, #1
 8006c7c:	f109 0958 	add.w	r9, r9, #88	@ 0x58
 8006c80:	3404      	adds	r4, #4
 8006c82:	e70b      	b.n	8006a9c <start_pass_fdctmgr+0x18>
      fdct->do_dct[ci] = jpeg_fdct_4x4;
 8006c84:	4b3a      	ldr	r3, [pc, #232]	@ (8006d70 <start_pass_fdctmgr+0x2ec>)
 8006c86:	e7bf      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_5x5;
 8006c88:	4b3a      	ldr	r3, [pc, #232]	@ (8006d74 <start_pass_fdctmgr+0x2f0>)
 8006c8a:	e7bd      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_7x7;
 8006c8c:	4b3a      	ldr	r3, [pc, #232]	@ (8006d78 <start_pass_fdctmgr+0x2f4>)
 8006c8e:	e7bb      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_9x9;
 8006c90:	4b3a      	ldr	r3, [pc, #232]	@ (8006d7c <start_pass_fdctmgr+0x2f8>)
 8006c92:	e7b9      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_10x10;
 8006c94:	4b3a      	ldr	r3, [pc, #232]	@ (8006d80 <start_pass_fdctmgr+0x2fc>)
 8006c96:	e7b7      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_11x11;
 8006c98:	4b3a      	ldr	r3, [pc, #232]	@ (8006d84 <start_pass_fdctmgr+0x300>)
 8006c9a:	e7b5      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_13x13;
 8006c9c:	4b3a      	ldr	r3, [pc, #232]	@ (8006d88 <start_pass_fdctmgr+0x304>)
 8006c9e:	e7b3      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_14x14;
 8006ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8006d8c <start_pass_fdctmgr+0x308>)
 8006ca2:	e7b1      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_16x16;
 8006ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8006d90 <start_pass_fdctmgr+0x30c>)
 8006ca6:	e7af      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_16x8;
 8006ca8:	4b3a      	ldr	r3, [pc, #232]	@ (8006d94 <start_pass_fdctmgr+0x310>)
 8006caa:	e7ad      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_14x7;
 8006cac:	4b3a      	ldr	r3, [pc, #232]	@ (8006d98 <start_pass_fdctmgr+0x314>)
 8006cae:	e7ab      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_12x6;
 8006cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8006d9c <start_pass_fdctmgr+0x318>)
 8006cb2:	e7a9      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_6x3;
 8006cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8006da0 <start_pass_fdctmgr+0x31c>)
 8006cb6:	e7a7      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_4x2;
 8006cb8:	4b3a      	ldr	r3, [pc, #232]	@ (8006da4 <start_pass_fdctmgr+0x320>)
 8006cba:	e7a5      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_2x1;
 8006cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8006da8 <start_pass_fdctmgr+0x324>)
 8006cbe:	e7a3      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_8x16;
 8006cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8006dac <start_pass_fdctmgr+0x328>)
 8006cc2:	e7a1      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_7x14;
 8006cc4:	4b3a      	ldr	r3, [pc, #232]	@ (8006db0 <start_pass_fdctmgr+0x32c>)
 8006cc6:	e79f      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_6x12;
 8006cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8006db4 <start_pass_fdctmgr+0x330>)
 8006cca:	e79d      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_5x10;
 8006ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8006db8 <start_pass_fdctmgr+0x334>)
 8006cce:	e79b      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_3x6;
 8006cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8006dbc <start_pass_fdctmgr+0x338>)
 8006cd2:	e799      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_2x4;
 8006cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8006dc0 <start_pass_fdctmgr+0x33c>)
 8006cd6:	e797      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      fdct->do_dct[ci] = jpeg_fdct_1x2;
 8006cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8006dc4 <start_pass_fdctmgr+0x340>)
 8006cda:	e795      	b.n	8006c08 <start_pass_fdctmgr+0x184>
      switch (cinfo->dct_method) {
 8006cdc:	f895 30e8 	ldrb.w	r3, [r5, #232]	@ 0xe8
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d004      	beq.n	8006cee <start_pass_fdctmgr+0x26a>
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d006      	beq.n	8006cf6 <start_pass_fdctmgr+0x272>
 8006ce8:	b953      	cbnz	r3, 8006d00 <start_pass_fdctmgr+0x27c>
	fdct->do_dct[ci] = jpeg_fdct_islow;
 8006cea:	4b37      	ldr	r3, [pc, #220]	@ (8006dc8 <start_pass_fdctmgr+0x344>)
 8006cec:	e78c      	b.n	8006c08 <start_pass_fdctmgr+0x184>
	fdct->do_dct[ci] = jpeg_fdct_ifast;
 8006cee:	4a37      	ldr	r2, [pc, #220]	@ (8006dcc <start_pass_fdctmgr+0x348>)
	method = JDCT_IFAST;
 8006cf0:	4698      	mov	r8, r3
	fdct->do_dct[ci] = jpeg_fdct_ifast;
 8006cf2:	62a2      	str	r2, [r4, #40]	@ 0x28
	break;
 8006cf4:	e78b      	b.n	8006c0e <start_pass_fdctmgr+0x18a>
	fdct->do_float_dct[ci] = jpeg_fdct_float;
 8006cf6:	4b36      	ldr	r3, [pc, #216]	@ (8006dd0 <start_pass_fdctmgr+0x34c>)
	method = JDCT_FLOAT;
 8006cf8:	f04f 0802 	mov.w	r8, #2
	fdct->do_float_dct[ci] = jpeg_fdct_float;
 8006cfc:	6623      	str	r3, [r4, #96]	@ 0x60
	break;
 8006cfe:	e786      	b.n	8006c0e <start_pass_fdctmgr+0x18a>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	2231      	movs	r2, #49	@ 0x31
 8006d04:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4628      	mov	r0, r5
 8006d0a:	4798      	blx	r3
      break;
 8006d0c:	e77f      	b.n	8006c0e <start_pass_fdctmgr+0x18a>
	if (fdct->divisors[qtblno] == NULL) {
 8006d0e:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8006d12:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8006d14:	b93b      	cbnz	r3, 8006d26 <start_pass_fdctmgr+0x2a2>
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006d16:	686b      	ldr	r3, [r5, #4]
 8006d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d1c:	4641      	mov	r1, r8
 8006d1e:	4628      	mov	r0, r5
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4798      	blx	r3
	  fdct->divisors[qtblno] = (DCTELEM *)
 8006d24:	6570      	str	r0, [r6, #84]	@ 0x54
	dtbl = fdct->divisors[qtblno];
 8006d26:	6d70      	ldr	r0, [r6, #84]	@ 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 8006d28:	2200      	movs	r2, #0
 8006d2a:	492a      	ldr	r1, [pc, #168]	@ (8006dd4 <start_pass_fdctmgr+0x350>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 8006d2c:	f837 3012 	ldrh.w	r3, [r7, r2, lsl #1]
 8006d30:	f931 6b02 	ldrsh.w	r6, [r1], #2
 8006d34:	4373      	muls	r3, r6
 8006d36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d3a:	12db      	asrs	r3, r3, #11
	  dtbl[i] = (DCTELEM)
 8006d3c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 8006d40:	3201      	adds	r2, #1
 8006d42:	2a40      	cmp	r2, #64	@ 0x40
 8006d44:	d1f2      	bne.n	8006d2c <start_pass_fdctmgr+0x2a8>
 8006d46:	e795      	b.n	8006c74 <start_pass_fdctmgr+0x1f0>
 8006d48:	0800b025 	.word	0x0800b025
 8006d4c:	0800af5d 	.word	0x0800af5d
 8006d50:	0800ec55 	.word	0x0800ec55
 8006d54:	0800ab85 	.word	0x0800ab85
 8006d58:	0800dc45 	.word	0x0800dc45
 8006d5c:	0800da1d 	.word	0x0800da1d
 8006d60:	0800ba61 	.word	0x0800ba61
 8006d64:	0800c721 	.word	0x0800c721
 8006d68:	0800b06d 	.word	0x0800b06d
 8006d6c:	0800696d 	.word	0x0800696d
 8006d70:	0800ae69 	.word	0x0800ae69
 8006d74:	0800ad15 	.word	0x0800ad15
 8006d78:	0800a951 	.word	0x0800a951
 8006d7c:	0800b08b 	.word	0x0800b08b
 8006d80:	0800b32d 	.word	0x0800b32d
 8006d84:	0800b639 	.word	0x0800b639
 8006d88:	0800be21 	.word	0x0800be21
 8006d8c:	0800c2dd 	.word	0x0800c2dd
 8006d90:	0800cb69 	.word	0x0800cb69
 8006d94:	0800d0a1 	.word	0x0800d0a1
 8006d98:	0800d47d 	.word	0x0800d47d
 8006d9c:	0800d795 	.word	0x0800d795
 8006da0:	0800dded 	.word	0x0800dded
 8006da4:	0800df19 	.word	0x0800df19
 8006da8:	0800dfd1 	.word	0x0800dfd1
 8006dac:	0800dffd 	.word	0x0800dffd
 8006db0:	0800e405 	.word	0x0800e405
 8006db4:	0800e775 	.word	0x0800e775
 8006db8:	0800ea1d 	.word	0x0800ea1d
 8006dbc:	0800ee01 	.word	0x0800ee01
 8006dc0:	0800ef31 	.word	0x0800ef31
 8006dc4:	0800efd1 	.word	0x0800efd1
 8006dc8:	0800a70d 	.word	0x0800a70d
 8006dcc:	0800a569 	.word	0x0800a569
 8006dd0:	0800a35d 	.word	0x0800a35d
 8006dd4:	080117b8 	.word	0x080117b8
	if (fdct->float_divisors[qtblno] == NULL) {
 8006dd8:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8006ddc:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8006de0:	b943      	cbnz	r3, 8006df4 <start_pass_fdctmgr+0x370>
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006de2:	686b      	ldr	r3, [r5, #4]
 8006de4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006de8:	2101      	movs	r1, #1
 8006dea:	4628      	mov	r0, r5
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4798      	blx	r3
	  fdct->float_divisors[qtblno] = (FAST_FLOAT *)
 8006df0:	f8c6 008c 	str.w	r0, [r6, #140]	@ 0x8c
		       aanscalefactor[row] * aanscalefactor[col] * 8.0)));
 8006df4:	eeb2 4b00 	vmov.f64	d4, #32	@ 0x41000000  8.0
	fdtbl = fdct->float_divisors[qtblno];
 8006df8:	f8d6 608c 	ldr.w	r6, [r6, #140]	@ 0x8c
	      (1.0 / (((double) qtbl->quantval[i] *
 8006dfc:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
	fdtbl = fdct->float_divisors[qtblno];
 8006e00:	f8df c058 	ldr.w	ip, [pc, #88]	@ 8006e5c <start_pass_fdctmgr+0x3d8>
	i = 0;
 8006e04:	2300      	movs	r3, #0
	  for (col = 0; col < DCTSIZE; col++) {
 8006e06:	eb06 0083 	add.w	r0, r6, r3, lsl #2
		       aanscalefactor[row] * aanscalefactor[col] * 8.0)));
 8006e0a:	4914      	ldr	r1, [pc, #80]	@ (8006e5c <start_pass_fdctmgr+0x3d8>)
 8006e0c:	f107 0210 	add.w	r2, r7, #16
 8006e10:	ecbc 5b02 	vldmia	ip!, {d5}
	      (1.0 / (((double) qtbl->quantval[i] *
 8006e14:	f837 eb02 	ldrh.w	lr, [r7], #2
 8006e18:	ee07 ea10 	vmov	s14, lr
	  for (col = 0; col < DCTSIZE; col++) {
 8006e1c:	42ba      	cmp	r2, r7
	      (1.0 / (((double) qtbl->quantval[i] *
 8006e1e:	eeb8 7b47 	vcvt.f64.u32	d7, s14
		       aanscalefactor[row] * aanscalefactor[col] * 8.0)));
 8006e22:	ecb1 6b02 	vldmia	r1!, {d6}
	      (1.0 / (((double) qtbl->quantval[i] *
 8006e26:	ee27 7b05 	vmul.f64	d7, d7, d5
		       aanscalefactor[row] * aanscalefactor[col] * 8.0)));
 8006e2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e2e:	ee27 7b04 	vmul.f64	d7, d7, d4
	      (1.0 / (((double) qtbl->quantval[i] *
 8006e32:	ee83 6b07 	vdiv.f64	d6, d3, d7
	    fdtbl[i] = (FAST_FLOAT)
 8006e36:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8006e3a:	eca0 6a01 	vstmia	r0!, {s12}
	  for (col = 0; col < DCTSIZE; col++) {
 8006e3e:	d1e9      	bne.n	8006e14 <start_pass_fdctmgr+0x390>
 8006e40:	3308      	adds	r3, #8
	for (row = 0; row < DCTSIZE; row++) {
 8006e42:	2b40      	cmp	r3, #64	@ 0x40
 8006e44:	d001      	beq.n	8006e4a <start_pass_fdctmgr+0x3c6>
 8006e46:	4617      	mov	r7, r2
 8006e48:	e7dd      	b.n	8006e06 <start_pass_fdctmgr+0x382>
      fdct->pub.forward_DCT[ci] = forward_DCT_float;
 8006e4a:	4b05      	ldr	r3, [pc, #20]	@ (8006e60 <start_pass_fdctmgr+0x3dc>)
 8006e4c:	e713      	b.n	8006c76 <start_pass_fdctmgr+0x1f2>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 8006e4e:	682b      	ldr	r3, [r5, #0]
 8006e50:	2231      	movs	r2, #49	@ 0x31
 8006e52:	4628      	mov	r0, r5
 8006e54:	615a      	str	r2, [r3, #20]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4798      	blx	r3
      break;
 8006e5a:	e70d      	b.n	8006c78 <start_pass_fdctmgr+0x1f4>
 8006e5c:	08011778 	.word	0x08011778
 8006e60:	080069fd 	.word	0x080069fd

08006e64 <jinit_forward_dct>:
{
  my_fdct_ptr fdct;
  int i;

  fdct = (my_fdct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006e64:	6843      	ldr	r3, [r0, #4]
 8006e66:	229c      	movs	r2, #156	@ 0x9c
 8006e68:	2101      	movs	r1, #1
 8006e6a:	681b      	ldr	r3, [r3, #0]
{
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006e70:	4798      	blx	r3
				SIZEOF(my_fdct_controller));
  cinfo->fdct = (struct jpeg_forward_dct *) fdct;
  fdct->pub.start_pass = start_pass_fdctmgr;
 8006e72:	4b09      	ldr	r3, [pc, #36]	@ (8006e98 <jinit_forward_dct+0x34>)
  cinfo->fdct = (struct jpeg_forward_dct *) fdct;
 8006e74:	f8c4 01a0 	str.w	r0, [r4, #416]	@ 0x1a0
  fdct->pub.start_pass = start_pass_fdctmgr;
 8006e78:	6003      	str	r3, [r0, #0]

  /* Mark divisor tables unallocated */
  for (i = 0; i < NUM_QUANT_TBLS; i++) {
    fdct->divisors[i] = NULL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	6543      	str	r3, [r0, #84]	@ 0x54
#ifdef DCT_FLOAT_SUPPORTED
    fdct->float_divisors[i] = NULL;
 8006e7e:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
    fdct->divisors[i] = NULL;
 8006e82:	6583      	str	r3, [r0, #88]	@ 0x58
    fdct->float_divisors[i] = NULL;
 8006e84:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    fdct->divisors[i] = NULL;
 8006e88:	65c3      	str	r3, [r0, #92]	@ 0x5c
    fdct->float_divisors[i] = NULL;
 8006e8a:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
    fdct->divisors[i] = NULL;
 8006e8e:	6603      	str	r3, [r0, #96]	@ 0x60
    fdct->float_divisors[i] = NULL;
 8006e90:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
#endif
  }
}
 8006e94:	bd10      	pop	{r4, pc}
 8006e96:	bf00      	nop
 8006e98:	08006a85 	.word	0x08006a85

08006e9c <dump_buffer_s>:


LOCAL(boolean)
dump_buffer_s (working_state * state)
/* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
{
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4604      	mov	r4, r0
  struct jpeg_destination_mgr * dest = state->cinfo->dest;
 8006ea0:	6a00      	ldr	r0, [r0, #32]
 8006ea2:	6985      	ldr	r5, [r0, #24]

  if (! (*dest->empty_output_buffer) (state->cinfo))
 8006ea4:	68eb      	ldr	r3, [r5, #12]
 8006ea6:	4798      	blx	r3
 8006ea8:	b120      	cbz	r0, 8006eb4 <dump_buffer_s+0x18>
    return FALSE;
  /* After a successful buffer dump, must reset buffer pointers */
  state->next_output_byte = dest->next_output_byte;
 8006eaa:	682b      	ldr	r3, [r5, #0]
  state->free_in_buffer = dest->free_in_buffer;
  return TRUE;
 8006eac:	2001      	movs	r0, #1
  state->next_output_byte = dest->next_output_byte;
 8006eae:	6023      	str	r3, [r4, #0]
  state->free_in_buffer = dest->free_in_buffer;
 8006eb0:	686b      	ldr	r3, [r5, #4]
 8006eb2:	6063      	str	r3, [r4, #4]
}
 8006eb4:	bd38      	pop	{r3, r4, r5, pc}

08006eb6 <dump_buffer_e>:


LOCAL(void)
dump_buffer_e (huff_entropy_ptr entropy)
/* Empty the output buffer; we do not support suspension in this case. */
{
 8006eb6:	b538      	push	{r3, r4, r5, lr}
 8006eb8:	4604      	mov	r4, r0
  struct jpeg_destination_mgr * dest = entropy->cinfo->dest;
 8006eba:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8006ebc:	6985      	ldr	r5, [r0, #24]

  if (! (*dest->empty_output_buffer) (entropy->cinfo))
 8006ebe:	68eb      	ldr	r3, [r5, #12]
 8006ec0:	4798      	blx	r3
 8006ec2:	b928      	cbnz	r0, 8006ed0 <dump_buffer_e+0x1a>
    ERREXIT(entropy->cinfo, JERR_CANT_SUSPEND);
 8006ec4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8006ec6:	2219      	movs	r2, #25
 8006ec8:	6803      	ldr	r3, [r0, #0]
 8006eca:	615a      	str	r2, [r3, #20]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4798      	blx	r3
  /* After a successful buffer dump, must reset buffer pointers */
  entropy->next_output_byte = dest->next_output_byte;
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	6723      	str	r3, [r4, #112]	@ 0x70
  entropy->free_in_buffer = dest->free_in_buffer;
 8006ed4:	686b      	ldr	r3, [r5, #4]
 8006ed6:	6763      	str	r3, [r4, #116]	@ 0x74
}
 8006ed8:	bd38      	pop	{r3, r4, r5, pc}

08006eda <emit_bits_s>:

INLINE
LOCAL(boolean)
emit_bits_s (working_state * state, unsigned int code, int size)
/* Emit some bits; return TRUE if successful, FALSE if must suspend */
{
 8006eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4688      	mov	r8, r1
  /* This routine is heavily used, so it's worth coding tightly. */
  register INT32 put_buffer = (INT32) code;
  register int put_bits = state->cur.put_bits;
 8006ee2:	68c6      	ldr	r6, [r0, #12]

  /* if size is 0, caller used an invalid Huffman table entry */
  if (size == 0)
 8006ee4:	4617      	mov	r7, r2
 8006ee6:	b92a      	cbnz	r2, 8006ef4 <emit_bits_s+0x1a>
    ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 8006ee8:	6a00      	ldr	r0, [r0, #32]
 8006eea:	2229      	movs	r2, #41	@ 0x29
 8006eec:	6803      	ldr	r3, [r0, #0]
 8006eee:	615a      	str	r2, [r3, #20]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4798      	blx	r3

  put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
 8006ef4:	2501      	movs	r5, #1
  
  put_bits += size;		/* new number of bits in buffer */
 8006ef6:	443e      	add	r6, r7
  put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
 8006ef8:	40bd      	lsls	r5, r7
  
  put_buffer <<= 24 - put_bits; /* align incoming bits */
 8006efa:	f1c6 0318 	rsb	r3, r6, #24
  while (put_bits >= 8) {
    int c = (int) ((put_buffer >> 16) & 0xFF);
    
    emit_byte_s(state, c, return FALSE);
    if (c == 0xFF) {		/* need to stuff a zero byte? */
      emit_byte_s(state, 0, return FALSE);
 8006efe:	2700      	movs	r7, #0
  put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
 8006f00:	3d01      	subs	r5, #1
 8006f02:	ea05 0508 	and.w	r5, r5, r8
  put_buffer <<= 24 - put_bits; /* align incoming bits */
 8006f06:	409d      	lsls	r5, r3
  put_buffer |= state->cur.put_buffer; /* and merge with old buffer contents */
 8006f08:	68a3      	ldr	r3, [r4, #8]
 8006f0a:	431d      	orrs	r5, r3
  while (put_bits >= 8) {
 8006f0c:	2e07      	cmp	r6, #7
 8006f0e:	dc03      	bgt.n	8006f18 <emit_bits_s+0x3e>
  }

  state->cur.put_buffer = put_buffer; /* update state variables */
  state->cur.put_bits = put_bits;

  return TRUE;
 8006f10:	2001      	movs	r0, #1
  state->cur.put_bits = put_bits;
 8006f12:	e9c4 5602 	strd	r5, r6, [r4, #8]
  return TRUE;
 8006f16:	e022      	b.n	8006f5e <emit_bits_s+0x84>
    emit_byte_s(state, c, return FALSE);
 8006f18:	6822      	ldr	r2, [r4, #0]
    int c = (int) ((put_buffer >> 16) & 0xFF);
 8006f1a:	142b      	asrs	r3, r5, #16
 8006f1c:	f3c5 4807 	ubfx	r8, r5, #16, #8
    emit_byte_s(state, c, return FALSE);
 8006f20:	1c51      	adds	r1, r2, #1
 8006f22:	6021      	str	r1, [r4, #0]
 8006f24:	7013      	strb	r3, [r2, #0]
 8006f26:	6863      	ldr	r3, [r4, #4]
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	6063      	str	r3, [r4, #4]
 8006f2c:	b18b      	cbz	r3, 8006f52 <emit_bits_s+0x78>
    if (c == 0xFF) {		/* need to stuff a zero byte? */
 8006f2e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8006f32:	d10b      	bne.n	8006f4c <emit_bits_s+0x72>
      emit_byte_s(state, 0, return FALSE);
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	6022      	str	r2, [r4, #0]
 8006f3a:	701f      	strb	r7, [r3, #0]
 8006f3c:	6863      	ldr	r3, [r4, #4]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	6063      	str	r3, [r4, #4]
 8006f42:	b91b      	cbnz	r3, 8006f4c <emit_bits_s+0x72>
 8006f44:	4620      	mov	r0, r4
 8006f46:	f7ff ffa9 	bl	8006e9c <dump_buffer_s>
 8006f4a:	b138      	cbz	r0, 8006f5c <emit_bits_s+0x82>
    put_buffer <<= 8;
 8006f4c:	022d      	lsls	r5, r5, #8
    put_bits -= 8;
 8006f4e:	3e08      	subs	r6, #8
 8006f50:	e7dc      	b.n	8006f0c <emit_bits_s+0x32>
    emit_byte_s(state, c, return FALSE);
 8006f52:	4620      	mov	r0, r4
 8006f54:	f7ff ffa2 	bl	8006e9c <dump_buffer_s>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d1e8      	bne.n	8006f2e <emit_bits_s+0x54>
 8006f5c:	2000      	movs	r0, #0
}
 8006f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006f62 <emit_bits_e>:

INLINE
LOCAL(void)
emit_bits_e (huff_entropy_ptr entropy, unsigned int code, int size)
/* Emit some bits, unless we are in gather mode */
{
 8006f62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f66:	4604      	mov	r4, r0
 8006f68:	4688      	mov	r8, r1
  /* This routine is heavily used, so it's worth coding tightly. */
  register INT32 put_buffer = (INT32) code;
  register int put_bits = entropy->saved.put_bits;
 8006f6a:	f8d0 9010 	ldr.w	r9, [r0, #16]

  /* if size is 0, caller used an invalid Huffman table entry */
  if (size == 0)
 8006f6e:	4617      	mov	r7, r2
 8006f70:	b92a      	cbnz	r2, 8006f7e <emit_bits_e+0x1c>
    ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 8006f72:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8006f74:	2229      	movs	r2, #41	@ 0x29
 8006f76:	6803      	ldr	r3, [r0, #0]
 8006f78:	615a      	str	r2, [r3, #20]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4798      	blx	r3

  if (entropy->gather_statistics)
 8006f7e:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 8006f80:	b976      	cbnz	r6, 8006fa0 <emit_bits_e+0x3e>
    return;			/* do nothing if we're only getting stats */

  put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
 8006f82:	2501      	movs	r5, #1
 8006f84:	40bd      	lsls	r5, r7
  
  put_bits += size;		/* new number of bits in buffer */
 8006f86:	444f      	add	r7, r9
  put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
 8006f88:	3d01      	subs	r5, #1

  put_buffer <<= 24 - put_bits; /* align incoming bits */
 8006f8a:	f1c7 0318 	rsb	r3, r7, #24
  put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
 8006f8e:	ea05 0508 	and.w	r5, r5, r8
  put_buffer <<= 24 - put_bits; /* align incoming bits */
 8006f92:	409d      	lsls	r5, r3

  /* and merge with old buffer contents */
  put_buffer |= entropy->saved.put_buffer;
 8006f94:	68e3      	ldr	r3, [r4, #12]
 8006f96:	431d      	orrs	r5, r3

  while (put_bits >= 8) {
 8006f98:	2f07      	cmp	r7, #7
 8006f9a:	dc03      	bgt.n	8006fa4 <emit_bits_e+0x42>
    put_buffer <<= 8;
    put_bits -= 8;
  }

  entropy->saved.put_buffer = put_buffer; /* update variables */
  entropy->saved.put_bits = put_bits;
 8006f9c:	e9c4 5703 	strd	r5, r7, [r4, #12]
}
 8006fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    emit_byte_e(entropy, c);
 8006fa4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
    int c = (int) ((put_buffer >> 16) & 0xFF);
 8006fa6:	142b      	asrs	r3, r5, #16
 8006fa8:	f3c5 4807 	ubfx	r8, r5, #16, #8
    emit_byte_e(entropy, c);
 8006fac:	1c51      	adds	r1, r2, #1
 8006fae:	6721      	str	r1, [r4, #112]	@ 0x70
 8006fb0:	7013      	strb	r3, [r2, #0]
 8006fb2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	6763      	str	r3, [r4, #116]	@ 0x74
 8006fb8:	b913      	cbnz	r3, 8006fc0 <emit_bits_e+0x5e>
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f7ff ff7b 	bl	8006eb6 <dump_buffer_e>
    if (c == 0xFF) {		/* need to stuff a zero byte? */
 8006fc0:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8006fc4:	d10a      	bne.n	8006fdc <emit_bits_e+0x7a>
      emit_byte_e(entropy, 0);
 8006fc6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	6722      	str	r2, [r4, #112]	@ 0x70
 8006fcc:	701e      	strb	r6, [r3, #0]
 8006fce:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	6763      	str	r3, [r4, #116]	@ 0x74
 8006fd4:	b913      	cbnz	r3, 8006fdc <emit_bits_e+0x7a>
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f7ff ff6d 	bl	8006eb6 <dump_buffer_e>
    put_buffer <<= 8;
 8006fdc:	022d      	lsls	r5, r5, #8
    put_bits -= 8;
 8006fde:	3f08      	subs	r7, #8
 8006fe0:	e7da      	b.n	8006f98 <emit_bits_e+0x36>

08006fe2 <encode_mcu_huff>:
 * Encode and output one MCU's worth of Huffman-compressed coefficients.
 */

METHODDEF(boolean)
encode_mcu_huff (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8006fe2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  working_state state;
  int blkn, ci;
  jpeg_component_info * compptr;

  /* Load up working state */
  state.next_output_byte = cinfo->dest->next_output_byte;
 8006fe6:	6983      	ldr	r3, [r0, #24]
{
 8006fe8:	b093      	sub	sp, #76	@ 0x4c
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8006fea:	f8d0 51a4 	ldr.w	r5, [r0, #420]	@ 0x1a4
{
 8006fee:	4606      	mov	r6, r0
  state.next_output_byte = cinfo->dest->next_output_byte;
 8006ff0:	681a      	ldr	r2, [r3, #0]
{
 8006ff2:	4688      	mov	r8, r1
  state.free_in_buffer = cinfo->dest->free_in_buffer;
 8006ff4:	685b      	ldr	r3, [r3, #4]
  ASSIGN_STATE(state.cur, entropy->saved);
 8006ff6:	f105 070c 	add.w	r7, r5, #12
 8006ffa:	ac0b      	add	r4, sp, #44	@ 0x2c
  state.next_output_byte = cinfo->dest->next_output_byte;
 8006ffc:	9209      	str	r2, [sp, #36]	@ 0x24
  state.free_in_buffer = cinfo->dest->free_in_buffer;
 8006ffe:	930a      	str	r3, [sp, #40]	@ 0x28
  state.cinfo = cinfo;
 8007000:	9611      	str	r6, [sp, #68]	@ 0x44
  ASSIGN_STATE(state.cur, entropy->saved);
 8007002:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007006:	e897 0003 	ldmia.w	r7, {r0, r1}

  /* Emit restart marker if needed */
  if (cinfo->restart_interval) {
 800700a:	f8d6 30ec 	ldr.w	r3, [r6, #236]	@ 0xec
  ASSIGN_STATE(state.cur, entropy->saved);
 800700e:	e884 0003 	stmia.w	r4, {r0, r1}
  if (cinfo->restart_interval) {
 8007012:	2b00      	cmp	r3, #0
 8007014:	d02e      	beq.n	8007074 <encode_mcu_huff+0x92>
    if (entropy->restarts_to_go == 0)
 8007016:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8007018:	bb67      	cbnz	r7, 8007074 <encode_mcu_huff+0x92>
  if (! emit_bits_s(state, 0x7F, 7)) /* fill any partial byte with ones */
 800701a:	2207      	movs	r2, #7
 800701c:	217f      	movs	r1, #127	@ 0x7f
 800701e:	a809      	add	r0, sp, #36	@ 0x24
      if (! emit_restart_s(&state, entropy->next_restart_num))
 8007020:	6aac      	ldr	r4, [r5, #40]	@ 0x28
  if (! emit_bits_s(state, 0x7F, 7)) /* fill any partial byte with ones */
 8007022:	f7ff ff5a 	bl	8006eda <emit_bits_s>
 8007026:	b918      	cbnz	r0, 8007030 <encode_mcu_huff+0x4e>
	return FALSE;
 8007028:	2000      	movs	r0, #0
    }
    entropy->restarts_to_go--;
  }

  return TRUE;
}
 800702a:	b013      	add	sp, #76	@ 0x4c
 800702c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  emit_byte_s(state, 0xFF, return FALSE);
 8007030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	9209      	str	r2, [sp, #36]	@ 0x24
 8007036:	22ff      	movs	r2, #255	@ 0xff
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800703c:	3b01      	subs	r3, #1
  state->cur.put_bits = 0;
 800703e:	e9cd 770b 	strd	r7, r7, [sp, #44]	@ 0x2c
  emit_byte_s(state, 0xFF, return FALSE);
 8007042:	930a      	str	r3, [sp, #40]	@ 0x28
 8007044:	2b00      	cmp	r3, #0
 8007046:	d037      	beq.n	80070b8 <encode_mcu_huff+0xd6>
  emit_byte_s(state, JPEG_RST0 + restart_num, return FALSE);
 8007048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800704a:	3c30      	subs	r4, #48	@ 0x30
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	701c      	strb	r4, [r3, #0]
 8007050:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007052:	9209      	str	r2, [sp, #36]	@ 0x24
 8007054:	3b01      	subs	r3, #1
 8007056:	930a      	str	r3, [sp, #40]	@ 0x28
 8007058:	b923      	cbnz	r3, 8007064 <encode_mcu_huff+0x82>
 800705a:	a809      	add	r0, sp, #36	@ 0x24
 800705c:	f7ff ff1e 	bl	8006e9c <dump_buffer_s>
 8007060:	2800      	cmp	r0, #0
 8007062:	d0e1      	beq.n	8007028 <encode_mcu_huff+0x46>
  for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
 8007064:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007066:	aa0c      	add	r2, sp, #48	@ 0x30
 8007068:	f8d3 1120 	ldr.w	r1, [r3, #288]	@ 0x120
 800706c:	2300      	movs	r3, #0
    state->cur.last_dc_val[ci] = 0;
 800706e:	4618      	mov	r0, r3
  for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
 8007070:	428b      	cmp	r3, r1
 8007072:	db27      	blt.n	80070c4 <encode_mcu_huff+0xe2>
 8007074:	f1a8 0304 	sub.w	r3, r8, #4
 8007078:	9302      	str	r3, [sp, #8]
 800707a:	f506 739e 	add.w	r3, r6, #316	@ 0x13c
 800707e:	9305      	str	r3, [sp, #20]
 8007080:	2300      	movs	r3, #0
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007082:	9301      	str	r3, [sp, #4]
 8007084:	9a01      	ldr	r2, [sp, #4]
 8007086:	f8d6 313c 	ldr.w	r3, [r6, #316]	@ 0x13c
 800708a:	4293      	cmp	r3, r2
 800708c:	dc1e      	bgt.n	80070cc <encode_mcu_huff+0xea>
  cinfo->dest->next_output_byte = state.next_output_byte;
 800708e:	69b3      	ldr	r3, [r6, #24]
  ASSIGN_STATE(entropy->saved, state.cur);
 8007090:	af0b      	add	r7, sp, #44	@ 0x2c
  cinfo->dest->next_output_byte = state.next_output_byte;
 8007092:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  ASSIGN_STATE(entropy->saved, state.cur);
 8007094:	f105 040c 	add.w	r4, r5, #12
  cinfo->dest->next_output_byte = state.next_output_byte;
 8007098:	601a      	str	r2, [r3, #0]
  cinfo->dest->free_in_buffer = state.free_in_buffer;
 800709a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800709c:	605a      	str	r2, [r3, #4]
  ASSIGN_STATE(entropy->saved, state.cur);
 800709e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80070a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070a2:	e897 0003 	ldmia.w	r7, {r0, r1}
  if (cinfo->restart_interval) {
 80070a6:	f8d6 30ec 	ldr.w	r3, [r6, #236]	@ 0xec
  ASSIGN_STATE(entropy->saved, state.cur);
 80070aa:	e884 0003 	stmia.w	r4, {r0, r1}
  if (cinfo->restart_interval) {
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f040 80c1 	bne.w	8007236 <encode_mcu_huff+0x254>
  return TRUE;
 80070b4:	2001      	movs	r0, #1
 80070b6:	e7b8      	b.n	800702a <encode_mcu_huff+0x48>
  emit_byte_s(state, 0xFF, return FALSE);
 80070b8:	a809      	add	r0, sp, #36	@ 0x24
 80070ba:	f7ff feef 	bl	8006e9c <dump_buffer_s>
 80070be:	2800      	cmp	r0, #0
 80070c0:	d1c2      	bne.n	8007048 <encode_mcu_huff+0x66>
 80070c2:	e7b1      	b.n	8007028 <encode_mcu_huff+0x46>
  for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
 80070c4:	3301      	adds	r3, #1
    state->cur.last_dc_val[ci] = 0;
 80070c6:	f842 0f04 	str.w	r0, [r2, #4]!
  for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
 80070ca:	e7d1      	b.n	8007070 <encode_mcu_huff+0x8e>
    ci = cinfo->MCU_membership[blkn];
 80070cc:	9b05      	ldr	r3, [sp, #20]
  nbits = 0;
 80070ce:	f04f 0a00 	mov.w	sl, #0
  int Se = state->cinfo->lim_Se;
 80070d2:	9811      	ldr	r0, [sp, #68]	@ 0x44
    ci = cinfo->MCU_membership[blkn];
 80070d4:	f853 9f04 	ldr.w	r9, [r3, #4]!
 80070d8:	9305      	str	r3, [sp, #20]
    compptr = cinfo->cur_comp_info[ci];
 80070da:	eb06 0389 	add.w	r3, r6, r9, lsl #2
 80070de:	f8d3 1124 	ldr.w	r1, [r3, #292]	@ 0x124
    if (! encode_one_block(&state,
 80070e2:	9b02      	ldr	r3, [sp, #8]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	9303      	str	r3, [sp, #12]
 80070e8:	ab12      	add	r3, sp, #72	@ 0x48
 80070ea:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80070ee:	f853 2c14 	ldr.w	r2, [r3, #-20]
 80070f2:	694b      	ldr	r3, [r1, #20]
 80070f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80070f8:	f8d3 b02c 	ldr.w	fp, [r3, #44]	@ 0x2c
 80070fc:	698b      	ldr	r3, [r1, #24]
 80070fe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007102:	f8d3 803c 	ldr.w	r8, [r3, #60]	@ 0x3c
  int Se = state->cinfo->lim_Se;
 8007106:	f8d0 3180 	ldr.w	r3, [r0, #384]	@ 0x180
 800710a:	9306      	str	r3, [sp, #24]
  const int * natural_order = state->cinfo->natural_order;
 800710c:	f8d0 317c 	ldr.w	r3, [r0, #380]	@ 0x17c
 8007110:	9307      	str	r3, [sp, #28]
  temp = temp2 = block[0] - last_dc_val;
 8007112:	9b03      	ldr	r3, [sp, #12]
 8007114:	f9b3 3000 	ldrsh.w	r3, [r3]
  if (temp < 0) {
 8007118:	1a9c      	subs	r4, r3, r2
    temp2--;
 800711a:	bf4a      	itet	mi
 800711c:	f104 37ff 	addmi.w	r7, r4, #4294967295
  temp = temp2 = block[0] - last_dc_val;
 8007120:	4627      	movpl	r7, r4
    temp = -temp;		/* temp is abs value of input */
 8007122:	1ad4      	submi	r4, r2, r3
  while (temp) {
 8007124:	bb5c      	cbnz	r4, 800717e <encode_mcu_huff+0x19c>
  if (nbits > MAX_COEF_BITS+1)
 8007126:	f1ba 0f0b 	cmp.w	sl, #11
 800712a:	dd04      	ble.n	8007136 <encode_mcu_huff+0x154>
    ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 800712c:	6803      	ldr	r3, [r0, #0]
 800712e:	2206      	movs	r2, #6
 8007130:	615a      	str	r2, [r3, #20]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4798      	blx	r3
  if (! emit_bits_s(state, dctbl->ehufco[nbits], dctbl->ehufsi[nbits]))
 8007136:	eb0b 030a 	add.w	r3, fp, sl
 800713a:	f85b 102a 	ldr.w	r1, [fp, sl, lsl #2]
 800713e:	a809      	add	r0, sp, #36	@ 0x24
 8007140:	f893 2400 	ldrb.w	r2, [r3, #1024]	@ 0x400
 8007144:	f7ff fec9 	bl	8006eda <emit_bits_s>
 8007148:	2800      	cmp	r0, #0
 800714a:	f43f af6d 	beq.w	8007028 <encode_mcu_huff+0x46>
  if (nbits)			/* emit_bits rejects calls with size 0 */
 800714e:	f1ba 0f00 	cmp.w	sl, #0
 8007152:	d118      	bne.n	8007186 <encode_mcu_huff+0x1a4>
      nbits = 1;		/* there must be at least one 1 bit */
 8007154:	f04f 0a01 	mov.w	sl, #1
  for (k = 1; k <= Se; k++) {
 8007158:	9b06      	ldr	r3, [sp, #24]
 800715a:	4553      	cmp	r3, sl
 800715c:	da1b      	bge.n	8007196 <encode_mcu_huff+0x1b4>
  if (r > 0)
 800715e:	2c00      	cmp	r4, #0
 8007160:	dc5f      	bgt.n	8007222 <encode_mcu_huff+0x240>
    state.cur.last_dc_val[ci] = MCU_data[blkn][0][0];
 8007162:	ab12      	add	r3, sp, #72	@ 0x48
 8007164:	9a02      	ldr	r2, [sp, #8]
 8007166:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800716a:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800716e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007172:	9202      	str	r2, [sp, #8]
 8007174:	f849 3c14 	str.w	r3, [r9, #-20]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007178:	9b01      	ldr	r3, [sp, #4]
 800717a:	3301      	adds	r3, #1
 800717c:	e781      	b.n	8007082 <encode_mcu_huff+0xa0>
    nbits++;
 800717e:	f10a 0a01 	add.w	sl, sl, #1
    temp >>= 1;
 8007182:	1064      	asrs	r4, r4, #1
 8007184:	e7ce      	b.n	8007124 <encode_mcu_huff+0x142>
    if (! emit_bits_s(state, (unsigned int) temp2, nbits))
 8007186:	4652      	mov	r2, sl
 8007188:	4639      	mov	r1, r7
 800718a:	a809      	add	r0, sp, #36	@ 0x24
 800718c:	f7ff fea5 	bl	8006eda <emit_bits_s>
 8007190:	2800      	cmp	r0, #0
 8007192:	d1df      	bne.n	8007154 <encode_mcu_huff+0x172>
 8007194:	e748      	b.n	8007028 <encode_mcu_huff+0x46>
    if ((temp = block[natural_order[k]]) == 0) {
 8007196:	9b07      	ldr	r3, [sp, #28]
 8007198:	9a03      	ldr	r2, [sp, #12]
 800719a:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 800719e:	f932 7013 	ldrsh.w	r7, [r2, r3, lsl #1]
 80071a2:	b97f      	cbnz	r7, 80071c4 <encode_mcu_huff+0x1e2>
      r++;
 80071a4:	1c67      	adds	r7, r4, #1
  for (k = 1; k <= Se; k++) {
 80071a6:	f10a 0a01 	add.w	sl, sl, #1
 80071aa:	463c      	mov	r4, r7
 80071ac:	e7d4      	b.n	8007158 <encode_mcu_huff+0x176>
	if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
 80071ae:	f898 24f0 	ldrb.w	r2, [r8, #1264]	@ 0x4f0
 80071b2:	a809      	add	r0, sp, #36	@ 0x24
 80071b4:	f8d8 13c0 	ldr.w	r1, [r8, #960]	@ 0x3c0
 80071b8:	f7ff fe8f 	bl	8006eda <emit_bits_s>
 80071bc:	2800      	cmp	r0, #0
 80071be:	f43f af33 	beq.w	8007028 <encode_mcu_huff+0x46>
	r -= 16;
 80071c2:	3c10      	subs	r4, #16
      while (r > 15) {
 80071c4:	2c0f      	cmp	r4, #15
 80071c6:	dcf2      	bgt.n	80071ae <encode_mcu_huff+0x1cc>
      if (temp < 0) {
 80071c8:	2f00      	cmp	r7, #0
      nbits = 1;		/* there must be at least one 1 bit */
 80071ca:	f04f 0b01 	mov.w	fp, #1
	temp2--;
 80071ce:	bfbb      	ittet	lt
 80071d0:	f107 33ff 	addlt.w	r3, r7, #4294967295
	temp = -temp;		/* temp is abs value of input */
 80071d4:	427f      	neglt	r7, r7
      temp2 = temp;
 80071d6:	9704      	strge	r7, [sp, #16]
	temp2--;
 80071d8:	9304      	strlt	r3, [sp, #16]
      while ((temp >>= 1))
 80071da:	107f      	asrs	r7, r7, #1
 80071dc:	d11e      	bne.n	800721c <encode_mcu_huff+0x23a>
      if (nbits > MAX_COEF_BITS)
 80071de:	f1bb 0f0a 	cmp.w	fp, #10
 80071e2:	dd05      	ble.n	80071f0 <encode_mcu_huff+0x20e>
	ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 80071e4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80071e6:	2106      	movs	r1, #6
 80071e8:	6802      	ldr	r2, [r0, #0]
 80071ea:	6151      	str	r1, [r2, #20]
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	4790      	blx	r2
      i = (r << 4) + nbits;
 80071f0:	eb0b 1404 	add.w	r4, fp, r4, lsl #4
      if (! emit_bits_s(state, actbl->ehufco[i], actbl->ehufsi[i]))
 80071f4:	a809      	add	r0, sp, #36	@ 0x24
 80071f6:	eb08 0204 	add.w	r2, r8, r4
 80071fa:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 80071fe:	f892 2400 	ldrb.w	r2, [r2, #1024]	@ 0x400
 8007202:	f7ff fe6a 	bl	8006eda <emit_bits_s>
 8007206:	2800      	cmp	r0, #0
 8007208:	f43f af0e 	beq.w	8007028 <encode_mcu_huff+0x46>
      if (! emit_bits_s(state, (unsigned int) temp2, nbits))
 800720c:	465a      	mov	r2, fp
 800720e:	9904      	ldr	r1, [sp, #16]
 8007210:	a809      	add	r0, sp, #36	@ 0x24
 8007212:	f7ff fe62 	bl	8006eda <emit_bits_s>
 8007216:	2800      	cmp	r0, #0
 8007218:	d1c5      	bne.n	80071a6 <encode_mcu_huff+0x1c4>
 800721a:	e705      	b.n	8007028 <encode_mcu_huff+0x46>
	nbits++;
 800721c:	f10b 0b01 	add.w	fp, fp, #1
 8007220:	e7db      	b.n	80071da <encode_mcu_huff+0x1f8>
    if (! emit_bits_s(state, actbl->ehufco[0], actbl->ehufsi[0]))
 8007222:	f898 2400 	ldrb.w	r2, [r8, #1024]	@ 0x400
 8007226:	a809      	add	r0, sp, #36	@ 0x24
 8007228:	f8d8 1000 	ldr.w	r1, [r8]
 800722c:	f7ff fe55 	bl	8006eda <emit_bits_s>
 8007230:	2800      	cmp	r0, #0
 8007232:	d196      	bne.n	8007162 <encode_mcu_huff+0x180>
 8007234:	e6f8      	b.n	8007028 <encode_mcu_huff+0x46>
    if (entropy->restarts_to_go == 0) {
 8007236:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8007238:	b92a      	cbnz	r2, 8007246 <encode_mcu_huff+0x264>
      entropy->restarts_to_go = cinfo->restart_interval;
 800723a:	626b      	str	r3, [r5, #36]	@ 0x24
      entropy->next_restart_num++;
 800723c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800723e:	3301      	adds	r3, #1
      entropy->next_restart_num &= 7;
 8007240:	f003 0307 	and.w	r3, r3, #7
 8007244:	62ab      	str	r3, [r5, #40]	@ 0x28
    entropy->restarts_to_go--;
 8007246:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8007248:	3b01      	subs	r3, #1
 800724a:	626b      	str	r3, [r5, #36]	@ 0x24
 800724c:	e732      	b.n	80070b4 <encode_mcu_huff+0xd2>

0800724e <encode_mcu_gather>:
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int blkn, ci;
  jpeg_component_info * compptr;

  /* Take care of restart intervals if needed */
  if (cinfo->restart_interval) {
 800724e:	f8d0 20ec 	ldr.w	r2, [r0, #236]	@ 0xec
{
 8007252:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007256:	4604      	mov	r4, r0
 8007258:	b087      	sub	sp, #28
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800725a:	f8d0 61a4 	ldr.w	r6, [r0, #420]	@ 0x1a4
  if (cinfo->restart_interval) {
 800725e:	b162      	cbz	r2, 800727a <encode_mcu_gather+0x2c>
    if (entropy->restarts_to_go == 0) {
 8007260:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8007262:	b93b      	cbnz	r3, 8007274 <encode_mcu_gather+0x26>
      /* Re-initialize DC predictions to 0 */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 8007264:	f8d0 5120 	ldr.w	r5, [r0, #288]	@ 0x120
	entropy->saved.last_dc_val[ci] = 0;
 8007268:	461f      	mov	r7, r3
 800726a:	f106 0010 	add.w	r0, r6, #16
      for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 800726e:	429d      	cmp	r5, r3
 8007270:	dc09      	bgt.n	8007286 <encode_mcu_gather+0x38>
      /* Update restart state */
      entropy->restarts_to_go = cinfo->restart_interval;
 8007272:	6272      	str	r2, [r6, #36]	@ 0x24
    }
    entropy->restarts_to_go--;
 8007274:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8007276:	3b01      	subs	r3, #1
 8007278:	6273      	str	r3, [r6, #36]	@ 0x24
 800727a:	1f0f      	subs	r7, r1, #4
 800727c:	f504 7a9e 	add.w	sl, r4, #316	@ 0x13c
  for (k = 1; k <= Se; k++) {
 8007280:	f04f 0b00 	mov.w	fp, #0
 8007284:	e050      	b.n	8007328 <encode_mcu_gather+0xda>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 8007286:	3301      	adds	r3, #1
	entropy->saved.last_dc_val[ci] = 0;
 8007288:	f840 7f04 	str.w	r7, [r0, #4]!
      for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 800728c:	e7ef      	b.n	800726e <encode_mcu_gather+0x20>
  }

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    ci = cinfo->MCU_membership[blkn];
 800728e:	f85a 3f04 	ldr.w	r3, [sl, #4]!
    compptr = cinfo->cur_comp_info[ci];
 8007292:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007296:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800729a:	f8d2 0124 	ldr.w	r0, [r2, #292]	@ 0x124
    htest_one_block(cinfo, MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
 800729e:	6959      	ldr	r1, [r3, #20]
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	6943      	ldr	r3, [r0, #20]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80072aa:	9200      	str	r2, [sp, #0]
 80072ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072ae:	6983      	ldr	r3, [r0, #24]
 80072b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80072b4:	f8d3 805c 	ldr.w	r8, [r3, #92]	@ 0x5c
  int Se = cinfo->lim_Se;
 80072b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80072bc:	9302      	str	r3, [sp, #8]
  const int * natural_order = cinfo->natural_order;
 80072be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072c2:	9303      	str	r3, [sp, #12]
  temp = block[0] - last_dc_val;
 80072c4:	9b00      	ldr	r3, [sp, #0]
 80072c6:	f9b3 3000 	ldrsh.w	r3, [r3]
  if (temp < 0)
 80072ca:	1a5d      	subs	r5, r3, r1
 80072cc:	d500      	bpl.n	80072d0 <encode_mcu_gather+0x82>
    temp = -temp;
 80072ce:	1acd      	subs	r5, r1, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 80072d0:	f04f 0900 	mov.w	r9, #0
 80072d4:	e002      	b.n	80072dc <encode_mcu_gather+0x8e>
    nbits++;
 80072d6:	f109 0901 	add.w	r9, r9, #1
    temp >>= 1;
 80072da:	106d      	asrs	r5, r5, #1
  while (temp) {
 80072dc:	2d00      	cmp	r5, #0
 80072de:	d1fa      	bne.n	80072d6 <encode_mcu_gather+0x88>
  if (nbits > MAX_COEF_BITS+1)
 80072e0:	f1b9 0f0b 	cmp.w	r9, #11
 80072e4:	dd07      	ble.n	80072f6 <encode_mcu_gather+0xa8>
    ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	4620      	mov	r0, r4
 80072ea:	9204      	str	r2, [sp, #16]
 80072ec:	2206      	movs	r2, #6
 80072ee:	615a      	str	r2, [r3, #20]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4798      	blx	r3
 80072f4:	9a04      	ldr	r2, [sp, #16]
  dc_counts[nbits]++;
 80072f6:	f852 3029 	ldr.w	r3, [r2, r9, lsl #2]
 80072fa:	3301      	adds	r3, #1
 80072fc:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
  for (k = 1; k <= Se; k++) {
 8007300:	f04f 0901 	mov.w	r9, #1
 8007304:	9b02      	ldr	r3, [sp, #8]
 8007306:	454b      	cmp	r3, r9
 8007308:	da16      	bge.n	8007338 <encode_mcu_gather+0xea>
  if (r > 0)
 800730a:	2d00      	cmp	r5, #0
		    entropy->dc_count_ptrs[compptr->dc_tbl_no],
		    entropy->ac_count_ptrs[compptr->ac_tbl_no]);
    entropy->saved.last_dc_val[ci] = MCU_data[blkn][0][0];
 800730c:	9a01      	ldr	r2, [sp, #4]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800730e:	f10b 0b01 	add.w	fp, fp, #1
    ac_counts[0]++;
 8007312:	bfc2      	ittt	gt
 8007314:	f8d8 3000 	ldrgt.w	r3, [r8]
 8007318:	3301      	addgt	r3, #1
 800731a:	f8c8 3000 	strgt.w	r3, [r8]
    entropy->saved.last_dc_val[ci] = MCU_data[blkn][0][0];
 800731e:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8007322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007326:	6153      	str	r3, [r2, #20]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007328:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
 800732c:	455b      	cmp	r3, fp
 800732e:	dcae      	bgt.n	800728e <encode_mcu_gather+0x40>
  }

  return TRUE;
}
 8007330:	2001      	movs	r0, #1
 8007332:	b007      	add	sp, #28
 8007334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((temp = block[natural_order[k]]) == 0) {
 8007338:	9b03      	ldr	r3, [sp, #12]
 800733a:	9a00      	ldr	r2, [sp, #0]
 800733c:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8007340:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8007344:	b952      	cbnz	r2, 800735c <encode_mcu_gather+0x10e>
      r++;
 8007346:	1c6a      	adds	r2, r5, #1
  for (k = 1; k <= Se; k++) {
 8007348:	f109 0901 	add.w	r9, r9, #1
 800734c:	4615      	mov	r5, r2
 800734e:	e7d9      	b.n	8007304 <encode_mcu_gather+0xb6>
	ac_counts[0xF0]++;
 8007350:	f8d8 33c0 	ldr.w	r3, [r8, #960]	@ 0x3c0
	r -= 16;
 8007354:	3d10      	subs	r5, #16
	ac_counts[0xF0]++;
 8007356:	3301      	adds	r3, #1
 8007358:	f8c8 33c0 	str.w	r3, [r8, #960]	@ 0x3c0
      while (r > 15) {
 800735c:	2d0f      	cmp	r5, #15
 800735e:	dcf7      	bgt.n	8007350 <encode_mcu_gather+0x102>
      if (temp < 0)
 8007360:	2a00      	cmp	r2, #0
 8007362:	f04f 0301 	mov.w	r3, #1
 8007366:	bfb8      	it	lt
 8007368:	4252      	neglt	r2, r2
 800736a:	b292      	uxth	r2, r2
      while ((temp >>= 1))
 800736c:	1052      	asrs	r2, r2, #1
 800736e:	d113      	bne.n	8007398 <encode_mcu_gather+0x14a>
      if (nbits > MAX_COEF_BITS)
 8007370:	2b0a      	cmp	r3, #10
 8007372:	dd09      	ble.n	8007388 <encode_mcu_gather+0x13a>
	ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 8007374:	6821      	ldr	r1, [r4, #0]
 8007376:	4620      	mov	r0, r4
 8007378:	e9cd 3204 	strd	r3, r2, [sp, #16]
 800737c:	2306      	movs	r3, #6
 800737e:	614b      	str	r3, [r1, #20]
 8007380:	6809      	ldr	r1, [r1, #0]
 8007382:	4788      	blx	r1
 8007384:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      ac_counts[(r << 4) + nbits]++;
 8007388:	eb03 1105 	add.w	r1, r3, r5, lsl #4
 800738c:	f858 3021 	ldr.w	r3, [r8, r1, lsl #2]
 8007390:	3301      	adds	r3, #1
 8007392:	f848 3021 	str.w	r3, [r8, r1, lsl #2]
      r = 0;
 8007396:	e7d7      	b.n	8007348 <encode_mcu_gather+0xfa>
	nbits++;
 8007398:	3301      	adds	r3, #1
 800739a:	e7e7      	b.n	800736c <encode_mcu_gather+0x11e>

0800739c <jpeg_make_c_derived_tbl>:
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800739c:	2a03      	cmp	r2, #3
{
 800739e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a2:	4604      	mov	r4, r0
 80073a4:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 80073a8:	4688      	mov	r8, r1
 80073aa:	4615      	mov	r5, r2
 80073ac:	461f      	mov	r7, r3
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 80073ae:	d905      	bls.n	80073bc <jpeg_make_c_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 80073b0:	6803      	ldr	r3, [r0, #0]
 80073b2:	2234      	movs	r2, #52	@ 0x34
 80073b4:	e9c3 2505 	strd	r2, r5, [r3, #20]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 80073bc:	f1b8 0f00 	cmp.w	r8, #0
 80073c0:	d03f      	beq.n	8007442 <jpeg_make_c_derived_tbl+0xa6>
 80073c2:	f105 031e 	add.w	r3, r5, #30
 80073c6:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
  if (htbl == NULL)
 80073ca:	b936      	cbnz	r6, 80073da <jpeg_make_c_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	2234      	movs	r2, #52	@ 0x34
 80073d0:	4620      	mov	r0, r4
 80073d2:	e9c3 2505 	strd	r2, r5, [r3, #20]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4798      	blx	r3
  if (*pdtbl == NULL)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	b93b      	cbnz	r3, 80073ee <jpeg_make_c_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80073de:	6863      	ldr	r3, [r4, #4]
 80073e0:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80073e4:	2101      	movs	r1, #1
 80073e6:	4620      	mov	r0, r4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4798      	blx	r3
    *pdtbl = (c_derived_tbl *)
 80073ec:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 80073ee:	f8d7 9000 	ldr.w	r9, [r7]
  for (l = 1; l <= 16; l++) {
 80073f2:	2501      	movs	r5, #1
  p = 0;
 80073f4:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 80073f6:	2209      	movs	r2, #9
    i = (int) htbl->bits[l];
 80073f8:	f816 a005 	ldrb.w	sl, [r6, r5]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 80073fc:	46bb      	mov	fp, r7
 80073fe:	4457      	add	r7, sl
 8007400:	f5b7 7f80 	cmp.w	r7, #256	@ 0x100
 8007404:	dd05      	ble.n	8007412 <jpeg_make_c_derived_tbl+0x76>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	4620      	mov	r0, r4
 800740a:	615a      	str	r2, [r3, #20]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4798      	blx	r3
 8007410:	2209      	movs	r2, #9
 8007412:	f10b 0308 	add.w	r3, fp, #8
 8007416:	446b      	add	r3, sp
    while (i--)
 8007418:	f1ba 0a01 	subs.w	sl, sl, #1
 800741c:	d214      	bcs.n	8007448 <jpeg_make_c_derived_tbl+0xac>
  for (l = 1; l <= 16; l++) {
 800741e:	3501      	adds	r5, #1
 8007420:	2d11      	cmp	r5, #17
 8007422:	d1e9      	bne.n	80073f8 <jpeg_make_c_derived_tbl+0x5c>
  huffsize[p] = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	aa02      	add	r2, sp, #8
      huffcode[p++] = code;
 8007428:	f50d 7b86 	add.w	fp, sp, #268	@ 0x10c
  huffsize[p] = 0;
 800742c:	55d3      	strb	r3, [r2, r7]
  p = 0;
 800742e:	4618      	mov	r0, r3
  si = huffsize[0];
 8007430:	f89d a008 	ldrb.w	sl, [sp, #8]
    if (((INT32) code) >= (((INT32) 1) << si))
 8007434:	2201      	movs	r2, #1
  while (huffsize[p]) {
 8007436:	a902      	add	r1, sp, #8
 8007438:	5c0d      	ldrb	r5, [r1, r0]
 800743a:	b315      	cbz	r5, 8007482 <jpeg_make_c_derived_tbl+0xe6>
 800743c:	4605      	mov	r5, r0
 800743e:	1a1b      	subs	r3, r3, r0
 8007440:	e008      	b.n	8007454 <jpeg_make_c_derived_tbl+0xb8>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 8007442:	f105 0322 	add.w	r3, r5, #34	@ 0x22
 8007446:	e7be      	b.n	80073c6 <jpeg_make_c_derived_tbl+0x2a>
      huffsize[p++] = (char) l;
 8007448:	f803 5b01 	strb.w	r5, [r3], #1
 800744c:	e7e4      	b.n	8007418 <jpeg_make_c_derived_tbl+0x7c>
      huffcode[p++] = code;
 800744e:	f84b 1025 	str.w	r1, [fp, r5, lsl #2]
      code++;
 8007452:	3501      	adds	r5, #1
    while (((int) huffsize[p]) == si) {
 8007454:	a802      	add	r0, sp, #8
 8007456:	18e9      	adds	r1, r5, r3
 8007458:	5d40      	ldrb	r0, [r0, r5]
 800745a:	4550      	cmp	r0, sl
 800745c:	d0f7      	beq.n	800744e <jpeg_make_c_derived_tbl+0xb2>
    if (((INT32) code) >= (((INT32) 1) << si))
 800745e:	fa02 f30a 	lsl.w	r3, r2, sl
 8007462:	428b      	cmp	r3, r1
 8007464:	dc08      	bgt.n	8007478 <jpeg_make_c_derived_tbl+0xdc>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	2009      	movs	r0, #9
 800746a:	9101      	str	r1, [sp, #4]
 800746c:	6158      	str	r0, [r3, #20]
 800746e:	4620      	mov	r0, r4
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4798      	blx	r3
 8007474:	2201      	movs	r2, #1
 8007476:	9901      	ldr	r1, [sp, #4]
 8007478:	4628      	mov	r0, r5
    code <<= 1;
 800747a:	004b      	lsls	r3, r1, #1
    si++;
 800747c:	f10a 0a01 	add.w	sl, sl, #1
 8007480:	e7d9      	b.n	8007436 <jpeg_make_c_derived_tbl+0x9a>
  MEMZERO(dtbl->ehufsi, SIZEOF(dtbl->ehufsi));
 8007482:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007486:	4629      	mov	r1, r5
 8007488:	f509 6080 	add.w	r0, r9, #1024	@ 0x400
 800748c:	3610      	adds	r6, #16
 800748e:	f008 fb0f 	bl	800fab0 <memset>
  maxsymbol = isDC ? 15 : 255;
 8007492:	f1b8 0f00 	cmp.w	r8, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 8007496:	f04f 0209 	mov.w	r2, #9
    dtbl->ehufco[i] = huffcode[p];
 800749a:	a943      	add	r1, sp, #268	@ 0x10c
  maxsymbol = isDC ? 15 : 255;
 800749c:	bf0c      	ite	eq
 800749e:	f04f 0bff 	moveq.w	fp, #255	@ 0xff
 80074a2:	f04f 0b0f 	movne.w	fp, #15
  for (p = 0; p < lastp; p++) {
 80074a6:	42af      	cmp	r7, r5
 80074a8:	dc03      	bgt.n	80074b2 <jpeg_make_c_derived_tbl+0x116>
}
 80074aa:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 80074ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    i = htbl->huffval[p];
 80074b2:	f816 8f01 	ldrb.w	r8, [r6, #1]!
    if (i < 0 || i > maxsymbol || dtbl->ehufsi[i])
 80074b6:	45c3      	cmp	fp, r8
 80074b8:	eb09 0a08 	add.w	sl, r9, r8
 80074bc:	db02      	blt.n	80074c4 <jpeg_make_c_derived_tbl+0x128>
 80074be:	f89a 3400 	ldrb.w	r3, [sl, #1024]	@ 0x400
 80074c2:	b133      	cbz	r3, 80074d2 <jpeg_make_c_derived_tbl+0x136>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	4620      	mov	r0, r4
 80074c8:	615a      	str	r2, [r3, #20]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4798      	blx	r3
 80074ce:	a943      	add	r1, sp, #268	@ 0x10c
 80074d0:	2209      	movs	r2, #9
    dtbl->ehufco[i] = huffcode[p];
 80074d2:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 80074d6:	f849 3028 	str.w	r3, [r9, r8, lsl #2]
    dtbl->ehufsi[i] = huffsize[p];
 80074da:	ab02      	add	r3, sp, #8
 80074dc:	5d5b      	ldrb	r3, [r3, r5]
  for (p = 0; p < lastp; p++) {
 80074de:	3501      	adds	r5, #1
    dtbl->ehufsi[i] = huffsize[p];
 80074e0:	f88a 3400 	strb.w	r3, [sl, #1024]	@ 0x400
  for (p = 0; p < lastp; p++) {
 80074e4:	e7df      	b.n	80074a6 <jpeg_make_c_derived_tbl+0x10a>
	...

080074e8 <start_pass_huff>:
 * just count the Huffman symbols used and generate Huffman code tables.
 */

METHODDEF(void)
start_pass_huff (j_compress_ptr cinfo, boolean gather_statistics)
{
 80074e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (gather_statistics)
    entropy->pub.finish_pass = finish_pass_gather;
 80074ec:	4a56      	ldr	r2, [pc, #344]	@ (8007648 <start_pass_huff+0x160>)
 80074ee:	1e0f      	subs	r7, r1, #0
 80074f0:	4b56      	ldr	r3, [pc, #344]	@ (800764c <start_pass_huff+0x164>)
{
 80074f2:	4604      	mov	r4, r0
    entropy->pub.finish_pass = finish_pass_gather;
 80074f4:	bf18      	it	ne
 80074f6:	4613      	movne	r3, r2
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 80074f8:	f8d0 51a4 	ldr.w	r5, [r0, #420]	@ 0x1a4
  if (gather_statistics)
 80074fc:	60ab      	str	r3, [r5, #8]
  else
    entropy->pub.finish_pass = finish_pass_huff;

  if (cinfo->progressive_mode) {
 80074fe:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8007502:	2b00      	cmp	r3, #0
 8007504:	d035      	beq.n	8007572 <start_pass_huff+0x8a>
    entropy->gather_statistics = gather_statistics;

    /* We assume jcmaster.c already validated the scan parameters. */

    /* Select execution routine */
    if (cinfo->Ah == 0) {
 8007506:	f8d0 2170 	ldr.w	r2, [r0, #368]	@ 0x170
      if (cinfo->Ss == 0)
 800750a:	f8d0 3168 	ldr.w	r3, [r0, #360]	@ 0x168
    entropy->cinfo = cinfo;
 800750e:	67a8      	str	r0, [r5, #120]	@ 0x78
    entropy->gather_statistics = gather_statistics;
 8007510:	66ef      	str	r7, [r5, #108]	@ 0x6c
    if (cinfo->Ah == 0) {
 8007512:	b9e2      	cbnz	r2, 800754e <start_pass_huff+0x66>
      if (cinfo->Ss == 0)
 8007514:	b9cb      	cbnz	r3, 800754a <start_pass_huff+0x62>
	entropy->pub.encode_mcu = encode_mcu_DC_first;
 8007516:	4b4e      	ldr	r3, [pc, #312]	@ (8007650 <start_pass_huff+0x168>)
      else
	entropy->pub.encode_mcu = encode_mcu_AC_first;
 8007518:	606b      	str	r3, [r5, #4]
					MAX_CORR_BITS * SIZEOF(char));
      }
    }

    /* Initialize AC stuff */
    entropy->ac_tbl_no = cinfo->cur_comp_info[0]->ac_tbl_no;
 800751a:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	67eb      	str	r3, [r5, #124]	@ 0x7c
    entropy->EOBRUN = 0;
 8007522:	2300      	movs	r3, #0
    entropy->BE = 0;
 8007524:	e9c5 3320 	strd	r3, r3, [r5, #128]	@ 0x80
 8007528:	f504 7990 	add.w	r9, r4, #288	@ 0x120
    entropy->pub.finish_pass = finish_pass_huff;
 800752c:	f04f 0800 	mov.w	r8, #0
      entropy->pub.encode_mcu = encode_mcu_gather;
    else
      entropy->pub.encode_mcu = encode_mcu_huff;
  }

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8007530:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8007534:	4543      	cmp	r3, r8
 8007536:	dc22      	bgt.n	800757e <start_pass_huff+0x96>
      }
    }
  }

  /* Initialize bit buffer to empty */
  entropy->saved.put_buffer = 0;
 8007538:	2300      	movs	r3, #0
  entropy->saved.put_bits = 0;

  /* Initialize restart stuff */
  entropy->restarts_to_go = cinfo->restart_interval;
 800753a:	f8d4 20ec 	ldr.w	r2, [r4, #236]	@ 0xec
  entropy->saved.put_bits = 0;
 800753e:	e9c5 3303 	strd	r3, r3, [r5, #12]
  entropy->next_restart_num = 0;
 8007542:	e9c5 2309 	strd	r2, r3, [r5, #36]	@ 0x24
}
 8007546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	entropy->pub.encode_mcu = encode_mcu_AC_first;
 800754a:	4b42      	ldr	r3, [pc, #264]	@ (8007654 <start_pass_huff+0x16c>)
 800754c:	e7e4      	b.n	8007518 <start_pass_huff+0x30>
      if (cinfo->Ss == 0)
 800754e:	b90b      	cbnz	r3, 8007554 <start_pass_huff+0x6c>
	entropy->pub.encode_mcu = encode_mcu_DC_refine;
 8007550:	4b41      	ldr	r3, [pc, #260]	@ (8007658 <start_pass_huff+0x170>)
 8007552:	e7e1      	b.n	8007518 <start_pass_huff+0x30>
	entropy->pub.encode_mcu = encode_mcu_AC_refine;
 8007554:	4b41      	ldr	r3, [pc, #260]	@ (800765c <start_pass_huff+0x174>)
 8007556:	606b      	str	r3, [r5, #4]
	if (entropy->bit_buffer == NULL)
 8007558:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1dc      	bne.n	800751a <start_pass_huff+0x32>
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8007560:	6843      	ldr	r3, [r0, #4]
 8007562:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007566:	2101      	movs	r1, #1
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4798      	blx	r3
	  entropy->bit_buffer = (char *)
 800756c:	f8c5 0088 	str.w	r0, [r5, #136]	@ 0x88
 8007570:	e7d3      	b.n	800751a <start_pass_huff+0x32>
    if (gather_statistics)
 8007572:	b117      	cbz	r7, 800757a <start_pass_huff+0x92>
      entropy->pub.encode_mcu = encode_mcu_gather;
 8007574:	4b3a      	ldr	r3, [pc, #232]	@ (8007660 <start_pass_huff+0x178>)
 8007576:	606b      	str	r3, [r5, #4]
 8007578:	e7d6      	b.n	8007528 <start_pass_huff+0x40>
      entropy->pub.encode_mcu = encode_mcu_huff;
 800757a:	4b3a      	ldr	r3, [pc, #232]	@ (8007664 <start_pass_huff+0x17c>)
 800757c:	e7fb      	b.n	8007576 <start_pass_huff+0x8e>
    if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 800757e:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
    compptr = cinfo->cur_comp_info[ci];
 8007582:	f859 af04 	ldr.w	sl, [r9, #4]!
    if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 8007586:	bb33      	cbnz	r3, 80075d6 <start_pass_huff+0xee>
 8007588:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
 800758c:	bb1b      	cbnz	r3, 80075d6 <start_pass_huff+0xee>
      tbl = compptr->dc_tbl_no;
 800758e:	f8da 6014 	ldr.w	r6, [sl, #20]
      if (gather_statistics) {
 8007592:	2f00      	cmp	r7, #0
 8007594:	d043      	beq.n	800761e <start_pass_huff+0x136>
	if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
 8007596:	2e03      	cmp	r6, #3
 8007598:	d906      	bls.n	80075a8 <start_pass_huff+0xc0>
	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	2234      	movs	r2, #52	@ 0x34
 800759e:	4620      	mov	r0, r4
 80075a0:	e9c3 2605 	strd	r2, r6, [r3, #20]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4798      	blx	r3
	if (entropy->dc_count_ptrs[tbl] == NULL)
 80075a8:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80075ac:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 80075ae:	b93b      	cbnz	r3, 80075c0 <start_pass_huff+0xd8>
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80075b0:	6863      	ldr	r3, [r4, #4]
 80075b2:	f240 4204 	movw	r2, #1028	@ 0x404
 80075b6:	2101      	movs	r1, #1
 80075b8:	4620      	mov	r0, r4
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4798      	blx	r3
	  entropy->dc_count_ptrs[tbl] = (long *)
 80075be:	64f0      	str	r0, [r6, #76]	@ 0x4c
	MEMZERO(entropy->dc_count_ptrs[tbl], 257 * SIZEOF(long));
 80075c0:	f240 4204 	movw	r2, #1028	@ 0x404
 80075c4:	2100      	movs	r1, #0
 80075c6:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80075c8:	f008 fa72 	bl	800fab0 <memset>
      entropy->saved.last_dc_val[ci] = 0;
 80075cc:	f105 0314 	add.w	r3, r5, #20
 80075d0:	2200      	movs	r2, #0
 80075d2:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
    if (cinfo->Se) {
 80075d6:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 80075da:	b1eb      	cbz	r3, 8007618 <start_pass_huff+0x130>
      tbl = compptr->ac_tbl_no;
 80075dc:	f8da 6018 	ldr.w	r6, [sl, #24]
      if (gather_statistics) {
 80075e0:	b33f      	cbz	r7, 8007632 <start_pass_huff+0x14a>
	if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
 80075e2:	2e03      	cmp	r6, #3
 80075e4:	d906      	bls.n	80075f4 <start_pass_huff+0x10c>
	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	2234      	movs	r2, #52	@ 0x34
 80075ea:	4620      	mov	r0, r4
 80075ec:	e9c3 2605 	strd	r2, r6, [r3, #20]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4798      	blx	r3
	if (entropy->ac_count_ptrs[tbl] == NULL)
 80075f4:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80075f8:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 80075fa:	b93b      	cbnz	r3, 800760c <start_pass_huff+0x124>
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80075fc:	6863      	ldr	r3, [r4, #4]
 80075fe:	f240 4204 	movw	r2, #1028	@ 0x404
 8007602:	2101      	movs	r1, #1
 8007604:	4620      	mov	r0, r4
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4798      	blx	r3
	  entropy->ac_count_ptrs[tbl] = (long *)
 800760a:	65f0      	str	r0, [r6, #92]	@ 0x5c
	MEMZERO(entropy->ac_count_ptrs[tbl], 257 * SIZEOF(long));
 800760c:	f240 4204 	movw	r2, #1028	@ 0x404
 8007610:	2100      	movs	r1, #0
 8007612:	6df0      	ldr	r0, [r6, #92]	@ 0x5c
 8007614:	f008 fa4c 	bl	800fab0 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8007618:	f108 0801 	add.w	r8, r8, #1
 800761c:	e788      	b.n	8007530 <start_pass_huff+0x48>
	jpeg_make_c_derived_tbl(cinfo, TRUE, tbl,
 800761e:	f106 030b 	add.w	r3, r6, #11
 8007622:	4632      	mov	r2, r6
 8007624:	2101      	movs	r1, #1
 8007626:	4620      	mov	r0, r4
 8007628:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800762c:	f7ff feb6 	bl	800739c <jpeg_make_c_derived_tbl>
 8007630:	e7cc      	b.n	80075cc <start_pass_huff+0xe4>
	jpeg_make_c_derived_tbl(cinfo, FALSE, tbl,
 8007632:	f106 030f 	add.w	r3, r6, #15
 8007636:	4632      	mov	r2, r6
 8007638:	4639      	mov	r1, r7
 800763a:	4620      	mov	r0, r4
 800763c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007640:	f7ff feac 	bl	800739c <jpeg_make_c_derived_tbl>
 8007644:	e7e8      	b.n	8007618 <start_pass_huff+0x130>
 8007646:	bf00      	nop
 8007648:	08007bb1 	.word	0x08007bb1
 800764c:	08007e25 	.word	0x08007e25
 8007650:	08007927 	.word	0x08007927
 8007654:	08007a97 	.word	0x08007a97
 8007658:	08007a1d 	.word	0x08007a1d
 800765c:	08007c99 	.word	0x08007c99
 8007660:	0800724f 	.word	0x0800724f
 8007664:	08006fe3 	.word	0x08006fe3

08007668 <jpeg_gen_optimal_table>:
{
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	f6ad 0d34 	subw	sp, sp, #2100	@ 0x834
 8007670:	4616      	mov	r6, r2
 8007672:	4680      	mov	r8, r0
  MEMZERO(bits, SIZEOF(bits));
 8007674:	2221      	movs	r2, #33	@ 0x21
 8007676:	ac01      	add	r4, sp, #4
  MEMZERO(codesize, SIZEOF(codesize));
 8007678:	ad0a      	add	r5, sp, #40	@ 0x28
{
 800767a:	460f      	mov	r7, r1
    others[i] = -1;		/* init links to empty */
 800767c:	f20d 492c 	addw	r9, sp, #1068	@ 0x42c
  MEMZERO(bits, SIZEOF(bits));
 8007680:	2100      	movs	r1, #0
 8007682:	4620      	mov	r0, r4
 8007684:	f008 fa14 	bl	800fab0 <memset>
  MEMZERO(codesize, SIZEOF(codesize));
 8007688:	f240 4204 	movw	r2, #1028	@ 0x404
 800768c:	2100      	movs	r1, #0
 800768e:	4628      	mov	r0, r5
 8007690:	f008 fa0e 	bl	800fab0 <memset>
    others[i] = -1;		/* init links to empty */
 8007694:	f240 4204 	movw	r2, #1028	@ 0x404
 8007698:	21ff      	movs	r1, #255	@ 0xff
 800769a:	4648      	mov	r0, r9
 800769c:	f008 fa08 	bl	800fab0 <memset>
  freq[256] = 1;		/* make sure 256 has a nonzero count */
 80076a0:	2301      	movs	r3, #1
    v = 1000000000L;
 80076a2:	f8df e168 	ldr.w	lr, [pc, #360]	@ 800780c <jpeg_gen_optimal_table+0x1a4>
    for (i = 0; i <= 256; i++) {
 80076a6:	f240 1001 	movw	r0, #257	@ 0x101
    freq[c2] = 0;
 80076aa:	f04f 0c00 	mov.w	ip, #0
  freq[256] = 1;		/* make sure 256 has a nonzero count */
 80076ae:	f8c6 3400 	str.w	r3, [r6, #1024]	@ 0x400
    v = 1000000000L;
 80076b2:	4671      	mov	r1, lr
    for (i = 0; i <= 256; i++) {
 80076b4:	2300      	movs	r3, #0
    c1 = -1;
 80076b6:	f04f 3aff 	mov.w	sl, #4294967295
      if (freq[i] && freq[i] <= v) {
 80076ba:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80076be:	b11a      	cbz	r2, 80076c8 <jpeg_gen_optimal_table+0x60>
 80076c0:	428a      	cmp	r2, r1
	v = freq[i];
 80076c2:	bfdc      	itt	le
 80076c4:	4611      	movle	r1, r2
	c1 = i;
 80076c6:	469a      	movle	sl, r3
    for (i = 0; i <= 256; i++) {
 80076c8:	3301      	adds	r3, #1
 80076ca:	4283      	cmp	r3, r0
 80076cc:	d1f5      	bne.n	80076ba <jpeg_gen_optimal_table+0x52>
    v = 1000000000L;
 80076ce:	494f      	ldr	r1, [pc, #316]	@ (800780c <jpeg_gen_optimal_table+0x1a4>)
    for (i = 0; i <= 256; i++) {
 80076d0:	2200      	movs	r2, #0
    c2 = -1;
 80076d2:	f04f 33ff 	mov.w	r3, #4294967295
      if (freq[i] && freq[i] <= v && i != c1) {
 80076d6:	f856 b022 	ldr.w	fp, [r6, r2, lsl #2]
 80076da:	f1bb 0f00 	cmp.w	fp, #0
 80076de:	d005      	beq.n	80076ec <jpeg_gen_optimal_table+0x84>
 80076e0:	458b      	cmp	fp, r1
 80076e2:	dc03      	bgt.n	80076ec <jpeg_gen_optimal_table+0x84>
	c2 = i;
 80076e4:	4592      	cmp	sl, r2
 80076e6:	bf1c      	itt	ne
 80076e8:	4659      	movne	r1, fp
 80076ea:	4613      	movne	r3, r2
    for (i = 0; i <= 256; i++) {
 80076ec:	3201      	adds	r2, #1
 80076ee:	4282      	cmp	r2, r0
 80076f0:	d1f1      	bne.n	80076d6 <jpeg_gen_optimal_table+0x6e>
    if (c2 < 0)
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	db24      	blt.n	8007740 <jpeg_gen_optimal_table+0xd8>
    freq[c1] += freq[c2];
 80076f6:	f856 202a 	ldr.w	r2, [r6, sl, lsl #2]
 80076fa:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80076fe:	440a      	add	r2, r1
 8007700:	f846 202a 	str.w	r2, [r6, sl, lsl #2]
    codesize[c1]++;
 8007704:	f855 202a 	ldr.w	r2, [r5, sl, lsl #2]
    freq[c2] = 0;
 8007708:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
    codesize[c1]++;
 800770c:	3201      	adds	r2, #1
 800770e:	f845 202a 	str.w	r2, [r5, sl, lsl #2]
    while (others[c1] >= 0) {
 8007712:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 8007716:	2900      	cmp	r1, #0
 8007718:	da0b      	bge.n	8007732 <jpeg_gen_optimal_table+0xca>
    others[c1] = c2;		/* chain c2 onto c1's tree branch */
 800771a:	f849 302a 	str.w	r3, [r9, sl, lsl #2]
      codesize[c2]++;
 800771e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8007722:	3201      	adds	r2, #1
 8007724:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    while (others[c2] >= 0) {
 8007728:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800772c:	2b00      	cmp	r3, #0
 800772e:	daf6      	bge.n	800771e <jpeg_gen_optimal_table+0xb6>
 8007730:	e7bf      	b.n	80076b2 <jpeg_gen_optimal_table+0x4a>
      codesize[c1]++;
 8007732:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
      c1 = others[c1];
 8007736:	468a      	mov	sl, r1
      codesize[c1]++;
 8007738:	3201      	adds	r2, #1
 800773a:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
 800773e:	e7e8      	b.n	8007712 <jpeg_gen_optimal_table+0xaa>
    if (c2 < 0)
 8007740:	46aa      	mov	sl, r5
  for (i = 0; i <= 256; i++) {
 8007742:	f04f 0900 	mov.w	r9, #0
	ERREXIT(cinfo, JERR_HUFF_CLEN_OVERFLOW);
 8007746:	2228      	movs	r2, #40	@ 0x28
  for (i = 0; i <= 256; i++) {
 8007748:	f240 1b01 	movw	fp, #257	@ 0x101
    if (codesize[i]) {
 800774c:	f85a 6b04 	ldr.w	r6, [sl], #4
 8007750:	b15e      	cbz	r6, 800776a <jpeg_gen_optimal_table+0x102>
      if (codesize[i] > MAX_CLEN)
 8007752:	2e20      	cmp	r6, #32
 8007754:	dd06      	ble.n	8007764 <jpeg_gen_optimal_table+0xfc>
	ERREXIT(cinfo, JERR_HUFF_CLEN_OVERFLOW);
 8007756:	f8d8 3000 	ldr.w	r3, [r8]
 800775a:	4640      	mov	r0, r8
 800775c:	615a      	str	r2, [r3, #20]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4798      	blx	r3
 8007762:	2228      	movs	r2, #40	@ 0x28
      bits[codesize[i]]++;
 8007764:	5da3      	ldrb	r3, [r4, r6]
 8007766:	3301      	adds	r3, #1
 8007768:	55a3      	strb	r3, [r4, r6]
  for (i = 0; i <= 256; i++) {
 800776a:	f109 0901 	add.w	r9, r9, #1
 800776e:	45d9      	cmp	r9, fp
 8007770:	d1ec      	bne.n	800774c <jpeg_gen_optimal_table+0xe4>
 8007772:	ab09      	add	r3, sp, #36	@ 0x24
 8007774:	211e      	movs	r1, #30
 8007776:	e011      	b.n	800779c <jpeg_gen_optimal_table+0x134>
      j = i - 2;		/* find length of new prefix to be used */
 8007778:	460a      	mov	r2, r1
      while (bits[j] == 0)
 800777a:	5ca6      	ldrb	r6, [r4, r2]
 800777c:	2e00      	cmp	r6, #0
 800777e:	d040      	beq.n	8007802 <jpeg_gen_optimal_table+0x19a>
      bits[i] -= 2;		/* remove two symbols */
 8007780:	3802      	subs	r0, #2
      bits[j+1] += 2;		/* two new symbols in this length */
 8007782:	1c56      	adds	r6, r2, #1
      bits[i] -= 2;		/* remove two symbols */
 8007784:	7018      	strb	r0, [r3, #0]
      bits[i-1]++;		/* one goes in this length */
 8007786:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800778a:	3001      	adds	r0, #1
 800778c:	f803 0c01 	strb.w	r0, [r3, #-1]
      bits[j+1] += 2;		/* two new symbols in this length */
 8007790:	5da0      	ldrb	r0, [r4, r6]
 8007792:	3002      	adds	r0, #2
 8007794:	55a0      	strb	r0, [r4, r6]
      bits[j]--;		/* symbol of this length is now a prefix */
 8007796:	5ca0      	ldrb	r0, [r4, r2]
 8007798:	3801      	subs	r0, #1
 800779a:	54a0      	strb	r0, [r4, r2]
    while (bits[i] > 0) {
 800779c:	7818      	ldrb	r0, [r3, #0]
 800779e:	2800      	cmp	r0, #0
 80077a0:	d1ea      	bne.n	8007778 <jpeg_gen_optimal_table+0x110>
  for (i = MAX_CLEN; i > 16; i--) {
 80077a2:	3901      	subs	r1, #1
 80077a4:	3b01      	subs	r3, #1
 80077a6:	290e      	cmp	r1, #14
 80077a8:	d1f8      	bne.n	800779c <jpeg_gen_optimal_table+0x134>
 80077aa:	2310      	movs	r3, #16
  while (bits[i] == 0)		/* find largest codelength still in use */
 80077ac:	5ce2      	ldrb	r2, [r4, r3]
 80077ae:	b352      	cbz	r2, 8007806 <jpeg_gen_optimal_table+0x19e>
  bits[i]--;
 80077b0:	3a01      	subs	r2, #1
  MEMCOPY(htbl->bits, bits, SIZEOF(htbl->bits));
 80077b2:	ae05      	add	r6, sp, #20
  bits[i]--;
 80077b4:	54e2      	strb	r2, [r4, r3]
  MEMCOPY(htbl->bits, bits, SIZEOF(htbl->bits));
 80077b6:	463b      	mov	r3, r7
 80077b8:	4622      	mov	r2, r4
 80077ba:	3308      	adds	r3, #8
 80077bc:	ca03      	ldmia	r2!, {r0, r1}
 80077be:	42b2      	cmp	r2, r6
 80077c0:	f843 0c08 	str.w	r0, [r3, #-8]
 80077c4:	f843 1c04 	str.w	r1, [r3, #-4]
 80077c8:	4614      	mov	r4, r2
 80077ca:	d1f5      	bne.n	80077b8 <jpeg_gen_optimal_table+0x150>
 80077cc:	7812      	ldrb	r2, [r2, #0]
  p = 0;
 80077ce:	2100      	movs	r1, #0
  MEMCOPY(htbl->bits, bits, SIZEOF(htbl->bits));
 80077d0:	701a      	strb	r2, [r3, #0]
  for (i = 1; i <= MAX_CLEN; i++) {
 80077d2:	2201      	movs	r2, #1
    for (j = 0; j <= 255; j++) {
 80077d4:	4628      	mov	r0, r5
 80077d6:	2300      	movs	r3, #0
      if (codesize[j] == i) {
 80077d8:	f850 4b04 	ldr.w	r4, [r0], #4
 80077dc:	4294      	cmp	r4, r2
	htbl->huffval[p] = (UINT8) j;
 80077de:	bf02      	ittt	eq
 80077e0:	187c      	addeq	r4, r7, r1
	p++;
 80077e2:	3101      	addeq	r1, #1
	htbl->huffval[p] = (UINT8) j;
 80077e4:	7463      	strbeq	r3, [r4, #17]
    for (j = 0; j <= 255; j++) {
 80077e6:	3301      	adds	r3, #1
 80077e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ec:	d1f4      	bne.n	80077d8 <jpeg_gen_optimal_table+0x170>
  for (i = 1; i <= MAX_CLEN; i++) {
 80077ee:	3201      	adds	r2, #1
 80077f0:	2a21      	cmp	r2, #33	@ 0x21
 80077f2:	d1ef      	bne.n	80077d4 <jpeg_gen_optimal_table+0x16c>
  htbl->sent_table = FALSE;
 80077f4:	2300      	movs	r3, #0
 80077f6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
}
 80077fa:	f60d 0d34 	addw	sp, sp, #2100	@ 0x834
 80077fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	j--;
 8007802:	3a01      	subs	r2, #1
 8007804:	e7b9      	b.n	800777a <jpeg_gen_optimal_table+0x112>
    i--;
 8007806:	3b01      	subs	r3, #1
 8007808:	e7d0      	b.n	80077ac <jpeg_gen_optimal_table+0x144>
 800780a:	bf00      	nop
 800780c:	3b9aca00 	.word	0x3b9aca00

08007810 <emit_ac_symbol>:
{
 8007810:	b410      	push	{r4}
 8007812:	4614      	mov	r4, r2
  if (entropy->gather_statistics)
 8007814:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
    entropy->ac_count_ptrs[tbl_no][symbol]++;
 8007816:	eb00 0381 	add.w	r3, r0, r1, lsl #2
  if (entropy->gather_statistics)
 800781a:	b142      	cbz	r2, 800782e <emit_ac_symbol+0x1e>
    entropy->ac_count_ptrs[tbl_no][symbol]++;
 800781c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800781e:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8007822:	3301      	adds	r3, #1
 8007824:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8007828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800782c:	4770      	bx	lr
    c_derived_tbl * tbl = entropy->ac_derived_tbls[tbl_no];
 800782e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 8007830:	191a      	adds	r2, r3, r4
 8007832:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
}
 8007836:	f85d 4b04 	ldr.w	r4, [sp], #4
    emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 800783a:	f892 2400 	ldrb.w	r2, [r2, #1024]	@ 0x400
 800783e:	f7ff bb90 	b.w	8006f62 <emit_bits_e>

08007842 <emit_buffered_bits>:
  if (entropy->gather_statistics)
 8007842:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
{
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	4606      	mov	r6, r0
 8007848:	460c      	mov	r4, r1
  if (entropy->gather_statistics)
 800784a:	b913      	cbnz	r3, 8007852 <emit_buffered_bits+0x10>
 800784c:	188d      	adds	r5, r1, r2
  while (nbits > 0) {
 800784e:	42a5      	cmp	r5, r4
 8007850:	d100      	bne.n	8007854 <emit_buffered_bits+0x12>
}
 8007852:	bd70      	pop	{r4, r5, r6, pc}
    emit_bits_e(entropy, (unsigned int) (*bufstart), 1);
 8007854:	2201      	movs	r2, #1
 8007856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800785a:	4630      	mov	r0, r6
 800785c:	f7ff fb81 	bl	8006f62 <emit_bits_e>
    nbits--;
 8007860:	e7f5      	b.n	800784e <emit_buffered_bits+0xc>

08007862 <emit_eobrun>:
{
 8007862:	b538      	push	{r3, r4, r5, lr}
  if (entropy->EOBRUN > 0) {	/* if there is any pending EOBRUN */
 8007864:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
{
 8007868:	4604      	mov	r4, r0
  if (entropy->EOBRUN > 0) {	/* if there is any pending EOBRUN */
 800786a:	b303      	cbz	r3, 80078ae <emit_eobrun+0x4c>
    nbits = 0;
 800786c:	2500      	movs	r5, #0
    while ((temp >>= 1))
 800786e:	105b      	asrs	r3, r3, #1
 8007870:	d11e      	bne.n	80078b0 <emit_eobrun+0x4e>
    if (nbits > 14)
 8007872:	2d0e      	cmp	r5, #14
 8007874:	dd05      	ble.n	8007882 <emit_eobrun+0x20>
      ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 8007876:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8007878:	2229      	movs	r2, #41	@ 0x29
 800787a:	6803      	ldr	r3, [r0, #0]
 800787c:	615a      	str	r2, [r3, #20]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4798      	blx	r3
    emit_ac_symbol(entropy, entropy->ac_tbl_no, nbits << 4);
 8007882:	012a      	lsls	r2, r5, #4
 8007884:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8007886:	4620      	mov	r0, r4
 8007888:	f7ff ffc2 	bl	8007810 <emit_ac_symbol>
    if (nbits)
 800788c:	b12d      	cbz	r5, 800789a <emit_eobrun+0x38>
      emit_bits_e(entropy, entropy->EOBRUN, nbits);
 800788e:	462a      	mov	r2, r5
 8007890:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8007894:	4620      	mov	r0, r4
 8007896:	f7ff fb64 	bl	8006f62 <emit_bits_e>
    entropy->EOBRUN = 0;
 800789a:	2500      	movs	r5, #0
    emit_buffered_bits(entropy, entropy->bit_buffer, entropy->BE);
 800789c:	4620      	mov	r0, r4
 800789e:	e9d4 2121 	ldrd	r2, r1, [r4, #132]	@ 0x84
    entropy->EOBRUN = 0;
 80078a2:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    emit_buffered_bits(entropy, entropy->bit_buffer, entropy->BE);
 80078a6:	f7ff ffcc 	bl	8007842 <emit_buffered_bits>
    entropy->BE = 0;
 80078aa:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 80078ae:	bd38      	pop	{r3, r4, r5, pc}
      nbits++;
 80078b0:	3501      	adds	r5, #1
 80078b2:	e7dc      	b.n	800786e <emit_eobrun+0xc>

080078b4 <emit_restart_e>:
{
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	4604      	mov	r4, r0
 80078b8:	460d      	mov	r5, r1
  emit_eobrun(entropy);
 80078ba:	f7ff ffd2 	bl	8007862 <emit_eobrun>
  if (! entropy->gather_statistics) {
 80078be:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 80078c0:	b9f6      	cbnz	r6, 8007900 <emit_restart_e+0x4c>
  emit_bits_e(entropy, 0x7F, 7); /* fill any partial byte with ones */
 80078c2:	2207      	movs	r2, #7
 80078c4:	217f      	movs	r1, #127	@ 0x7f
 80078c6:	4620      	mov	r0, r4
 80078c8:	f7ff fb4b 	bl	8006f62 <emit_bits_e>
    emit_byte_e(entropy, 0xFF);
 80078cc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	6722      	str	r2, [r4, #112]	@ 0x70
 80078d2:	22ff      	movs	r2, #255	@ 0xff
  entropy->saved.put_bits = 0;
 80078d4:	e9c4 6603 	strd	r6, r6, [r4, #12]
    emit_byte_e(entropy, 0xFF);
 80078d8:	701a      	strb	r2, [r3, #0]
 80078da:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80078dc:	3b01      	subs	r3, #1
 80078de:	6763      	str	r3, [r4, #116]	@ 0x74
 80078e0:	b913      	cbnz	r3, 80078e8 <emit_restart_e+0x34>
 80078e2:	4620      	mov	r0, r4
 80078e4:	f7ff fae7 	bl	8006eb6 <dump_buffer_e>
    emit_byte_e(entropy, JPEG_RST0 + restart_num);
 80078e8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80078ea:	3d30      	subs	r5, #48	@ 0x30
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	6722      	str	r2, [r4, #112]	@ 0x70
 80078f0:	701d      	strb	r5, [r3, #0]
 80078f2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80078f4:	3b01      	subs	r3, #1
 80078f6:	6763      	str	r3, [r4, #116]	@ 0x74
 80078f8:	b913      	cbnz	r3, 8007900 <emit_restart_e+0x4c>
 80078fa:	4620      	mov	r0, r4
 80078fc:	f7ff fadb 	bl	8006eb6 <dump_buffer_e>
  if (entropy->cinfo->Ss == 0) {
 8007900:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8007902:	f8d2 3168 	ldr.w	r3, [r2, #360]	@ 0x168
 8007906:	b953      	cbnz	r3, 800791e <emit_restart_e+0x6a>
    for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
 8007908:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800790c:	3410      	adds	r4, #16
      entropy->saved.last_dc_val[ci] = 0;
 800790e:	4619      	mov	r1, r3
    for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
 8007910:	429a      	cmp	r2, r3
 8007912:	dc00      	bgt.n	8007916 <emit_restart_e+0x62>
}
 8007914:	bd70      	pop	{r4, r5, r6, pc}
    for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
 8007916:	3301      	adds	r3, #1
      entropy->saved.last_dc_val[ci] = 0;
 8007918:	f844 1f04 	str.w	r1, [r4, #4]!
    for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
 800791c:	e7f8      	b.n	8007910 <emit_restart_e+0x5c>
    entropy->EOBRUN = 0;
 800791e:	2300      	movs	r3, #0
    entropy->BE = 0;
 8007920:	e9c4 3320 	strd	r3, r3, [r4, #128]	@ 0x80
}
 8007924:	e7f6      	b.n	8007914 <emit_restart_e+0x60>

08007926 <encode_mcu_DC_first>:
  int Al = cinfo->Al;
 8007926:	f8d0 3174 	ldr.w	r3, [r0, #372]	@ 0x174
{
 800792a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Al = cinfo->Al;
 800792e:	9300      	str	r3, [sp, #0]
{
 8007930:	4605      	mov	r5, r0
  entropy->next_output_byte = cinfo->dest->next_output_byte;
 8007932:	6983      	ldr	r3, [r0, #24]
{
 8007934:	460f      	mov	r7, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007936:	f8d0 41a4 	ldr.w	r4, [r0, #420]	@ 0x1a4
  entropy->next_output_byte = cinfo->dest->next_output_byte;
 800793a:	681a      	ldr	r2, [r3, #0]
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 800793c:	685b      	ldr	r3, [r3, #4]
  entropy->next_output_byte = cinfo->dest->next_output_byte;
 800793e:	6722      	str	r2, [r4, #112]	@ 0x70
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8007940:	6763      	str	r3, [r4, #116]	@ 0x74
  if (cinfo->restart_interval)
 8007942:	f8d0 30ec 	ldr.w	r3, [r0, #236]	@ 0xec
 8007946:	b12b      	cbz	r3, 8007954 <encode_mcu_DC_first+0x2e>
    if (entropy->restarts_to_go == 0)
 8007948:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800794a:	b91b      	cbnz	r3, 8007954 <encode_mcu_DC_first+0x2e>
      emit_restart_e(entropy, entropy->next_restart_num);
 800794c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800794e:	4620      	mov	r0, r4
 8007950:	f7ff ffb0 	bl	80078b4 <emit_restart_e>
 8007954:	f505 789e 	add.w	r8, r5, #316	@ 0x13c
    nbits = 0;
 8007958:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 800795c:	f04f 0b06 	mov.w	fp, #6
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007960:	f8d5 213c 	ldr.w	r2, [r5, #316]	@ 0x13c
 8007964:	4552      	cmp	r2, sl
 8007966:	dc16      	bgt.n	8007996 <encode_mcu_DC_first+0x70>
  cinfo->dest->next_output_byte = entropy->next_output_byte;
 8007968:	69ab      	ldr	r3, [r5, #24]
 800796a:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800796c:	601a      	str	r2, [r3, #0]
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 800796e:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8007970:	605a      	str	r2, [r3, #4]
  if (cinfo->restart_interval) {
 8007972:	f8d5 30ec 	ldr.w	r3, [r5, #236]	@ 0xec
 8007976:	b153      	cbz	r3, 800798e <encode_mcu_DC_first+0x68>
    if (entropy->restarts_to_go == 0) {
 8007978:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800797a:	b92a      	cbnz	r2, 8007988 <encode_mcu_DC_first+0x62>
      entropy->restarts_to_go = cinfo->restart_interval;
 800797c:	6263      	str	r3, [r4, #36]	@ 0x24
      entropy->next_restart_num++;
 800797e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007980:	3301      	adds	r3, #1
      entropy->next_restart_num &= 7;
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	62a3      	str	r3, [r4, #40]	@ 0x28
    entropy->restarts_to_go--;
 8007988:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800798a:	3b01      	subs	r3, #1
 800798c:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800798e:	2001      	movs	r0, #1
 8007990:	b003      	add	sp, #12
 8007992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ci = cinfo->MCU_membership[blkn];
 8007996:	f858 2f04 	ldr.w	r2, [r8, #4]!
    temp2 = IRIGHT_SHIFT((int) ((*block)[0]), Al);
 800799a:	f857 002a 	ldr.w	r0, [r7, sl, lsl #2]
    compptr = cinfo->cur_comp_info[ci];
 800799e:	eb05 0182 	add.w	r1, r5, r2, lsl #2
    temp2 = IRIGHT_SHIFT((int) ((*block)[0]), Al);
 80079a2:	9b00      	ldr	r3, [sp, #0]
 80079a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80079a8:	f9b0 0000 	ldrsh.w	r0, [r0]
    compptr = cinfo->cur_comp_info[ci];
 80079ac:	f8d1 1124 	ldr.w	r1, [r1, #292]	@ 0x124
    temp = temp2 - entropy->saved.last_dc_val[ci];
 80079b0:	6956      	ldr	r6, [r2, #20]
    temp2 = IRIGHT_SHIFT((int) ((*block)[0]), Al);
 80079b2:	4118      	asrs	r0, r3
    entropy->saved.last_dc_val[ci] = temp2;
 80079b4:	6150      	str	r0, [r2, #20]
    if (temp < 0) {
 80079b6:	1b82      	subs	r2, r0, r6
      temp2--;
 80079b8:	bf4a      	itet	mi
 80079ba:	f102 39ff 	addmi.w	r9, r2, #4294967295
    temp2 = temp;
 80079be:	4691      	movpl	r9, r2
      temp = -temp;		/* temp is abs value of input */
 80079c0:	1a32      	submi	r2, r6, r0
    nbits = 0;
 80079c2:	2600      	movs	r6, #0
    while (temp) {
 80079c4:	b9ea      	cbnz	r2, 8007a02 <encode_mcu_DC_first+0xdc>
    if (nbits > MAX_COEF_BITS+1)
 80079c6:	2e0b      	cmp	r6, #11
 80079c8:	dd07      	ble.n	80079da <encode_mcu_DC_first+0xb4>
      ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 80079ca:	682a      	ldr	r2, [r5, #0]
 80079cc:	4628      	mov	r0, r5
 80079ce:	9101      	str	r1, [sp, #4]
 80079d0:	f8c2 b014 	str.w	fp, [r2, #20]
 80079d4:	6812      	ldr	r2, [r2, #0]
 80079d6:	4790      	blx	r2
 80079d8:	9901      	ldr	r1, [sp, #4]
    emit_dc_symbol(entropy, compptr->dc_tbl_no, nbits);
 80079da:	694a      	ldr	r2, [r1, #20]
  if (entropy->gather_statistics)
 80079dc:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
    entropy->dc_count_ptrs[tbl_no][symbol]++;
 80079de:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  if (entropy->gather_statistics)
 80079e2:	b189      	cbz	r1, 8007a08 <encode_mcu_DC_first+0xe2>
    entropy->dc_count_ptrs[tbl_no][symbol]++;
 80079e4:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 80079e6:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
 80079ea:	3201      	adds	r2, #1
 80079ec:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    if (nbits)			/* emit_bits rejects calls with size 0 */
 80079f0:	b126      	cbz	r6, 80079fc <encode_mcu_DC_first+0xd6>
      emit_bits_e(entropy, (unsigned int) temp2, nbits);
 80079f2:	4632      	mov	r2, r6
 80079f4:	4649      	mov	r1, r9
 80079f6:	4620      	mov	r0, r4
 80079f8:	f7ff fab3 	bl	8006f62 <emit_bits_e>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80079fc:	f10a 0a01 	add.w	sl, sl, #1
 8007a00:	e7ae      	b.n	8007960 <encode_mcu_DC_first+0x3a>
      nbits++;
 8007a02:	3601      	adds	r6, #1
      temp >>= 1;
 8007a04:	1052      	asrs	r2, r2, #1
 8007a06:	e7dd      	b.n	80079c4 <encode_mcu_DC_first+0x9e>
    c_derived_tbl * tbl = entropy->dc_derived_tbls[tbl_no];
 8007a08:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
    emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	198a      	adds	r2, r1, r6
 8007a0e:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8007a12:	f892 2400 	ldrb.w	r2, [r2, #1024]	@ 0x400
 8007a16:	f7ff faa4 	bl	8006f62 <emit_bits_e>
 8007a1a:	e7e9      	b.n	80079f0 <encode_mcu_DC_first+0xca>

08007a1c <encode_mcu_DC_refine>:
  entropy->next_output_byte = cinfo->dest->next_output_byte;
 8007a1c:	6983      	ldr	r3, [r0, #24]
{
 8007a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  entropy->next_output_byte = cinfo->dest->next_output_byte;
 8007a22:	681a      	ldr	r2, [r3, #0]
{
 8007a24:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007a26:	f8d0 41a4 	ldr.w	r4, [r0, #420]	@ 0x1a4
{
 8007a2a:	460f      	mov	r7, r1
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8007a2c:	685b      	ldr	r3, [r3, #4]
  int Al = cinfo->Al;
 8007a2e:	f8d0 8174 	ldr.w	r8, [r0, #372]	@ 0x174
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8007a32:	6763      	str	r3, [r4, #116]	@ 0x74
  if (cinfo->restart_interval)
 8007a34:	f8d0 30ec 	ldr.w	r3, [r0, #236]	@ 0xec
  entropy->next_output_byte = cinfo->dest->next_output_byte;
 8007a38:	6722      	str	r2, [r4, #112]	@ 0x70
  if (cinfo->restart_interval)
 8007a3a:	b12b      	cbz	r3, 8007a48 <encode_mcu_DC_refine+0x2c>
    if (entropy->restarts_to_go == 0)
 8007a3c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007a3e:	b91b      	cbnz	r3, 8007a48 <encode_mcu_DC_refine+0x2c>
      emit_restart_e(entropy, entropy->next_restart_num);
 8007a40:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007a42:	4620      	mov	r0, r4
 8007a44:	f7ff ff36 	bl	80078b4 <emit_restart_e>
{
 8007a48:	2600      	movs	r6, #0
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007a4a:	f8d5 313c 	ldr.w	r3, [r5, #316]	@ 0x13c
 8007a4e:	42b3      	cmp	r3, r6
 8007a50:	dc15      	bgt.n	8007a7e <encode_mcu_DC_refine+0x62>
  cinfo->dest->next_output_byte = entropy->next_output_byte;
 8007a52:	69ab      	ldr	r3, [r5, #24]
 8007a54:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8007a56:	601a      	str	r2, [r3, #0]
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 8007a58:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8007a5a:	605a      	str	r2, [r3, #4]
  if (cinfo->restart_interval) {
 8007a5c:	f8d5 30ec 	ldr.w	r3, [r5, #236]	@ 0xec
 8007a60:	b153      	cbz	r3, 8007a78 <encode_mcu_DC_refine+0x5c>
    if (entropy->restarts_to_go == 0) {
 8007a62:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007a64:	b92a      	cbnz	r2, 8007a72 <encode_mcu_DC_refine+0x56>
      entropy->restarts_to_go = cinfo->restart_interval;
 8007a66:	6263      	str	r3, [r4, #36]	@ 0x24
      entropy->next_restart_num++;
 8007a68:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007a6a:	3301      	adds	r3, #1
      entropy->next_restart_num &= 7;
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	62a3      	str	r3, [r4, #40]	@ 0x28
    entropy->restarts_to_go--;
 8007a72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007a74:	3b01      	subs	r3, #1
 8007a76:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8007a78:	2001      	movs	r0, #1
 8007a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp = (*block)[0];
 8007a7e:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    emit_bits_e(entropy, (unsigned int) (temp >> Al), 1);
 8007a82:	2201      	movs	r2, #1
 8007a84:	4620      	mov	r0, r4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007a86:	3601      	adds	r6, #1
    temp = (*block)[0];
 8007a88:	f9b3 1000 	ldrsh.w	r1, [r3]
    emit_bits_e(entropy, (unsigned int) (temp >> Al), 1);
 8007a8c:	fa41 f108 	asr.w	r1, r1, r8
 8007a90:	f7ff fa67 	bl	8006f62 <emit_bits_e>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007a94:	e7d9      	b.n	8007a4a <encode_mcu_DC_refine+0x2e>

08007a96 <encode_mcu_AC_first>:
  entropy->next_output_byte = cinfo->dest->next_output_byte;
 8007a96:	6983      	ldr	r3, [r0, #24]
{
 8007a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  entropy->next_output_byte = cinfo->dest->next_output_byte;
 8007a9c:	681a      	ldr	r2, [r3, #0]
{
 8007a9e:	b085      	sub	sp, #20
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007aa0:	f8d0 41a4 	ldr.w	r4, [r0, #420]	@ 0x1a4
{
 8007aa4:	4606      	mov	r6, r0
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8007aa6:	685b      	ldr	r3, [r3, #4]
{
 8007aa8:	460d      	mov	r5, r1
  entropy->next_output_byte = cinfo->dest->next_output_byte;
 8007aaa:	6722      	str	r2, [r4, #112]	@ 0x70
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8007aac:	6763      	str	r3, [r4, #116]	@ 0x74
  if (cinfo->restart_interval)
 8007aae:	f8d0 30ec 	ldr.w	r3, [r0, #236]	@ 0xec
 8007ab2:	b12b      	cbz	r3, 8007ac0 <encode_mcu_AC_first+0x2a>
    if (entropy->restarts_to_go == 0)
 8007ab4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007ab6:	b91b      	cbnz	r3, 8007ac0 <encode_mcu_AC_first+0x2a>
      emit_restart_e(entropy, entropy->next_restart_num);
 8007ab8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007aba:	4620      	mov	r0, r4
 8007abc:	f7ff fefa 	bl	80078b4 <emit_restart_e>
  Se = cinfo->Se;
 8007ac0:	f8d6 316c 	ldr.w	r3, [r6, #364]	@ 0x16c
  r = 0;			/* r = run length of zeros */
 8007ac4:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 8007ac6:	f8d6 b17c 	ldr.w	fp, [r6, #380]	@ 0x17c
  Se = cinfo->Se;
 8007aca:	9302      	str	r3, [sp, #8]
  Al = cinfo->Al;
 8007acc:	f8d6 3174 	ldr.w	r3, [r6, #372]	@ 0x174
  for (k = cinfo->Ss; k <= Se; k++) {
 8007ad0:	f8d6 8168 	ldr.w	r8, [r6, #360]	@ 0x168
  Al = cinfo->Al;
 8007ad4:	9301      	str	r3, [sp, #4]
  block = MCU_data[0];
 8007ad6:	682b      	ldr	r3, [r5, #0]
 8007ad8:	9303      	str	r3, [sp, #12]
  for (k = cinfo->Ss; k <= Se; k++) {
 8007ada:	9b02      	ldr	r3, [sp, #8]
 8007adc:	4598      	cmp	r8, r3
 8007ade:	dd24      	ble.n	8007b2a <encode_mcu_AC_first+0x94>
  if (r > 0) {			/* If there are trailing zeroes, */
 8007ae0:	2f00      	cmp	r7, #0
 8007ae2:	dd0b      	ble.n	8007afc <encode_mcu_AC_first+0x66>
    entropy->EOBRUN++;		/* count an EOB */
 8007ae4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
    if (entropy->EOBRUN == 0x7FFF)
 8007ae8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
    entropy->EOBRUN++;		/* count an EOB */
 8007aec:	3301      	adds	r3, #1
    if (entropy->EOBRUN == 0x7FFF)
 8007aee:	4293      	cmp	r3, r2
    entropy->EOBRUN++;		/* count an EOB */
 8007af0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    if (entropy->EOBRUN == 0x7FFF)
 8007af4:	d102      	bne.n	8007afc <encode_mcu_AC_first+0x66>
      emit_eobrun(entropy);	/* force it out to avoid overflow */
 8007af6:	4620      	mov	r0, r4
 8007af8:	f7ff feb3 	bl	8007862 <emit_eobrun>
  cinfo->dest->next_output_byte = entropy->next_output_byte;
 8007afc:	69b3      	ldr	r3, [r6, #24]
 8007afe:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8007b00:	601a      	str	r2, [r3, #0]
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 8007b02:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8007b04:	605a      	str	r2, [r3, #4]
  if (cinfo->restart_interval) {
 8007b06:	f8d6 30ec 	ldr.w	r3, [r6, #236]	@ 0xec
 8007b0a:	b153      	cbz	r3, 8007b22 <encode_mcu_AC_first+0x8c>
    if (entropy->restarts_to_go == 0) {
 8007b0c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007b0e:	b92a      	cbnz	r2, 8007b1c <encode_mcu_AC_first+0x86>
      entropy->restarts_to_go = cinfo->restart_interval;
 8007b10:	6263      	str	r3, [r4, #36]	@ 0x24
      entropy->next_restart_num++;
 8007b12:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007b14:	3301      	adds	r3, #1
      entropy->next_restart_num &= 7;
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	62a3      	str	r3, [r4, #40]	@ 0x28
    entropy->restarts_to_go--;
 8007b1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8007b22:	2001      	movs	r0, #1
 8007b24:	b005      	add	sp, #20
 8007b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((temp = (*block)[natural_order[k]]) == 0) {
 8007b2a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8007b2e:	9a03      	ldr	r2, [sp, #12]
 8007b30:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
 8007b34:	2d00      	cmp	r5, #0
 8007b36:	d104      	bne.n	8007b42 <encode_mcu_AC_first+0xac>
      r++;
 8007b38:	1c7d      	adds	r5, r7, #1
  for (k = cinfo->Ss; k <= Se; k++) {
 8007b3a:	f108 0801 	add.w	r8, r8, #1
 8007b3e:	462f      	mov	r7, r5
 8007b40:	e7cb      	b.n	8007ada <encode_mcu_AC_first+0x44>
      temp = -temp;		/* temp is abs value of input */
 8007b42:	bfbb      	ittet	lt
 8007b44:	426d      	neglt	r5, r5
      temp >>= Al;		/* apply the point transform */
 8007b46:	9b01      	ldrlt	r3, [sp, #4]
      temp >>= Al;		/* apply the point transform */
 8007b48:	9b01      	ldrge	r3, [sp, #4]
      temp >>= Al;		/* apply the point transform */
 8007b4a:	411d      	asrlt	r5, r3
      temp >>= Al;		/* apply the point transform */
 8007b4c:	bfaa      	itet	ge
 8007b4e:	411d      	asrge	r5, r3
      temp2 = ~temp;
 8007b50:	ea6f 0a05 	mvnlt.w	sl, r5
      temp2 = temp;
 8007b54:	46aa      	movge	sl, r5
    if (temp == 0) {
 8007b56:	2d00      	cmp	r5, #0
 8007b58:	d0ee      	beq.n	8007b38 <encode_mcu_AC_first+0xa2>
    if (entropy->EOBRUN > 0)
 8007b5a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8007b5e:	b113      	cbz	r3, 8007b66 <encode_mcu_AC_first+0xd0>
      emit_eobrun(entropy);
 8007b60:	4620      	mov	r0, r4
 8007b62:	f7ff fe7e 	bl	8007862 <emit_eobrun>
    while (r > 15) {
 8007b66:	2f0f      	cmp	r7, #15
 8007b68:	dc18      	bgt.n	8007b9c <encode_mcu_AC_first+0x106>
    nbits = 1;			/* there must be at least one 1 bit */
 8007b6a:	f04f 0901 	mov.w	r9, #1
    while ((temp >>= 1))
 8007b6e:	106d      	asrs	r5, r5, #1
 8007b70:	d11b      	bne.n	8007baa <encode_mcu_AC_first+0x114>
    if (nbits > MAX_COEF_BITS)
 8007b72:	f1b9 0f0a 	cmp.w	r9, #10
 8007b76:	dd05      	ble.n	8007b84 <encode_mcu_AC_first+0xee>
      ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 8007b78:	6832      	ldr	r2, [r6, #0]
 8007b7a:	2306      	movs	r3, #6
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	6153      	str	r3, [r2, #20]
 8007b80:	6812      	ldr	r2, [r2, #0]
 8007b82:	4790      	blx	r2
    emit_ac_symbol(entropy, entropy->ac_tbl_no, (r << 4) + nbits);
 8007b84:	eb09 1207 	add.w	r2, r9, r7, lsl #4
 8007b88:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f7ff fe40 	bl	8007810 <emit_ac_symbol>
    emit_bits_e(entropy, (unsigned int) temp2, nbits);
 8007b90:	464a      	mov	r2, r9
 8007b92:	4651      	mov	r1, sl
 8007b94:	4620      	mov	r0, r4
 8007b96:	f7ff f9e4 	bl	8006f62 <emit_bits_e>
    r = 0;			/* reset zero run length */
 8007b9a:	e7ce      	b.n	8007b3a <encode_mcu_AC_first+0xa4>
      emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 8007b9c:	22f0      	movs	r2, #240	@ 0xf0
 8007b9e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8007ba0:	4620      	mov	r0, r4
      r -= 16;
 8007ba2:	3f10      	subs	r7, #16
      emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 8007ba4:	f7ff fe34 	bl	8007810 <emit_ac_symbol>
      r -= 16;
 8007ba8:	e7dd      	b.n	8007b66 <encode_mcu_AC_first+0xd0>
      nbits++;
 8007baa:	f109 0901 	add.w	r9, r9, #1
 8007bae:	e7de      	b.n	8007b6e <encode_mcu_AC_first+0xd8>

08007bb0 <finish_pass_gather>:
  if (cinfo->progressive_mode)
 8007bb0:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
{
 8007bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb8:	4604      	mov	r4, r0
 8007bba:	b089      	sub	sp, #36	@ 0x24
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007bbc:	f8d0 71a4 	ldr.w	r7, [r0, #420]	@ 0x1a4
  if (cinfo->progressive_mode)
 8007bc0:	b113      	cbz	r3, 8007bc8 <finish_pass_gather+0x18>
    emit_eobrun(entropy);
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	f7ff fe4d 	bl	8007862 <emit_eobrun>
  MEMZERO(did_dc, SIZEOF(did_dc));
 8007bc8:	2210      	movs	r2, #16
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4668      	mov	r0, sp
 8007bce:	f504 7890 	add.w	r8, r4, #288	@ 0x120
 8007bd2:	f007 ff6d 	bl	800fab0 <memset>
  MEMZERO(did_ac, SIZEOF(did_ac));
 8007bd6:	2210      	movs	r2, #16
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8007bd8:	2600      	movs	r6, #0
  MEMZERO(did_ac, SIZEOF(did_ac));
 8007bda:	2100      	movs	r1, #0
 8007bdc:	eb0d 0002 	add.w	r0, sp, r2
 8007be0:	f007 ff66 	bl	800fab0 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8007be4:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8007be8:	42b3      	cmp	r3, r6
 8007bea:	dc02      	bgt.n	8007bf2 <finish_pass_gather+0x42>
}
 8007bec:	b009      	add	sp, #36	@ 0x24
 8007bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 8007bf2:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
    compptr = cinfo->cur_comp_info[ci];
 8007bf6:	f858 af04 	ldr.w	sl, [r8, #4]!
    if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 8007bfa:	bb2b      	cbnz	r3, 8007c48 <finish_pass_gather+0x98>
 8007bfc:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
 8007c00:	bb13      	cbnz	r3, 8007c48 <finish_pass_gather+0x98>
      tbl = compptr->dc_tbl_no;
 8007c02:	f8da 5014 	ldr.w	r5, [sl, #20]
      if (! did_dc[tbl]) {
 8007c06:	ab08      	add	r3, sp, #32
 8007c08:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007c0c:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8007c10:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007c14:	b9c3      	cbnz	r3, 8007c48 <finish_pass_gather+0x98>
	if (*htblptr == NULL)
 8007c16:	eb04 0b09 	add.w	fp, r4, r9
 8007c1a:	f8db 3078 	ldr.w	r3, [fp, #120]	@ 0x78
 8007c1e:	b923      	cbnz	r3, 8007c2a <finish_pass_gather+0x7a>
	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 8007c20:	4620      	mov	r0, r4
 8007c22:	f001 fb91 	bl	8009348 <jpeg_alloc_huff_table>
 8007c26:	f8cb 0078 	str.w	r0, [fp, #120]	@ 0x78
	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->dc_count_ptrs[tbl]);
 8007c2a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007c2e:	f8db 1078 	ldr.w	r1, [fp, #120]	@ 0x78
 8007c32:	4620      	mov	r0, r4
 8007c34:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
 8007c36:	f7ff fd17 	bl	8007668 <jpeg_gen_optimal_table>
	did_dc[tbl] = TRUE;
 8007c3a:	f109 0320 	add.w	r3, r9, #32
 8007c3e:	eb0d 0903 	add.w	r9, sp, r3
 8007c42:	2301      	movs	r3, #1
 8007c44:	f849 3c20 	str.w	r3, [r9, #-32]
    if (cinfo->Se) {
 8007c48:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 8007c4c:	b313      	cbz	r3, 8007c94 <finish_pass_gather+0xe4>
      tbl = compptr->ac_tbl_no;
 8007c4e:	f8da 5018 	ldr.w	r5, [sl, #24]
      if (! did_ac[tbl]) {
 8007c52:	ab08      	add	r3, sp, #32
 8007c54:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007c58:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8007c5c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8007c60:	b9c3      	cbnz	r3, 8007c94 <finish_pass_gather+0xe4>
	if (*htblptr == NULL)
 8007c62:	eb04 0a09 	add.w	sl, r4, r9
 8007c66:	f8da 3088 	ldr.w	r3, [sl, #136]	@ 0x88
 8007c6a:	b923      	cbnz	r3, 8007c76 <finish_pass_gather+0xc6>
	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f001 fb6b 	bl	8009348 <jpeg_alloc_huff_table>
 8007c72:	f8ca 0088 	str.w	r0, [sl, #136]	@ 0x88
	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[tbl]);
 8007c76:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007c7a:	f8da 1088 	ldr.w	r1, [sl, #136]	@ 0x88
 8007c7e:	4620      	mov	r0, r4
 8007c80:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8007c82:	f7ff fcf1 	bl	8007668 <jpeg_gen_optimal_table>
	did_ac[tbl] = TRUE;
 8007c86:	f109 0320 	add.w	r3, r9, #32
 8007c8a:	eb0d 0903 	add.w	r9, sp, r3
 8007c8e:	2301      	movs	r3, #1
 8007c90:	f849 3c10 	str.w	r3, [r9, #-16]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8007c94:	3601      	adds	r6, #1
 8007c96:	e7a5      	b.n	8007be4 <finish_pass_gather+0x34>

08007c98 <encode_mcu_AC_refine>:
  entropy->next_output_byte = cinfo->dest->next_output_byte;
 8007c98:	6983      	ldr	r3, [r0, #24]
{
 8007c9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  entropy->next_output_byte = cinfo->dest->next_output_byte;
 8007c9e:	681a      	ldr	r2, [r3, #0]
{
 8007ca0:	b0c5      	sub	sp, #276	@ 0x114
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007ca2:	f8d0 b1a4 	ldr.w	fp, [r0, #420]	@ 0x1a4
{
 8007ca6:	4605      	mov	r5, r0
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8007ca8:	685b      	ldr	r3, [r3, #4]
{
 8007caa:	460e      	mov	r6, r1
  entropy->next_output_byte = cinfo->dest->next_output_byte;
 8007cac:	f8cb 2070 	str.w	r2, [fp, #112]	@ 0x70
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8007cb0:	f8cb 3074 	str.w	r3, [fp, #116]	@ 0x74
  if (cinfo->restart_interval)
 8007cb4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	@ 0xec
 8007cb8:	b13b      	cbz	r3, 8007cca <encode_mcu_AC_refine+0x32>
    if (entropy->restarts_to_go == 0)
 8007cba:	f8db 3024 	ldr.w	r3, [fp, #36]	@ 0x24
 8007cbe:	b923      	cbnz	r3, 8007cca <encode_mcu_AC_refine+0x32>
      emit_restart_e(entropy, entropy->next_restart_num);
 8007cc0:	f8db 1028 	ldr.w	r1, [fp, #40]	@ 0x28
 8007cc4:	4658      	mov	r0, fp
 8007cc6:	f7ff fdf5 	bl	80078b4 <emit_restart_e>
  Se = cinfo->Se;
 8007cca:	f8d5 316c 	ldr.w	r3, [r5, #364]	@ 0x16c
  for (k = cinfo->Ss; k <= Se; k++) {
 8007cce:	f8d5 7168 	ldr.w	r7, [r5, #360]	@ 0x168
  Se = cinfo->Se;
 8007cd2:	9301      	str	r3, [sp, #4]
  block = MCU_data[0];
 8007cd4:	6833      	ldr	r3, [r6, #0]
  for (k = cinfo->Ss; k <= Se; k++) {
 8007cd6:	4639      	mov	r1, r7
  Al = cinfo->Al;
 8007cd8:	f8d5 4174 	ldr.w	r4, [r5, #372]	@ 0x174
  block = MCU_data[0];
 8007cdc:	9302      	str	r3, [sp, #8]
  EOB = 0;
 8007cde:	2300      	movs	r3, #0
  natural_order = cinfo->natural_order;
 8007ce0:	f8d5 a17c 	ldr.w	sl, [r5, #380]	@ 0x17c
  for (k = cinfo->Ss; k <= Se; k++) {
 8007ce4:	9a01      	ldr	r2, [sp, #4]
 8007ce6:	4291      	cmp	r1, r2
 8007ce8:	dd3f      	ble.n	8007d6a <encode_mcu_AC_refine+0xd2>
  BR = 0;			/* BR = count of buffered bits added now */
 8007cea:	2400      	movs	r4, #0
  BR_buffer = entropy->bit_buffer + entropy->BE; /* Append bits to buffer */
 8007cec:	e9db 2121 	ldrd	r2, r1, [fp, #132]	@ 0x84
  r = 0;			/* r = run length of zeros */
 8007cf0:	4626      	mov	r6, r4
  BR_buffer = entropy->bit_buffer + entropy->BE; /* Append bits to buffer */
 8007cf2:	eb01 0802 	add.w	r8, r1, r2
  for (k = cinfo->Ss; k <= Se; k++) {
 8007cf6:	9a01      	ldr	r2, [sp, #4]
 8007cf8:	4297      	cmp	r7, r2
 8007cfa:	dd48      	ble.n	8007d8e <encode_mcu_AC_refine+0xf6>
  if (r > 0 || BR > 0) {	/* If there are trailing zeroes, */
 8007cfc:	2e00      	cmp	r6, #0
 8007cfe:	dc00      	bgt.n	8007d02 <encode_mcu_AC_refine+0x6a>
 8007d00:	b1a4      	cbz	r4, 8007d2c <encode_mcu_AC_refine+0x94>
    entropy->BE += BR;		/* concat my correction bits to older ones */
 8007d02:	f8db 2084 	ldr.w	r2, [fp, #132]	@ 0x84
    entropy->EOBRUN++;		/* count an EOB */
 8007d06:	f8db 3080 	ldr.w	r3, [fp, #128]	@ 0x80
    entropy->BE += BR;		/* concat my correction bits to older ones */
 8007d0a:	4414      	add	r4, r2
    if (entropy->EOBRUN == 0x7FFF || entropy->BE > (MAX_CORR_BITS-DCTSIZE2+1))
 8007d0c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
    entropy->EOBRUN++;		/* count an EOB */
 8007d10:	3301      	adds	r3, #1
    entropy->BE += BR;		/* concat my correction bits to older ones */
 8007d12:	f8cb 4084 	str.w	r4, [fp, #132]	@ 0x84
    if (entropy->EOBRUN == 0x7FFF || entropy->BE > (MAX_CORR_BITS-DCTSIZE2+1))
 8007d16:	4293      	cmp	r3, r2
    entropy->EOBRUN++;		/* count an EOB */
 8007d18:	f8cb 3080 	str.w	r3, [fp, #128]	@ 0x80
    if (entropy->EOBRUN == 0x7FFF || entropy->BE > (MAX_CORR_BITS-DCTSIZE2+1))
 8007d1c:	d003      	beq.n	8007d26 <encode_mcu_AC_refine+0x8e>
 8007d1e:	f240 33a9 	movw	r3, #937	@ 0x3a9
 8007d22:	429c      	cmp	r4, r3
 8007d24:	d902      	bls.n	8007d2c <encode_mcu_AC_refine+0x94>
      emit_eobrun(entropy);
 8007d26:	4658      	mov	r0, fp
 8007d28:	f7ff fd9b 	bl	8007862 <emit_eobrun>
  cinfo->dest->next_output_byte = entropy->next_output_byte;
 8007d2c:	69ab      	ldr	r3, [r5, #24]
 8007d2e:	f8db 2070 	ldr.w	r2, [fp, #112]	@ 0x70
 8007d32:	601a      	str	r2, [r3, #0]
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 8007d34:	f8db 2074 	ldr.w	r2, [fp, #116]	@ 0x74
 8007d38:	605a      	str	r2, [r3, #4]
  if (cinfo->restart_interval) {
 8007d3a:	f8d5 30ec 	ldr.w	r3, [r5, #236]	@ 0xec
 8007d3e:	b183      	cbz	r3, 8007d62 <encode_mcu_AC_refine+0xca>
    if (entropy->restarts_to_go == 0) {
 8007d40:	f8db 2024 	ldr.w	r2, [fp, #36]	@ 0x24
 8007d44:	b942      	cbnz	r2, 8007d58 <encode_mcu_AC_refine+0xc0>
      entropy->restarts_to_go = cinfo->restart_interval;
 8007d46:	f8cb 3024 	str.w	r3, [fp, #36]	@ 0x24
      entropy->next_restart_num++;
 8007d4a:	f8db 3028 	ldr.w	r3, [fp, #40]	@ 0x28
 8007d4e:	3301      	adds	r3, #1
      entropy->next_restart_num &= 7;
 8007d50:	f003 0307 	and.w	r3, r3, #7
 8007d54:	f8cb 3028 	str.w	r3, [fp, #40]	@ 0x28
    entropy->restarts_to_go--;
 8007d58:	f8db 3024 	ldr.w	r3, [fp, #36]	@ 0x24
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	f8cb 3024 	str.w	r3, [fp, #36]	@ 0x24
}
 8007d62:	2001      	movs	r0, #1
 8007d64:	b045      	add	sp, #276	@ 0x114
 8007d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    temp = (*block)[natural_order[k]];
 8007d6a:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
    if (temp < 0)
 8007d6e:	9802      	ldr	r0, [sp, #8]
 8007d70:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
    absvalues[k] = temp;	/* save abs value for main pass */
 8007d74:	a804      	add	r0, sp, #16
    if (temp < 0)
 8007d76:	2a00      	cmp	r2, #0
 8007d78:	bfb8      	it	lt
 8007d7a:	4252      	neglt	r2, r2
 8007d7c:	b292      	uxth	r2, r2
    temp >>= Al;		/* apply the point transform */
 8007d7e:	4122      	asrs	r2, r4
      EOB = k;			/* EOB = index of last newly-nonzero coef */
 8007d80:	2a01      	cmp	r2, #1
 8007d82:	bf08      	it	eq
 8007d84:	460b      	moveq	r3, r1
    absvalues[k] = temp;	/* save abs value for main pass */
 8007d86:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  for (k = cinfo->Ss; k <= Se; k++) {
 8007d8a:	3101      	adds	r1, #1
 8007d8c:	e7aa      	b.n	8007ce4 <encode_mcu_AC_refine+0x4c>
    if ((temp = absvalues[k]) == 0) {
 8007d8e:	aa04      	add	r2, sp, #16
 8007d90:	f852 9027 	ldr.w	r9, [r2, r7, lsl #2]
 8007d94:	f1b9 0f00 	cmp.w	r9, #0
 8007d98:	d118      	bne.n	8007dcc <encode_mcu_AC_refine+0x134>
      r++;
 8007d9a:	3601      	adds	r6, #1
  for (k = cinfo->Ss; k <= Se; k++) {
 8007d9c:	3701      	adds	r7, #1
 8007d9e:	e7aa      	b.n	8007cf6 <encode_mcu_AC_refine+0x5e>
    while (r > 15 && k <= EOB) {
 8007da0:	429f      	cmp	r7, r3
 8007da2:	dc15      	bgt.n	8007dd0 <encode_mcu_AC_refine+0x138>
      emit_eobrun(entropy);
 8007da4:	4658      	mov	r0, fp
 8007da6:	9303      	str	r3, [sp, #12]
 8007da8:	f7ff fd5b 	bl	8007862 <emit_eobrun>
      emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 8007dac:	22f0      	movs	r2, #240	@ 0xf0
 8007dae:	f8db 107c 	ldr.w	r1, [fp, #124]	@ 0x7c
 8007db2:	4658      	mov	r0, fp
 8007db4:	f7ff fd2c 	bl	8007810 <emit_ac_symbol>
      emit_buffered_bits(entropy, BR_buffer, BR);
 8007db8:	4622      	mov	r2, r4
 8007dba:	4641      	mov	r1, r8
 8007dbc:	4658      	mov	r0, fp
 8007dbe:	f7ff fd40 	bl	8007842 <emit_buffered_bits>
      r -= 16;
 8007dc2:	3e10      	subs	r6, #16
      BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
 8007dc4:	f8db 8088 	ldr.w	r8, [fp, #136]	@ 0x88
      BR = 0;
 8007dc8:	2400      	movs	r4, #0
 8007dca:	9b03      	ldr	r3, [sp, #12]
    while (r > 15 && k <= EOB) {
 8007dcc:	2e0f      	cmp	r6, #15
 8007dce:	dce7      	bgt.n	8007da0 <encode_mcu_AC_refine+0x108>
    if (temp > 1) {
 8007dd0:	f1b9 0f01 	cmp.w	r9, #1
 8007dd4:	dc20      	bgt.n	8007e18 <encode_mcu_AC_refine+0x180>
    emit_eobrun(entropy);
 8007dd6:	4658      	mov	r0, fp
 8007dd8:	9303      	str	r3, [sp, #12]
 8007dda:	f7ff fd42 	bl	8007862 <emit_eobrun>
    emit_ac_symbol(entropy, entropy->ac_tbl_no, (r << 4) + 1);
 8007dde:	f8db 107c 	ldr.w	r1, [fp, #124]	@ 0x7c
 8007de2:	0132      	lsls	r2, r6, #4
 8007de4:	4658      	mov	r0, fp
 8007de6:	3201      	adds	r2, #1
 8007de8:	f7ff fd12 	bl	8007810 <emit_ac_symbol>
    temp = ((*block)[natural_order[k]] < 0) ? 0 : 1;
 8007dec:	9b02      	ldr	r3, [sp, #8]
 8007dee:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
    emit_bits_e(entropy, (unsigned int) temp, 1);
 8007df2:	4658      	mov	r0, fp
    temp = ((*block)[natural_order[k]] < 0) ? 0 : 1;
 8007df4:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
    emit_bits_e(entropy, (unsigned int) temp, 1);
 8007df8:	2201      	movs	r2, #1
 8007dfa:	43c9      	mvns	r1, r1
 8007dfc:	0fc9      	lsrs	r1, r1, #31
 8007dfe:	f7ff f8b0 	bl	8006f62 <emit_bits_e>
    emit_buffered_bits(entropy, BR_buffer, BR);
 8007e02:	4622      	mov	r2, r4
    BR = 0;
 8007e04:	2400      	movs	r4, #0
    emit_buffered_bits(entropy, BR_buffer, BR);
 8007e06:	4641      	mov	r1, r8
 8007e08:	4658      	mov	r0, fp
 8007e0a:	f7ff fd1a 	bl	8007842 <emit_buffered_bits>
    r = 0;			/* reset zero run length */
 8007e0e:	4626      	mov	r6, r4
    BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
 8007e10:	f8db 8088 	ldr.w	r8, [fp, #136]	@ 0x88
    r = 0;			/* reset zero run length */
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	e7c1      	b.n	8007d9c <encode_mcu_AC_refine+0x104>
      BR_buffer[BR++] = (char) (temp & 1);
 8007e18:	f009 0901 	and.w	r9, r9, #1
 8007e1c:	f808 9004 	strb.w	r9, [r8, r4]
 8007e20:	3401      	adds	r4, #1
      continue;
 8007e22:	e7bb      	b.n	8007d9c <encode_mcu_AC_refine+0x104>

08007e24 <finish_pass_huff>:
{
 8007e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    entropy->next_output_byte = cinfo->dest->next_output_byte;
 8007e28:	6983      	ldr	r3, [r0, #24]
{
 8007e2a:	b08a      	sub	sp, #40	@ 0x28
  if (cinfo->progressive_mode) {
 8007e2c:	f8d0 8108 	ldr.w	r8, [r0, #264]	@ 0x108
{
 8007e30:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007e32:	f8d0 41a4 	ldr.w	r4, [r0, #420]	@ 0x1a4
    entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8007e36:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (cinfo->progressive_mode) {
 8007e3a:	f1b8 0f00 	cmp.w	r8, #0
 8007e3e:	d014      	beq.n	8007e6a <finish_pass_huff+0x46>
    emit_eobrun(entropy);
 8007e40:	4620      	mov	r0, r4
    entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8007e42:	e9c4 231c 	strd	r2, r3, [r4, #112]	@ 0x70
    emit_eobrun(entropy);
 8007e46:	f7ff fd0c 	bl	8007862 <emit_eobrun>
  emit_bits_e(entropy, 0x7F, 7); /* fill any partial byte with ones */
 8007e4a:	2207      	movs	r2, #7
 8007e4c:	217f      	movs	r1, #127	@ 0x7f
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f7ff f887 	bl	8006f62 <emit_bits_e>
  entropy->saved.put_buffer = 0; /* and reset bit-buffer to empty */
 8007e54:	2300      	movs	r3, #0
    cinfo->dest->next_output_byte = entropy->next_output_byte;
 8007e56:	6f22      	ldr	r2, [r4, #112]	@ 0x70
  entropy->saved.put_bits = 0;
 8007e58:	e9c4 3303 	strd	r3, r3, [r4, #12]
    cinfo->dest->next_output_byte = entropy->next_output_byte;
 8007e5c:	69ab      	ldr	r3, [r5, #24]
 8007e5e:	601a      	str	r2, [r3, #0]
    cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 8007e60:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8007e62:	605a      	str	r2, [r3, #4]
}
 8007e64:	b00a      	add	sp, #40	@ 0x28
 8007e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ASSIGN_STATE(state.cur, entropy->saved);
 8007e6a:	f104 070c 	add.w	r7, r4, #12
 8007e6e:	ae03      	add	r6, sp, #12
    state.cinfo = cinfo;
 8007e70:	9509      	str	r5, [sp, #36]	@ 0x24
 8007e72:	340c      	adds	r4, #12
    state.free_in_buffer = cinfo->dest->free_in_buffer;
 8007e74:	e9cd 2301 	strd	r2, r3, [sp, #4]
    ASSIGN_STATE(state.cur, entropy->saved);
 8007e78:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007e7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007e7c:	e897 0003 	ldmia.w	r7, {r0, r1}
  if (! emit_bits_s(state, 0x7F, 7)) /* fill any partial byte with ones */
 8007e80:	2207      	movs	r2, #7
    ASSIGN_STATE(state.cur, entropy->saved);
 8007e82:	e886 0003 	stmia.w	r6, {r0, r1}
  if (! emit_bits_s(state, 0x7F, 7)) /* fill any partial byte with ones */
 8007e86:	217f      	movs	r1, #127	@ 0x7f
 8007e88:	a801      	add	r0, sp, #4
 8007e8a:	f7ff f826 	bl	8006eda <emit_bits_s>
 8007e8e:	b990      	cbnz	r0, 8007eb6 <finish_pass_huff+0x92>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	2219      	movs	r2, #25
 8007e94:	4628      	mov	r0, r5
 8007e96:	615a      	str	r2, [r3, #20]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4798      	blx	r3
    cinfo->dest->next_output_byte = state.next_output_byte;
 8007e9c:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state.cur);
 8007e9e:	ad03      	add	r5, sp, #12
    cinfo->dest->next_output_byte = state.next_output_byte;
 8007ea0:	9a01      	ldr	r2, [sp, #4]
 8007ea2:	601a      	str	r2, [r3, #0]
    cinfo->dest->free_in_buffer = state.free_in_buffer;
 8007ea4:	9a02      	ldr	r2, [sp, #8]
 8007ea6:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state.cur);
 8007ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eac:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007eb0:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8007eb4:	e7d6      	b.n	8007e64 <finish_pass_huff+0x40>
  state->cur.put_bits = 0;
 8007eb6:	e9cd 8803 	strd	r8, r8, [sp, #12]
  return TRUE;
 8007eba:	e7ef      	b.n	8007e9c <finish_pass_huff+0x78>

08007ebc <jinit_huff_encoder>:
 * Module initialization routine for Huffman entropy encoding.
 */

GLOBAL(void)
jinit_huff_encoder (j_compress_ptr cinfo)
{
 8007ebc:	b538      	push	{r3, r4, r5, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8007ebe:	6843      	ldr	r3, [r0, #4]
 8007ec0:	228c      	movs	r2, #140	@ 0x8c
 8007ec2:	2101      	movs	r1, #1
{
 8007ec4:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4798      	blx	r3
				SIZEOF(huff_entropy_encoder));
  cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
  entropy->pub.start_pass = start_pass_huff;
 8007eca:	4b08      	ldr	r3, [pc, #32]	@ (8007eec <jinit_huff_encoder+0x30>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8007ecc:	4604      	mov	r4, r0
  cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
 8007ece:	f8c5 01a4 	str.w	r0, [r5, #420]	@ 0x1a4

  /* Mark tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 8007ed2:	2240      	movs	r2, #64	@ 0x40
  entropy->pub.start_pass = start_pass_huff;
 8007ed4:	f840 3b2c 	str.w	r3, [r0], #44
    entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 8007ed8:	2100      	movs	r1, #0
 8007eda:	f007 fde9 	bl	800fab0 <memset>
    entropy->dc_count_ptrs[i] = entropy->ac_count_ptrs[i] = NULL;
  }

  if (cinfo->progressive_mode)
 8007ede:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 8007ee2:	b113      	cbz	r3, 8007eea <jinit_huff_encoder+0x2e>
    entropy->bit_buffer = NULL;	/* needed only in AC refinement scan */
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	080074e9 	.word	0x080074e9

08007ef0 <jinit_compress_master>:
 * which modules will be used and give them appropriate initialization calls.
 */

GLOBAL(void)
jinit_compress_master (j_compress_ptr cinfo)
{
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	4604      	mov	r4, r0
  /* Initialize master control (includes parameter checking/processing) */
  jinit_c_master_control(cinfo, FALSE /* full compression */);
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	f001 f827 	bl	8008f48 <jinit_c_master_control>

  /* Preprocessing */
  if (! cinfo->raw_data_in) {
 8007efa:	f8d4 50d0 	ldr.w	r5, [r4, #208]	@ 0xd0
 8007efe:	b94d      	cbnz	r5, 8007f14 <jinit_compress_master+0x24>
    jinit_color_converter(cinfo);
 8007f00:	4620      	mov	r0, r4
 8007f02:	f7fe fc7f 	bl	8006804 <jinit_color_converter>
    jinit_downsampler(cinfo);
 8007f06:	4620      	mov	r0, r4
 8007f08:	f002 f89e 	bl	800a048 <jinit_downsampler>
    jinit_c_prep_controller(cinfo, FALSE /* never need full buffer here */);
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f001 fd94 	bl	8009a3c <jinit_c_prep_controller>
  }
  /* Forward DCT */
  jinit_forward_dct(cinfo);
 8007f14:	4620      	mov	r0, r4
 8007f16:	f7fe ffa5 	bl	8006e64 <jinit_forward_dct>
  /* Entropy encoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code)
 8007f1a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
    jinit_arith_encoder(cinfo);
 8007f1e:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 8007f20:	b1fb      	cbz	r3, 8007f62 <jinit_compress_master+0x72>
    jinit_arith_encoder(cinfo);
 8007f22:	f7fd ffe5 	bl	8005ef0 <jinit_arith_encoder>
  else {
    jinit_huff_encoder(cinfo);
  }

  /* Need a full-image coefficient buffer in any multi-pass mode. */
  jinit_c_coef_controller(cinfo,
 8007f26:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	dc1c      	bgt.n	8007f68 <jinit_compress_master+0x78>
 8007f2e:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
 8007f32:	3900      	subs	r1, #0
 8007f34:	bf18      	it	ne
 8007f36:	2101      	movne	r1, #1
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f7fe fa59 	bl	80063f0 <jinit_c_coef_controller>
		(boolean) (cinfo->num_scans > 1 || cinfo->optimize_coding));
  jinit_c_main_controller(cinfo, FALSE /* never need full buffer here */);
 8007f3e:	2100      	movs	r1, #0
 8007f40:	4620      	mov	r0, r4
 8007f42:	f000 f875 	bl	8008030 <jinit_c_main_controller>

  jinit_marker_writer(cinfo);
 8007f46:	4620      	mov	r0, r4
 8007f48:	f000 fbee 	bl	8008728 <jinit_marker_writer>

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 8007f4c:	6863      	ldr	r3, [r4, #4]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	4798      	blx	r3

  /* Write the datastream header (SOI) immediately.
   * Frame and scan headers are postponed till later.
   * This lets application insert special markers after the SOI.
   */
  (*cinfo->marker->write_file_header) (cinfo);
 8007f54:	f8d4 3194 	ldr.w	r3, [r4, #404]	@ 0x194
 8007f58:	4620      	mov	r0, r4
 8007f5a:	681b      	ldr	r3, [r3, #0]
}
 8007f5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*cinfo->marker->write_file_header) (cinfo);
 8007f60:	4718      	bx	r3
    jinit_huff_encoder(cinfo);
 8007f62:	f7ff ffab 	bl	8007ebc <jinit_huff_encoder>
 8007f66:	e7de      	b.n	8007f26 <jinit_compress_master+0x36>
  jinit_c_coef_controller(cinfo,
 8007f68:	2101      	movs	r1, #1
 8007f6a:	e7e5      	b.n	8007f38 <jinit_compress_master+0x48>

08007f6c <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_compress_ptr cinfo,
			  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
			  JDIMENSION in_rows_avail)
{
 8007f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 8007f70:	f8d0 4188 	ldr.w	r4, [r0, #392]	@ 0x188
{
 8007f74:	b087      	sub	sp, #28
 8007f76:	4605      	mov	r5, r0
 8007f78:	4616      	mov	r6, r2
 8007f7a:	461f      	mov	r7, r3

  while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
    /* Read input data if we haven't filled the main buffer yet */
    if (main->rowgroup_ctr < (JDIMENSION) cinfo->min_DCT_v_scaled_size)
      (*cinfo->prep->pre_process_data) (cinfo,
 8007f7c:	f104 0a0c 	add.w	sl, r4, #12
					input_buf, in_row_ctr, in_rows_avail,
					main->buffer, &main->rowgroup_ctr,
 8007f80:	f104 0818 	add.w	r8, r4, #24
    /* We did finish the row.  Undo our little suspension hack if a previous
     * call suspended; then mark the main buffer empty.
     */
    if (main->suspended) {
      (*in_row_ctr)++;
      main->suspended = FALSE;
 8007f84:	f04f 0900 	mov.w	r9, #0
{
 8007f88:	9105      	str	r1, [sp, #20]
  while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
 8007f8a:	68a1      	ldr	r1, [r4, #8]
 8007f8c:	f8d5 311c 	ldr.w	r3, [r5, #284]	@ 0x11c
 8007f90:	4299      	cmp	r1, r3
 8007f92:	d224      	bcs.n	8007fde <process_data_simple_main+0x72>
    if (main->rowgroup_ctr < (JDIMENSION) cinfo->min_DCT_v_scaled_size)
 8007f94:	f8d5 3118 	ldr.w	r3, [r5, #280]	@ 0x118
 8007f98:	68e1      	ldr	r1, [r4, #12]
 8007f9a:	4299      	cmp	r1, r3
 8007f9c:	d20c      	bcs.n	8007fb8 <process_data_simple_main+0x4c>
      (*cinfo->prep->pre_process_data) (cinfo,
 8007f9e:	f8d5 118c 	ldr.w	r1, [r5, #396]	@ 0x18c
 8007fa2:	4632      	mov	r2, r6
 8007fa4:	f8cd 8000 	str.w	r8, [sp]
 8007fa8:	4628      	mov	r0, r5
 8007faa:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007fae:	463b      	mov	r3, r7
 8007fb0:	f8d1 b004 	ldr.w	fp, [r1, #4]
 8007fb4:	9905      	ldr	r1, [sp, #20]
 8007fb6:	47d8      	blx	fp
    if (main->rowgroup_ctr != (JDIMENSION) cinfo->min_DCT_v_scaled_size)
 8007fb8:	68e1      	ldr	r1, [r4, #12]
 8007fba:	f8d5 3118 	ldr.w	r3, [r5, #280]	@ 0x118
 8007fbe:	4299      	cmp	r1, r3
 8007fc0:	d10d      	bne.n	8007fde <process_data_simple_main+0x72>
    if (! (*cinfo->coef->compress_data) (cinfo, main->buffer)) {
 8007fc2:	f8d5 3190 	ldr.w	r3, [r5, #400]	@ 0x190
 8007fc6:	4641      	mov	r1, r8
 8007fc8:	4628      	mov	r0, r5
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	4798      	blx	r3
 8007fce:	6923      	ldr	r3, [r4, #16]
 8007fd0:	b940      	cbnz	r0, 8007fe4 <process_data_simple_main+0x78>
      if (! main->suspended) {
 8007fd2:	b923      	cbnz	r3, 8007fde <process_data_simple_main+0x72>
	(*in_row_ctr)--;
 8007fd4:	6833      	ldr	r3, [r6, #0]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	6033      	str	r3, [r6, #0]
	main->suspended = TRUE;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	6123      	str	r3, [r4, #16]
    }
    main->rowgroup_ctr = 0;
    main->cur_iMCU_row++;
  }
}
 8007fde:	b007      	add	sp, #28
 8007fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (main->suspended) {
 8007fe4:	b123      	cbz	r3, 8007ff0 <process_data_simple_main+0x84>
      (*in_row_ctr)++;
 8007fe6:	6833      	ldr	r3, [r6, #0]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	6033      	str	r3, [r6, #0]
      main->suspended = FALSE;
 8007fec:	f8c4 9010 	str.w	r9, [r4, #16]
    main->cur_iMCU_row++;
 8007ff0:	68a3      	ldr	r3, [r4, #8]
    main->rowgroup_ctr = 0;
 8007ff2:	f8c4 900c 	str.w	r9, [r4, #12]
    main->cur_iMCU_row++;
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	60a3      	str	r3, [r4, #8]
 8007ffa:	e7c6      	b.n	8007f8a <process_data_simple_main+0x1e>

08007ffc <start_pass_main>:
{
 8007ffc:	b410      	push	{r4}
  if (cinfo->raw_data_in)
 8007ffe:	f8d0 40d0 	ldr.w	r4, [r0, #208]	@ 0xd0
 8008002:	b944      	cbnz	r4, 8008016 <start_pass_main+0x1a>
  my_main_ptr main = (my_main_ptr) cinfo->main;
 8008004:	f8d0 2188 	ldr.w	r2, [r0, #392]	@ 0x188
  main->rowgroup_ctr = 0;
 8008008:	e9c2 4402 	strd	r4, r4, [r2, #8]
  main->suspended = FALSE;
 800800c:	6114      	str	r4, [r2, #16]
  main->pass_mode = pass_mode;	/* save mode for use by process_data */
 800800e:	7511      	strb	r1, [r2, #20]
  switch (pass_mode) {
 8008010:	b921      	cbnz	r1, 800801c <start_pass_main+0x20>
    main->pub.process_data = process_data_simple_main;
 8008012:	4b06      	ldr	r3, [pc, #24]	@ (800802c <start_pass_main+0x30>)
 8008014:	6053      	str	r3, [r2, #4]
}
 8008016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800801a:	4770      	bx	lr
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800801c:	6803      	ldr	r3, [r0, #0]
 800801e:	2203      	movs	r2, #3
}
 8008020:	f85d 4b04 	ldr.w	r4, [sp], #4
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8008024:	615a      	str	r2, [r3, #20]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4718      	bx	r3
 800802a:	bf00      	nop
 800802c:	08007f6d 	.word	0x08007f6d

08008030 <jinit_c_main_controller>:
  my_main_ptr main;
  int ci;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008030:	6843      	ldr	r3, [r0, #4]
 8008032:	2240      	movs	r2, #64	@ 0x40
{
 8008034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008038:	681b      	ldr	r3, [r3, #0]
{
 800803a:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800803c:	2101      	movs	r1, #1
{
 800803e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008040:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_c_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 8008042:	4b15      	ldr	r3, [pc, #84]	@ (8008098 <jinit_c_main_controller+0x68>)
  cinfo->main = (struct jpeg_c_main_controller *) main;
 8008044:	f8c4 0188 	str.w	r0, [r4, #392]	@ 0x188
  main->pub.start_pass = start_pass_main;
 8008048:	6003      	str	r3, [r0, #0]

  /* We don't need to create a buffer in raw-data mode. */
  if (cinfo->raw_data_in)
 800804a:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 800804e:	b973      	cbnz	r3, 800806e <jinit_c_main_controller+0x3e>
    return;

  /* Create the buffer.  It holds downsampled data, so each component
   * may be of a different size.
   */
  if (need_full_buffer) {
 8008050:	b13d      	cbz	r5, 8008062 <jinit_c_main_controller+0x32>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor) * DCTSIZE,
	 (JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
    }
#else
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	2203      	movs	r2, #3
 8008056:	4620      	mov	r0, r4
 8008058:	615a      	str	r2, [r3, #20]
 800805a:	681b      	ldr	r3, [r3, #0]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
	 (JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
    }
  }
}
 800805c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8008060:	4718      	bx	r3
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8008062:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8008064:	f100 0814 	add.w	r8, r0, #20
 8008068:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800806a:	42ab      	cmp	r3, r5
 800806c:	dc01      	bgt.n	8008072 <jinit_c_main_controller+0x42>
}
 800806e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	 (JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
 8008072:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
	 ci++, compptr++) {
 8008074:	3501      	adds	r5, #1
      main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 8008076:	6a71      	ldr	r1, [r6, #36]	@ 0x24
	 ci++, compptr++) {
 8008078:	3658      	adds	r6, #88	@ 0x58
	 (JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
 800807a:	f856 3c4c 	ldr.w	r3, [r6, #-76]
      main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800807e:	f856 2c3c 	ldr.w	r2, [r6, #-60]
 8008082:	6867      	ldr	r7, [r4, #4]
 8008084:	4343      	muls	r3, r0
 8008086:	434a      	muls	r2, r1
 8008088:	4620      	mov	r0, r4
 800808a:	68bf      	ldr	r7, [r7, #8]
 800808c:	2101      	movs	r1, #1
 800808e:	47b8      	blx	r7
 8008090:	f848 0f04 	str.w	r0, [r8, #4]!
	 ci++, compptr++) {
 8008094:	e7e8      	b.n	8008068 <jinit_c_main_controller+0x38>
 8008096:	bf00      	nop
 8008098:	08007ffd 	.word	0x08007ffd

0800809c <emit_byte>:

LOCAL(void)
emit_byte (j_compress_ptr cinfo, int val)
/* Emit a byte */
{
  struct jpeg_destination_mgr * dest = cinfo->dest;
 800809c:	6983      	ldr	r3, [r0, #24]

  *(dest->next_output_byte)++ = (JOCTET) val;
 800809e:	681a      	ldr	r2, [r3, #0]
{
 80080a0:	b570      	push	{r4, r5, r6, lr}
  *(dest->next_output_byte)++ = (JOCTET) val;
 80080a2:	1c55      	adds	r5, r2, #1
{
 80080a4:	4604      	mov	r4, r0
  *(dest->next_output_byte)++ = (JOCTET) val;
 80080a6:	601d      	str	r5, [r3, #0]
 80080a8:	7011      	strb	r1, [r2, #0]
  if (--dest->free_in_buffer == 0) {
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	3a01      	subs	r2, #1
 80080ae:	605a      	str	r2, [r3, #4]
 80080b0:	b952      	cbnz	r2, 80080c8 <emit_byte+0x2c>
    if (! (*dest->empty_output_buffer) (cinfo))
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	4798      	blx	r3
 80080b6:	b938      	cbnz	r0, 80080c8 <emit_byte+0x2c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	2219      	movs	r2, #25
 80080bc:	4620      	mov	r0, r4
 80080be:	615a      	str	r2, [r3, #20]
 80080c0:	681b      	ldr	r3, [r3, #0]
  }
}
 80080c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 80080c6:	4718      	bx	r3
}
 80080c8:	bd70      	pop	{r4, r5, r6, pc}

080080ca <emit_marker>:


LOCAL(void)
emit_marker (j_compress_ptr cinfo, JPEG_MARKER mark)
/* Emit a marker code */
{
 80080ca:	b538      	push	{r3, r4, r5, lr}
 80080cc:	4604      	mov	r4, r0
 80080ce:	460d      	mov	r5, r1
  emit_byte(cinfo, 0xFF);
 80080d0:	21ff      	movs	r1, #255	@ 0xff
 80080d2:	f7ff ffe3 	bl	800809c <emit_byte>
  emit_byte(cinfo, (int) mark);
 80080d6:	4629      	mov	r1, r5
 80080d8:	4620      	mov	r0, r4
}
 80080da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  emit_byte(cinfo, (int) mark);
 80080de:	f7ff bfdd 	b.w	800809c <emit_byte>

080080e2 <write_file_trailer>:
 */

METHODDEF(void)
write_file_trailer (j_compress_ptr cinfo)
{
  emit_marker(cinfo, M_EOI);
 80080e2:	21d9      	movs	r1, #217	@ 0xd9
 80080e4:	f7ff bff1 	b.w	80080ca <emit_marker>

080080e8 <emit_2bytes>:
{
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4605      	mov	r5, r0
 80080ec:	460c      	mov	r4, r1
  emit_byte(cinfo, (value >> 8) & 0xFF);
 80080ee:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80080f2:	f7ff ffd3 	bl	800809c <emit_byte>
  emit_byte(cinfo, value & 0xFF);
 80080f6:	4628      	mov	r0, r5
 80080f8:	b2e1      	uxtb	r1, r4
}
 80080fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  emit_byte(cinfo, value & 0xFF);
 80080fe:	f7ff bfcd 	b.w	800809c <emit_byte>

08008102 <write_marker_header>:
  if (datalen > (unsigned int) 65533)		/* safety check */
 8008102:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8008106:	429a      	cmp	r2, r3
{
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	4604      	mov	r4, r0
 800810c:	460e      	mov	r6, r1
 800810e:	4615      	mov	r5, r2
  if (datalen > (unsigned int) 65533)		/* safety check */
 8008110:	d904      	bls.n	800811c <write_marker_header+0x1a>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 8008112:	6803      	ldr	r3, [r0, #0]
 8008114:	220c      	movs	r2, #12
 8008116:	615a      	str	r2, [r3, #20]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4798      	blx	r3
  emit_marker(cinfo, (JPEG_MARKER) marker);
 800811c:	b2b1      	uxth	r1, r6
 800811e:	4620      	mov	r0, r4
 8008120:	f7ff ffd3 	bl	80080ca <emit_marker>
  emit_2bytes(cinfo, (int) (datalen + 2));	/* total length */
 8008124:	1ca9      	adds	r1, r5, #2
 8008126:	4620      	mov	r0, r4
}
 8008128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  emit_2bytes(cinfo, (int) (datalen + 2));	/* total length */
 800812c:	f7ff bfdc 	b.w	80080e8 <emit_2bytes>

08008130 <emit_dqt>:
  JQUANT_TBL * qtbl = cinfo->quant_tbl_ptrs[index];
 8008130:	f101 0316 	add.w	r3, r1, #22
{
 8008134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  JQUANT_TBL * qtbl = cinfo->quant_tbl_ptrs[index];
 8008138:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
{
 800813c:	4604      	mov	r4, r0
 800813e:	4688      	mov	r8, r1
  if (qtbl == NULL)
 8008140:	b92e      	cbnz	r6, 800814e <emit_dqt+0x1e>
    ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, index);
 8008142:	6803      	ldr	r3, [r0, #0]
 8008144:	2236      	movs	r2, #54	@ 0x36
 8008146:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4798      	blx	r3
  for (i = 0; i <= cinfo->lim_Se; i++) {
 800814e:	2300      	movs	r3, #0
 8008150:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
  prec = 0;
 8008154:	461d      	mov	r5, r3
  for (i = 0; i <= cinfo->lim_Se; i++) {
 8008156:	429a      	cmp	r2, r3
 8008158:	da1d      	bge.n	8008196 <emit_dqt+0x66>
  if (! qtbl->sent_table) {
 800815a:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 800815e:	b9bf      	cbnz	r7, 8008190 <emit_dqt+0x60>
    emit_marker(cinfo, M_DQT);
 8008160:	21db      	movs	r1, #219	@ 0xdb
 8008162:	4620      	mov	r0, r4
 8008164:	f7ff ffb1 	bl	80080ca <emit_marker>
    emit_2bytes(cinfo,
 8008168:	f8d4 1180 	ldr.w	r1, [r4, #384]	@ 0x180
 800816c:	b1fd      	cbz	r5, 80081ae <emit_dqt+0x7e>
      prec ? cinfo->lim_Se * 2 + 2 + 1 + 2 : cinfo->lim_Se + 1 + 1 + 2);
 800816e:	0049      	lsls	r1, r1, #1
    emit_2bytes(cinfo,
 8008170:	3105      	adds	r1, #5
 8008172:	4620      	mov	r0, r4
 8008174:	f7ff ffb8 	bl	80080e8 <emit_2bytes>
    emit_byte(cinfo, index + (prec<<4));
 8008178:	4620      	mov	r0, r4
 800817a:	eb08 1105 	add.w	r1, r8, r5, lsl #4
 800817e:	f7ff ff8d 	bl	800809c <emit_byte>
    for (i = 0; i <= cinfo->lim_Se; i++) {
 8008182:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008186:	42bb      	cmp	r3, r7
 8008188:	da13      	bge.n	80081b2 <emit_dqt+0x82>
    qtbl->sent_table = TRUE;
 800818a:	2301      	movs	r3, #1
 800818c:	f8c6 3080 	str.w	r3, [r6, #128]	@ 0x80
}
 8008190:	4628      	mov	r0, r5
 8008192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (qtbl->quantval[cinfo->natural_order[i]] > 255)
 8008196:	f8d4 117c 	ldr.w	r1, [r4, #380]	@ 0x17c
 800819a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  for (i = 0; i <= cinfo->lim_Se; i++) {
 800819e:	3301      	adds	r3, #1
    if (qtbl->quantval[cinfo->natural_order[i]] > 255)
 80081a0:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
      prec = 1;
 80081a4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80081a8:	bf28      	it	cs
 80081aa:	2501      	movcs	r5, #1
  for (i = 0; i <= cinfo->lim_Se; i++) {
 80081ac:	e7d3      	b.n	8008156 <emit_dqt+0x26>
    emit_2bytes(cinfo,
 80081ae:	3104      	adds	r1, #4
 80081b0:	e7df      	b.n	8008172 <emit_dqt+0x42>
      unsigned int qval = qtbl->quantval[cinfo->natural_order[i]];
 80081b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081b6:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 80081ba:	f836 8013 	ldrh.w	r8, [r6, r3, lsl #1]
      if (prec)
 80081be:	b125      	cbz	r5, 80081ca <emit_dqt+0x9a>
	emit_byte(cinfo, (int) (qval >> 8));
 80081c0:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80081c4:	4620      	mov	r0, r4
 80081c6:	f7ff ff69 	bl	800809c <emit_byte>
      emit_byte(cinfo, (int) (qval & 0xFF));
 80081ca:	fa5f f188 	uxtb.w	r1, r8
 80081ce:	4620      	mov	r0, r4
    for (i = 0; i <= cinfo->lim_Se; i++) {
 80081d0:	3701      	adds	r7, #1
      emit_byte(cinfo, (int) (qval & 0xFF));
 80081d2:	f7ff ff63 	bl	800809c <emit_byte>
    for (i = 0; i <= cinfo->lim_Se; i++) {
 80081d6:	e7d4      	b.n	8008182 <emit_dqt+0x52>

080081d8 <emit_dht>:
{
 80081d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081dc:	4604      	mov	r4, r0
 80081de:	460e      	mov	r6, r1
  if (is_ac) {
 80081e0:	b3ca      	cbz	r2, 8008256 <emit_dht+0x7e>
    htbl = cinfo->ac_huff_tbl_ptrs[index];
 80081e2:	f101 0322 	add.w	r3, r1, #34	@ 0x22
    index += 0x10;		/* output index has AC bit set */
 80081e6:	3610      	adds	r6, #16
    htbl = cinfo->ac_huff_tbl_ptrs[index];
 80081e8:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (htbl == NULL)
 80081ec:	b935      	cbnz	r5, 80081fc <emit_dht+0x24>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, index);
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	2234      	movs	r2, #52	@ 0x34
 80081f2:	4620      	mov	r0, r4
 80081f4:	e9c3 2605 	strd	r2, r6, [r3, #20]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4798      	blx	r3
  if (! htbl->sent_table) {
 80081fc:	f8d5 7114 	ldr.w	r7, [r5, #276]	@ 0x114
 8008200:	bb3f      	cbnz	r7, 8008252 <emit_dht+0x7a>
    emit_marker(cinfo, M_DHT);
 8008202:	21c4      	movs	r1, #196	@ 0xc4
 8008204:	4620      	mov	r0, r4
 8008206:	f7ff ff60 	bl	80080ca <emit_marker>
    for (i = 1; i <= 16; i++)
 800820a:	f105 0810 	add.w	r8, r5, #16
    emit_marker(cinfo, M_DHT);
 800820e:	462b      	mov	r3, r5
      length += htbl->bits[i];
 8008210:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    for (i = 1; i <= 16; i++)
 8008214:	4543      	cmp	r3, r8
      length += htbl->bits[i];
 8008216:	4417      	add	r7, r2
    for (i = 1; i <= 16; i++)
 8008218:	d1fa      	bne.n	8008210 <emit_dht+0x38>
    emit_2bytes(cinfo, length + 2 + 1 + 16);
 800821a:	f107 0113 	add.w	r1, r7, #19
 800821e:	4620      	mov	r0, r4
 8008220:	f7ff ff62 	bl	80080e8 <emit_2bytes>
    emit_byte(cinfo, index);
 8008224:	4631      	mov	r1, r6
 8008226:	462e      	mov	r6, r5
 8008228:	4620      	mov	r0, r4
 800822a:	f7ff ff37 	bl	800809c <emit_byte>
      emit_byte(cinfo, htbl->bits[i]);
 800822e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008232:	4620      	mov	r0, r4
 8008234:	f7ff ff32 	bl	800809c <emit_byte>
    for (i = 1; i <= 16; i++)
 8008238:	4546      	cmp	r6, r8
 800823a:	d1f8      	bne.n	800822e <emit_dht+0x56>
    for (i = 0; i < length; i++)
 800823c:	f06f 080f 	mvn.w	r8, #15
 8008240:	eba8 0805 	sub.w	r8, r8, r5
 8008244:	eb08 0306 	add.w	r3, r8, r6
 8008248:	429f      	cmp	r7, r3
 800824a:	dc09      	bgt.n	8008260 <emit_dht+0x88>
    htbl->sent_table = TRUE;
 800824c:	2301      	movs	r3, #1
 800824e:	f8c5 3114 	str.w	r3, [r5, #276]	@ 0x114
}
 8008252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    htbl = cinfo->dc_huff_tbl_ptrs[index];
 8008256:	f101 031e 	add.w	r3, r1, #30
 800825a:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 800825e:	e7c5      	b.n	80081ec <emit_dht+0x14>
      emit_byte(cinfo, htbl->huffval[i]);
 8008260:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008264:	4620      	mov	r0, r4
 8008266:	f7ff ff19 	bl	800809c <emit_byte>
    for (i = 0; i < length; i++)
 800826a:	e7eb      	b.n	8008244 <emit_dht+0x6c>

0800826c <write_tables_only>:
 * emitted.  Note that all tables will be marked sent_table = TRUE at exit.
 */

METHODDEF(void)
write_tables_only (j_compress_ptr cinfo)
{
 800826c:	b570      	push	{r4, r5, r6, lr}
 800826e:	4604      	mov	r4, r0
  int i;

  emit_marker(cinfo, M_SOI);

  for (i = 0; i < NUM_QUANT_TBLS; i++) {
 8008270:	2500      	movs	r5, #0
  emit_marker(cinfo, M_SOI);
 8008272:	21d8      	movs	r1, #216	@ 0xd8
 8008274:	f104 0654 	add.w	r6, r4, #84	@ 0x54
 8008278:	f7ff ff27 	bl	80080ca <emit_marker>
    if (cinfo->quant_tbl_ptrs[i] != NULL)
 800827c:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8008280:	b11b      	cbz	r3, 800828a <write_tables_only+0x1e>
      (void) emit_dqt(cinfo, i);
 8008282:	4629      	mov	r1, r5
 8008284:	4620      	mov	r0, r4
 8008286:	f7ff ff53 	bl	8008130 <emit_dqt>
  for (i = 0; i < NUM_QUANT_TBLS; i++) {
 800828a:	3501      	adds	r5, #1
 800828c:	2d04      	cmp	r5, #4
 800828e:	d1f5      	bne.n	800827c <write_tables_only+0x10>
  }

  if (! cinfo->arith_code) {
 8008290:	f8d4 50d4 	ldr.w	r5, [r4, #212]	@ 0xd4
 8008294:	b99d      	cbnz	r5, 80082be <write_tables_only+0x52>
 8008296:	f104 0674 	add.w	r6, r4, #116	@ 0x74
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      if (cinfo->dc_huff_tbl_ptrs[i] != NULL)
 800829a:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800829e:	b123      	cbz	r3, 80082aa <write_tables_only+0x3e>
	emit_dht(cinfo, i, FALSE);
 80082a0:	2200      	movs	r2, #0
 80082a2:	4629      	mov	r1, r5
 80082a4:	4620      	mov	r0, r4
 80082a6:	f7ff ff97 	bl	80081d8 <emit_dht>
      if (cinfo->ac_huff_tbl_ptrs[i] != NULL)
 80082aa:	6933      	ldr	r3, [r6, #16]
 80082ac:	b123      	cbz	r3, 80082b8 <write_tables_only+0x4c>
	emit_dht(cinfo, i, TRUE);
 80082ae:	2201      	movs	r2, #1
 80082b0:	4629      	mov	r1, r5
 80082b2:	4620      	mov	r0, r4
 80082b4:	f7ff ff90 	bl	80081d8 <emit_dht>
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
 80082b8:	3501      	adds	r5, #1
 80082ba:	2d04      	cmp	r5, #4
 80082bc:	d1ed      	bne.n	800829a <write_tables_only+0x2e>
    }
  }

  emit_marker(cinfo, M_EOI);
 80082be:	4620      	mov	r0, r4
 80082c0:	21d9      	movs	r1, #217	@ 0xd9
}
 80082c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  emit_marker(cinfo, M_EOI);
 80082c6:	f7ff bf00 	b.w	80080ca <emit_marker>

080082ca <emit_sof>:
{
 80082ca:	b570      	push	{r4, r5, r6, lr}
 80082cc:	4604      	mov	r4, r0
  emit_marker(cinfo, code);
 80082ce:	f7ff fefc 	bl	80080ca <emit_marker>
  emit_2bytes(cinfo, 3 * cinfo->num_components + 2 + 5 + 1); /* length */
 80082d2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80082d4:	4620      	mov	r0, r4
 80082d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80082da:	3108      	adds	r1, #8
 80082dc:	f7ff ff04 	bl	80080e8 <emit_2bytes>
  if ((long) cinfo->jpeg_height > 65535L ||
 80082e0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80082e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082e6:	da03      	bge.n	80082f0 <emit_sof+0x26>
 80082e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082ee:	db08      	blt.n	8008302 <emit_sof+0x38>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) 65535);
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	212a      	movs	r1, #42	@ 0x2a
 80082f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80082f8:	4620      	mov	r0, r4
 80082fa:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4798      	blx	r3
  emit_byte(cinfo, cinfo->data_precision);
 8008302:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008304:	4620      	mov	r0, r4
 8008306:	f7ff fec9 	bl	800809c <emit_byte>
  emit_2bytes(cinfo, (int) cinfo->jpeg_height);
 800830a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800830c:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800830e:	2600      	movs	r6, #0
  emit_2bytes(cinfo, (int) cinfo->jpeg_height);
 8008310:	f7ff feea 	bl	80080e8 <emit_2bytes>
  emit_2bytes(cinfo, (int) cinfo->jpeg_width);
 8008314:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8008316:	4620      	mov	r0, r4
 8008318:	f7ff fee6 	bl	80080e8 <emit_2bytes>
  emit_byte(cinfo, cinfo->num_components);
 800831c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800831e:	4620      	mov	r0, r4
 8008320:	f7ff febc 	bl	800809c <emit_byte>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8008324:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8008326:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008328:	3558      	adds	r5, #88	@ 0x58
 800832a:	42b3      	cmp	r3, r6
 800832c:	dc00      	bgt.n	8008330 <emit_sof+0x66>
}
 800832e:	bd70      	pop	{r4, r5, r6, pc}
    emit_byte(cinfo, compptr->component_id);
 8008330:	f855 1c58 	ldr.w	r1, [r5, #-88]
 8008334:	4620      	mov	r0, r4
 8008336:	f7ff feb1 	bl	800809c <emit_byte>
    emit_byte(cinfo, (compptr->h_samp_factor << 4) + compptr->v_samp_factor);
 800833a:	4620      	mov	r0, r4
       ci++, compptr++) {
 800833c:	3601      	adds	r6, #1
    emit_byte(cinfo, (compptr->h_samp_factor << 4) + compptr->v_samp_factor);
 800833e:	e955 1314 	ldrd	r1, r3, [r5, #-80]	@ 0x50
 8008342:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8008346:	f7ff fea9 	bl	800809c <emit_byte>
    emit_byte(cinfo, compptr->quant_tbl_no);
 800834a:	f855 1c48 	ldr.w	r1, [r5, #-72]
 800834e:	4620      	mov	r0, r4
 8008350:	f7ff fea4 	bl	800809c <emit_byte>
       ci++, compptr++) {
 8008354:	e7e7      	b.n	8008326 <emit_sof+0x5c>

08008356 <write_scan_header>:
{
 8008356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (cinfo->arith_code) {
 800835a:	f8d0 50d4 	ldr.w	r5, [r0, #212]	@ 0xd4
{
 800835e:	b088      	sub	sp, #32
 8008360:	4604      	mov	r4, r0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 8008362:	f8d0 9194 	ldr.w	r9, [r0, #404]	@ 0x194
  if (cinfo->arith_code) {
 8008366:	f500 7690 	add.w	r6, r0, #288	@ 0x120
 800836a:	b9e5      	cbnz	r5, 80083a6 <write_scan_header+0x50>
 800836c:	4637      	mov	r7, r6
    for (i = 0; i < cinfo->comps_in_scan; i++) {
 800836e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8008372:	42ab      	cmp	r3, r5
 8008374:	dd67      	ble.n	8008446 <write_scan_header+0xf0>
      if (cinfo->Ss == 0 && cinfo->Ah == 0)
 8008376:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
      compptr = cinfo->cur_comp_info[i];
 800837a:	f857 8f04 	ldr.w	r8, [r7, #4]!
      if (cinfo->Ss == 0 && cinfo->Ah == 0)
 800837e:	b93b      	cbnz	r3, 8008390 <write_scan_header+0x3a>
 8008380:	f8d4 2170 	ldr.w	r2, [r4, #368]	@ 0x170
 8008384:	b922      	cbnz	r2, 8008390 <write_scan_header+0x3a>
	emit_dht(cinfo, compptr->dc_tbl_no, FALSE);
 8008386:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800838a:	4620      	mov	r0, r4
 800838c:	f7ff ff24 	bl	80081d8 <emit_dht>
      if (cinfo->Se)
 8008390:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 8008394:	b12b      	cbz	r3, 80083a2 <write_scan_header+0x4c>
	emit_dht(cinfo, compptr->ac_tbl_no, TRUE);
 8008396:	2201      	movs	r2, #1
 8008398:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800839c:	4620      	mov	r0, r4
 800839e:	f7ff ff1b 	bl	80081d8 <emit_dht>
    for (i = 0; i < cinfo->comps_in_scan; i++) {
 80083a2:	3501      	adds	r5, #1
 80083a4:	e7e3      	b.n	800836e <write_scan_header+0x18>
    dc_in_use[i] = ac_in_use[i] = 0;
 80083a6:	f10d 0810 	add.w	r8, sp, #16
 80083aa:	2210      	movs	r2, #16
 80083ac:	2100      	movs	r1, #0
      ac_in_use[compptr->ac_tbl_no] = 1;
 80083ae:	2501      	movs	r5, #1
    dc_in_use[i] = ac_in_use[i] = 0;
 80083b0:	4640      	mov	r0, r8
 80083b2:	f007 fb7d 	bl	800fab0 <memset>
 80083b6:	2100      	movs	r1, #0
 80083b8:	2210      	movs	r2, #16
 80083ba:	4668      	mov	r0, sp
 80083bc:	f007 fb78 	bl	800fab0 <memset>
  for (i = 0; i < cinfo->comps_in_scan; i++) {
 80083c0:	f8d4 0120 	ldr.w	r0, [r4, #288]	@ 0x120
 80083c4:	4631      	mov	r1, r6
 80083c6:	2300      	movs	r3, #0
 80083c8:	4283      	cmp	r3, r0
 80083ca:	db7c      	blt.n	80084c6 <write_scan_header+0x170>
 80083cc:	466f      	mov	r7, sp
  length = 0;
 80083ce:	2500      	movs	r5, #0
 80083d0:	4641      	mov	r1, r8
  for (i = 0; i < cinfo->comps_in_scan; i++) {
 80083d2:	4638      	mov	r0, r7
  for (i = 0; i < NUM_ARITH_TBLS; i++)
 80083d4:	462b      	mov	r3, r5
    length += dc_in_use[i] + ac_in_use[i];
 80083d6:	f810 2b01 	ldrb.w	r2, [r0], #1
  for (i = 0; i < NUM_ARITH_TBLS; i++)
 80083da:	3301      	adds	r3, #1
    length += dc_in_use[i] + ac_in_use[i];
 80083dc:	f811 cb01 	ldrb.w	ip, [r1], #1
  for (i = 0; i < NUM_ARITH_TBLS; i++)
 80083e0:	2b10      	cmp	r3, #16
    length += dc_in_use[i] + ac_in_use[i];
 80083e2:	4462      	add	r2, ip
 80083e4:	4415      	add	r5, r2
  for (i = 0; i < NUM_ARITH_TBLS; i++)
 80083e6:	d1f6      	bne.n	80083d6 <write_scan_header+0x80>
  if (length) {
 80083e8:	b36d      	cbz	r5, 8008446 <write_scan_header+0xf0>
    emit_marker(cinfo, M_DAC);
 80083ea:	21cc      	movs	r1, #204	@ 0xcc
 80083ec:	4620      	mov	r0, r4
 80083ee:	f7ff fe6c 	bl	80080ca <emit_marker>
    emit_2bytes(cinfo, length*2 + 2);
 80083f2:	1c69      	adds	r1, r5, #1
 80083f4:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
    for (i = 0; i < NUM_ARITH_TBLS; i++) {
 80083f8:	2500      	movs	r5, #0
    emit_2bytes(cinfo, length*2 + 2);
 80083fa:	0049      	lsls	r1, r1, #1
 80083fc:	4620      	mov	r0, r4
 80083fe:	f7ff fe73 	bl	80080e8 <emit_2bytes>
      if (dc_in_use[i]) {
 8008402:	f817 3b01 	ldrb.w	r3, [r7], #1
 8008406:	b163      	cbz	r3, 8008422 <write_scan_header+0xcc>
	emit_byte(cinfo, i);
 8008408:	4629      	mov	r1, r5
 800840a:	4620      	mov	r0, r4
 800840c:	f7ff fe46 	bl	800809c <emit_byte>
	emit_byte(cinfo, cinfo->arith_dc_L[i] + (cinfo->arith_dc_U[i]<<4));
 8008410:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8008414:	f89a 3000 	ldrb.w	r3, [sl]
 8008418:	4620      	mov	r0, r4
 800841a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800841e:	f7ff fe3d 	bl	800809c <emit_byte>
      if (ac_in_use[i]) {
 8008422:	f818 3005 	ldrb.w	r3, [r8, r5]
 8008426:	b14b      	cbz	r3, 800843c <write_scan_header+0xe6>
	emit_byte(cinfo, i + 0x10);
 8008428:	f105 0110 	add.w	r1, r5, #16
 800842c:	4620      	mov	r0, r4
 800842e:	f7ff fe35 	bl	800809c <emit_byte>
	emit_byte(cinfo, cinfo->arith_ac_K[i]);
 8008432:	f89a 1020 	ldrb.w	r1, [sl, #32]
 8008436:	4620      	mov	r0, r4
 8008438:	f7ff fe30 	bl	800809c <emit_byte>
    for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800843c:	3501      	adds	r5, #1
 800843e:	f10a 0a01 	add.w	sl, sl, #1
 8008442:	2d10      	cmp	r5, #16
 8008444:	d1dd      	bne.n	8008402 <write_scan_header+0xac>
  if (cinfo->restart_interval != marker->last_restart_interval) {
 8008446:	f8d4 20ec 	ldr.w	r2, [r4, #236]	@ 0xec
 800844a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800844e:	429a      	cmp	r2, r3
 8008450:	d010      	beq.n	8008474 <write_scan_header+0x11e>
  emit_marker(cinfo, M_DRI);
 8008452:	21dd      	movs	r1, #221	@ 0xdd
 8008454:	4620      	mov	r0, r4
 8008456:	f7ff fe38 	bl	80080ca <emit_marker>
  emit_2bytes(cinfo, 4);	/* fixed length */
 800845a:	2104      	movs	r1, #4
 800845c:	4620      	mov	r0, r4
 800845e:	f7ff fe43 	bl	80080e8 <emit_2bytes>
  emit_2bytes(cinfo, (int) cinfo->restart_interval);
 8008462:	f8d4 10ec 	ldr.w	r1, [r4, #236]	@ 0xec
 8008466:	4620      	mov	r0, r4
 8008468:	f7ff fe3e 	bl	80080e8 <emit_2bytes>
    marker->last_restart_interval = cinfo->restart_interval;
 800846c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
 8008470:	f8c9 301c 	str.w	r3, [r9, #28]
  emit_marker(cinfo, M_SOS);
 8008474:	21da      	movs	r1, #218	@ 0xda
 8008476:	4620      	mov	r0, r4
 8008478:	f7ff fe27 	bl	80080ca <emit_marker>
  emit_2bytes(cinfo, 2 * cinfo->comps_in_scan + 2 + 1 + 3); /* length */
 800847c:	f8d4 1120 	ldr.w	r1, [r4, #288]	@ 0x120
 8008480:	4620      	mov	r0, r4
  for (i = 0; i < cinfo->comps_in_scan; i++) {
 8008482:	2500      	movs	r5, #0
  emit_2bytes(cinfo, 2 * cinfo->comps_in_scan + 2 + 1 + 3); /* length */
 8008484:	3103      	adds	r1, #3
 8008486:	0049      	lsls	r1, r1, #1
 8008488:	f7ff fe2e 	bl	80080e8 <emit_2bytes>
  emit_byte(cinfo, cinfo->comps_in_scan);
 800848c:	f8d4 1120 	ldr.w	r1, [r4, #288]	@ 0x120
 8008490:	4620      	mov	r0, r4
 8008492:	f7ff fe03 	bl	800809c <emit_byte>
  for (i = 0; i < cinfo->comps_in_scan; i++) {
 8008496:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 800849a:	429d      	cmp	r5, r3
 800849c:	db2c      	blt.n	80084f8 <write_scan_header+0x1a2>
  emit_byte(cinfo, cinfo->Ss);
 800849e:	f8d4 1168 	ldr.w	r1, [r4, #360]	@ 0x168
 80084a2:	4620      	mov	r0, r4
 80084a4:	f7ff fdfa 	bl	800809c <emit_byte>
  emit_byte(cinfo, cinfo->Se);
 80084a8:	f8d4 116c 	ldr.w	r1, [r4, #364]	@ 0x16c
 80084ac:	4620      	mov	r0, r4
 80084ae:	f7ff fdf5 	bl	800809c <emit_byte>
  emit_byte(cinfo, (cinfo->Ah << 4) + cinfo->Al);
 80084b2:	4620      	mov	r0, r4
 80084b4:	e9d4 135c 	ldrd	r1, r3, [r4, #368]	@ 0x170
 80084b8:	eb03 1101 	add.w	r1, r3, r1, lsl #4
}
 80084bc:	b008      	add	sp, #32
 80084be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  emit_byte(cinfo, (cinfo->Ah << 4) + cinfo->Al);
 80084c2:	f7ff bdeb 	b.w	800809c <emit_byte>
    if (cinfo->Ss == 0 && cinfo->Ah == 0)
 80084c6:	f8d4 2168 	ldr.w	r2, [r4, #360]	@ 0x168
    compptr = cinfo->cur_comp_info[i];
 80084ca:	f851 7f04 	ldr.w	r7, [r1, #4]!
    if (cinfo->Ss == 0 && cinfo->Ah == 0)
 80084ce:	b94a      	cbnz	r2, 80084e4 <write_scan_header+0x18e>
 80084d0:	f8d4 2170 	ldr.w	r2, [r4, #368]	@ 0x170
 80084d4:	b932      	cbnz	r2, 80084e4 <write_scan_header+0x18e>
      dc_in_use[compptr->dc_tbl_no] = 1;
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	f04f 0c01 	mov.w	ip, #1
 80084dc:	3220      	adds	r2, #32
 80084de:	446a      	add	r2, sp
 80084e0:	f802 cc20 	strb.w	ip, [r2, #-32]
    if (cinfo->Se)
 80084e4:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
 80084e8:	b122      	cbz	r2, 80084f4 <write_scan_header+0x19e>
      ac_in_use[compptr->ac_tbl_no] = 1;
 80084ea:	69ba      	ldr	r2, [r7, #24]
 80084ec:	3220      	adds	r2, #32
 80084ee:	446a      	add	r2, sp
 80084f0:	f802 5c10 	strb.w	r5, [r2, #-16]
  for (i = 0; i < cinfo->comps_in_scan; i++) {
 80084f4:	3301      	adds	r3, #1
 80084f6:	e767      	b.n	80083c8 <write_scan_header+0x72>
    compptr = cinfo->cur_comp_info[i];
 80084f8:	f856 7f04 	ldr.w	r7, [r6, #4]!
    emit_byte(cinfo, compptr->component_id);
 80084fc:	4620      	mov	r0, r4
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	f7ff fdcc 	bl	800809c <emit_byte>
    td = cinfo->Ss == 0 && cinfo->Ah == 0 ? compptr->dc_tbl_no : 0;
 8008504:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 8008508:	b973      	cbnz	r3, 8008528 <write_scan_header+0x1d2>
 800850a:	f8d4 2170 	ldr.w	r2, [r4, #368]	@ 0x170
 800850e:	b902      	cbnz	r2, 8008512 <write_scan_header+0x1bc>
 8008510:	697b      	ldr	r3, [r7, #20]
    ta = cinfo->Se ? compptr->ac_tbl_no : 0;
 8008512:	f8d4 116c 	ldr.w	r1, [r4, #364]	@ 0x16c
 8008516:	b101      	cbz	r1, 800851a <write_scan_header+0x1c4>
 8008518:	69b9      	ldr	r1, [r7, #24]
    emit_byte(cinfo, (td << 4) + ta);
 800851a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800851e:	4620      	mov	r0, r4
  for (i = 0; i < cinfo->comps_in_scan; i++) {
 8008520:	3501      	adds	r5, #1
    emit_byte(cinfo, (td << 4) + ta);
 8008522:	f7ff fdbb 	bl	800809c <emit_byte>
  for (i = 0; i < cinfo->comps_in_scan; i++) {
 8008526:	e7b6      	b.n	8008496 <write_scan_header+0x140>
    td = cinfo->Ss == 0 && cinfo->Ah == 0 ? compptr->dc_tbl_no : 0;
 8008528:	2300      	movs	r3, #0
 800852a:	e7f2      	b.n	8008512 <write_scan_header+0x1bc>

0800852c <write_frame_header>:
{
 800852c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  prec = 0;
 800852e:	2500      	movs	r5, #0
{
 8008530:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8008532:	6d47      	ldr	r7, [r0, #84]	@ 0x54
 8008534:	462e      	mov	r6, r5
 8008536:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8008538:	42b0      	cmp	r0, r6
 800853a:	dc38      	bgt.n	80085ae <write_frame_header+0x82>
  if (cinfo->arith_code || cinfo->progressive_mode ||
 800853c:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8008540:	b91b      	cbnz	r3, 800854a <write_frame_header+0x1e>
 8008542:	f8d4 2108 	ldr.w	r2, [r4, #264]	@ 0x108
 8008546:	2a00      	cmp	r2, #0
 8008548:	d039      	beq.n	80085be <write_frame_header+0x92>
    is_baseline = FALSE;
 800854a:	2300      	movs	r3, #0
  if (cinfo->arith_code) {
 800854c:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
    if (cinfo->progressive_mode)
 8008550:	f8d4 2108 	ldr.w	r2, [r4, #264]	@ 0x108
  if (cinfo->arith_code) {
 8008554:	2900      	cmp	r1, #0
 8008556:	d057      	beq.n	8008608 <write_frame_header+0xdc>
    if (cinfo->progressive_mode)
 8008558:	2a00      	cmp	r2, #0
 800855a:	d053      	beq.n	8008604 <write_frame_header+0xd8>
      emit_sof(cinfo, M_SOF10); /* SOF code for progressive arithmetic */
 800855c:	21ca      	movs	r1, #202	@ 0xca
      emit_sof(cinfo, M_SOF1);	/* SOF code for non-baseline Huffman file */
 800855e:	4620      	mov	r0, r4
 8008560:	f7ff feb3 	bl	80082ca <emit_sof>
  if (cinfo->progressive_mode && cinfo->block_size != DCTSIZE)
 8008564:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8008568:	2b00      	cmp	r3, #0
 800856a:	d055      	beq.n	8008618 <write_frame_header+0xec>
 800856c:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
 8008570:	2b08      	cmp	r3, #8
 8008572:	d051      	beq.n	8008618 <write_frame_header+0xec>
  emit_marker(cinfo, M_SOS);
 8008574:	4620      	mov	r0, r4
 8008576:	21da      	movs	r1, #218	@ 0xda
 8008578:	f7ff fda7 	bl	80080ca <emit_marker>
  emit_2bytes(cinfo, 2 + 1 + 3); /* length */
 800857c:	4620      	mov	r0, r4
 800857e:	2106      	movs	r1, #6
 8008580:	f7ff fdb2 	bl	80080e8 <emit_2bytes>
  emit_byte(cinfo, 0); /* Ns */
 8008584:	4620      	mov	r0, r4
 8008586:	2100      	movs	r1, #0
 8008588:	f7ff fd88 	bl	800809c <emit_byte>
  emit_byte(cinfo, 0); /* Ss */
 800858c:	4620      	mov	r0, r4
 800858e:	2100      	movs	r1, #0
 8008590:	f7ff fd84 	bl	800809c <emit_byte>
  emit_byte(cinfo, cinfo->block_size * cinfo->block_size - 1); /* Se */
 8008594:	f8d4 1178 	ldr.w	r1, [r4, #376]	@ 0x178
 8008598:	4620      	mov	r0, r4
 800859a:	4349      	muls	r1, r1
 800859c:	3901      	subs	r1, #1
 800859e:	f7ff fd7d 	bl	800809c <emit_byte>
  emit_byte(cinfo, 0); /* Ah/Al */
 80085a2:	4620      	mov	r0, r4
 80085a4:	2100      	movs	r1, #0
}
 80085a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  emit_byte(cinfo, 0); /* Ah/Al */
 80085aa:	f7ff bd77 	b.w	800809c <emit_byte>
    prec += emit_dqt(cinfo, compptr->quant_tbl_no);
 80085ae:	6939      	ldr	r1, [r7, #16]
 80085b0:	4620      	mov	r0, r4
 80085b2:	f7ff fdbd 	bl	8008130 <emit_dqt>
       ci++, compptr++) {
 80085b6:	3601      	adds	r6, #1
    prec += emit_dqt(cinfo, compptr->quant_tbl_no);
 80085b8:	4405      	add	r5, r0
       ci++, compptr++) {
 80085ba:	3758      	adds	r7, #88	@ 0x58
 80085bc:	e7bb      	b.n	8008536 <write_frame_header+0xa>
  if (cinfo->arith_code || cinfo->progressive_mode ||
 80085be:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	d1c2      	bne.n	800854a <write_frame_header+0x1e>
      cinfo->data_precision != 8 || cinfo->block_size != DCTSIZE) {
 80085c4:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
 80085c8:	2b08      	cmp	r3, #8
 80085ca:	d1be      	bne.n	800854a <write_frame_header+0x1e>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80085cc:	6d61      	ldr	r1, [r4, #84]	@ 0x54
    is_baseline = TRUE;
 80085ce:	2301      	movs	r3, #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80085d0:	4290      	cmp	r0, r2
 80085d2:	dc0b      	bgt.n	80085ec <write_frame_header+0xc0>
    if (prec && is_baseline) {
 80085d4:	2d00      	cmp	r5, #0
 80085d6:	d0b9      	beq.n	800854c <write_frame_header+0x20>
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d0b6      	beq.n	800854a <write_frame_header+0x1e>
      TRACEMS(cinfo, 0, JTRC_16BIT_TABLES);
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	224d      	movs	r2, #77	@ 0x4d
 80085e0:	2100      	movs	r1, #0
 80085e2:	4620      	mov	r0, r4
 80085e4:	615a      	str	r2, [r3, #20]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	4798      	blx	r3
 80085ea:	e7ae      	b.n	800854a <write_frame_header+0x1e>
      if (compptr->dc_tbl_no > 1 || compptr->ac_tbl_no > 1)
 80085ec:	694e      	ldr	r6, [r1, #20]
 80085ee:	2e01      	cmp	r6, #1
 80085f0:	dc06      	bgt.n	8008600 <write_frame_header+0xd4>
 80085f2:	698e      	ldr	r6, [r1, #24]
	is_baseline = FALSE;
 80085f4:	2e02      	cmp	r6, #2
 80085f6:	bfa8      	it	ge
 80085f8:	2300      	movge	r3, #0
	 ci++, compptr++) {
 80085fa:	3201      	adds	r2, #1
 80085fc:	3158      	adds	r1, #88	@ 0x58
 80085fe:	e7e7      	b.n	80085d0 <write_frame_header+0xa4>
	is_baseline = FALSE;
 8008600:	2300      	movs	r3, #0
 8008602:	e7fa      	b.n	80085fa <write_frame_header+0xce>
      emit_sof(cinfo, M_SOF9);  /* SOF code for sequential arithmetic */
 8008604:	21c9      	movs	r1, #201	@ 0xc9
 8008606:	e7aa      	b.n	800855e <write_frame_header+0x32>
    if (cinfo->progressive_mode)
 8008608:	b10a      	cbz	r2, 800860e <write_frame_header+0xe2>
      emit_sof(cinfo, M_SOF2);	/* SOF code for progressive Huffman */
 800860a:	21c2      	movs	r1, #194	@ 0xc2
 800860c:	e7a7      	b.n	800855e <write_frame_header+0x32>
    else if (is_baseline)
 800860e:	b10b      	cbz	r3, 8008614 <write_frame_header+0xe8>
      emit_sof(cinfo, M_SOF0);	/* SOF code for baseline implementation */
 8008610:	21c0      	movs	r1, #192	@ 0xc0
 8008612:	e7a4      	b.n	800855e <write_frame_header+0x32>
      emit_sof(cinfo, M_SOF1);	/* SOF code for non-baseline Huffman file */
 8008614:	21c1      	movs	r1, #193	@ 0xc1
 8008616:	e7a2      	b.n	800855e <write_frame_header+0x32>
}
 8008618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800861a <write_file_header>:
{
 800861a:	b570      	push	{r4, r5, r6, lr}
 800861c:	4604      	mov	r4, r0
  emit_marker(cinfo, M_SOI);	/* first the SOI */
 800861e:	21d8      	movs	r1, #216	@ 0xd8
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 8008620:	f8d0 6194 	ldr.w	r6, [r0, #404]	@ 0x194
  marker->last_restart_interval = 0;
 8008624:	2500      	movs	r5, #0
  emit_marker(cinfo, M_SOI);	/* first the SOI */
 8008626:	f7ff fd50 	bl	80080ca <emit_marker>
  if (cinfo->write_JFIF_header)	/* next an optional JFIF APP0 */
 800862a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
  marker->last_restart_interval = 0;
 800862e:	61f5      	str	r5, [r6, #28]
  if (cinfo->write_JFIF_header)	/* next an optional JFIF APP0 */
 8008630:	b3e3      	cbz	r3, 80086ac <write_file_header+0x92>
  emit_marker(cinfo, M_APP0);
 8008632:	21e0      	movs	r1, #224	@ 0xe0
 8008634:	4620      	mov	r0, r4
 8008636:	f7ff fd48 	bl	80080ca <emit_marker>
  emit_2bytes(cinfo, 2 + 4 + 1 + 2 + 1 + 2 + 2 + 1 + 1); /* length */
 800863a:	2110      	movs	r1, #16
 800863c:	4620      	mov	r0, r4
 800863e:	f7ff fd53 	bl	80080e8 <emit_2bytes>
  emit_byte(cinfo, 0x4A);	/* Identifier: ASCII "JFIF" */
 8008642:	214a      	movs	r1, #74	@ 0x4a
 8008644:	4620      	mov	r0, r4
 8008646:	f7ff fd29 	bl	800809c <emit_byte>
  emit_byte(cinfo, 0x46);
 800864a:	2146      	movs	r1, #70	@ 0x46
 800864c:	4620      	mov	r0, r4
 800864e:	f7ff fd25 	bl	800809c <emit_byte>
  emit_byte(cinfo, 0x49);
 8008652:	2149      	movs	r1, #73	@ 0x49
 8008654:	4620      	mov	r0, r4
 8008656:	f7ff fd21 	bl	800809c <emit_byte>
  emit_byte(cinfo, 0x46);
 800865a:	2146      	movs	r1, #70	@ 0x46
 800865c:	4620      	mov	r0, r4
 800865e:	f7ff fd1d 	bl	800809c <emit_byte>
  emit_byte(cinfo, 0);
 8008662:	4629      	mov	r1, r5
 8008664:	4620      	mov	r0, r4
 8008666:	f7ff fd19 	bl	800809c <emit_byte>
  emit_byte(cinfo, cinfo->JFIF_major_version); /* Version fields */
 800866a:	f894 10f8 	ldrb.w	r1, [r4, #248]	@ 0xf8
 800866e:	4620      	mov	r0, r4
 8008670:	f7ff fd14 	bl	800809c <emit_byte>
  emit_byte(cinfo, cinfo->JFIF_minor_version);
 8008674:	f894 10f9 	ldrb.w	r1, [r4, #249]	@ 0xf9
 8008678:	4620      	mov	r0, r4
 800867a:	f7ff fd0f 	bl	800809c <emit_byte>
  emit_byte(cinfo, cinfo->density_unit); /* Pixel size information */
 800867e:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 8008682:	4620      	mov	r0, r4
 8008684:	f7ff fd0a 	bl	800809c <emit_byte>
  emit_2bytes(cinfo, (int) cinfo->X_density);
 8008688:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	@ 0xfc
 800868c:	4620      	mov	r0, r4
 800868e:	f7ff fd2b 	bl	80080e8 <emit_2bytes>
  emit_2bytes(cinfo, (int) cinfo->Y_density);
 8008692:	f8b4 10fe 	ldrh.w	r1, [r4, #254]	@ 0xfe
 8008696:	4620      	mov	r0, r4
 8008698:	f7ff fd26 	bl	80080e8 <emit_2bytes>
  emit_byte(cinfo, 0);		/* No thumbnail image */
 800869c:	4629      	mov	r1, r5
 800869e:	4620      	mov	r0, r4
 80086a0:	f7ff fcfc 	bl	800809c <emit_byte>
  emit_byte(cinfo, 0);
 80086a4:	4629      	mov	r1, r5
 80086a6:	4620      	mov	r0, r4
 80086a8:	f7ff fcf8 	bl	800809c <emit_byte>
  if (cinfo->write_Adobe_marker) /* next an optional Adobe APP14 */
 80086ac:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 80086b0:	b3bb      	cbz	r3, 8008722 <write_file_header+0x108>
  emit_marker(cinfo, M_APP14);
 80086b2:	21ee      	movs	r1, #238	@ 0xee
 80086b4:	4620      	mov	r0, r4
 80086b6:	f7ff fd08 	bl	80080ca <emit_marker>
  emit_2bytes(cinfo, 2 + 5 + 2 + 2 + 2 + 1); /* length */
 80086ba:	210e      	movs	r1, #14
 80086bc:	4620      	mov	r0, r4
 80086be:	f7ff fd13 	bl	80080e8 <emit_2bytes>
  emit_byte(cinfo, 0x41);	/* Identifier: ASCII "Adobe" */
 80086c2:	2141      	movs	r1, #65	@ 0x41
 80086c4:	4620      	mov	r0, r4
 80086c6:	f7ff fce9 	bl	800809c <emit_byte>
  emit_byte(cinfo, 0x64);
 80086ca:	2164      	movs	r1, #100	@ 0x64
 80086cc:	4620      	mov	r0, r4
 80086ce:	f7ff fce5 	bl	800809c <emit_byte>
  emit_byte(cinfo, 0x6F);
 80086d2:	216f      	movs	r1, #111	@ 0x6f
 80086d4:	4620      	mov	r0, r4
 80086d6:	f7ff fce1 	bl	800809c <emit_byte>
  emit_byte(cinfo, 0x62);
 80086da:	2162      	movs	r1, #98	@ 0x62
 80086dc:	4620      	mov	r0, r4
 80086de:	f7ff fcdd 	bl	800809c <emit_byte>
  emit_byte(cinfo, 0x65);
 80086e2:	2165      	movs	r1, #101	@ 0x65
 80086e4:	4620      	mov	r0, r4
 80086e6:	f7ff fcd9 	bl	800809c <emit_byte>
  emit_2bytes(cinfo, 100);	/* Version */
 80086ea:	2164      	movs	r1, #100	@ 0x64
 80086ec:	4620      	mov	r0, r4
 80086ee:	f7ff fcfb 	bl	80080e8 <emit_2bytes>
  emit_2bytes(cinfo, 0);	/* Flags0 */
 80086f2:	2100      	movs	r1, #0
 80086f4:	4620      	mov	r0, r4
 80086f6:	f7ff fcf7 	bl	80080e8 <emit_2bytes>
  emit_2bytes(cinfo, 0);	/* Flags1 */
 80086fa:	2100      	movs	r1, #0
 80086fc:	4620      	mov	r0, r4
 80086fe:	f7ff fcf3 	bl	80080e8 <emit_2bytes>
  switch (cinfo->jpeg_color_space) {
 8008702:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8008706:	2b03      	cmp	r3, #3
 8008708:	d003      	beq.n	8008712 <write_file_header+0xf8>
 800870a:	2b05      	cmp	r3, #5
 800870c:	d007      	beq.n	800871e <write_file_header+0x104>
    emit_byte(cinfo, 0);	/* Color transform = 0 */
 800870e:	2100      	movs	r1, #0
 8008710:	e000      	b.n	8008714 <write_file_header+0xfa>
    emit_byte(cinfo, 1);	/* Color transform = 1 */
 8008712:	2101      	movs	r1, #1
    emit_byte(cinfo, 0);	/* Color transform = 0 */
 8008714:	4620      	mov	r0, r4
}
 8008716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    emit_byte(cinfo, 0);	/* Color transform = 0 */
 800871a:	f7ff bcbf 	b.w	800809c <emit_byte>
    emit_byte(cinfo, 2);	/* Color transform = 2 */
 800871e:	2102      	movs	r1, #2
 8008720:	e7f8      	b.n	8008714 <write_file_header+0xfa>
}
 8008722:	bd70      	pop	{r4, r5, r6, pc}

08008724 <write_marker_byte>:
  emit_byte(cinfo, val);
 8008724:	f7ff bcba 	b.w	800809c <emit_byte>

08008728 <jinit_marker_writer>:
{
  my_marker_ptr marker;

  /* Create the subobject */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008728:	6843      	ldr	r3, [r0, #4]
 800872a:	2220      	movs	r2, #32
 800872c:	2101      	movs	r1, #1
 800872e:	681b      	ldr	r3, [r3, #0]
{
 8008730:	b510      	push	{r4, lr}
 8008732:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008734:	4798      	blx	r3
				SIZEOF(my_marker_writer));
  cinfo->marker = (struct jpeg_marker_writer *) marker;
  /* Initialize method pointers */
  marker->pub.write_file_header = write_file_header;
 8008736:	4b09      	ldr	r3, [pc, #36]	@ (800875c <jinit_marker_writer+0x34>)
  cinfo->marker = (struct jpeg_marker_writer *) marker;
 8008738:	f8c4 0194 	str.w	r0, [r4, #404]	@ 0x194
  marker->pub.write_file_header = write_file_header;
 800873c:	6003      	str	r3, [r0, #0]
  marker->pub.write_frame_header = write_frame_header;
 800873e:	4b08      	ldr	r3, [pc, #32]	@ (8008760 <jinit_marker_writer+0x38>)
 8008740:	6043      	str	r3, [r0, #4]
  marker->pub.write_scan_header = write_scan_header;
 8008742:	4b08      	ldr	r3, [pc, #32]	@ (8008764 <jinit_marker_writer+0x3c>)
 8008744:	6083      	str	r3, [r0, #8]
  marker->pub.write_file_trailer = write_file_trailer;
 8008746:	4b08      	ldr	r3, [pc, #32]	@ (8008768 <jinit_marker_writer+0x40>)
 8008748:	60c3      	str	r3, [r0, #12]
  marker->pub.write_tables_only = write_tables_only;
 800874a:	4b08      	ldr	r3, [pc, #32]	@ (800876c <jinit_marker_writer+0x44>)
 800874c:	6103      	str	r3, [r0, #16]
  marker->pub.write_marker_header = write_marker_header;
 800874e:	4b08      	ldr	r3, [pc, #32]	@ (8008770 <jinit_marker_writer+0x48>)
 8008750:	6143      	str	r3, [r0, #20]
  marker->pub.write_marker_byte = write_marker_byte;
 8008752:	4b08      	ldr	r3, [pc, #32]	@ (8008774 <jinit_marker_writer+0x4c>)
 8008754:	6183      	str	r3, [r0, #24]
  /* Initialize private state */
  marker->last_restart_interval = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	61c3      	str	r3, [r0, #28]
}
 800875a:	bd10      	pop	{r4, pc}
 800875c:	0800861b 	.word	0x0800861b
 8008760:	0800852d 	.word	0x0800852d
 8008764:	08008357 	.word	0x08008357
 8008768:	080080e3 	.word	0x080080e3
 800876c:	0800826d 	.word	0x0800826d
 8008770:	08008103 	.word	0x08008103
 8008774:	08008725 	.word	0x08008725

08008778 <validate_script>:
  int * last_bitpos_ptr;
  int last_bitpos[MAX_COMPONENTS][DCTSIZE2];
  /* -1 until that coefficient has been seen; then last Al for it */
#endif

  if (cinfo->num_scans <= 0)
 8008778:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800877c:	2a00      	cmp	r2, #0
{
 800877e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008782:	4682      	mov	sl, r0
 8008784:	f6ad 2d44 	subw	sp, sp, #2628	@ 0xa44
  if (cinfo->num_scans <= 0)
 8008788:	dc06      	bgt.n	8008798 <validate_script+0x20>
    ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, 0);
 800878a:	6802      	ldr	r2, [r0, #0]
 800878c:	2314      	movs	r3, #20
 800878e:	2100      	movs	r1, #0
 8008790:	e9c2 3105 	strd	r3, r1, [r2, #20]
 8008794:	6812      	ldr	r2, [r2, #0]
 8008796:	4790      	blx	r2

  /* For sequential JPEG, all scans must have Ss=0, Se=DCTSIZE2-1;
   * for progressive JPEG, no scan can have this.
   */
  scanptr = cinfo->scan_info;
 8008798:	f8da 50cc 	ldr.w	r5, [sl, #204]	@ 0xcc
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
    cinfo->progressive_mode = FALSE;
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800879c:	f8da 704c 	ldr.w	r7, [sl, #76]	@ 0x4c
  if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1) {
 80087a0:	696a      	ldr	r2, [r5, #20]
 80087a2:	b912      	cbnz	r2, 80087aa <validate_script+0x32>
 80087a4:	69a9      	ldr	r1, [r5, #24]
 80087a6:	293f      	cmp	r1, #63	@ 0x3f
 80087a8:	d02c      	beq.n	8008804 <validate_script+0x8c>
    cinfo->progressive_mode = TRUE;
 80087aa:	2201      	movs	r2, #1
    last_bitpos_ptr = & last_bitpos[0][0];
 80087ac:	ae10      	add	r6, sp, #64	@ 0x40
    for (ci = 0; ci < cinfo->num_components; ci++) 
 80087ae:	2400      	movs	r4, #0
    cinfo->progressive_mode = TRUE;
 80087b0:	f8ca 2108 	str.w	r2, [sl, #264]	@ 0x108
    for (ci = 0; ci < cinfo->num_components; ci++) 
 80087b4:	42bc      	cmp	r4, r7
 80087b6:	db1b      	blt.n	80087f0 <validate_script+0x78>
 80087b8:	2401      	movs	r4, #1
      component_sent[ci] = FALSE;
  }

  for (scanno = 1; scanno <= cinfo->num_scans; scanptr++, scanno++) {
 80087ba:	f8da 20c8 	ldr.w	r2, [sl, #200]	@ 0xc8
 80087be:	42a2      	cmp	r2, r4
 80087c0:	da2a      	bge.n	8008818 <validate_script+0xa0>
      }
    }
  }

  /* Now verify that everything got sent. */
  if (cinfo->progressive_mode) {
 80087c2:	f8da 4108 	ldr.w	r4, [sl, #264]	@ 0x108
 80087c6:	2c00      	cmp	r4, #0
 80087c8:	f040 8119 	bne.w	80089fe <validate_script+0x286>
 80087cc:	ad06      	add	r5, sp, #24
    }
#endif
  } else {
    for (ci = 0; ci < cinfo->num_components; ci++) {
      if (! component_sent[ci])
	ERREXIT(cinfo, JERR_MISSING_DATA);
 80087ce:	262e      	movs	r6, #46	@ 0x2e
    for (ci = 0; ci < cinfo->num_components; ci++) {
 80087d0:	f8da 204c 	ldr.w	r2, [sl, #76]	@ 0x4c
 80087d4:	42a2      	cmp	r2, r4
 80087d6:	f340 810e 	ble.w	80089f6 <validate_script+0x27e>
      if (! component_sent[ci])
 80087da:	f855 2b04 	ldr.w	r2, [r5], #4
 80087de:	b92a      	cbnz	r2, 80087ec <validate_script+0x74>
	ERREXIT(cinfo, JERR_MISSING_DATA);
 80087e0:	f8da 2000 	ldr.w	r2, [sl]
 80087e4:	4650      	mov	r0, sl
 80087e6:	6156      	str	r6, [r2, #20]
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	4790      	blx	r2
    for (ci = 0; ci < cinfo->num_components; ci++) {
 80087ec:	3401      	adds	r4, #1
 80087ee:	e7ef      	b.n	80087d0 <validate_script+0x58>
	*last_bitpos_ptr++ = -1;
 80087f0:	4630      	mov	r0, r6
 80087f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80087f6:	21ff      	movs	r1, #255	@ 0xff
 80087f8:	f506 7680 	add.w	r6, r6, #256	@ 0x100
    for (ci = 0; ci < cinfo->num_components; ci++) 
 80087fc:	3401      	adds	r4, #1
	*last_bitpos_ptr++ = -1;
 80087fe:	f007 f957 	bl	800fab0 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8008802:	e7d7      	b.n	80087b4 <validate_script+0x3c>
    cinfo->progressive_mode = FALSE;
 8008804:	a906      	add	r1, sp, #24
      component_sent[ci] = FALSE;
 8008806:	4610      	mov	r0, r2
    cinfo->progressive_mode = FALSE;
 8008808:	f8ca 2108 	str.w	r2, [sl, #264]	@ 0x108
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800880c:	42ba      	cmp	r2, r7
 800880e:	dad3      	bge.n	80087b8 <validate_script+0x40>
 8008810:	3201      	adds	r2, #1
      component_sent[ci] = FALSE;
 8008812:	f841 0b04 	str.w	r0, [r1], #4
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8008816:	e7f9      	b.n	800880c <validate_script+0x94>
    ncomps = scanptr->comps_in_scan;
 8008818:	682f      	ldr	r7, [r5, #0]
    if (ncomps <= 0 || ncomps > MAX_COMPS_IN_SCAN)
 800881a:	1e7a      	subs	r2, r7, #1
 800881c:	2a03      	cmp	r2, #3
 800881e:	d909      	bls.n	8008834 <validate_script+0xbc>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, ncomps, MAX_COMPS_IN_SCAN);
 8008820:	f8da 2000 	ldr.w	r2, [sl]
 8008824:	211b      	movs	r1, #27
 8008826:	4650      	mov	r0, sl
 8008828:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800882c:	2104      	movs	r1, #4
 800882e:	61d1      	str	r1, [r2, #28]
 8008830:	6812      	ldr	r2, [r2, #0]
 8008832:	4790      	blx	r2
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8008834:	46a8      	mov	r8, r5
 8008836:	2600      	movs	r6, #0
	ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
 8008838:	f04f 0914 	mov.w	r9, #20
 800883c:	9500      	str	r5, [sp, #0]
    for (ci = 0; ci < ncomps; ci++) {
 800883e:	42be      	cmp	r6, r7
 8008840:	db2a      	blt.n	8008898 <validate_script+0x120>
    if (cinfo->progressive_mode) {
 8008842:	f8da 2108 	ldr.w	r2, [sl, #264]	@ 0x108
    Se = scanptr->Se;
 8008846:	e9d5 6905 	ldrd	r6, r9, [r5, #20]
    Al = scanptr->Al;
 800884a:	e9d5 8b07 	ldrd	r8, fp, [r5, #28]
    if (cinfo->progressive_mode) {
 800884e:	2a00      	cmp	r2, #0
 8008850:	f000 8095 	beq.w	800897e <validate_script+0x206>
      if (Ss < 0 || Ss >= DCTSIZE2 || Se < Ss || Se >= DCTSIZE2 ||
 8008854:	2e3f      	cmp	r6, #63	@ 0x3f
 8008856:	d80a      	bhi.n	800886e <validate_script+0xf6>
 8008858:	454e      	cmp	r6, r9
 800885a:	dc08      	bgt.n	800886e <validate_script+0xf6>
 800885c:	f1b9 0f3f 	cmp.w	r9, #63	@ 0x3f
 8008860:	dc05      	bgt.n	800886e <validate_script+0xf6>
 8008862:	f1b8 0f0a 	cmp.w	r8, #10
 8008866:	d802      	bhi.n	800886e <validate_script+0xf6>
	  Ah < 0 || Ah > MAX_AH_AL || Al < 0 || Al > MAX_AH_AL)
 8008868:	f1bb 0f0a 	cmp.w	fp, #10
 800886c:	d907      	bls.n	800887e <validate_script+0x106>
	ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800886e:	f8da 2000 	ldr.w	r2, [sl]
 8008872:	2112      	movs	r1, #18
 8008874:	4650      	mov	r0, sl
 8008876:	e9c2 1405 	strd	r1, r4, [r2, #20]
 800887a:	6812      	ldr	r2, [r2, #0]
 800887c:	4790      	blx	r2
      if (Ss == 0) {
 800887e:	bb4e      	cbnz	r6, 80088d4 <validate_script+0x15c>
	if (Se != 0)		/* DC and AC together not OK */
 8008880:	f1b9 0f00 	cmp.w	r9, #0
 8008884:	d028      	beq.n	80088d8 <validate_script+0x160>
	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 8008886:	f8da 2000 	ldr.w	r2, [sl]
 800888a:	2112      	movs	r1, #18
 800888c:	4650      	mov	r0, sl
 800888e:	e9c2 1405 	strd	r1, r4, [r2, #20]
 8008892:	6812      	ldr	r2, [r2, #0]
 8008894:	4790      	blx	r2
 8008896:	e01f      	b.n	80088d8 <validate_script+0x160>
      thisi = scanptr->component_index[ci];
 8008898:	f858 bf04 	ldr.w	fp, [r8, #4]!
      if (thisi < 0 || thisi >= cinfo->num_components)
 800889c:	f1bb 0f00 	cmp.w	fp, #0
 80088a0:	db03      	blt.n	80088aa <validate_script+0x132>
 80088a2:	f8da 204c 	ldr.w	r2, [sl, #76]	@ 0x4c
 80088a6:	455a      	cmp	r2, fp
 80088a8:	dc06      	bgt.n	80088b8 <validate_script+0x140>
	ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
 80088aa:	f8da 2000 	ldr.w	r2, [sl]
 80088ae:	4650      	mov	r0, sl
 80088b0:	e9c2 9405 	strd	r9, r4, [r2, #20]
 80088b4:	6812      	ldr	r2, [r2, #0]
 80088b6:	4790      	blx	r2
      if (ci > 0 && thisi <= scanptr->component_index[ci-1])
 80088b8:	b156      	cbz	r6, 80088d0 <validate_script+0x158>
 80088ba:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80088be:	455a      	cmp	r2, fp
 80088c0:	db06      	blt.n	80088d0 <validate_script+0x158>
	ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
 80088c2:	f8da 2000 	ldr.w	r2, [sl]
 80088c6:	4650      	mov	r0, sl
 80088c8:	e9c2 9405 	strd	r9, r4, [r2, #20]
 80088cc:	6812      	ldr	r2, [r2, #0]
 80088ce:	4790      	blx	r2
    for (ci = 0; ci < ncomps; ci++) {
 80088d0:	3601      	adds	r6, #1
 80088d2:	e7b4      	b.n	800883e <validate_script+0xc6>
	if (ncomps != 1)	/* AC scans must be for only one component */
 80088d4:	2f01      	cmp	r7, #1
 80088d6:	d1d6      	bne.n	8008886 <validate_script+0x10e>
 80088d8:	00b3      	lsls	r3, r6, #2
 80088da:	9302      	str	r3, [sp, #8]
    for (ci = 0; ci < cinfo->num_components; ci++) 
 80088dc:	2300      	movs	r3, #0
      for (ci = 0; ci < ncomps; ci++) {
 80088de:	9301      	str	r3, [sp, #4]
 80088e0:	9b01      	ldr	r3, [sp, #4]
 80088e2:	42bb      	cmp	r3, r7
 80088e4:	db02      	blt.n	80088ec <validate_script+0x174>
  for (scanno = 1; scanno <= cinfo->num_scans; scanptr++, scanno++) {
 80088e6:	3524      	adds	r5, #36	@ 0x24
 80088e8:	3401      	adds	r4, #1
 80088ea:	e766      	b.n	80087ba <validate_script+0x42>
	last_bitpos_ptr = & last_bitpos[scanptr->component_index[ci]][0];
 80088ec:	9b00      	ldr	r3, [sp, #0]
 80088ee:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80088f2:	0212      	lsls	r2, r2, #8
 80088f4:	9300      	str	r3, [sp, #0]
	if (Ss != 0 && last_bitpos_ptr[0] < 0) /* AC without prior DC scan */
 80088f6:	b16e      	cbz	r6, 8008914 <validate_script+0x19c>
 80088f8:	ab10      	add	r3, sp, #64	@ 0x40
 80088fa:	5899      	ldr	r1, [r3, r2]
 80088fc:	2900      	cmp	r1, #0
 80088fe:	da09      	bge.n	8008914 <validate_script+0x19c>
	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 8008900:	f8da 1000 	ldr.w	r1, [sl]
 8008904:	2012      	movs	r0, #18
 8008906:	9203      	str	r2, [sp, #12]
 8008908:	e9c1 0405 	strd	r0, r4, [r1, #20]
 800890c:	6809      	ldr	r1, [r1, #0]
 800890e:	4650      	mov	r0, sl
 8008910:	4788      	blx	r1
 8008912:	9a03      	ldr	r2, [sp, #12]
 8008914:	9b02      	ldr	r3, [sp, #8]
	    if (Ah != last_bitpos_ptr[coefi] || Al != Ah-1)
 8008916:	f108 31ff 	add.w	r1, r8, #4294967295
 800891a:	441a      	add	r2, r3
 800891c:	ab10      	add	r3, sp, #64	@ 0x40
 800891e:	9103      	str	r1, [sp, #12]
 8008920:	441a      	add	r2, r3
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8008922:	4633      	mov	r3, r6
	for (coefi = Ss; coefi <= Se; coefi++) {
 8008924:	454b      	cmp	r3, r9
 8008926:	dd02      	ble.n	800892e <validate_script+0x1b6>
      for (ci = 0; ci < ncomps; ci++) {
 8008928:	9b01      	ldr	r3, [sp, #4]
 800892a:	3301      	adds	r3, #1
 800892c:	e7d7      	b.n	80088de <validate_script+0x166>
	  if (last_bitpos_ptr[coefi] < 0) {
 800892e:	6811      	ldr	r1, [r2, #0]
 8008930:	2900      	cmp	r1, #0
 8008932:	da12      	bge.n	800895a <validate_script+0x1e2>
	    if (Ah != 0)
 8008934:	f1b8 0f00 	cmp.w	r8, #0
 8008938:	d00b      	beq.n	8008952 <validate_script+0x1da>
	      ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800893a:	f8da 1000 	ldr.w	r1, [sl]
 800893e:	4650      	mov	r0, sl
 8008940:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8008944:	2312      	movs	r3, #18
 8008946:	e9c1 3405 	strd	r3, r4, [r1, #20]
 800894a:	6809      	ldr	r1, [r1, #0]
 800894c:	4788      	blx	r1
 800894e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
	for (coefi = Ss; coefi <= Se; coefi++) {
 8008952:	3301      	adds	r3, #1
	  last_bitpos_ptr[coefi] = Al;
 8008954:	f842 bb04 	str.w	fp, [r2], #4
	for (coefi = Ss; coefi <= Se; coefi++) {
 8008958:	e7e4      	b.n	8008924 <validate_script+0x1ac>
	    if (Ah != last_bitpos_ptr[coefi] || Al != Ah-1)
 800895a:	4541      	cmp	r1, r8
 800895c:	d102      	bne.n	8008964 <validate_script+0x1ec>
 800895e:	9903      	ldr	r1, [sp, #12]
 8008960:	4559      	cmp	r1, fp
 8008962:	d0f6      	beq.n	8008952 <validate_script+0x1da>
	      ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 8008964:	f8da 1000 	ldr.w	r1, [sl]
 8008968:	4650      	mov	r0, sl
 800896a:	e9cd 3204 	strd	r3, r2, [sp, #16]
 800896e:	2312      	movs	r3, #18
 8008970:	e9c1 3405 	strd	r3, r4, [r1, #20]
 8008974:	6809      	ldr	r1, [r1, #0]
 8008976:	4788      	blx	r1
 8008978:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800897c:	e7e9      	b.n	8008952 <validate_script+0x1da>
      if (Ss != 0 || Se != DCTSIZE2-1 || Ah != 0 || Al != 0)
 800897e:	f1b9 0f3f 	cmp.w	r9, #63	@ 0x3f
 8008982:	d104      	bne.n	800898e <validate_script+0x216>
 8008984:	ea46 0608 	orr.w	r6, r6, r8
 8008988:	ea56 060b 	orrs.w	r6, r6, fp
 800898c:	d009      	beq.n	80089a2 <validate_script+0x22a>
	ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800898e:	f8da 1000 	ldr.w	r1, [sl]
 8008992:	2012      	movs	r0, #18
 8008994:	9201      	str	r2, [sp, #4]
 8008996:	e9c1 0405 	strd	r0, r4, [r1, #20]
 800899a:	6809      	ldr	r1, [r1, #0]
 800899c:	4650      	mov	r0, sl
 800899e:	4788      	blx	r1
 80089a0:	9a01      	ldr	r2, [sp, #4]
	  ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
 80089a2:	f04f 0814 	mov.w	r8, #20
      for (ci = 0; ci < ncomps; ci++) {
 80089a6:	42ba      	cmp	r2, r7
 80089a8:	da9d      	bge.n	80088e6 <validate_script+0x16e>
	thisi = scanptr->component_index[ci];
 80089aa:	9b00      	ldr	r3, [sp, #0]
 80089ac:	f853 6f04 	ldr.w	r6, [r3, #4]!
 80089b0:	9300      	str	r3, [sp, #0]
	if (component_sent[thisi])
 80089b2:	ab06      	add	r3, sp, #24
 80089b4:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80089b8:	b141      	cbz	r1, 80089cc <validate_script+0x254>
	  ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
 80089ba:	f8da 1000 	ldr.w	r1, [sl]
 80089be:	4650      	mov	r0, sl
 80089c0:	9201      	str	r2, [sp, #4]
 80089c2:	e9c1 8405 	strd	r8, r4, [r1, #20]
 80089c6:	6809      	ldr	r1, [r1, #0]
 80089c8:	4788      	blx	r1
 80089ca:	9a01      	ldr	r2, [sp, #4]
	component_sent[thisi] = TRUE;
 80089cc:	2101      	movs	r1, #1
 80089ce:	ab06      	add	r3, sp, #24
      for (ci = 0; ci < ncomps; ci++) {
 80089d0:	440a      	add	r2, r1
	component_sent[thisi] = TRUE;
 80089d2:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
      for (ci = 0; ci < ncomps; ci++) {
 80089d6:	e7e6      	b.n	80089a6 <validate_script+0x22e>
      if (last_bitpos[ci][0] < 0)
 80089d8:	0222      	lsls	r2, r4, #8
 80089da:	5952      	ldr	r2, [r2, r5]
 80089dc:	2a00      	cmp	r2, #0
 80089de:	da05      	bge.n	80089ec <validate_script+0x274>
	ERREXIT(cinfo, JERR_MISSING_DATA);
 80089e0:	f8da 2000 	ldr.w	r2, [sl]
 80089e4:	4650      	mov	r0, sl
 80089e6:	6156      	str	r6, [r2, #20]
 80089e8:	6812      	ldr	r2, [r2, #0]
 80089ea:	4790      	blx	r2
    for (ci = 0; ci < cinfo->num_components; ci++) {
 80089ec:	3401      	adds	r4, #1
 80089ee:	f8da 204c 	ldr.w	r2, [sl, #76]	@ 0x4c
 80089f2:	42a2      	cmp	r2, r4
 80089f4:	dcf0      	bgt.n	80089d8 <validate_script+0x260>
    }
  }
}
 80089f6:	f60d 2d44 	addw	sp, sp, #2628	@ 0xa44
 80089fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (ci = 0; ci < cinfo->num_components; ci++) {
 80089fe:	2400      	movs	r4, #0
      if (last_bitpos[ci][0] < 0)
 8008a00:	ad10      	add	r5, sp, #64	@ 0x40
	ERREXIT(cinfo, JERR_MISSING_DATA);
 8008a02:	262e      	movs	r6, #46	@ 0x2e
 8008a04:	e7f3      	b.n	80089ee <validate_script+0x276>

08008a06 <select_scan_parameters>:
/* Set up the scan parameters for the current scan */
{
  int ci;

#ifdef C_MULTISCAN_FILES_SUPPORTED
  if (cinfo->scan_info != NULL) {
 8008a06:	f8d0 10cc 	ldr.w	r1, [r0, #204]	@ 0xcc
{
 8008a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	f500 7590 	add.w	r5, r0, #288	@ 0x120
  if (cinfo->scan_info != NULL) {
 8008a12:	b389      	cbz	r1, 8008a78 <select_scan_parameters+0x72>
    /* Prepare for current scan --- the script is already validated */
    my_master_ptr master = (my_master_ptr) cinfo->master;
    const jpeg_scan_info * scanptr = cinfo->scan_info + master->scan_number;
 8008a14:	f8d0 3184 	ldr.w	r3, [r0, #388]	@ 0x184
 8008a18:	46ac      	mov	ip, r5

    cinfo->comps_in_scan = scanptr->comps_in_scan;
    for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
      cinfo->cur_comp_info[ci] =
	&cinfo->comp_info[scanptr->component_index[ci]];
 8008a1a:	2758      	movs	r7, #88	@ 0x58
    const jpeg_scan_info * scanptr = cinfo->scan_info + master->scan_number;
 8008a1c:	6a1a      	ldr	r2, [r3, #32]
 8008a1e:	2324      	movs	r3, #36	@ 0x24
 8008a20:	435a      	muls	r2, r3
 8008a22:	188b      	adds	r3, r1, r2
    cinfo->comps_in_scan = scanptr->comps_in_scan;
 8008a24:	5888      	ldr	r0, [r1, r2]
    for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
 8008a26:	2200      	movs	r2, #0
 8008a28:	461e      	mov	r6, r3
    cinfo->comps_in_scan = scanptr->comps_in_scan;
 8008a2a:	f8c4 0120 	str.w	r0, [r4, #288]	@ 0x120
    for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
 8008a2e:	4290      	cmp	r0, r2
 8008a30:	dc0e      	bgt.n	8008a50 <select_scan_parameters+0x4a>
    }
    if (cinfo->progressive_mode) {
 8008a32:	f8d4 2108 	ldr.w	r2, [r4, #264]	@ 0x108
 8008a36:	b9a2      	cbnz	r2, 8008a62 <select_scan_parameters+0x5c>
    for (ci = 0; ci < cinfo->num_components; ci++) {
      cinfo->cur_comp_info[ci] = &cinfo->comp_info[ci];
    }
  }
  cinfo->Ss = 0;
  cinfo->Se = cinfo->block_size * cinfo->block_size - 1;
 8008a38:	f8d4 2178 	ldr.w	r2, [r4, #376]	@ 0x178
  cinfo->Ss = 0;
 8008a3c:	2300      	movs	r3, #0
  cinfo->Se = cinfo->block_size * cinfo->block_size - 1;
 8008a3e:	4352      	muls	r2, r2
  cinfo->Ss = 0;
 8008a40:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
  cinfo->Se = cinfo->block_size * cinfo->block_size - 1;
 8008a44:	3a01      	subs	r2, #1
  cinfo->Ah = 0;
 8008a46:	e9c4 235b 	strd	r2, r3, [r4, #364]	@ 0x16c
      cinfo->Al = scanptr->Al;
 8008a4a:	f8c4 3174 	str.w	r3, [r4, #372]	@ 0x174
  cinfo->Al = 0;
}
 8008a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	&cinfo->comp_info[scanptr->component_index[ci]];
 8008a50:	f856 1f04 	ldr.w	r1, [r6, #4]!
    for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
 8008a54:	3201      	adds	r2, #1
	&cinfo->comp_info[scanptr->component_index[ci]];
 8008a56:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8008a58:	fb07 5101 	mla	r1, r7, r1, r5
      cinfo->cur_comp_info[ci] =
 8008a5c:	f84c 1f04 	str.w	r1, [ip, #4]!
    for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
 8008a60:	e7e5      	b.n	8008a2e <select_scan_parameters+0x28>
      cinfo->Ss = scanptr->Ss;
 8008a62:	695a      	ldr	r2, [r3, #20]
 8008a64:	f8c4 2168 	str.w	r2, [r4, #360]	@ 0x168
      cinfo->Se = scanptr->Se;
 8008a68:	699a      	ldr	r2, [r3, #24]
 8008a6a:	f8c4 216c 	str.w	r2, [r4, #364]	@ 0x16c
      cinfo->Ah = scanptr->Ah;
 8008a6e:	69da      	ldr	r2, [r3, #28]
      cinfo->Al = scanptr->Al;
 8008a70:	6a1b      	ldr	r3, [r3, #32]
      cinfo->Ah = scanptr->Ah;
 8008a72:	f8c4 2170 	str.w	r2, [r4, #368]	@ 0x170
      return;
 8008a76:	e7e8      	b.n	8008a4a <select_scan_parameters+0x44>
    if (cinfo->num_components > MAX_COMPS_IN_SCAN)
 8008a78:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8008a7a:	2a04      	cmp	r2, #4
 8008a7c:	dd07      	ble.n	8008a8e <select_scan_parameters+0x88>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 8008a7e:	6803      	ldr	r3, [r0, #0]
 8008a80:	211b      	movs	r1, #27
 8008a82:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008a86:	2204      	movs	r2, #4
 8008a88:	61da      	str	r2, [r3, #28]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4798      	blx	r3
    cinfo->comps_in_scan = cinfo->num_components;
 8008a8e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
    for (ci = 0; ci < cinfo->num_components; ci++) {
 8008a90:	2300      	movs	r3, #0
      cinfo->cur_comp_info[ci] = &cinfo->comp_info[ci];
 8008a92:	2058      	movs	r0, #88	@ 0x58
    cinfo->comps_in_scan = cinfo->num_components;
 8008a94:	f8c4 1120 	str.w	r1, [r4, #288]	@ 0x120
    for (ci = 0; ci < cinfo->num_components; ci++) {
 8008a98:	4299      	cmp	r1, r3
 8008a9a:	ddcd      	ble.n	8008a38 <select_scan_parameters+0x32>
      cinfo->cur_comp_info[ci] = &cinfo->comp_info[ci];
 8008a9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a9e:	fb00 2203 	mla	r2, r0, r3, r2
    for (ci = 0; ci < cinfo->num_components; ci++) {
 8008aa2:	3301      	adds	r3, #1
      cinfo->cur_comp_info[ci] = &cinfo->comp_info[ci];
 8008aa4:	f845 2f04 	str.w	r2, [r5, #4]!
    for (ci = 0; ci < cinfo->num_components; ci++) {
 8008aa8:	e7f6      	b.n	8008a98 <select_scan_parameters+0x92>

08008aaa <pass_startup>:
 */

METHODDEF(void)
pass_startup (j_compress_ptr cinfo)
{
  cinfo->master->call_pass_startup = FALSE; /* reset flag so call only once */
 8008aaa:	f8d0 3184 	ldr.w	r3, [r0, #388]	@ 0x184
 8008aae:	2200      	movs	r2, #0
{
 8008ab0:	b510      	push	{r4, lr}
  cinfo->master->call_pass_startup = FALSE; /* reset flag so call only once */
 8008ab2:	60da      	str	r2, [r3, #12]
{
 8008ab4:	4604      	mov	r4, r0

  (*cinfo->marker->write_frame_header) (cinfo);
 8008ab6:	f8d0 3194 	ldr.w	r3, [r0, #404]	@ 0x194
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	4798      	blx	r3
  (*cinfo->marker->write_scan_header) (cinfo);
 8008abe:	f8d4 3194 	ldr.w	r3, [r4, #404]	@ 0x194
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	689b      	ldr	r3, [r3, #8]
}
 8008ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (*cinfo->marker->write_scan_header) (cinfo);
 8008aca:	4718      	bx	r3

08008acc <finish_pass_master>:
 * Finish up at end of pass.
 */

METHODDEF(void)
finish_pass_master (j_compress_ptr cinfo)
{
 8008acc:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;

  /* The entropy coder always needs an end-of-pass call,
   * either to analyze statistics or to flush its output buffer.
   */
  (*cinfo->entropy->finish_pass) (cinfo);
 8008ace:	f8d0 31a4 	ldr.w	r3, [r0, #420]	@ 0x1a4
{
 8008ad2:	4605      	mov	r5, r0
  my_master_ptr master = (my_master_ptr) cinfo->master;
 8008ad4:	f8d0 4184 	ldr.w	r4, [r0, #388]	@ 0x184
  (*cinfo->entropy->finish_pass) (cinfo);
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	4798      	blx	r3

  /* Update state for next pass */
  switch (master->pass_type) {
 8008adc:	7d23      	ldrb	r3, [r4, #20]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d00b      	beq.n	8008afa <finish_pass_master+0x2e>
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d00f      	beq.n	8008b06 <finish_pass_master+0x3a>
 8008ae6:	b953      	cbnz	r3, 8008afe <finish_pass_master+0x32>
  case main_pass:
    /* next pass is either output of scan 0 (after optimization)
     * or output of scan 1 (if no optimization).
     */
    master->pass_type = output_pass;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	7523      	strb	r3, [r4, #20]
    if (! cinfo->optimize_coding)
 8008aec:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8008af0:	b92b      	cbnz	r3, 8008afe <finish_pass_master+0x32>
    break;
  case output_pass:
    /* next pass is either optimization or output of next scan */
    if (cinfo->optimize_coding)
      master->pass_type = huff_opt_pass;
    master->scan_number++;
 8008af2:	6a23      	ldr	r3, [r4, #32]
 8008af4:	3301      	adds	r3, #1
 8008af6:	6223      	str	r3, [r4, #32]
    break;
 8008af8:	e001      	b.n	8008afe <finish_pass_master+0x32>
    master->pass_type = output_pass;
 8008afa:	2302      	movs	r3, #2
 8008afc:	7523      	strb	r3, [r4, #20]
  }

  master->pass_number++;
 8008afe:	69a3      	ldr	r3, [r4, #24]
 8008b00:	3301      	adds	r3, #1
 8008b02:	61a3      	str	r3, [r4, #24]
}
 8008b04:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->optimize_coding)
 8008b06:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d0f1      	beq.n	8008af2 <finish_pass_master+0x26>
      master->pass_type = huff_opt_pass;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	7523      	strb	r3, [r4, #20]
 8008b12:	e7ee      	b.n	8008af2 <finish_pass_master+0x26>

08008b14 <per_scan_setup>:
  if (cinfo->comps_in_scan == 1) {
 8008b14:	f8d0 2120 	ldr.w	r2, [r0, #288]	@ 0x120
 8008b18:	2a01      	cmp	r2, #1
{
 8008b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1e:	4604      	mov	r4, r0
  if (cinfo->comps_in_scan == 1) {
 8008b20:	d12c      	bne.n	8008b7c <per_scan_setup+0x68>
    compptr = cinfo->cur_comp_info[0];
 8008b22:	f8d0 3124 	ldr.w	r3, [r0, #292]	@ 0x124
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 8008b26:	69d9      	ldr	r1, [r3, #28]
 8008b28:	f8c0 1134 	str.w	r1, [r0, #308]	@ 0x134
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 8008b2c:	6a19      	ldr	r1, [r3, #32]
 8008b2e:	f8c0 1138 	str.w	r1, [r0, #312]	@ 0x138
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 8008b32:	6a58      	ldr	r0, [r3, #36]	@ 0x24
    compptr->MCU_blocks = 1;
 8008b34:	641a      	str	r2, [r3, #64]	@ 0x40
    compptr->last_col_width = 1;
 8008b36:	e9c3 0211 	strd	r0, r2, [r3, #68]	@ 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 8008b3a:	68d8      	ldr	r0, [r3, #12]
 8008b3c:	fbb1 f5f0 	udiv	r5, r1, r0
 8008b40:	fb00 1115 	mls	r1, r0, r5, r1
 8008b44:	2900      	cmp	r1, #0
 8008b46:	bf18      	it	ne
 8008b48:	4608      	movne	r0, r1
    compptr->MCU_height = 1;
 8008b4a:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
    compptr->last_row_height = tmp;
 8008b4e:	64d8      	str	r0, [r3, #76]	@ 0x4c
    cinfo->MCU_membership[0] = 0;
 8008b50:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 8008b52:	f8c4 213c 	str.w	r2, [r4, #316]	@ 0x13c
    cinfo->MCU_membership[0] = 0;
 8008b56:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
  if (cinfo->restart_in_rows > 0) {
 8008b5a:	f8d4 20f0 	ldr.w	r2, [r4, #240]	@ 0xf0
 8008b5e:	2a00      	cmp	r2, #0
 8008b60:	dd0a      	ble.n	8008b78 <per_scan_setup+0x64>
    long nominal = (long) cinfo->restart_in_rows * (long) cinfo->MCUs_per_row;
 8008b62:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
 8008b66:	4353      	muls	r3, r2
    cinfo->restart_interval = (unsigned int) MIN(nominal, 65535L);
 8008b68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	bfd4      	ite	le
 8008b70:	f8c4 30ec 	strle.w	r3, [r4, #236]	@ 0xec
 8008b74:	f8c4 20ec 	strgt.w	r2, [r4, #236]	@ 0xec
}
 8008b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 8008b7c:	1e53      	subs	r3, r2, #1
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d907      	bls.n	8008b92 <per_scan_setup+0x7e>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 8008b82:	6803      	ldr	r3, [r0, #0]
 8008b84:	211b      	movs	r1, #27
 8008b86:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008b8a:	2204      	movs	r2, #4
 8008b8c:	61da      	str	r2, [r3, #28]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 8008b92:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
    cinfo->blocks_in_MCU = 0;
 8008b96:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 8008b98:	f8d4 1178 	ldr.w	r1, [r4, #376]	@ 0x178
 8008b9c:	f504 7790 	add.w	r7, r4, #288	@ 0x120
      jdiv_round_up((long) cinfo->jpeg_width,
 8008ba0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 8008ba2:	f04f 080e 	mov.w	r8, #14
      jdiv_round_up((long) cinfo->jpeg_width,
 8008ba6:	4359      	muls	r1, r3
 8008ba8:	f006 fe82 	bl	800f8b0 <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 8008bac:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
 8008bb0:	f8d4 1178 	ldr.w	r1, [r4, #376]	@ 0x178
    cinfo->MCUs_per_row = (JDIMENSION)
 8008bb4:	f8c4 0134 	str.w	r0, [r4, #308]	@ 0x134
      jdiv_round_up((long) cinfo->jpeg_height,
 8008bb8:	4359      	muls	r1, r3
 8008bba:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8008bbc:	f006 fe78 	bl	800f8b0 <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 8008bc0:	f8c4 513c 	str.w	r5, [r4, #316]	@ 0x13c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 8008bc4:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008bc8:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8008bcc:	42ab      	cmp	r3, r5
 8008bce:	ddc4      	ble.n	8008b5a <per_scan_setup+0x46>
      compptr = cinfo->cur_comp_info[ci];
 8008bd0:	f857 3f04 	ldr.w	r3, [r7, #4]!
      compptr->MCU_width = compptr->h_samp_factor;
 8008bd4:	689a      	ldr	r2, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 8008bd6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 8008bd8:	68d9      	ldr	r1, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 8008bda:	4350      	muls	r0, r2
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 8008bdc:	fb01 f602 	mul.w	r6, r1, r2
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 8008be0:	6458      	str	r0, [r3, #68]	@ 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 8008be2:	69d8      	ldr	r0, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 8008be4:	639a      	str	r2, [r3, #56]	@ 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 8008be6:	63d9      	str	r1, [r3, #60]	@ 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 8008be8:	641e      	str	r6, [r3, #64]	@ 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 8008bea:	fbb0 fcf2 	udiv	ip, r0, r2
 8008bee:	fb02 001c 	mls	r0, r2, ip, r0
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	bf18      	it	ne
 8008bf6:	4602      	movne	r2, r0
      compptr->last_col_width = tmp;
 8008bf8:	649a      	str	r2, [r3, #72]	@ 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 8008bfa:	6a1a      	ldr	r2, [r3, #32]
 8008bfc:	fbb2 f0f1 	udiv	r0, r2, r1
 8008c00:	fb01 2210 	mls	r2, r1, r0, r2
 8008c04:	2a00      	cmp	r2, #0
 8008c06:	bf18      	it	ne
 8008c08:	4611      	movne	r1, r2
      compptr->last_row_height = tmp;
 8008c0a:	64d9      	str	r1, [r3, #76]	@ 0x4c
      if (cinfo->blocks_in_MCU + mcublks > C_MAX_BLOCKS_IN_MCU)
 8008c0c:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
 8008c10:	4433      	add	r3, r6
 8008c12:	2b0a      	cmp	r3, #10
 8008c14:	dd05      	ble.n	8008c22 <per_scan_setup+0x10e>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f8c3 8014 	str.w	r8, [r3, #20]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4798      	blx	r3
      while (mcublks-- > 0) {
 8008c22:	2e00      	cmp	r6, #0
 8008c24:	dc01      	bgt.n	8008c2a <per_scan_setup+0x116>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008c26:	3501      	adds	r5, #1
 8008c28:	e7ce      	b.n	8008bc8 <per_scan_setup+0xb4>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 8008c2a:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
 8008c2e:	3e01      	subs	r6, #1
 8008c30:	1c5a      	adds	r2, r3, #1
 8008c32:	3350      	adds	r3, #80	@ 0x50
 8008c34:	f8c4 213c 	str.w	r2, [r4, #316]	@ 0x13c
 8008c38:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8008c3c:	e7f1      	b.n	8008c22 <per_scan_setup+0x10e>

08008c3e <prepare_for_pass>:
{
 8008c3e:	b570      	push	{r4, r5, r6, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 8008c40:	f8d0 5184 	ldr.w	r5, [r0, #388]	@ 0x184
{
 8008c44:	4604      	mov	r4, r0
  switch (master->pass_type) {
 8008c46:	7d2e      	ldrb	r6, [r5, #20]
 8008c48:	2e01      	cmp	r6, #1
 8008c4a:	d04b      	beq.n	8008ce4 <prepare_for_pass+0xa6>
 8008c4c:	2e02      	cmp	r6, #2
 8008c4e:	d066      	beq.n	8008d1e <prepare_for_pass+0xe0>
 8008c50:	2e00      	cmp	r6, #0
 8008c52:	f040 8086 	bne.w	8008d62 <prepare_for_pass+0x124>
    select_scan_parameters(cinfo);
 8008c56:	f7ff fed6 	bl	8008a06 <select_scan_parameters>
    per_scan_setup(cinfo);
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f7ff ff5a 	bl	8008b14 <per_scan_setup>
    if (! cinfo->raw_data_in) {
 8008c60:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 8008c64:	b97b      	cbnz	r3, 8008c86 <prepare_for_pass+0x48>
      (*cinfo->cconvert->start_pass) (cinfo);
 8008c66:	f8d4 3198 	ldr.w	r3, [r4, #408]	@ 0x198
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4798      	blx	r3
      (*cinfo->downsample->start_pass) (cinfo);
 8008c70:	f8d4 319c 	ldr.w	r3, [r4, #412]	@ 0x19c
 8008c74:	4620      	mov	r0, r4
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4798      	blx	r3
      (*cinfo->prep->start_pass) (cinfo, JBUF_PASS_THRU);
 8008c7a:	f8d4 318c 	ldr.w	r3, [r4, #396]	@ 0x18c
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4620      	mov	r0, r4
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4798      	blx	r3
    (*cinfo->fdct->start_pass) (cinfo);
 8008c86:	f8d4 31a0 	ldr.w	r3, [r4, #416]	@ 0x1a0
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4798      	blx	r3
    (*cinfo->entropy->start_pass) (cinfo, cinfo->optimize_coding);
 8008c90:	f8d4 31a4 	ldr.w	r3, [r4, #420]	@ 0x1a4
 8008c94:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
 8008c98:	4620      	mov	r0, r4
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4798      	blx	r3
    (*cinfo->coef->start_pass) (cinfo,
 8008c9e:	69ea      	ldr	r2, [r5, #28]
 8008ca0:	f8d4 3190 	ldr.w	r3, [r4, #400]	@ 0x190
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	2a02      	cmp	r2, #2
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	bfb4      	ite	lt
 8008cac:	4631      	movlt	r1, r6
 8008cae:	2103      	movge	r1, #3
 8008cb0:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 8008cb2:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	4620      	mov	r0, r4
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4798      	blx	r3
    if (cinfo->optimize_coding) {
 8008cbe:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8008cc2:	b10b      	cbz	r3, 8008cc8 <prepare_for_pass+0x8a>
    master->pub.call_pass_startup = FALSE;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e000      	b.n	8008cca <prepare_for_pass+0x8c>
      master->pub.call_pass_startup = TRUE;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	60eb      	str	r3, [r5, #12]
  master->pub.is_last_pass = (master->pass_number == master->total_passes-1);
 8008ccc:	e9d5 1206 	ldrd	r1, r2, [r5, #24]
 8008cd0:	1e53      	subs	r3, r2, #1
 8008cd2:	1a58      	subs	r0, r3, r1
 8008cd4:	4243      	negs	r3, r0
 8008cd6:	4143      	adcs	r3, r0
 8008cd8:	612b      	str	r3, [r5, #16]
  if (cinfo->progress != NULL) {
 8008cda:	68a3      	ldr	r3, [r4, #8]
 8008cdc:	b10b      	cbz	r3, 8008ce2 <prepare_for_pass+0xa4>
    cinfo->progress->total_passes = master->total_passes;
 8008cde:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
 8008ce2:	bd70      	pop	{r4, r5, r6, pc}
    select_scan_parameters(cinfo);
 8008ce4:	f7ff fe8f 	bl	8008a06 <select_scan_parameters>
    per_scan_setup(cinfo);
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f7ff ff13 	bl	8008b14 <per_scan_setup>
    if (cinfo->Ss != 0 || cinfo->Ah == 0) {
 8008cee:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 8008cf2:	b913      	cbnz	r3, 8008cfa <prepare_for_pass+0xbc>
 8008cf4:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
 8008cf8:	b963      	cbnz	r3, 8008d14 <prepare_for_pass+0xd6>
      (*cinfo->entropy->start_pass) (cinfo, TRUE);
 8008cfa:	f8d4 31a4 	ldr.w	r3, [r4, #420]	@ 0x1a4
 8008cfe:	4620      	mov	r0, r4
 8008d00:	2101      	movs	r1, #1
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4798      	blx	r3
      (*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
 8008d06:	f8d4 3190 	ldr.w	r3, [r4, #400]	@ 0x190
 8008d0a:	2102      	movs	r1, #2
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4798      	blx	r3
      master->pub.call_pass_startup = FALSE;
 8008d12:	e7d7      	b.n	8008cc4 <prepare_for_pass+0x86>
    master->pass_type = output_pass;
 8008d14:	2302      	movs	r3, #2
 8008d16:	752b      	strb	r3, [r5, #20]
    master->pass_number++;
 8008d18:	69ab      	ldr	r3, [r5, #24]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	61ab      	str	r3, [r5, #24]
    if (! cinfo->optimize_coding) {
 8008d1e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8008d22:	b92b      	cbnz	r3, 8008d30 <prepare_for_pass+0xf2>
      select_scan_parameters(cinfo);
 8008d24:	4620      	mov	r0, r4
 8008d26:	f7ff fe6e 	bl	8008a06 <select_scan_parameters>
      per_scan_setup(cinfo);
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f7ff fef2 	bl	8008b14 <per_scan_setup>
    (*cinfo->entropy->start_pass) (cinfo, FALSE);
 8008d30:	f8d4 31a4 	ldr.w	r3, [r4, #420]	@ 0x1a4
 8008d34:	2100      	movs	r1, #0
 8008d36:	4620      	mov	r0, r4
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4798      	blx	r3
    (*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
 8008d3c:	f8d4 3190 	ldr.w	r3, [r4, #400]	@ 0x190
 8008d40:	2102      	movs	r1, #2
 8008d42:	4620      	mov	r0, r4
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4798      	blx	r3
    if (master->scan_number == 0)
 8008d48:	6a2b      	ldr	r3, [r5, #32]
 8008d4a:	b923      	cbnz	r3, 8008d56 <prepare_for_pass+0x118>
      (*cinfo->marker->write_frame_header) (cinfo);
 8008d4c:	f8d4 3194 	ldr.w	r3, [r4, #404]	@ 0x194
 8008d50:	4620      	mov	r0, r4
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	4798      	blx	r3
    (*cinfo->marker->write_scan_header) (cinfo);
 8008d56:	f8d4 3194 	ldr.w	r3, [r4, #404]	@ 0x194
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	4798      	blx	r3
 8008d60:	e7b0      	b.n	8008cc4 <prepare_for_pass+0x86>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8008d62:	6803      	ldr	r3, [r0, #0]
 8008d64:	2231      	movs	r2, #49	@ 0x31
 8008d66:	615a      	str	r2, [r3, #20]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4798      	blx	r3
 8008d6c:	e7ae      	b.n	8008ccc <prepare_for_pass+0x8e>

08008d6e <jpeg_calc_jpeg_dimensions>:
{
 8008d6e:	b538      	push	{r3, r4, r5, lr}
  if (((long) cinfo->image_width >> 24) || ((long) cinfo->image_height >> 24))
 8008d70:	f990 301f 	ldrsb.w	r3, [r0, #31]
{
 8008d74:	4604      	mov	r4, r0
  if (((long) cinfo->image_width >> 24) || ((long) cinfo->image_height >> 24))
 8008d76:	b913      	cbnz	r3, 8008d7e <jpeg_calc_jpeg_dimensions+0x10>
 8008d78:	f990 3023 	ldrsb.w	r3, [r0, #35]	@ 0x23
 8008d7c:	b143      	cbz	r3, 8008d90 <jpeg_calc_jpeg_dimensions+0x22>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	212a      	movs	r1, #42	@ 0x2a
 8008d82:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8008d86:	4620      	mov	r0, r4
 8008d88:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4798      	blx	r3
  if (cinfo->scale_num >= cinfo->scale_denom * cinfo->block_size) {
 8008d90:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
 8008d94:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8008d96:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008d98:	4359      	muls	r1, r3
    cinfo->jpeg_width = cinfo->image_width * cinfo->block_size;
 8008d9a:	69e0      	ldr	r0, [r4, #28]
  if (cinfo->scale_num >= cinfo->scale_denom * cinfo->block_size) {
 8008d9c:	428a      	cmp	r2, r1
 8008d9e:	fb03 f000 	mul.w	r0, r3, r0
 8008da2:	d308      	bcc.n	8008db6 <jpeg_calc_jpeg_dimensions+0x48>
    cinfo->jpeg_height = cinfo->image_height * cinfo->block_size;
 8008da4:	6a22      	ldr	r2, [r4, #32]
 8008da6:	2501      	movs	r5, #1
    cinfo->jpeg_width = cinfo->image_width * cinfo->block_size;
 8008da8:	6420      	str	r0, [r4, #64]	@ 0x40
    cinfo->jpeg_height = cinfo->image_height * cinfo->block_size;
 8008daa:	fb02 f003 	mul.w	r0, r2, r3
 8008dae:	6460      	str	r0, [r4, #68]	@ 0x44
    cinfo->min_DCT_v_scaled_size = 1;
 8008db0:	e9c4 5545 	strd	r5, r5, [r4, #276]	@ 0x114
}
 8008db4:	bd38      	pop	{r3, r4, r5, pc}
  } else if (cinfo->scale_num * 2 >= cinfo->scale_denom * cinfo->block_size) {
 8008db6:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8008dba:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8008dbe:	d80c      	bhi.n	8008dda <jpeg_calc_jpeg_dimensions+0x6c>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 2L);
 8008dc0:	2102      	movs	r1, #2
 8008dc2:	2502      	movs	r5, #2
 8008dc4:	f006 fd74 	bl	800f8b0 <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 2L);
 8008dc8:	6a23      	ldr	r3, [r4, #32]
    cinfo->jpeg_width = (JDIMENSION)
 8008dca:	6420      	str	r0, [r4, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 2L);
 8008dcc:	2102      	movs	r1, #2
 8008dce:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
 8008dd2:	4358      	muls	r0, r3
 8008dd4:	f006 fd6c 	bl	800f8b0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 2;
 8008dd8:	e7e9      	b.n	8008dae <jpeg_calc_jpeg_dimensions+0x40>
  } else if (cinfo->scale_num * 3 >= cinfo->scale_denom * cinfo->block_size) {
 8008dda:	4413      	add	r3, r2
 8008ddc:	4299      	cmp	r1, r3
 8008dde:	d80c      	bhi.n	8008dfa <jpeg_calc_jpeg_dimensions+0x8c>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 3L);
 8008de0:	2103      	movs	r1, #3
 8008de2:	2503      	movs	r5, #3
 8008de4:	f006 fd64 	bl	800f8b0 <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 3L);
 8008de8:	6a23      	ldr	r3, [r4, #32]
    cinfo->jpeg_width = (JDIMENSION)
 8008dea:	6420      	str	r0, [r4, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 3L);
 8008dec:	2103      	movs	r1, #3
 8008dee:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
 8008df2:	4358      	muls	r0, r3
 8008df4:	f006 fd5c 	bl	800f8b0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 3;
 8008df8:	e7d9      	b.n	8008dae <jpeg_calc_jpeg_dimensions+0x40>
  } else if (cinfo->scale_num * 4 >= cinfo->scale_denom * cinfo->block_size) {
 8008dfa:	ebb1 0f82 	cmp.w	r1, r2, lsl #2
 8008dfe:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8008e02:	d80c      	bhi.n	8008e1e <jpeg_calc_jpeg_dimensions+0xb0>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 4L);
 8008e04:	2104      	movs	r1, #4
 8008e06:	2504      	movs	r5, #4
 8008e08:	f006 fd52 	bl	800f8b0 <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 4L);
 8008e0c:	6a23      	ldr	r3, [r4, #32]
    cinfo->jpeg_width = (JDIMENSION)
 8008e0e:	6420      	str	r0, [r4, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 4L);
 8008e10:	2104      	movs	r1, #4
 8008e12:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
 8008e16:	4358      	muls	r0, r3
 8008e18:	f006 fd4a 	bl	800f8b0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 4;
 8008e1c:	e7c7      	b.n	8008dae <jpeg_calc_jpeg_dimensions+0x40>
  } else if (cinfo->scale_num * 5 >= cinfo->scale_denom * cinfo->block_size) {
 8008e1e:	4413      	add	r3, r2
 8008e20:	4299      	cmp	r1, r3
 8008e22:	d80c      	bhi.n	8008e3e <jpeg_calc_jpeg_dimensions+0xd0>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 5L);
 8008e24:	2105      	movs	r1, #5
 8008e26:	2505      	movs	r5, #5
 8008e28:	f006 fd42 	bl	800f8b0 <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 5L);
 8008e2c:	6a23      	ldr	r3, [r4, #32]
    cinfo->jpeg_width = (JDIMENSION)
 8008e2e:	6420      	str	r0, [r4, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 5L);
 8008e30:	2105      	movs	r1, #5
 8008e32:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
 8008e36:	4358      	muls	r0, r3
 8008e38:	f006 fd3a 	bl	800f8b0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 5;
 8008e3c:	e7b7      	b.n	8008dae <jpeg_calc_jpeg_dimensions+0x40>
  } else if (cinfo->scale_num * 6 >= cinfo->scale_denom * cinfo->block_size) {
 8008e3e:	2506      	movs	r5, #6
 8008e40:	fb05 f302 	mul.w	r3, r5, r2
 8008e44:	4299      	cmp	r1, r3
 8008e46:	d80b      	bhi.n	8008e60 <jpeg_calc_jpeg_dimensions+0xf2>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 14L);
 8008e48:	4629      	mov	r1, r5
 8008e4a:	f006 fd31 	bl	800f8b0 <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 14L);
 8008e4e:	6a23      	ldr	r3, [r4, #32]
    cinfo->jpeg_width = (JDIMENSION)
 8008e50:	6420      	str	r0, [r4, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 14L);
 8008e52:	4629      	mov	r1, r5
 8008e54:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
 8008e58:	4358      	muls	r0, r3
 8008e5a:	f006 fd29 	bl	800f8b0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 14;
 8008e5e:	e7a6      	b.n	8008dae <jpeg_calc_jpeg_dimensions+0x40>
  } else if (cinfo->scale_num * 7 >= cinfo->scale_denom * cinfo->block_size) {
 8008e60:	ebc2 05c2 	rsb	r5, r2, r2, lsl #3
 8008e64:	00d3      	lsls	r3, r2, #3
 8008e66:	42a9      	cmp	r1, r5
 8008e68:	d80c      	bhi.n	8008e84 <jpeg_calc_jpeg_dimensions+0x116>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 7L);
 8008e6a:	2107      	movs	r1, #7
 8008e6c:	2507      	movs	r5, #7
 8008e6e:	f006 fd1f 	bl	800f8b0 <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 7L);
 8008e72:	6a23      	ldr	r3, [r4, #32]
    cinfo->jpeg_width = (JDIMENSION)
 8008e74:	6420      	str	r0, [r4, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 7L);
 8008e76:	2107      	movs	r1, #7
 8008e78:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
 8008e7c:	4358      	muls	r0, r3
 8008e7e:	f006 fd17 	bl	800f8b0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 7;
 8008e82:	e794      	b.n	8008dae <jpeg_calc_jpeg_dimensions+0x40>
  } else if (cinfo->scale_num * 8 >= cinfo->scale_denom * cinfo->block_size) {
 8008e84:	4299      	cmp	r1, r3
 8008e86:	d80c      	bhi.n	8008ea2 <jpeg_calc_jpeg_dimensions+0x134>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 8L);
 8008e88:	2108      	movs	r1, #8
 8008e8a:	2508      	movs	r5, #8
 8008e8c:	f006 fd10 	bl	800f8b0 <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 8L);
 8008e90:	6a23      	ldr	r3, [r4, #32]
    cinfo->jpeg_width = (JDIMENSION)
 8008e92:	6420      	str	r0, [r4, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 8L);
 8008e94:	2108      	movs	r1, #8
 8008e96:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
 8008e9a:	4358      	muls	r0, r3
 8008e9c:	f006 fd08 	bl	800f8b0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 8;
 8008ea0:	e785      	b.n	8008dae <jpeg_calc_jpeg_dimensions+0x40>
  } else if (cinfo->scale_num * 9 >= cinfo->scale_denom * cinfo->block_size) {
 8008ea2:	4413      	add	r3, r2
 8008ea4:	4299      	cmp	r1, r3
 8008ea6:	d80c      	bhi.n	8008ec2 <jpeg_calc_jpeg_dimensions+0x154>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 9L);
 8008ea8:	2109      	movs	r1, #9
 8008eaa:	2509      	movs	r5, #9
 8008eac:	f006 fd00 	bl	800f8b0 <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 9L);
 8008eb0:	6a23      	ldr	r3, [r4, #32]
    cinfo->jpeg_width = (JDIMENSION)
 8008eb2:	6420      	str	r0, [r4, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 9L);
 8008eb4:	2109      	movs	r1, #9
 8008eb6:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
 8008eba:	4358      	muls	r0, r3
 8008ebc:	f006 fcf8 	bl	800f8b0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 9;
 8008ec0:	e775      	b.n	8008dae <jpeg_calc_jpeg_dimensions+0x40>
  } else if (cinfo->scale_num * 10 >= cinfo->scale_denom * cinfo->block_size) {
 8008ec2:	230a      	movs	r3, #10
 8008ec4:	4353      	muls	r3, r2
 8008ec6:	4299      	cmp	r1, r3
 8008ec8:	d80c      	bhi.n	8008ee4 <jpeg_calc_jpeg_dimensions+0x176>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 10L);
 8008eca:	210a      	movs	r1, #10
 8008ecc:	250a      	movs	r5, #10
 8008ece:	f006 fcef 	bl	800f8b0 <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 10L);
 8008ed2:	6a23      	ldr	r3, [r4, #32]
    cinfo->jpeg_width = (JDIMENSION)
 8008ed4:	6420      	str	r0, [r4, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 10L);
 8008ed6:	210a      	movs	r1, #10
 8008ed8:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
 8008edc:	4358      	muls	r0, r3
 8008ede:	f006 fce7 	bl	800f8b0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 10;
 8008ee2:	e764      	b.n	8008dae <jpeg_calc_jpeg_dimensions+0x40>
  } else if (cinfo->scale_num * 11 >= cinfo->scale_denom * cinfo->block_size) {
 8008ee4:	250b      	movs	r5, #11
 8008ee6:	fb05 f302 	mul.w	r3, r5, r2
 8008eea:	4299      	cmp	r1, r3
 8008eec:	d9ac      	bls.n	8008e48 <jpeg_calc_jpeg_dimensions+0xda>
  } else if (cinfo->scale_num * 12 >= cinfo->scale_denom * cinfo->block_size) {
 8008eee:	250c      	movs	r5, #12
 8008ef0:	fb05 f302 	mul.w	r3, r5, r2
 8008ef4:	4299      	cmp	r1, r3
 8008ef6:	d9a7      	bls.n	8008e48 <jpeg_calc_jpeg_dimensions+0xda>
  } else if (cinfo->scale_num * 13 >= cinfo->scale_denom * cinfo->block_size) {
 8008ef8:	250d      	movs	r5, #13
 8008efa:	fb05 f302 	mul.w	r3, r5, r2
 8008efe:	4299      	cmp	r1, r3
 8008f00:	d9a2      	bls.n	8008e48 <jpeg_calc_jpeg_dimensions+0xda>
  } else if (cinfo->scale_num * 14 >= cinfo->scale_denom * cinfo->block_size) {
 8008f02:	250e      	movs	r5, #14
 8008f04:	fb05 f302 	mul.w	r3, r5, r2
 8008f08:	4299      	cmp	r1, r3
 8008f0a:	d99d      	bls.n	8008e48 <jpeg_calc_jpeg_dimensions+0xda>
  } else if (cinfo->scale_num * 15 >= cinfo->scale_denom * cinfo->block_size) {
 8008f0c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8008f10:	4291      	cmp	r1, r2
 8008f12:	d80c      	bhi.n	8008f2e <jpeg_calc_jpeg_dimensions+0x1c0>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 15L);
 8008f14:	210f      	movs	r1, #15
 8008f16:	250f      	movs	r5, #15
 8008f18:	f006 fcca 	bl	800f8b0 <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 15L);
 8008f1c:	6a23      	ldr	r3, [r4, #32]
    cinfo->jpeg_width = (JDIMENSION)
 8008f1e:	6420      	str	r0, [r4, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 15L);
 8008f20:	210f      	movs	r1, #15
 8008f22:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
 8008f26:	4358      	muls	r0, r3
 8008f28:	f006 fcc2 	bl	800f8b0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 15;
 8008f2c:	e73f      	b.n	8008dae <jpeg_calc_jpeg_dimensions+0x40>
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 16L);
 8008f2e:	2110      	movs	r1, #16
    cinfo->jpeg_height = (JDIMENSION)
 8008f30:	2510      	movs	r5, #16
      jdiv_round_up((long) cinfo->image_width * cinfo->block_size, 16L);
 8008f32:	f006 fcbd 	bl	800f8b0 <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 16L);
 8008f36:	6a23      	ldr	r3, [r4, #32]
    cinfo->jpeg_width = (JDIMENSION)
 8008f38:	6420      	str	r0, [r4, #64]	@ 0x40
      jdiv_round_up((long) cinfo->image_height * cinfo->block_size, 16L);
 8008f3a:	2110      	movs	r1, #16
 8008f3c:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
 8008f40:	4358      	muls	r0, r3
 8008f42:	f006 fcb5 	bl	800f8b0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 16;
 8008f46:	e732      	b.n	8008dae <jpeg_calc_jpeg_dimensions+0x40>

08008f48 <jinit_c_master_control>:
jinit_c_master_control (j_compress_ptr cinfo, boolean transcode_only)
{
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008f48:	6843      	ldr	r3, [r0, #4]
{
 8008f4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008f4e:	681b      	ldr	r3, [r3, #0]
{
 8008f50:	460f      	mov	r7, r1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008f52:	2224      	movs	r2, #36	@ 0x24
 8008f54:	2101      	movs	r1, #1
{
 8008f56:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008f58:	4798      	blx	r3
				  SIZEOF(my_comp_master));
  cinfo->master = (struct jpeg_comp_master *) master;
  master->pub.prepare_for_pass = prepare_for_pass;
 8008f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8009148 <jinit_c_master_control+0x200>)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008f5c:	4606      	mov	r6, r0
  cinfo->master = (struct jpeg_comp_master *) master;
 8008f5e:	f8c4 0184 	str.w	r0, [r4, #388]	@ 0x184
  master->pub.prepare_for_pass = prepare_for_pass;
 8008f62:	6003      	str	r3, [r0, #0]
  master->pub.pass_startup = pass_startup;
 8008f64:	4b79      	ldr	r3, [pc, #484]	@ (800914c <jinit_c_master_control+0x204>)
 8008f66:	6043      	str	r3, [r0, #4]
  master->pub.finish_pass = finish_pass_master;
 8008f68:	4b79      	ldr	r3, [pc, #484]	@ (8009150 <jinit_c_master_control+0x208>)
 8008f6a:	6083      	str	r3, [r0, #8]
  master->pub.is_last_pass = FALSE;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	6103      	str	r3, [r0, #16]
  if (transcode_only)
 8008f70:	b33f      	cbz	r7, 8008fc2 <jinit_c_master_control+0x7a>
  if (cinfo->min_DCT_h_scaled_size != cinfo->min_DCT_v_scaled_size)
 8008f72:	e9d4 1245 	ldrd	r1, r2, [r4, #276]	@ 0x114
 8008f76:	4291      	cmp	r1, r2
 8008f78:	d007      	beq.n	8008f8a <jinit_c_master_control+0x42>
    ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	2007      	movs	r0, #7
 8008f7e:	61da      	str	r2, [r3, #28]
 8008f80:	e9c3 0105 	strd	r0, r1, [r3, #20]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4620      	mov	r0, r4
 8008f88:	4798      	blx	r3
  cinfo->block_size = cinfo->min_DCT_h_scaled_size;
 8008f8a:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 8008f8e:	f8c4 3178 	str.w	r3, [r4, #376]	@ 0x178
  if (cinfo->block_size < 1 || cinfo->block_size > 16)
 8008f92:	f8d4 2178 	ldr.w	r2, [r4, #376]	@ 0x178
 8008f96:	1e53      	subs	r3, r2, #1
 8008f98:	2b0f      	cmp	r3, #15
 8008f9a:	d907      	bls.n	8008fac <jinit_c_master_control+0x64>
    ERREXIT2(cinfo, JERR_BAD_DCTSIZE, cinfo->block_size, cinfo->block_size);
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	2107      	movs	r1, #7
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	61da      	str	r2, [r3, #28]
 8008fa4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4798      	blx	r3
  switch (cinfo->block_size) {
 8008fac:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
 8008fb0:	1e9a      	subs	r2, r3, #2
 8008fb2:	2a05      	cmp	r2, #5
 8008fb4:	f200 809b 	bhi.w	80090ee <jinit_c_master_control+0x1a6>
 8008fb8:	e8df f002 	tbb	[pc, r2]
 8008fbc:	93918f07 	.word	0x93918f07
 8008fc0:	9795      	.short	0x9795
    jpeg_calc_jpeg_dimensions(cinfo);
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f7ff fed3 	bl	8008d6e <jpeg_calc_jpeg_dimensions>
 8008fc8:	e7e3      	b.n	8008f92 <jinit_c_master_control+0x4a>
  case 2: cinfo->natural_order = jpeg_natural_order2; break;
 8008fca:	4a62      	ldr	r2, [pc, #392]	@ (8009154 <jinit_c_master_control+0x20c>)
  case 6: cinfo->natural_order = jpeg_natural_order6; break;
 8008fcc:	f8c4 217c 	str.w	r2, [r4, #380]	@ 0x17c
    cinfo->block_size * cinfo->block_size - 1 : DCTSIZE2-1;
 8008fd0:	435b      	muls	r3, r3
 8008fd2:	3b01      	subs	r3, #1
  cinfo->lim_Se = cinfo->block_size < DCTSIZE ?
 8008fd4:	f8c4 3180 	str.w	r3, [r4, #384]	@ 0x180
  if (cinfo->jpeg_height <= 0 || cinfo->jpeg_width <= 0 ||
 8008fd8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008fda:	b13b      	cbz	r3, 8008fec <jinit_c_master_control+0xa4>
 8008fdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fde:	b12b      	cbz	r3, 8008fec <jinit_c_master_control+0xa4>
 8008fe0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	dd02      	ble.n	8008fec <jinit_c_master_control+0xa4>
      cinfo->num_components <= 0 || cinfo->input_components <= 0)
 8008fe6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	dc05      	bgt.n	8008ff8 <jinit_c_master_control+0xb0>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	2221      	movs	r2, #33	@ 0x21
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	615a      	str	r2, [r3, #20]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4798      	blx	r3
  if ((long) cinfo->jpeg_height > (long) JPEG_MAX_DIMENSION ||
 8008ff8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8008ffa:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 8008ffe:	429a      	cmp	r2, r3
 8009000:	dc02      	bgt.n	8009008 <jinit_c_master_control+0xc0>
 8009002:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009004:	429a      	cmp	r2, r3
 8009006:	dd08      	ble.n	800901a <jinit_c_master_control+0xd2>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	212a      	movs	r1, #42	@ 0x2a
 800900c:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8009010:	4620      	mov	r0, r4
 8009012:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800901a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800901c:	2a08      	cmp	r2, #8
 800901e:	d006      	beq.n	800902e <jinit_c_master_control+0xe6>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	2110      	movs	r1, #16
 8009024:	4620      	mov	r0, r4
 8009026:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800902e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8009030:	2a0a      	cmp	r2, #10
 8009032:	dd08      	ble.n	8009046 <jinit_c_master_control+0xfe>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	211b      	movs	r1, #27
 8009038:	4620      	mov	r0, r4
 800903a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800903e:	220a      	movs	r2, #10
 8009040:	61da      	str	r2, [r3, #28]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4798      	blx	r3
  cinfo->max_h_samp_factor = 1;
 8009046:	2301      	movs	r3, #1
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009048:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 800904a:	f04f 0800 	mov.w	r8, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800904e:	f04f 0913 	mov.w	r9, #19
  cinfo->max_v_samp_factor = 1;
 8009052:	e9c4 3343 	strd	r3, r3, [r4, #268]	@ 0x10c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009056:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009058:	4598      	cmp	r8, r3
 800905a:	db50      	blt.n	80090fe <jinit_c_master_control+0x1b6>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800905c:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 800905e:	f04f 0800 	mov.w	r8, #0
 8009062:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009064:	4598      	cmp	r8, r3
 8009066:	f2c0 8083 	blt.w	8009170 <jinit_c_master_control+0x228>
		  (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800906a:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
 800906e:	f8d4 1178 	ldr.w	r1, [r4, #376]	@ 0x178
    jdiv_round_up((long) cinfo->jpeg_height,
 8009072:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8009074:	4359      	muls	r1, r3
 8009076:	f006 fc1b 	bl	800f8b0 <jdiv_round_up>

  /* Validate parameters, determine derived values */
  initial_setup(cinfo, transcode_only);

  if (cinfo->scan_info != NULL) {
 800907a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
  cinfo->total_iMCU_rows = (JDIMENSION)
 800907e:	f8c4 011c 	str.w	r0, [r4, #284]	@ 0x11c
  if (cinfo->scan_info != NULL) {
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 811a 	beq.w	80092bc <jinit_c_master_control+0x374>
#ifdef C_MULTISCAN_FILES_SUPPORTED
    validate_script(cinfo);
 8009088:	4620      	mov	r0, r4
 800908a:	f7ff fb75 	bl	8008778 <validate_script>
    if (cinfo->block_size < DCTSIZE)
 800908e:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
 8009092:	2b07      	cmp	r3, #7
 8009094:	dc0d      	bgt.n	80090b2 <jinit_c_master_control+0x16a>
  for (idxin = 0; idxin < cinfo->num_scans; idxin++) {
 8009096:	f04f 0e00 	mov.w	lr, #0
      scanptr[idxout] = scanptr[idxin];
 800909a:	f04f 0b24 	mov.w	fp, #36	@ 0x24
  for (idxin = 0; idxin < cinfo->num_scans; idxin++) {
 800909e:	e9d4 3a32 	ldrd	r3, sl, [r4, #200]	@ 0xc8
  idxout = 0;
 80090a2:	46f0      	mov	r8, lr
  for (idxin = 0; idxin < cinfo->num_scans; idxin++) {
 80090a4:	9301      	str	r3, [sp, #4]
 80090a6:	9b01      	ldr	r3, [sp, #4]
 80090a8:	459e      	cmp	lr, r3
 80090aa:	f2c0 80e6 	blt.w	800927a <jinit_c_master_control+0x332>
  cinfo->num_scans = idxout;
 80090ae:	f8c4 80c8 	str.w	r8, [r4, #200]	@ 0xc8
  } else {
    cinfo->progressive_mode = FALSE;
    cinfo->num_scans = 1;
  }

  if ((cinfo->progressive_mode || cinfo->block_size < DCTSIZE) &&
 80090b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f000 8105 	beq.w	80092c6 <jinit_c_master_control+0x37e>
 80090bc:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 8106 	beq.w	80092d2 <jinit_c_master_control+0x38a>
    cinfo->optimize_coding = TRUE;

  /* Initialize my private state */
  if (transcode_only) {
    /* no main pass in transcoding */
    if (cinfo->optimize_coding)
 80090c6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
  if (transcode_only) {
 80090ca:	2f00      	cmp	r7, #0
 80090cc:	f000 8114 	beq.w	80092f8 <jinit_c_master_control+0x3b0>
    if (cinfo->optimize_coding)
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f040 8102 	bne.w	80092da <jinit_c_master_control+0x392>
 80090d6:	2302      	movs	r3, #2
 80090d8:	e100      	b.n	80092dc <jinit_c_master_control+0x394>
  case 3: cinfo->natural_order = jpeg_natural_order3; break;
 80090da:	4a1f      	ldr	r2, [pc, #124]	@ (8009158 <jinit_c_master_control+0x210>)
 80090dc:	e776      	b.n	8008fcc <jinit_c_master_control+0x84>
  case 4: cinfo->natural_order = jpeg_natural_order4; break;
 80090de:	4a1f      	ldr	r2, [pc, #124]	@ (800915c <jinit_c_master_control+0x214>)
 80090e0:	e774      	b.n	8008fcc <jinit_c_master_control+0x84>
  case 5: cinfo->natural_order = jpeg_natural_order5; break;
 80090e2:	4a1f      	ldr	r2, [pc, #124]	@ (8009160 <jinit_c_master_control+0x218>)
 80090e4:	e772      	b.n	8008fcc <jinit_c_master_control+0x84>
  case 6: cinfo->natural_order = jpeg_natural_order6; break;
 80090e6:	4a1f      	ldr	r2, [pc, #124]	@ (8009164 <jinit_c_master_control+0x21c>)
 80090e8:	e770      	b.n	8008fcc <jinit_c_master_control+0x84>
  case 7: cinfo->natural_order = jpeg_natural_order7; break;
 80090ea:	4a1f      	ldr	r2, [pc, #124]	@ (8009168 <jinit_c_master_control+0x220>)
 80090ec:	e76e      	b.n	8008fcc <jinit_c_master_control+0x84>
  default: cinfo->natural_order = jpeg_natural_order; break;
 80090ee:	4a1f      	ldr	r2, [pc, #124]	@ (800916c <jinit_c_master_control+0x224>)
    cinfo->block_size * cinfo->block_size - 1 : DCTSIZE2-1;
 80090f0:	2b07      	cmp	r3, #7
  default: cinfo->natural_order = jpeg_natural_order; break;
 80090f2:	f8c4 217c 	str.w	r2, [r4, #380]	@ 0x17c
    cinfo->block_size * cinfo->block_size - 1 : DCTSIZE2-1;
 80090f6:	f77f af6b 	ble.w	8008fd0 <jinit_c_master_control+0x88>
 80090fa:	233f      	movs	r3, #63	@ 0x3f
 80090fc:	e76a      	b.n	8008fd4 <jinit_c_master_control+0x8c>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 80090fe:	68ab      	ldr	r3, [r5, #8]
 8009100:	3b01      	subs	r3, #1
 8009102:	2b03      	cmp	r3, #3
 8009104:	d803      	bhi.n	800910e <jinit_c_master_control+0x1c6>
 8009106:	68eb      	ldr	r3, [r5, #12]
 8009108:	3b01      	subs	r3, #1
 800910a:	2b03      	cmp	r3, #3
 800910c:	d905      	bls.n	800911a <jinit_c_master_control+0x1d2>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	4620      	mov	r0, r4
 8009112:	f8c3 9014 	str.w	r9, [r3, #20]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800911a:	68ab      	ldr	r3, [r5, #8]
       ci++, compptr++) {
 800911c:	f108 0801 	add.w	r8, r8, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 8009120:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
       ci++, compptr++) {
 8009124:	3558      	adds	r5, #88	@ 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 8009126:	429a      	cmp	r2, r3
 8009128:	bfac      	ite	ge
 800912a:	f8c4 210c 	strge.w	r2, [r4, #268]	@ 0x10c
 800912e:	f8c4 310c 	strlt.w	r3, [r4, #268]	@ 0x10c
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 8009132:	f8d4 2110 	ldr.w	r2, [r4, #272]	@ 0x110
 8009136:	f855 3c4c 	ldr.w	r3, [r5, #-76]
 800913a:	429a      	cmp	r2, r3
 800913c:	bfac      	ite	ge
 800913e:	f8c4 2110 	strge.w	r2, [r4, #272]	@ 0x110
 8009142:	f8c4 3110 	strlt.w	r3, [r4, #272]	@ 0x110
       ci++, compptr++) {
 8009146:	e786      	b.n	8009056 <jinit_c_master_control+0x10e>
 8009148:	08008c3f 	.word	0x08008c3f
 800914c:	08008aab 	.word	0x08008aab
 8009150:	08008acd 	.word	0x08008acd
 8009154:	08011de8 	.word	0x08011de8
 8009158:	08011e38 	.word	0x08011e38
 800915c:	08011e9c 	.word	0x08011e9c
 8009160:	08011f1c 	.word	0x08011f1c
 8009164:	08011fc0 	.word	0x08011fc0
 8009168:	08012090 	.word	0x08012090
 800916c:	08012194 	.word	0x08012194
    compptr->component_index = ci;
 8009170:	f8c5 8004 	str.w	r8, [r5, #4]
    ssize = 1;
 8009174:	2201      	movs	r2, #1
 8009176:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800917a:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 800917e:	2b00      	cmp	r3, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 8009180:	f8d4 e10c 	ldr.w	lr, [r4, #268]	@ 0x10c
      jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
 8009184:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8009188:	bf14      	ite	ne
 800918a:	f04f 0a08 	movne.w	sl, #8
 800918e:	f04f 0a04 	moveq.w	sl, #4
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 8009192:	fb00 f102 	mul.w	r1, r0, r2
	   (cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
 8009196:	4551      	cmp	r1, sl
 8009198:	dc08      	bgt.n	80091ac <jinit_c_master_control+0x264>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800919a:	fb0c f302 	mul.w	r3, ip, r2
 800919e:	005b      	lsls	r3, r3, #1
 80091a0:	fb9e f9f3 	sdiv	r9, lr, r3
 80091a4:	fb03 e319 	mls	r3, r3, r9, lr
	   (cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d05b      	beq.n	8009264 <jinit_c_master_control+0x31c>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 80091ac:	6269      	str	r1, [r5, #36]	@ 0x24
    ssize = 1;
 80091ae:	f04f 0901 	mov.w	r9, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 80091b2:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	9b01      	ldr	r3, [sp, #4]
 80091ba:	fb03 f209 	mul.w	r2, r3, r9
	   (cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
 80091be:	4592      	cmp	sl, r2
 80091c0:	db0b      	blt.n	80091da <jinit_c_master_control+0x292>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 80091c2:	68eb      	ldr	r3, [r5, #12]
 80091c4:	f8d4 0110 	ldr.w	r0, [r4, #272]	@ 0x110
 80091c8:	fb03 f309 	mul.w	r3, r3, r9
 80091cc:	005b      	lsls	r3, r3, #1
 80091ce:	fb90 fbf3 	sdiv	fp, r0, r3
 80091d2:	fb03 001b 	mls	r0, r3, fp, r0
	   (cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d046      	beq.n	8009268 <jinit_c_master_control+0x320>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 80091da:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 80091de:	62aa      	str	r2, [r5, #40]	@ 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 80091e0:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80091e4:	dd43      	ble.n	800926e <jinit_c_master_control+0x326>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 80091e6:	626b      	str	r3, [r5, #36]	@ 0x24
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 80091e8:	f8d4 1178 	ldr.w	r1, [r4, #376]	@ 0x178
       ci++, compptr++) {
 80091ec:	3558      	adds	r5, #88	@ 0x58
      jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
 80091ee:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80091f0:	fb01 f10e 	mul.w	r1, r1, lr
 80091f4:	fb00 f00c 	mul.w	r0, r0, ip
 80091f8:	f006 fb5a 	bl	800f8b0 <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 80091fc:	f845 0c3c 	str.w	r0, [r5, #-60]
      jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
 8009200:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 8009204:	f8d4 2110 	ldr.w	r2, [r4, #272]	@ 0x110
      jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
 8009208:	6c63      	ldr	r3, [r4, #68]	@ 0x44
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800920a:	f8d4 1178 	ldr.w	r1, [r4, #376]	@ 0x178
      jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
 800920e:	4358      	muls	r0, r3
 8009210:	4351      	muls	r1, r2
 8009212:	f006 fb4d 	bl	800f8b0 <jdiv_round_up>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 8009216:	f855 3c34 	ldr.w	r3, [r5, #-52]
    compptr->height_in_blocks = (JDIMENSION)
 800921a:	f845 0c38 	str.w	r0, [r5, #-56]
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800921e:	f855 0c50 	ldr.w	r0, [r5, #-80]
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 8009222:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8009226:	f8d4 1178 	ldr.w	r1, [r4, #376]	@ 0x178
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800922a:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->jpeg_width *
 800922c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800922e:	4351      	muls	r1, r2
 8009230:	4358      	muls	r0, r3
 8009232:	f006 fb3d 	bl	800f8b0 <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 8009236:	f855 3c30 	ldr.w	r3, [r5, #-48]
    compptr->downsampled_width = (JDIMENSION)
 800923a:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800923e:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 8009242:	f8d4 2110 	ldr.w	r2, [r4, #272]	@ 0x110
 8009246:	f8d4 1178 	ldr.w	r1, [r4, #376]	@ 0x178
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800924a:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->jpeg_height *
 800924c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800924e:	4351      	muls	r1, r2
 8009250:	4358      	muls	r0, r3
 8009252:	f006 fb2d 	bl	800f8b0 <jdiv_round_up>
    compptr->component_needed = TRUE;
 8009256:	2301      	movs	r3, #1
    compptr->downsampled_height = (JDIMENSION)
 8009258:	f845 0c28 	str.w	r0, [r5, #-40]
    compptr->component_needed = TRUE;
 800925c:	f845 3c24 	str.w	r3, [r5, #-36]
       ci++, compptr++) {
 8009260:	4498      	add	r8, r3
 8009262:	e6fe      	b.n	8009062 <jinit_c_master_control+0x11a>
      ssize = ssize * 2;
 8009264:	0052      	lsls	r2, r2, #1
 8009266:	e794      	b.n	8009192 <jinit_c_master_control+0x24a>
      ssize = ssize * 2;
 8009268:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800926c:	e7a4      	b.n	80091b8 <jinit_c_master_control+0x270>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800926e:	004b      	lsls	r3, r1, #1
 8009270:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 8009274:	bfc8      	it	gt
 8009276:	62ab      	strgt	r3, [r5, #40]	@ 0x28
 8009278:	e7b6      	b.n	80091e8 <jinit_c_master_control+0x2a0>
    if (idxin != idxout)
 800927a:	45f0      	cmp	r8, lr
      scanptr[idxout] = scanptr[idxin];
 800927c:	fb0b a908 	mla	r9, fp, r8, sl
    if (idxin != idxout)
 8009280:	d00b      	beq.n	800929a <jinit_c_master_control+0x352>
      scanptr[idxout] = scanptr[idxin];
 8009282:	fb0b ac0e 	mla	ip, fp, lr, sl
 8009286:	464d      	mov	r5, r9
 8009288:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800928c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800928e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009292:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009294:	f8dc 3000 	ldr.w	r3, [ip]
 8009298:	602b      	str	r3, [r5, #0]
    if (scanptr[idxout].Ss > cinfo->lim_Se)
 800929a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800929e:	f8d9 2014 	ldr.w	r2, [r9, #20]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	dc07      	bgt.n	80092b6 <jinit_c_master_control+0x36e>
    if (scanptr[idxout].Se > cinfo->lim_Se)
 80092a6:	f8d9 2018 	ldr.w	r2, [r9, #24]
    idxout++;
 80092aa:	f108 0801 	add.w	r8, r8, #1
    if (scanptr[idxout].Se > cinfo->lim_Se)
 80092ae:	4293      	cmp	r3, r2
      scanptr[idxout].Se = cinfo->lim_Se;
 80092b0:	bfb8      	it	lt
 80092b2:	f8c9 3018 	strlt.w	r3, [r9, #24]
  for (idxin = 0; idxin < cinfo->num_scans; idxin++) {
 80092b6:	f10e 0e01 	add.w	lr, lr, #1
 80092ba:	e6f4      	b.n	80090a6 <jinit_c_master_control+0x15e>
    cinfo->progressive_mode = FALSE;
 80092bc:	f8c4 3108 	str.w	r3, [r4, #264]	@ 0x108
    cinfo->num_scans = 1;
 80092c0:	2301      	movs	r3, #1
 80092c2:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
  if ((cinfo->progressive_mode || cinfo->block_size < DCTSIZE) &&
 80092c6:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
 80092ca:	2b07      	cmp	r3, #7
 80092cc:	f77f aef6 	ble.w	80090bc <jinit_c_master_control+0x174>
 80092d0:	e6f9      	b.n	80090c6 <jinit_c_master_control+0x17e>
    cinfo->optimize_coding = TRUE;
 80092d2:	2301      	movs	r3, #1
 80092d4:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
  if (transcode_only) {
 80092d8:	b177      	cbz	r7, 80092f8 <jinit_c_master_control+0x3b0>
      master->pass_type = huff_opt_pass;
 80092da:	2301      	movs	r3, #1
    else
      master->pass_type = output_pass;
 80092dc:	7533      	strb	r3, [r6, #20]
  } else {
    /* for normal compression, first pass is always this type: */
    master->pass_type = main_pass;
  }
  master->scan_number = 0;
 80092de:	2300      	movs	r3, #0
  master->pass_number = 0;
  if (cinfo->optimize_coding)
 80092e0:	f8d4 20d8 	ldr.w	r2, [r4, #216]	@ 0xd8
  master->scan_number = 0;
 80092e4:	6233      	str	r3, [r6, #32]
  master->pass_number = 0;
 80092e6:	61b3      	str	r3, [r6, #24]
    master->total_passes = cinfo->num_scans * 2;
 80092e8:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
  if (cinfo->optimize_coding)
 80092ec:	b102      	cbz	r2, 80092f0 <jinit_c_master_control+0x3a8>
    master->total_passes = cinfo->num_scans * 2;
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	61f3      	str	r3, [r6, #28]
  else
    master->total_passes = cinfo->num_scans;
}
 80092f2:	b003      	add	sp, #12
 80092f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    master->pass_type = main_pass;
 80092f8:	2300      	movs	r3, #0
 80092fa:	e7ef      	b.n	80092dc <jinit_c_master_control+0x394>

080092fc <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 80092fc:	6843      	ldr	r3, [r0, #4]
{
 80092fe:	b510      	push	{r4, lr}
 8009300:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 8009302:	b14b      	cbz	r3, 8009318 <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 8009304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009306:	2101      	movs	r1, #1
 8009308:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 800930a:	6923      	ldr	r3, [r4, #16]
 800930c:	b12b      	cbz	r3, 800931a <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 800930e:	23c8      	movs	r3, #200	@ 0xc8
 8009310:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 8009312:	2300      	movs	r3, #0
 8009314:	f8c4 3134 	str.w	r3, [r4, #308]	@ 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 8009318:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 800931a:	2364      	movs	r3, #100	@ 0x64
 800931c:	6163      	str	r3, [r4, #20]
 800931e:	e7fb      	b.n	8009318 <jpeg_abort+0x1c>

08009320 <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 8009320:	6843      	ldr	r3, [r0, #4]
{
 8009322:	b510      	push	{r4, lr}
 8009324:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 8009326:	b10b      	cbz	r3, 800932c <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 8009328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932a:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 800932c:	2300      	movs	r3, #0
 800932e:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 8009330:	6163      	str	r3, [r4, #20]
}
 8009332:	bd10      	pop	{r4, pc}

08009334 <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 8009334:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 8009336:	6843      	ldr	r3, [r0, #4]
 8009338:	2284      	movs	r2, #132	@ 0x84
 800933a:	2100      	movs	r1, #0
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8009340:	2200      	movs	r2, #0
 8009342:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
  return tbl;
}
 8009346:	bd08      	pop	{r3, pc}

08009348 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 8009348:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 800934a:	6843      	ldr	r3, [r0, #4]
 800934c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009350:	2100      	movs	r1, #0
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8009356:	2200      	movs	r2, #0
 8009358:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
  return tbl;
}
 800935c:	bd08      	pop	{r3, pc}

0800935e <add_huff_table>:

LOCAL(void)
add_huff_table (j_compress_ptr cinfo,
		JHUFF_TBL **htblptr, const UINT8 *bits, const UINT8 *val)
/* Define a Huffman table */
{
 800935e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009362:	4698      	mov	r8, r3
  int nsymbols, len;

  if (*htblptr == NULL)
 8009364:	680b      	ldr	r3, [r1, #0]
{
 8009366:	4607      	mov	r7, r0
 8009368:	460d      	mov	r5, r1
 800936a:	4614      	mov	r4, r2
  if (*htblptr == NULL)
 800936c:	b913      	cbnz	r3, 8009374 <add_huff_table+0x16>
    *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800936e:	f7ff ffeb 	bl	8009348 <jpeg_alloc_huff_table>
 8009372:	6028      	str	r0, [r5, #0]

  /* Copy the number-of-symbols-of-each-code-length counts */
  MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 8009374:	4621      	mov	r1, r4
 8009376:	682a      	ldr	r2, [r5, #0]
 8009378:	f104 0310 	add.w	r3, r4, #16
 800937c:	f851 0b04 	ldr.w	r0, [r1], #4
 8009380:	4299      	cmp	r1, r3
 8009382:	f842 0b04 	str.w	r0, [r2], #4
 8009386:	d1f9      	bne.n	800937c <add_huff_table+0x1e>
 8009388:	7819      	ldrb	r1, [r3, #0]

  /* Validate the counts.  We do this here mainly so we can copy the right
   * number of symbols from the val[] array, without risking marching off
   * the end of memory.  jchuff.c will do a more thorough test later.
   */
  nsymbols = 0;
 800938a:	2600      	movs	r6, #0
  MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800938c:	7011      	strb	r1, [r2, #0]
  for (len = 1; len <= 16; len++)
    nsymbols += bits[len];
 800938e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
  for (len = 1; len <= 16; len++)
 8009392:	42a3      	cmp	r3, r4
    nsymbols += bits[len];
 8009394:	4416      	add	r6, r2
  for (len = 1; len <= 16; len++)
 8009396:	d1fa      	bne.n	800938e <add_huff_table+0x30>
  if (nsymbols < 1 || nsymbols > 256)
 8009398:	1e73      	subs	r3, r6, #1
 800939a:	2bff      	cmp	r3, #255	@ 0xff
 800939c:	d905      	bls.n	80093aa <add_huff_table+0x4c>
    ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2209      	movs	r2, #9
 80093a2:	4638      	mov	r0, r7
 80093a4:	615a      	str	r2, [r3, #20]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4798      	blx	r3

  MEMCOPY((*htblptr)->huffval, val, nsymbols * SIZEOF(UINT8));
 80093aa:	6828      	ldr	r0, [r5, #0]
 80093ac:	4632      	mov	r2, r6
 80093ae:	4641      	mov	r1, r8
 80093b0:	3011      	adds	r0, #17
 80093b2:	f006 fbc1 	bl	800fb38 <memcpy>

  /* Initialize sent_table FALSE so table will be written to JPEG file. */
  (*htblptr)->sent_table = FALSE;
 80093b6:	682b      	ldr	r3, [r5, #0]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
}
 80093be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080093c4 <jpeg_add_quant_table>:
{
 80093c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c8:	4616      	mov	r6, r2
  if (cinfo->global_state != CSTATE_START)
 80093ca:	6942      	ldr	r2, [r0, #20]
{
 80093cc:	4680      	mov	r8, r0
 80093ce:	460d      	mov	r5, r1
  if (cinfo->global_state != CSTATE_START)
 80093d0:	2a64      	cmp	r2, #100	@ 0x64
{
 80093d2:	461f      	mov	r7, r3
 80093d4:	9c06      	ldr	r4, [sp, #24]
  if (cinfo->global_state != CSTATE_START)
 80093d6:	d005      	beq.n	80093e4 <jpeg_add_quant_table+0x20>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80093d8:	6803      	ldr	r3, [r0, #0]
 80093da:	2115      	movs	r1, #21
 80093dc:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4798      	blx	r3
  if (which_tbl < 0 || which_tbl >= NUM_QUANT_TBLS)
 80093e4:	2d03      	cmp	r5, #3
 80093e6:	d907      	bls.n	80093f8 <jpeg_add_quant_table+0x34>
    ERREXIT1(cinfo, JERR_DQT_INDEX, which_tbl);
 80093e8:	f8d8 3000 	ldr.w	r3, [r8]
 80093ec:	2220      	movs	r2, #32
 80093ee:	4640      	mov	r0, r8
 80093f0:	e9c3 2505 	strd	r2, r5, [r3, #20]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4798      	blx	r3
  if (*qtblptr == NULL)
 80093f8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80093fc:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80093fe:	b91b      	cbnz	r3, 8009408 <jpeg_add_quant_table+0x44>
    *qtblptr = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 8009400:	4640      	mov	r0, r8
 8009402:	f7ff ff97 	bl	8009334 <jpeg_alloc_quant_table>
 8009406:	65a8      	str	r0, [r5, #88]	@ 0x58
    (*qtblptr)->quantval[i] = (UINT16) temp;
 8009408:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 800940a:	2300      	movs	r3, #0
    if (temp > 32767L) temp = 32767L; /* max quantizer needed for 12 bits */
 800940c:	480f      	ldr	r0, [pc, #60]	@ (800944c <jpeg_add_quant_table+0x88>)
    temp = ((long) basic_table[i] * scale_factor + 50L) / 100L;
 800940e:	2564      	movs	r5, #100	@ 0x64
 8009410:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8009414:	4379      	muls	r1, r7
    if (temp <= 0L) temp = 1L;
 8009416:	2931      	cmp	r1, #49	@ 0x31
 8009418:	dd12      	ble.n	8009440 <jpeg_add_quant_table+0x7c>
    if (temp > 32767L) temp = 32767L; /* max quantizer needed for 12 bits */
 800941a:	4281      	cmp	r1, r0
 800941c:	dc12      	bgt.n	8009444 <jpeg_add_quant_table+0x80>
    temp = ((long) basic_table[i] * scale_factor + 50L) / 100L;
 800941e:	3132      	adds	r1, #50	@ 0x32
 8009420:	fbb1 f1f5 	udiv	r1, r1, r5
    if (force_baseline && temp > 255L)
 8009424:	b114      	cbz	r4, 800942c <jpeg_add_quant_table+0x68>
 8009426:	29ff      	cmp	r1, #255	@ 0xff
 8009428:	bfa8      	it	ge
 800942a:	21ff      	movge	r1, #255	@ 0xff
    (*qtblptr)->quantval[i] = (UINT16) temp;
 800942c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (i = 0; i < DCTSIZE2; i++) {
 8009430:	3301      	adds	r3, #1
 8009432:	2b40      	cmp	r3, #64	@ 0x40
 8009434:	d1ec      	bne.n	8009410 <jpeg_add_quant_table+0x4c>
  (*qtblptr)->sent_table = FALSE;
 8009436:	2300      	movs	r3, #0
 8009438:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
}
 800943c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (temp <= 0L) temp = 1L;
 8009440:	2101      	movs	r1, #1
 8009442:	e7ef      	b.n	8009424 <jpeg_add_quant_table+0x60>
    if (temp > 32767L) temp = 32767L; /* max quantizer needed for 12 bits */
 8009444:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8009448:	e7ec      	b.n	8009424 <jpeg_add_quant_table+0x60>
 800944a:	bf00      	nop
 800944c:	0031ffcd 	.word	0x0031ffcd

08009450 <jpeg_set_linear_quality>:
{
 8009450:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009452:	4606      	mov	r6, r0
 8009454:	460c      	mov	r4, r1
 8009456:	4615      	mov	r5, r2
  jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
 8009458:	460b      	mov	r3, r1
 800945a:	9200      	str	r2, [sp, #0]
 800945c:	2100      	movs	r1, #0
 800945e:	4a06      	ldr	r2, [pc, #24]	@ (8009478 <jpeg_set_linear_quality+0x28>)
 8009460:	f7ff ffb0 	bl	80093c4 <jpeg_add_quant_table>
  jpeg_add_quant_table(cinfo, 1, std_chrominance_quant_tbl,
 8009464:	4623      	mov	r3, r4
 8009466:	4a05      	ldr	r2, [pc, #20]	@ (800947c <jpeg_set_linear_quality+0x2c>)
 8009468:	2101      	movs	r1, #1
 800946a:	4630      	mov	r0, r6
 800946c:	9500      	str	r5, [sp, #0]
 800946e:	f7ff ffa9 	bl	80093c4 <jpeg_add_quant_table>
}
 8009472:	b002      	add	sp, #8
 8009474:	bd70      	pop	{r4, r5, r6, pc}
 8009476:	bf00      	nop
 8009478:	08011ad8 	.word	0x08011ad8
 800947c:	080119d8 	.word	0x080119d8

08009480 <jpeg_quality_scaling>:
  if (quality <= 0) quality = 1;
 8009480:	2800      	cmp	r0, #0
 8009482:	dd08      	ble.n	8009496 <jpeg_quality_scaling+0x16>
  if (quality > 100) quality = 100;
 8009484:	2864      	cmp	r0, #100	@ 0x64
 8009486:	dc08      	bgt.n	800949a <jpeg_quality_scaling+0x1a>
  if (quality < 50)
 8009488:	2831      	cmp	r0, #49	@ 0x31
 800948a:	dc07      	bgt.n	800949c <jpeg_quality_scaling+0x1c>
    quality = 5000 / quality;
 800948c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009490:	fbb3 f0f0 	udiv	r0, r3, r0
 8009494:	4770      	bx	lr
  if (quality <= 0) quality = 1;
 8009496:	2001      	movs	r0, #1
 8009498:	e7f8      	b.n	800948c <jpeg_quality_scaling+0xc>
  if (quality > 100) quality = 100;
 800949a:	2064      	movs	r0, #100	@ 0x64
    quality = 200 - quality*2;
 800949c:	f1c0 0064 	rsb	r0, r0, #100	@ 0x64
 80094a0:	0040      	lsls	r0, r0, #1
}
 80094a2:	4770      	bx	lr

080094a4 <jpeg_set_quality>:
{
 80094a4:	b510      	push	{r4, lr}
 80094a6:	4604      	mov	r4, r0
  quality = jpeg_quality_scaling(quality);
 80094a8:	4608      	mov	r0, r1
 80094aa:	f7ff ffe9 	bl	8009480 <jpeg_quality_scaling>
 80094ae:	4601      	mov	r1, r0
  jpeg_set_linear_quality(cinfo, quality, force_baseline);
 80094b0:	4620      	mov	r0, r4
}
 80094b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_set_linear_quality(cinfo, quality, force_baseline);
 80094b6:	f7ff bfcb 	b.w	8009450 <jpeg_set_linear_quality>

080094ba <jpeg_set_colorspace>:
   compptr->quant_tbl_no = (quant), \
   compptr->dc_tbl_no = (dctbl), \
   compptr->ac_tbl_no = (actbl) )

  /* Safety check to ensure start_compress not called yet. */
  if (cinfo->global_state != CSTATE_START)
 80094ba:	6942      	ldr	r2, [r0, #20]
 80094bc:	2a64      	cmp	r2, #100	@ 0x64
{
 80094be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c2:	4604      	mov	r4, r0
 80094c4:	460d      	mov	r5, r1
  if (cinfo->global_state != CSTATE_START)
 80094c6:	d005      	beq.n	80094d4 <jpeg_set_colorspace+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80094c8:	6803      	ldr	r3, [r0, #0]
 80094ca:	2115      	movs	r1, #21
 80094cc:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4798      	blx	r3
   * tables 1 for chrominance components.
   */

  cinfo->jpeg_color_space = colorspace;

  cinfo->write_JFIF_header = FALSE; /* No marker for non-JFIF colorspaces */
 80094d4:	2300      	movs	r3, #0
  cinfo->jpeg_color_space = colorspace;
 80094d6:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
  cinfo->write_JFIF_header = FALSE; /* No marker for non-JFIF colorspaces */
 80094da:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
  cinfo->write_Adobe_marker = FALSE; /* write no Adobe marker by default */
 80094de:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100

  switch (colorspace) {
 80094e2:	2d05      	cmp	r5, #5
 80094e4:	f200 80bc 	bhi.w	8009660 <jpeg_set_colorspace+0x1a6>
 80094e8:	e8df f005 	tbb	[pc, r5]
 80094ec:	30110397 	.word	0x30110397
 80094f0:	7149      	.short	0x7149
  case JCS_GRAYSCALE:
    cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
 80094f2:	2201      	movs	r2, #1
    cinfo->num_components = 1;
    /* JFIF specifies component ID 1 */
    SET_COMP(0, 1, 1,1, 0, 0,0);
 80094f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
 80094f6:	f8c4 20f4 	str.w	r2, [r4, #244]	@ 0xf4
    cinfo->num_components = 1;
 80094fa:	64e2      	str	r2, [r4, #76]	@ 0x4c
    SET_COMP(0, 1, 1,1, 0, 0,0);
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8009502:	2200      	movs	r2, #0
 8009504:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8009508:	619a      	str	r2, [r3, #24]
    }
    break;
  default:
    ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
  }
}
 800950a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cinfo->num_components = 3;
 800950e:	2303      	movs	r3, #3
    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag RGB */
 8009510:	2101      	movs	r1, #1
    SET_COMP(0, 0x52 /* 'R' */, 1,1, 0, 0,0);
 8009512:	2252      	movs	r2, #82	@ 0x52
    SET_COMP(1, 0x47 /* 'G' */, 1,1, 0, 0,0);
 8009514:	2047      	movs	r0, #71	@ 0x47
    cinfo->num_components = 3;
 8009516:	64e3      	str	r3, [r4, #76]	@ 0x4c
    SET_COMP(0, 0x52 /* 'R' */, 1,1, 0, 0,0);
 8009518:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag RGB */
 800951a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
    SET_COMP(0, 0x52 /* 'R' */, 1,1, 0, 0,0);
 800951e:	601a      	str	r2, [r3, #0]
 8009520:	2200      	movs	r2, #0
    SET_COMP(1, 0x47 /* 'G' */, 1,1, 0, 0,0);
 8009522:	6598      	str	r0, [r3, #88]	@ 0x58
    SET_COMP(2, 0x42 /* 'B' */, 1,1, 0, 0,0);
 8009524:	2042      	movs	r0, #66	@ 0x42
    SET_COMP(0, 0x52 /* 'R' */, 1,1, 0, 0,0);
 8009526:	619a      	str	r2, [r3, #24]
    SET_COMP(1, 0x47 /* 'G' */, 1,1, 0, 0,0);
 8009528:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_COMP(2, 0x42 /* 'B' */, 1,1, 0, 0,0);
 800952a:	f8c3 00b0 	str.w	r0, [r3, #176]	@ 0xb0
    SET_COMP(0, 0x52 /* 'R' */, 1,1, 0, 0,0);
 800952e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8009532:	e9c3 2204 	strd	r2, r2, [r3, #16]
    SET_COMP(1, 0x47 /* 'G' */, 1,1, 0, 0,0);
 8009536:	e9c3 1118 	strd	r1, r1, [r3, #96]	@ 0x60
 800953a:	e9c3 221a 	strd	r2, r2, [r3, #104]	@ 0x68
    SET_COMP(2, 0x42 /* 'B' */, 1,1, 0, 0,0);
 800953e:	e9c3 112e 	strd	r1, r1, [r3, #184]	@ 0xb8
    SET_COMP(2, 3, 1,1, 1, 1,1);
 8009542:	e9c3 2230 	strd	r2, r2, [r3, #192]	@ 0xc0
 8009546:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    break;
 800954a:	e7de      	b.n	800950a <jpeg_set_colorspace+0x50>
    SET_COMP(0, 1, 2,2, 0, 0,0);
 800954c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
 800954e:	2201      	movs	r2, #1
    cinfo->num_components = 3;
 8009550:	2503      	movs	r5, #3
    SET_COMP(0, 1, 2,2, 0, 0,0);
 8009552:	2102      	movs	r1, #2
 8009554:	2000      	movs	r0, #0
    cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
 8009556:	f8c4 20f4 	str.w	r2, [r4, #244]	@ 0xf4
    cinfo->num_components = 3;
 800955a:	64e5      	str	r5, [r4, #76]	@ 0x4c
    SET_COMP(0, 1, 2,2, 0, 0,0);
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	6198      	str	r0, [r3, #24]
    SET_COMP(1, 2, 1,1, 1, 1,1);
 8009560:	6599      	str	r1, [r3, #88]	@ 0x58
 8009562:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_COMP(2, 3, 1,1, 1, 1,1);
 8009564:	f8c3 50b0 	str.w	r5, [r3, #176]	@ 0xb0
    SET_COMP(0, 1, 2,2, 0, 0,0);
 8009568:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800956c:	e9c3 0004 	strd	r0, r0, [r3, #16]
    SET_COMP(1, 2, 1,1, 1, 1,1);
 8009570:	e9c3 2218 	strd	r2, r2, [r3, #96]	@ 0x60
 8009574:	e9c3 221a 	strd	r2, r2, [r3, #104]	@ 0x68
    SET_COMP(2, 3, 1,1, 1, 1,1);
 8009578:	e9c3 222e 	strd	r2, r2, [r3, #184]	@ 0xb8
 800957c:	e7e1      	b.n	8009542 <jpeg_set_colorspace+0x88>
    cinfo->num_components = 4;
 800957e:	2304      	movs	r3, #4
    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag CMYK */
 8009580:	2101      	movs	r1, #1
    SET_COMP(1, 0x4D /* 'M' */, 1,1, 0, 0,0);
 8009582:	204d      	movs	r0, #77	@ 0x4d
    SET_COMP(0, 0x43 /* 'C' */, 1,1, 0, 0,0);
 8009584:	2243      	movs	r2, #67	@ 0x43
    cinfo->num_components = 4;
 8009586:	64e3      	str	r3, [r4, #76]	@ 0x4c
    SET_COMP(0, 0x43 /* 'C' */, 1,1, 0, 0,0);
 8009588:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag CMYK */
 800958a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
    SET_COMP(1, 0x4D /* 'M' */, 1,1, 0, 0,0);
 800958e:	6598      	str	r0, [r3, #88]	@ 0x58
    SET_COMP(2, 0x59 /* 'Y' */, 1,1, 0, 0,0);
 8009590:	2059      	movs	r0, #89	@ 0x59
    SET_COMP(0, 0x43 /* 'C' */, 1,1, 0, 0,0);
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	2200      	movs	r2, #0
    SET_COMP(2, 0x59 /* 'Y' */, 1,1, 0, 0,0);
 8009596:	f8c3 00b0 	str.w	r0, [r3, #176]	@ 0xb0
    SET_COMP(3, 0x4B /* 'K' */, 1,1, 0, 0,0);
 800959a:	204b      	movs	r0, #75	@ 0x4b
    SET_COMP(0, 0x43 /* 'C' */, 1,1, 0, 0,0);
 800959c:	619a      	str	r2, [r3, #24]
    SET_COMP(1, 0x4D /* 'M' */, 1,1, 0, 0,0);
 800959e:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_COMP(2, 0x59 /* 'Y' */, 1,1, 0, 0,0);
 80095a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    SET_COMP(3, 0x4B /* 'K' */, 1,1, 0, 0,0);
 80095a4:	f8c3 0108 	str.w	r0, [r3, #264]	@ 0x108
 80095a8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    SET_COMP(0, 0x43 /* 'C' */, 1,1, 0, 0,0);
 80095ac:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80095b0:	e9c3 2204 	strd	r2, r2, [r3, #16]
    SET_COMP(1, 0x4D /* 'M' */, 1,1, 0, 0,0);
 80095b4:	e9c3 1118 	strd	r1, r1, [r3, #96]	@ 0x60
 80095b8:	e9c3 221a 	strd	r2, r2, [r3, #104]	@ 0x68
    SET_COMP(2, 0x59 /* 'Y' */, 1,1, 0, 0,0);
 80095bc:	e9c3 112e 	strd	r1, r1, [r3, #184]	@ 0xb8
 80095c0:	e9c3 2230 	strd	r2, r2, [r3, #192]	@ 0xc0
    SET_COMP(3, 0x4B /* 'K' */, 1,1, 0, 0,0);
 80095c4:	e9c3 1144 	strd	r1, r1, [r3, #272]	@ 0x110
 80095c8:	e9c3 2246 	strd	r2, r2, [r3, #280]	@ 0x118
    break;
 80095cc:	e79d      	b.n	800950a <jpeg_set_colorspace+0x50>
    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag YCCK */
 80095ce:	2201      	movs	r2, #1
    cinfo->num_components = 4;
 80095d0:	2504      	movs	r5, #4
    SET_COMP(0, 1, 2,2, 0, 0,0);
 80095d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80095d4:	2100      	movs	r1, #0
    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag YCCK */
 80095d6:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
    SET_COMP(0, 1, 2,2, 0, 0,0);
 80095da:	2002      	movs	r0, #2
    cinfo->num_components = 4;
 80095dc:	64e5      	str	r5, [r4, #76]	@ 0x4c
    SET_COMP(2, 3, 1,1, 1, 1,1);
 80095de:	2403      	movs	r4, #3
    SET_COMP(0, 1, 2,2, 0, 0,0);
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	6199      	str	r1, [r3, #24]
    SET_COMP(1, 2, 1,1, 1, 1,1);
 80095e4:	6598      	str	r0, [r3, #88]	@ 0x58
 80095e6:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_COMP(2, 3, 1,1, 1, 1,1);
 80095e8:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
 80095ec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    SET_COMP(3, 4, 2,2, 0, 0,0);
 80095f0:	f8c3 5108 	str.w	r5, [r3, #264]	@ 0x108
 80095f4:	f8c3 1120 	str.w	r1, [r3, #288]	@ 0x120
    SET_COMP(0, 1, 2,2, 0, 0,0);
 80095f8:	e9c3 0002 	strd	r0, r0, [r3, #8]
 80095fc:	e9c3 1104 	strd	r1, r1, [r3, #16]
    SET_COMP(1, 2, 1,1, 1, 1,1);
 8009600:	e9c3 2218 	strd	r2, r2, [r3, #96]	@ 0x60
 8009604:	e9c3 221a 	strd	r2, r2, [r3, #104]	@ 0x68
    SET_COMP(2, 3, 1,1, 1, 1,1);
 8009608:	e9c3 222e 	strd	r2, r2, [r3, #184]	@ 0xb8
 800960c:	e9c3 2230 	strd	r2, r2, [r3, #192]	@ 0xc0
    SET_COMP(3, 4, 2,2, 0, 0,0);
 8009610:	e9c3 0044 	strd	r0, r0, [r3, #272]	@ 0x110
 8009614:	e9c3 1146 	strd	r1, r1, [r3, #280]	@ 0x118
    break;
 8009618:	e777      	b.n	800950a <jpeg_set_colorspace+0x50>
    cinfo->num_components = cinfo->input_components;
 800961a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    if (cinfo->num_components < 1 || cinfo->num_components > MAX_COMPONENTS)
 800961c:	1e53      	subs	r3, r2, #1
    cinfo->num_components = cinfo->input_components;
 800961e:	64e2      	str	r2, [r4, #76]	@ 0x4c
    if (cinfo->num_components < 1 || cinfo->num_components > MAX_COMPONENTS)
 8009620:	2b09      	cmp	r3, #9
 8009622:	d908      	bls.n	8009636 <jpeg_set_colorspace+0x17c>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	211b      	movs	r1, #27
 8009628:	4620      	mov	r0, r4
 800962a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800962e:	220a      	movs	r2, #10
 8009630:	61da      	str	r2, [r3, #28]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4798      	blx	r3
    for (ci = 0; ci < cinfo->num_components; ci++) {
 8009636:	2300      	movs	r3, #0
 8009638:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
      SET_COMP(ci, ci, 1,1, 0, 0,0);
 800963a:	f04f 0c58 	mov.w	ip, #88	@ 0x58
 800963e:	2001      	movs	r0, #1
 8009640:	4619      	mov	r1, r3
    for (ci = 0; ci < cinfo->num_components; ci++) {
 8009642:	429f      	cmp	r7, r3
 8009644:	f77f af61 	ble.w	800950a <jpeg_set_colorspace+0x50>
      SET_COMP(ci, ci, 1,1, 0, 0,0);
 8009648:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 800964a:	fb0c f503 	mul.w	r5, ip, r3
 800964e:	1972      	adds	r2, r6, r5
 8009650:	5173      	str	r3, [r6, r5]
    for (ci = 0; ci < cinfo->num_components; ci++) {
 8009652:	3301      	adds	r3, #1
      SET_COMP(ci, ci, 1,1, 0, 0,0);
 8009654:	6191      	str	r1, [r2, #24]
 8009656:	e9c2 0002 	strd	r0, r0, [r2, #8]
 800965a:	e9c2 1104 	strd	r1, r1, [r2, #16]
 800965e:	e7f0      	b.n	8009642 <jpeg_set_colorspace+0x188>
    ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	220b      	movs	r2, #11
 8009664:	4620      	mov	r0, r4
 8009666:	615a      	str	r2, [r3, #20]
 8009668:	681b      	ldr	r3, [r3, #0]
}
 800966a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800966e:	4718      	bx	r3

08009670 <jpeg_default_colorspace>:
  switch (cinfo->in_color_space) {
 8009670:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8009674:	2b05      	cmp	r3, #5
 8009676:	d80f      	bhi.n	8009698 <jpeg_default_colorspace+0x28>
 8009678:	e8df f003 	tbb	[pc, r3]
 800967c:	0606030c 	.word	0x0606030c
 8009680:	0a08      	.short	0x0a08
    jpeg_set_colorspace(cinfo, JCS_GRAYSCALE);
 8009682:	2101      	movs	r1, #1
    jpeg_set_colorspace(cinfo, JCS_YCbCr);
 8009684:	f7ff bf19 	b.w	80094ba <jpeg_set_colorspace>
 8009688:	2103      	movs	r1, #3
 800968a:	e7fb      	b.n	8009684 <jpeg_default_colorspace+0x14>
    jpeg_set_colorspace(cinfo, JCS_CMYK); /* By default, no translation */
 800968c:	2104      	movs	r1, #4
 800968e:	e7f9      	b.n	8009684 <jpeg_default_colorspace+0x14>
    jpeg_set_colorspace(cinfo, JCS_YCCK);
 8009690:	2105      	movs	r1, #5
 8009692:	e7f7      	b.n	8009684 <jpeg_default_colorspace+0x14>
    jpeg_set_colorspace(cinfo, JCS_UNKNOWN);
 8009694:	2100      	movs	r1, #0
 8009696:	e7f5      	b.n	8009684 <jpeg_default_colorspace+0x14>
    ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
 8009698:	6803      	ldr	r3, [r0, #0]
 800969a:	220a      	movs	r2, #10
 800969c:	615a      	str	r2, [r3, #20]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4718      	bx	r3
	...

080096a4 <jpeg_set_defaults>:
  if (cinfo->global_state != CSTATE_START)
 80096a4:	6942      	ldr	r2, [r0, #20]
 80096a6:	2a64      	cmp	r2, #100	@ 0x64
{
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	4604      	mov	r4, r0
  if (cinfo->global_state != CSTATE_START)
 80096ac:	d005      	beq.n	80096ba <jpeg_set_defaults+0x16>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80096ae:	6803      	ldr	r3, [r0, #0]
 80096b0:	2115      	movs	r1, #21
 80096b2:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4798      	blx	r3
  if (cinfo->comp_info == NULL)
 80096ba:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80096bc:	b931      	cbnz	r1, 80096cc <jpeg_set_defaults+0x28>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 80096be:	6863      	ldr	r3, [r4, #4]
 80096c0:	f44f 725c 	mov.w	r2, #880	@ 0x370
 80096c4:	4620      	mov	r0, r4
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4798      	blx	r3
    cinfo->comp_info = (jpeg_component_info *)
 80096ca:	6560      	str	r0, [r4, #84]	@ 0x54
  cinfo->scale_num = 1;		/* 1:1 scaling */
 80096cc:	2501      	movs	r5, #1
  cinfo->data_precision = BITS_IN_JSAMPLE;
 80096ce:	2308      	movs	r3, #8
  jpeg_set_quality(cinfo, 75, TRUE);
 80096d0:	4620      	mov	r0, r4
 80096d2:	214b      	movs	r1, #75	@ 0x4b
 80096d4:	462a      	mov	r2, r5
  cinfo->data_precision = BITS_IN_JSAMPLE;
 80096d6:	64a3      	str	r3, [r4, #72]	@ 0x48
  cinfo->scale_denom = 1;
 80096d8:	e9c4 550e 	strd	r5, r5, [r4, #56]	@ 0x38
  jpeg_set_quality(cinfo, 75, TRUE);
 80096dc:	f7ff fee2 	bl	80094a4 <jpeg_set_quality>
  add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[0],
 80096e0:	f104 0178 	add.w	r1, r4, #120	@ 0x78
 80096e4:	4620      	mov	r0, r4
 80096e6:	4b26      	ldr	r3, [pc, #152]	@ (8009780 <jpeg_set_defaults+0xdc>)
 80096e8:	4a26      	ldr	r2, [pc, #152]	@ (8009784 <jpeg_set_defaults+0xe0>)
 80096ea:	f7ff fe38 	bl	800935e <add_huff_table>
  add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[0],
 80096ee:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 80096f2:	4620      	mov	r0, r4
 80096f4:	4b24      	ldr	r3, [pc, #144]	@ (8009788 <jpeg_set_defaults+0xe4>)
 80096f6:	4a25      	ldr	r2, [pc, #148]	@ (800978c <jpeg_set_defaults+0xe8>)
 80096f8:	f7ff fe31 	bl	800935e <add_huff_table>
  add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[1],
 80096fc:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
 8009700:	4620      	mov	r0, r4
 8009702:	4b23      	ldr	r3, [pc, #140]	@ (8009790 <jpeg_set_defaults+0xec>)
 8009704:	4a23      	ldr	r2, [pc, #140]	@ (8009794 <jpeg_set_defaults+0xf0>)
 8009706:	f7ff fe2a 	bl	800935e <add_huff_table>
  add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[1],
 800970a:	4b23      	ldr	r3, [pc, #140]	@ (8009798 <jpeg_set_defaults+0xf4>)
 800970c:	f104 018c 	add.w	r1, r4, #140	@ 0x8c
 8009710:	4620      	mov	r0, r4
 8009712:	4a22      	ldr	r2, [pc, #136]	@ (800979c <jpeg_set_defaults+0xf8>)
 8009714:	f7ff fe23 	bl	800935e <add_huff_table>
    cinfo->arith_dc_L[i] = 0;
 8009718:	2210      	movs	r2, #16
 800971a:	2100      	movs	r1, #0
 800971c:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 8009720:	f006 f9c6 	bl	800fab0 <memset>
    cinfo->arith_dc_U[i] = 1;
 8009724:	4629      	mov	r1, r5
 8009726:	2210      	movs	r2, #16
 8009728:	f104 00a8 	add.w	r0, r4, #168	@ 0xa8
 800972c:	f006 f9c0 	bl	800fab0 <memset>
    cinfo->arith_ac_K[i] = 5;
 8009730:	2210      	movs	r2, #16
 8009732:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8009736:	2105      	movs	r1, #5
 8009738:	f006 f9ba 	bl	800fab0 <memset>
  if (cinfo->data_precision > 8)
 800973c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
  cinfo->scan_info = NULL;
 800973e:	2300      	movs	r3, #0
  jpeg_default_colorspace(cinfo);
 8009740:	4620      	mov	r0, r4
  if (cinfo->data_precision > 8)
 8009742:	2a08      	cmp	r2, #8
  cinfo->dct_method = JDCT_DEFAULT;
 8009744:	f884 30e8 	strb.w	r3, [r4, #232]	@ 0xe8
  if (cinfo->data_precision > 8)
 8009748:	bfd4      	ite	le
 800974a:	2200      	movle	r2, #0
 800974c:	2201      	movgt	r2, #1
  cinfo->density_unit = 0;	/* Pixel size is unknown by default */
 800974e:	f884 30fa 	strb.w	r3, [r4, #250]	@ 0xfa
  cinfo->CCIR601_sampling = FALSE;
 8009752:	e9c4 2336 	strd	r2, r3, [r4, #216]	@ 0xd8
  cinfo->num_scans = 0;
 8009756:	e9c4 3332 	strd	r3, r3, [r4, #200]	@ 0xc8
  cinfo->arith_code = FALSE;
 800975a:	e9c4 3334 	strd	r3, r3, [r4, #208]	@ 0xd0
  cinfo->smoothing_factor = 0;
 800975e:	e9c4 5338 	strd	r5, r3, [r4, #224]	@ 0xe0
  cinfo->restart_in_rows = 0;
 8009762:	e9c4 333b 	strd	r3, r3, [r4, #236]	@ 0xec
  cinfo->JFIF_major_version = 1; /* Default JFIF version = 1.01 */
 8009766:	f240 1201 	movw	r2, #257	@ 0x101
  cinfo->X_density = 1;		/* Pixel aspect ratio is square by default */
 800976a:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
  cinfo->JFIF_major_version = 1; /* Default JFIF version = 1.01 */
 800976e:	f8a4 20f8 	strh.w	r2, [r4, #248]	@ 0xf8
  cinfo->X_density = 1;		/* Pixel aspect ratio is square by default */
 8009772:	f8c4 30fc 	str.w	r3, [r4, #252]	@ 0xfc
}
 8009776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  jpeg_default_colorspace(cinfo);
 800977a:	f7ff bf79 	b.w	8009670 <jpeg_default_colorspace>
 800977e:	bf00      	nop
 8009780:	080119bb 	.word	0x080119bb
 8009784:	080119c7 	.word	0x080119c7
 8009788:	08011908 	.word	0x08011908
 800978c:	080119aa 	.word	0x080119aa
 8009790:	080118eb 	.word	0x080118eb
 8009794:	080118f7 	.word	0x080118f7
 8009798:	08011838 	.word	0x08011838
 800979c:	080118da 	.word	0x080118da

080097a0 <start_pass_prep>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_prep (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4604      	mov	r4, r0
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
 80097a4:	f8d0 518c 	ldr.w	r5, [r0, #396]	@ 0x18c

  if (pass_mode != JBUF_PASS_THRU)
 80097a8:	b121      	cbz	r1, 80097b4 <start_pass_prep+0x14>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 80097aa:	6803      	ldr	r3, [r0, #0]
 80097ac:	2203      	movs	r2, #3
 80097ae:	615a      	str	r2, [r3, #20]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4798      	blx	r3

  /* Initialize total-height counter for detecting bottom of image */
  prep->rows_to_go = cinfo->image_height;
 80097b4:	6a23      	ldr	r3, [r4, #32]
 80097b6:	632b      	str	r3, [r5, #48]	@ 0x30
  /* Mark the conversion buffer empty */
  prep->next_buf_row = 0;
 80097b8:	2300      	movs	r3, #0
#ifdef CONTEXT_ROWS_SUPPORTED
  /* Preset additional state variables for context mode.
   * These aren't used in non-context mode, so we needn't test which mode.
   */
  prep->this_row_group = 0;
 80097ba:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
  /* Set next_buf_stop to stop after two row groups have been read in. */
  prep->next_buf_stop = 2 * cinfo->max_v_samp_factor;
 80097be:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
 80097c2:	005b      	lsls	r3, r3, #1
 80097c4:	63eb      	str	r3, [r5, #60]	@ 0x3c
#endif
}
 80097c6:	bd38      	pop	{r3, r4, r5, pc}

080097c8 <expand_bottom_edge>:
 */

LOCAL(void)
expand_bottom_edge (JSAMPARRAY image_data, JDIMENSION num_cols,
		    int input_rows, int output_rows)
{
 80097c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097cc:	4605      	mov	r5, r0
 80097ce:	460f      	mov	r7, r1
 80097d0:	461e      	mov	r6, r3
  register int row;

  for (row = input_rows; row < output_rows; row++) {
 80097d2:	4614      	mov	r4, r2
    jcopy_sample_rows(image_data, input_rows-1, image_data, row,
 80097d4:	f102 38ff 	add.w	r8, r2, #4294967295
 80097d8:	f04f 0901 	mov.w	r9, #1
  for (row = input_rows; row < output_rows; row++) {
 80097dc:	42b4      	cmp	r4, r6
 80097de:	db02      	blt.n	80097e6 <expand_bottom_edge+0x1e>
		      1, num_cols);
  }
}
 80097e0:	b003      	add	sp, #12
 80097e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    jcopy_sample_rows(image_data, input_rows-1, image_data, row,
 80097e6:	4623      	mov	r3, r4
 80097e8:	462a      	mov	r2, r5
 80097ea:	4641      	mov	r1, r8
 80097ec:	4628      	mov	r0, r5
  for (row = input_rows; row < output_rows; row++) {
 80097ee:	3401      	adds	r4, #1
    jcopy_sample_rows(image_data, input_rows-1, image_data, row,
 80097f0:	e9cd 9700 	strd	r9, r7, [sp]
 80097f4:	f006 f869 	bl	800f8ca <jcopy_sample_rows>
  for (row = input_rows; row < output_rows; row++) {
 80097f8:	e7f0      	b.n	80097dc <expand_bottom_edge+0x14>

080097fa <pre_process_data>:
pre_process_data (j_compress_ptr cinfo,
		  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
		  JDIMENSION in_rows_avail,
		  JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
		  JDIMENSION out_row_groups_avail)
{
 80097fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
 80097fe:	f8d0 518c 	ldr.w	r5, [r0, #396]	@ 0x18c
{
 8009802:	b085      	sub	sp, #20
 8009804:	469b      	mov	fp, r3
 8009806:	4604      	mov	r4, r0
    /* Do color conversion to fill the conversion buffer. */
    inrows = in_rows_avail - *in_row_ctr;
    numrows = cinfo->max_v_samp_factor - prep->next_buf_row;
    numrows = (int) MIN((JDIMENSION) numrows, inrows);
    (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
				       prep->color_buf,
 8009808:	f105 0308 	add.w	r3, r5, #8
{
 800980c:	4691      	mov	r9, r2
 800980e:	9103      	str	r1, [sp, #12]
				       prep->color_buf,
 8009810:	9302      	str	r3, [sp, #8]
{
 8009812:	e9dd 8a0f 	ldrd	r8, sl, [sp, #60]	@ 0x3c
  while (*in_row_ctr < in_rows_avail &&
 8009816:	f8d9 1000 	ldr.w	r1, [r9]
 800981a:	4559      	cmp	r1, fp
 800981c:	d258      	bcs.n	80098d0 <pre_process_data+0xd6>
 800981e:	f8d8 3000 	ldr.w	r3, [r8]
 8009822:	4553      	cmp	r3, sl
 8009824:	d254      	bcs.n	80098d0 <pre_process_data+0xd6>
    numrows = cinfo->max_v_samp_factor - prep->next_buf_row;
 8009826:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
    inrows = in_rows_avail - *in_row_ctr;
 8009828:	ebab 0201 	sub.w	r2, fp, r1
    numrows = cinfo->max_v_samp_factor - prep->next_buf_row;
 800982c:	f8d4 7110 	ldr.w	r7, [r4, #272]	@ 0x110
 8009830:	1aff      	subs	r7, r7, r3
    numrows = (int) MIN((JDIMENSION) numrows, inrows);
 8009832:	4297      	cmp	r7, r2
 8009834:	bf28      	it	cs
 8009836:	4617      	movcs	r7, r2
    (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
 8009838:	f8d4 2198 	ldr.w	r2, [r4, #408]	@ 0x198
 800983c:	9700      	str	r7, [sp, #0]
 800983e:	6856      	ldr	r6, [r2, #4]
 8009840:	e9dd 2002 	ldrd	r2, r0, [sp, #8]
 8009844:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009848:	4620      	mov	r0, r4
 800984a:	47b0      	blx	r6
				       (JDIMENSION) prep->next_buf_row,
				       numrows);
    *in_row_ctr += numrows;
 800984c:	f8d9 3000 	ldr.w	r3, [r9]
 8009850:	443b      	add	r3, r7
 8009852:	f8c9 3000 	str.w	r3, [r9]
    prep->next_buf_row += numrows;
 8009856:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
    prep->rows_to_go -= numrows;
 8009858:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
    prep->next_buf_row += numrows;
 800985a:	443b      	add	r3, r7
 800985c:	f8d4 2110 	ldr.w	r2, [r4, #272]	@ 0x110
    prep->rows_to_go -= numrows;
 8009860:	1bf6      	subs	r6, r6, r7
    prep->next_buf_row += numrows;
 8009862:	636b      	str	r3, [r5, #52]	@ 0x34
    prep->rows_to_go -= numrows;
 8009864:	632e      	str	r6, [r5, #48]	@ 0x30
    /* If at bottom of image, pad to fill the conversion buffer. */
    if (prep->rows_to_go == 0 &&
 8009866:	bb1e      	cbnz	r6, 80098b0 <pre_process_data+0xb6>
 8009868:	4293      	cmp	r3, r2
 800986a:	da21      	bge.n	80098b0 <pre_process_data+0xb6>
 800986c:	1d2f      	adds	r7, r5, #4
	prep->next_buf_row < cinfo->max_v_samp_factor) {
      for (ci = 0; ci < cinfo->num_components; ci++) {
 800986e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
	expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
 8009870:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
      for (ci = 0; ci < cinfo->num_components; ci++) {
 8009874:	42b2      	cmp	r2, r6
 8009876:	dc13      	bgt.n	80098a0 <pre_process_data+0xa6>
			   prep->next_buf_row, cinfo->max_v_samp_factor);
      }
      prep->next_buf_row = cinfo->max_v_samp_factor;
 8009878:	636b      	str	r3, [r5, #52]	@ 0x34
    }
    /* If we've filled the conversion buffer, empty it. */
    if (prep->next_buf_row == cinfo->max_v_samp_factor) {
      (*cinfo->downsample->downsample) (cinfo,
 800987a:	f8d4 319c 	ldr.w	r3, [r4, #412]	@ 0x19c
 800987e:	4620      	mov	r0, r4
 8009880:	f8d8 2000 	ldr.w	r2, [r8]
 8009884:	9902      	ldr	r1, [sp, #8]
 8009886:	9200      	str	r2, [sp, #0]
 8009888:	2200      	movs	r2, #0
 800988a:	685e      	ldr	r6, [r3, #4]
 800988c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800988e:	47b0      	blx	r6
					prep->color_buf, (JDIMENSION) 0,
					output_buf, *out_row_group_ctr);
      prep->next_buf_row = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	636b      	str	r3, [r5, #52]	@ 0x34
      (*out_row_group_ctr)++;
 8009894:	f8d8 3000 	ldr.w	r3, [r8]
 8009898:	3301      	adds	r3, #1
 800989a:	f8c8 3000 	str.w	r3, [r8]
 800989e:	e009      	b.n	80098b4 <pre_process_data+0xba>
	expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
 80098a0:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      for (ci = 0; ci < cinfo->num_components; ci++) {
 80098a2:	3601      	adds	r6, #1
	expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
 80098a4:	69e1      	ldr	r1, [r4, #28]
 80098a6:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80098aa:	f7ff ff8d 	bl	80097c8 <expand_bottom_edge>
      for (ci = 0; ci < cinfo->num_components; ci++) {
 80098ae:	e7de      	b.n	800986e <pre_process_data+0x74>
    if (prep->next_buf_row == cinfo->max_v_samp_factor) {
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d0e2      	beq.n	800987a <pre_process_data+0x80>
    }
    /* If at bottom of image, pad the output to a full iMCU height.
     * Note we assume the caller is providing a one-iMCU-height output buffer!
     */
    if (prep->rows_to_go == 0 &&
 80098b4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1ad      	bne.n	8009816 <pre_process_data+0x1c>
 80098ba:	f8d8 2000 	ldr.w	r2, [r8]
 80098be:	4552      	cmp	r2, sl
 80098c0:	d2a9      	bcs.n	8009816 <pre_process_data+0x1c>
	*out_row_group_ctr < out_row_groups_avail) {
      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80098c2:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 80098c4:	461d      	mov	r5, r3
 80098c6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80098c8:	42ab      	cmp	r3, r5
 80098ca:	dc04      	bgt.n	80098d6 <pre_process_data+0xdc>
	expand_bottom_edge(output_buf[ci],
			   compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			   (int) (*out_row_group_ctr * numrows),
			   (int) (out_row_groups_avail * numrows));
      }
      *out_row_group_ctr = out_row_groups_avail;
 80098cc:	f8c8 a000 	str.w	sl, [r8]
      break;			/* can exit outer loop without test */
    }
  }
}
 80098d0:	b005      	add	sp, #20
 80098d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 80098d6:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
	   ci++, compptr++) {
 80098d8:	3658      	adds	r6, #88	@ 0x58
	numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 80098da:	f856 7c4c 	ldr.w	r7, [r6, #-76]
	expand_bottom_edge(output_buf[ci],
 80098de:	f856 0c34 	ldr.w	r0, [r6, #-52]
	numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 80098e2:	435f      	muls	r7, r3
 80098e4:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
	expand_bottom_edge(output_buf[ci],
 80098e8:	f856 1c3c 	ldr.w	r1, [r6, #-60]
			   (int) (*out_row_group_ctr * numrows),
 80098ec:	f8d8 2000 	ldr.w	r2, [r8]
	expand_bottom_edge(output_buf[ci],
 80098f0:	4341      	muls	r1, r0
 80098f2:	980e      	ldr	r0, [sp, #56]	@ 0x38
	numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 80098f4:	fb97 f7f3 	sdiv	r7, r7, r3
	expand_bottom_edge(output_buf[ci],
 80098f8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80098fc:	fb0a f307 	mul.w	r3, sl, r7
 8009900:	437a      	muls	r2, r7
	   ci++, compptr++) {
 8009902:	3501      	adds	r5, #1
	expand_bottom_edge(output_buf[ci],
 8009904:	f7ff ff60 	bl	80097c8 <expand_bottom_edge>
	   ci++, compptr++) {
 8009908:	e7dd      	b.n	80098c6 <pre_process_data+0xcc>

0800990a <pre_process_context>:
pre_process_context (j_compress_ptr cinfo,
		     JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
		     JDIMENSION in_rows_avail,
		     JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
		     JDIMENSION out_row_groups_avail)
{
 800990a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990e:	b087      	sub	sp, #28
 8009910:	4605      	mov	r5, r0
 8009912:	4617      	mov	r7, r2
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
 8009914:	f8d0 418c 	ldr.w	r4, [r0, #396]	@ 0x18c
{
 8009918:	9303      	str	r3, [sp, #12]
  int numrows, ci;
  int buf_height = cinfo->max_v_samp_factor * 3;
 800991a:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
{
 800991e:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
  int buf_height = cinfo->max_v_samp_factor * 3;
 8009922:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
{
 8009926:	9105      	str	r1, [sp, #20]
      /* Do color conversion to fill the conversion buffer. */
      inrows = in_rows_avail - *in_row_ctr;
      numrows = prep->next_buf_stop - prep->next_buf_row;
      numrows = (int) MIN((JDIMENSION) numrows, inrows);
      (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
					 prep->color_buf,
 8009928:	f104 0308 	add.w	r3, r4, #8
 800992c:	9304      	str	r3, [sp, #16]
 800992e:	e027      	b.n	8009980 <pre_process_context+0x76>
    if (*in_row_ctr < in_rows_avail) {
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	9b03      	ldr	r3, [sp, #12]
 8009934:	4299      	cmp	r1, r3
 8009936:	d249      	bcs.n	80099cc <pre_process_context+0xc2>
      numrows = prep->next_buf_stop - prep->next_buf_row;
 8009938:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800993a:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
      inrows = in_rows_avail - *in_row_ctr;
 800993c:	9a03      	ldr	r2, [sp, #12]
      numrows = prep->next_buf_stop - prep->next_buf_row;
 800993e:	1af6      	subs	r6, r6, r3
      inrows = in_rows_avail - *in_row_ctr;
 8009940:	1a52      	subs	r2, r2, r1
      numrows = (int) MIN((JDIMENSION) numrows, inrows);
 8009942:	4296      	cmp	r6, r2
 8009944:	bf28      	it	cs
 8009946:	4616      	movcs	r6, r2
      (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
 8009948:	f8d5 2198 	ldr.w	r2, [r5, #408]	@ 0x198
 800994c:	9600      	str	r6, [sp, #0]
 800994e:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8009952:	e9dd 2004 	ldrd	r2, r0, [sp, #16]
 8009956:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800995a:	4628      	mov	r0, r5
 800995c:	47c8      	blx	r9
					 (JDIMENSION) prep->next_buf_row,
					 numrows);
      /* Pad at top of image, if first time through */
      if (prep->rows_to_go == cinfo->image_height) {
 800995e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009960:	6a2b      	ldr	r3, [r5, #32]
 8009962:	429a      	cmp	r2, r3
 8009964:	d02f      	beq.n	80099c6 <pre_process_context+0xbc>
			      prep->color_buf[ci], -row,
			      1, cinfo->image_width);
	  }
	}
      }
      *in_row_ctr += numrows;
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	4433      	add	r3, r6
 800996a:	603b      	str	r3, [r7, #0]
      prep->next_buf_row += numrows;
 800996c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800996e:	4433      	add	r3, r6
 8009970:	6363      	str	r3, [r4, #52]	@ 0x34
      prep->rows_to_go -= numrows;
 8009972:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009974:	1b9b      	subs	r3, r3, r6
 8009976:	6323      	str	r3, [r4, #48]	@ 0x30
	}
	prep->next_buf_row = prep->next_buf_stop;
      }
    }
    /* If we've gotten enough data, downsample a row group. */
    if (prep->next_buf_row == prep->next_buf_stop) {
 8009978:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800997a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800997c:	429a      	cmp	r2, r3
 800997e:	d033      	beq.n	80099e8 <pre_process_context+0xde>
  while (*out_row_group_ctr < out_row_groups_avail) {
 8009980:	f8d8 3000 	ldr.w	r3, [r8]
 8009984:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009986:	4293      	cmp	r3, r2
 8009988:	d3d2      	bcc.n	8009930 <pre_process_context+0x26>
      if (prep->next_buf_row >= buf_height)
	prep->next_buf_row = 0;
      prep->next_buf_stop = prep->next_buf_row + cinfo->max_v_samp_factor;
    }
  }
}
 800998a:	b007      	add	sp, #28
 800998c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    jcopy_sample_rows(prep->color_buf[ci], 0,
 8009990:	9b04      	ldr	r3, [sp, #16]
 8009992:	2100      	movs	r1, #0
 8009994:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8009998:	69eb      	ldr	r3, [r5, #28]
 800999a:	4610      	mov	r0, r2
 800999c:	9301      	str	r3, [sp, #4]
 800999e:	2301      	movs	r3, #1
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	f1ca 0300 	rsb	r3, sl, #0
	  for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
 80099a6:	f10a 0a01 	add.w	sl, sl, #1
	    jcopy_sample_rows(prep->color_buf[ci], 0,
 80099aa:	f005 ff8e 	bl	800f8ca <jcopy_sample_rows>
	  for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
 80099ae:	f8d5 3110 	ldr.w	r3, [r5, #272]	@ 0x110
 80099b2:	4553      	cmp	r3, sl
 80099b4:	daec      	bge.n	8009990 <pre_process_context+0x86>
	for (ci = 0; ci < cinfo->num_components; ci++) {
 80099b6:	f109 0901 	add.w	r9, r9, #1
 80099ba:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80099bc:	454b      	cmp	r3, r9
 80099be:	ddd2      	ble.n	8009966 <pre_process_context+0x5c>
	  for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
 80099c0:	f04f 0a01 	mov.w	sl, #1
 80099c4:	e7f3      	b.n	80099ae <pre_process_context+0xa4>
	for (ci = 0; ci < cinfo->num_components; ci++) {
 80099c6:	f04f 0900 	mov.w	r9, #0
 80099ca:	e7f6      	b.n	80099ba <pre_process_context+0xb0>
      if (prep->rows_to_go != 0)
 80099cc:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80099ce:	2e00      	cmp	r6, #0
 80099d0:	d1db      	bne.n	800998a <pre_process_context+0x80>
      if (prep->next_buf_row < prep->next_buf_stop) {
 80099d2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80099d4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80099d6:	429a      	cmp	r2, r3
 80099d8:	dace      	bge.n	8009978 <pre_process_context+0x6e>
 80099da:	f104 0904 	add.w	r9, r4, #4
	for (ci = 0; ci < cinfo->num_components; ci++) {
 80099de:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
	  expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
 80099e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
	for (ci = 0; ci < cinfo->num_components; ci++) {
 80099e2:	42b2      	cmp	r2, r6
 80099e4:	dc22      	bgt.n	8009a2c <pre_process_context+0x122>
	prep->next_buf_row = prep->next_buf_stop;
 80099e6:	6363      	str	r3, [r4, #52]	@ 0x34
      (*cinfo->downsample->downsample) (cinfo,
 80099e8:	f8d5 319c 	ldr.w	r3, [r5, #412]	@ 0x19c
 80099ec:	f104 0108 	add.w	r1, r4, #8
 80099f0:	f8d8 2000 	ldr.w	r2, [r8]
 80099f4:	4628      	mov	r0, r5
 80099f6:	9200      	str	r2, [sp, #0]
 80099f8:	685e      	ldr	r6, [r3, #4]
 80099fa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80099fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099fe:	47b0      	blx	r6
      (*out_row_group_ctr)++;
 8009a00:	f8d8 3000 	ldr.w	r3, [r8]
 8009a04:	3301      	adds	r3, #1
 8009a06:	f8c8 3000 	str.w	r3, [r8]
      prep->this_row_group += cinfo->max_v_samp_factor;
 8009a0a:	f8d5 2110 	ldr.w	r2, [r5, #272]	@ 0x110
 8009a0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009a10:	4413      	add	r3, r2
	prep->this_row_group = 0;
 8009a12:	455b      	cmp	r3, fp
 8009a14:	bfa8      	it	ge
 8009a16:	2300      	movge	r3, #0
 8009a18:	63a3      	str	r3, [r4, #56]	@ 0x38
      if (prep->next_buf_row >= buf_height)
 8009a1a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a1c:	455b      	cmp	r3, fp
	prep->next_buf_row = 0;
 8009a1e:	bfa4      	itt	ge
 8009a20:	2300      	movge	r3, #0
 8009a22:	6363      	strge	r3, [r4, #52]	@ 0x34
      prep->next_buf_stop = prep->next_buf_row + cinfo->max_v_samp_factor;
 8009a24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a26:	4413      	add	r3, r2
 8009a28:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8009a2a:	e77d      	b.n	8009928 <pre_process_context+0x1e>
	  expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
 8009a2c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
	for (ci = 0; ci < cinfo->num_components; ci++) {
 8009a2e:	3601      	adds	r6, #1
	  expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
 8009a30:	69e9      	ldr	r1, [r5, #28]
 8009a32:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8009a36:	f7ff fec7 	bl	80097c8 <expand_bottom_edge>
	for (ci = 0; ci < cinfo->num_components; ci++) {
 8009a3a:	e7d0      	b.n	80099de <pre_process_context+0xd4>

08009a3c <jinit_c_prep_controller>:
 * Initialize preprocessing controller.
 */

GLOBAL(void)
jinit_c_prep_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
 8009a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a40:	4604      	mov	r4, r0
 8009a42:	b087      	sub	sp, #28
  my_prep_ptr prep;
  int ci;
  jpeg_component_info * compptr;

  if (need_full_buffer)		/* safety check */
 8009a44:	b121      	cbz	r1, 8009a50 <jinit_c_prep_controller+0x14>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8009a46:	6803      	ldr	r3, [r0, #0]
 8009a48:	2203      	movs	r2, #3
 8009a4a:	615a      	str	r2, [r3, #20]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4798      	blx	r3

  prep = (my_prep_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009a50:	6863      	ldr	r3, [r4, #4]
 8009a52:	2240      	movs	r2, #64	@ 0x40
 8009a54:	2101      	movs	r1, #1
 8009a56:	4620      	mov	r0, r4
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4798      	blx	r3
				SIZEOF(my_prep_controller));
  cinfo->prep = (struct jpeg_c_prep_controller *) prep;
  prep->pub.start_pass = start_pass_prep;
 8009a5c:	4b43      	ldr	r3, [pc, #268]	@ (8009b6c <jinit_c_prep_controller+0x130>)
 8009a5e:	4605      	mov	r5, r0
  cinfo->prep = (struct jpeg_c_prep_controller *) prep;
 8009a60:	f8c4 018c 	str.w	r0, [r4, #396]	@ 0x18c
  prep->pub.start_pass = start_pass_prep;
 8009a64:	f845 3b04 	str.w	r3, [r5], #4

  /* Allocate the color conversion buffer.
   * We make the buffer wide enough to allow the downsampler to edge-expand
   * horizontally within the buffer, if it so chooses.
   */
  if (cinfo->downsample->need_context_rows) {
 8009a68:	f8d4 319c 	ldr.w	r3, [r4, #412]	@ 0x19c
 8009a6c:	689e      	ldr	r6, [r3, #8]
 8009a6e:	2e00      	cmp	r6, #0
 8009a70:	d05f      	beq.n	8009b32 <jinit_c_prep_controller+0xf6>
  int rgroup_height = cinfo->max_v_samp_factor;
 8009a72:	f8d4 6110 	ldr.w	r6, [r4, #272]	@ 0x110
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009a76:	f04f 0914 	mov.w	r9, #20
    /* Set up to provide context rows */
#ifdef CONTEXT_ROWS_SUPPORTED
    prep->pub.pre_process_data = pre_process_context;
 8009a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8009b70 <jinit_c_prep_controller+0x134>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009a7c:	2101      	movs	r1, #1
				(cinfo->num_components * 5 * rgroup_height) *
 8009a7e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8009a80:	ea4f 1a06 	mov.w	sl, r6, lsl #4
    prep->pub.pre_process_data = pre_process_context;
 8009a84:	6043      	str	r3, [r0, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009a86:	4620      	mov	r0, r4
 8009a88:	6863      	ldr	r3, [r4, #4]
				(cinfo->num_components * 5 * rgroup_height) *
 8009a8a:	4372      	muls	r2, r6
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	fb09 f202 	mul.w	r2, r9, r2
 8009a92:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009a94:	f8d4 8054 	ldr.w	r8, [r4, #84]	@ 0x54
       (JDIMENSION) (3 * rgroup_height));
 8009a98:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009a9c:	4607      	mov	r7, r0
       (JDIMENSION) (3 * rgroup_height));
 8009a9e:	9301      	str	r3, [sp, #4]
    MEMCOPY(fake_buffer + rgroup_height, true_buffer,
 8009aa0:	00b3      	lsls	r3, r6, #2
 8009aa2:	9302      	str	r3, [sp, #8]
 8009aa4:	230c      	movs	r3, #12
 8009aa6:	4373      	muls	r3, r6
 8009aa8:	9303      	str	r3, [sp, #12]
    fake_buffer += 5 * rgroup_height; /* point to space for next component */
 8009aaa:	fb09 f306 	mul.w	r3, r9, r6
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009aae:	f04f 0900 	mov.w	r9, #0
    fake_buffer += 5 * rgroup_height; /* point to space for next component */
 8009ab2:	9304      	str	r3, [sp, #16]
 8009ab4:	00f3      	lsls	r3, r6, #3
 8009ab6:	9305      	str	r3, [sp, #20]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009ab8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009aba:	4599      	cmp	r9, r3
 8009abc:	db02      	blt.n	8009ac4 <jinit_c_prep_controller+0x88>
			cinfo->min_DCT_h_scaled_size *
			cinfo->max_h_samp_factor) / compptr->h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 8009abe:	b007      	add	sp, #28
 8009ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       (JDIMENSION) (((long) compptr->width_in_blocks *
 8009ac4:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
    true_buffer = (*cinfo->mem->alloc_sarray)
 8009ac8:	4620      	mov	r0, r4
       (JDIMENSION) (((long) compptr->width_in_blocks *
 8009aca:	f8d8 201c 	ldr.w	r2, [r8, #28]
		      cinfo->max_h_samp_factor) / compptr->h_samp_factor),
 8009ace:	f8d8 1008 	ldr.w	r1, [r8, #8]
       (JDIMENSION) (((long) compptr->width_in_blocks *
 8009ad2:	435a      	muls	r2, r3
		      cinfo->min_DCT_h_scaled_size *
 8009ad4:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
 8009ad8:	435a      	muls	r2, r3
    true_buffer = (*cinfo->mem->alloc_sarray)
 8009ada:	6863      	ldr	r3, [r4, #4]
 8009adc:	fb92 f2f1 	sdiv	r2, r2, r1
 8009ae0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	9b01      	ldr	r3, [sp, #4]
 8009ae8:	47d8      	blx	fp
    MEMCOPY(fake_buffer + rgroup_height, true_buffer,
 8009aea:	9b02      	ldr	r3, [sp, #8]
    true_buffer = (*cinfo->mem->alloc_sarray)
 8009aec:	4683      	mov	fp, r0
    MEMCOPY(fake_buffer + rgroup_height, true_buffer,
 8009aee:	9a03      	ldr	r2, [sp, #12]
 8009af0:	443b      	add	r3, r7
 8009af2:	4601      	mov	r1, r0
 8009af4:	4618      	mov	r0, r3
 8009af6:	f006 f81f 	bl	800fb38 <memcpy>
 8009afa:	9a05      	ldr	r2, [sp, #20]
 8009afc:	4603      	mov	r3, r0
    for (i = 0; i < rgroup_height; i++) {
 8009afe:	eb0a 0c07 	add.w	ip, sl, r7
 8009b02:	eb0b 0002 	add.w	r0, fp, r2
 8009b06:	2200      	movs	r2, #0
 8009b08:	4296      	cmp	r6, r2
 8009b0a:	dc08      	bgt.n	8009b1e <jinit_c_prep_controller+0xe2>
    prep->color_buf[ci] = fake_buffer + rgroup_height;
 8009b0c:	f845 3f04 	str.w	r3, [r5, #4]!
       ci++, compptr++) {
 8009b10:	f109 0901 	add.w	r9, r9, #1
    fake_buffer += 5 * rgroup_height; /* point to space for next component */
 8009b14:	9b04      	ldr	r3, [sp, #16]
       ci++, compptr++) {
 8009b16:	f108 0858 	add.w	r8, r8, #88	@ 0x58
    fake_buffer += 5 * rgroup_height; /* point to space for next component */
 8009b1a:	441f      	add	r7, r3
       ci++, compptr++) {
 8009b1c:	e7cc      	b.n	8009ab8 <jinit_c_prep_controller+0x7c>
      fake_buffer[i] = true_buffer[2 * rgroup_height + i];
 8009b1e:	f850 1b04 	ldr.w	r1, [r0], #4
 8009b22:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
      fake_buffer[4 * rgroup_height + i] = true_buffer[i];
 8009b26:	f85b 1022 	ldr.w	r1, [fp, r2, lsl #2]
    for (i = 0; i < rgroup_height; i++) {
 8009b2a:	3201      	adds	r2, #1
      fake_buffer[4 * rgroup_height + i] = true_buffer[i];
 8009b2c:	f84c 1b04 	str.w	r1, [ip], #4
    for (i = 0; i < rgroup_height; i++) {
 8009b30:	e7ea      	b.n	8009b08 <jinit_c_prep_controller+0xcc>
    prep->pub.pre_process_data = pre_process_data;
 8009b32:	4b10      	ldr	r3, [pc, #64]	@ (8009b74 <jinit_c_prep_controller+0x138>)
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009b34:	6d67      	ldr	r7, [r4, #84]	@ 0x54
    prep->pub.pre_process_data = pre_process_data;
 8009b36:	6043      	str	r3, [r0, #4]
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009b38:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009b3a:	42b3      	cmp	r3, r6
 8009b3c:	ddbf      	ble.n	8009abe <jinit_c_prep_controller+0x82>
	 (JDIMENSION) (((long) compptr->width_in_blocks *
 8009b3e:	69fa      	ldr	r2, [r7, #28]
      prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8009b40:	4620      	mov	r0, r4
	 (JDIMENSION) (((long) compptr->width_in_blocks *
 8009b42:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
	 ci++, compptr++) {
 8009b46:	3601      	adds	r6, #1
			cinfo->max_h_samp_factor) / compptr->h_samp_factor),
 8009b48:	68b9      	ldr	r1, [r7, #8]
	 ci++, compptr++) {
 8009b4a:	3758      	adds	r7, #88	@ 0x58
	 (JDIMENSION) (((long) compptr->width_in_blocks *
 8009b4c:	435a      	muls	r2, r3
			cinfo->min_DCT_h_scaled_size *
 8009b4e:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
 8009b52:	435a      	muls	r2, r3
      prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8009b54:	6863      	ldr	r3, [r4, #4]
 8009b56:	fb92 f2f1 	sdiv	r2, r2, r1
 8009b5a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8009b5e:	2101      	movs	r1, #1
 8009b60:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
 8009b64:	47c0      	blx	r8
 8009b66:	f845 0f04 	str.w	r0, [r5, #4]!
	 ci++, compptr++) {
 8009b6a:	e7e5      	b.n	8009b38 <jinit_c_prep_controller+0xfc>
 8009b6c:	080097a1 	.word	0x080097a1
 8009b70:	0800990b 	.word	0x0800990b
 8009b74:	080097fb 	.word	0x080097fb

08009b78 <start_pass_downsample>:

METHODDEF(void)
start_pass_downsample (j_compress_ptr cinfo)
{
  /* no work for now */
}
 8009b78:	4770      	bx	lr

08009b7a <expand_right_edge>:
 */

LOCAL(void)
expand_right_edge (JSAMPARRAY image_data, int num_rows,
		   JDIMENSION input_cols, JDIMENSION output_cols)
{
 8009b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  register JSAMPROW ptr;
  register JSAMPLE pixval;
  register int count;
  int row;
  int numcols = (int) (output_cols - input_cols);
 8009b7e:	1a9d      	subs	r5, r3, r2
{
 8009b80:	4680      	mov	r8, r0
 8009b82:	460f      	mov	r7, r1
 8009b84:	4616      	mov	r6, r2

  if (numcols > 0) {
 8009b86:	2d00      	cmp	r5, #0
 8009b88:	dc0d      	bgt.n	8009ba6 <expand_right_edge+0x2c>
      pixval = ptr[-1];		/* don't need GETJSAMPLE() here */
      for (count = numcols; count > 0; count--)
	*ptr++ = pixval;
    }
  }
}
 8009b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ptr = image_data[row] + input_cols;
 8009b8e:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
    for (row = 0; row < num_rows; row++) {
 8009b92:	3401      	adds	r4, #1
	*ptr++ = pixval;
 8009b94:	462a      	mov	r2, r5
      ptr = image_data[row] + input_cols;
 8009b96:	4430      	add	r0, r6
	*ptr++ = pixval;
 8009b98:	f810 1c01 	ldrb.w	r1, [r0, #-1]
 8009b9c:	f005 ff88 	bl	800fab0 <memset>
    for (row = 0; row < num_rows; row++) {
 8009ba0:	42bc      	cmp	r4, r7
 8009ba2:	dbf4      	blt.n	8009b8e <expand_right_edge+0x14>
 8009ba4:	e7f1      	b.n	8009b8a <expand_right_edge+0x10>
 8009ba6:	2400      	movs	r4, #0
 8009ba8:	e7fa      	b.n	8009ba0 <expand_right_edge+0x26>

08009baa <sep_downsample>:

METHODDEF(void)
sep_downsample (j_compress_ptr cinfo,
		JSAMPIMAGE input_buf, JDIMENSION in_row_index,
		JSAMPIMAGE output_buf, JDIMENSION out_row_group_index)
{
 8009baa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bae:	f8d0 519c 	ldr.w	r5, [r0, #412]	@ 0x19c
 8009bb2:	460f      	mov	r7, r1
 8009bb4:	4698      	mov	r8, r3
  my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
  int ci;
  jpeg_component_info * compptr;
  JSAMPARRAY in_ptr, out_ptr;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009bb6:	f8d0 9054 	ldr.w	r9, [r0, #84]	@ 0x54
       ci++, compptr++) {
    in_ptr = input_buf[ci] + in_row_index;
 8009bba:	0096      	lsls	r6, r2, #2
 8009bbc:	3508      	adds	r5, #8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009bbe:	2400      	movs	r4, #0
 8009bc0:	f04f 0a58 	mov.w	sl, #88	@ 0x58
 8009bc4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8009bc6:	fb0a 9104 	mla	r1, sl, r4, r9
 8009bca:	42a3      	cmp	r3, r4
 8009bcc:	dc02      	bgt.n	8009bd4 <sep_downsample+0x2a>
    out_ptr = output_buf[ci] +
	      (out_row_group_index * downsample->rowgroup_height[ci]);
    (*downsample->methods[ci]) (cinfo, compptr, in_ptr, out_ptr);
  }
}
 8009bce:	b003      	add	sp, #12
 8009bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    out_ptr = output_buf[ci] +
 8009bd4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009bd6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    (*downsample->methods[ci]) (cinfo, compptr, in_ptr, out_ptr);
 8009bd8:	f855 bf04 	ldr.w	fp, [r5, #4]!
    out_ptr = output_buf[ci] +
 8009bdc:	4353      	muls	r3, r2
    in_ptr = input_buf[ci] + in_row_index;
 8009bde:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 8009be2:	9201      	str	r2, [sp, #4]
    (*downsample->methods[ci]) (cinfo, compptr, in_ptr, out_ptr);
 8009be4:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
       ci++, compptr++) {
 8009be8:	3401      	adds	r4, #1
    (*downsample->methods[ci]) (cinfo, compptr, in_ptr, out_ptr);
 8009bea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009bee:	9a01      	ldr	r2, [sp, #4]
 8009bf0:	9001      	str	r0, [sp, #4]
 8009bf2:	4432      	add	r2, r6
 8009bf4:	47d8      	blx	fp
       ci++, compptr++) {
 8009bf6:	9801      	ldr	r0, [sp, #4]
 8009bf8:	e7e4      	b.n	8009bc4 <sep_downsample+0x1a>

08009bfa <int_downsample>:
 */

METHODDEF(void)
int_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 8009bfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
  int inrow, outrow, h_expand, v_expand, numpix, numpix2, h, v;
  JDIMENSION outcol, outcol_h;	/* outcol_h == outcol*h_expand */
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 8009bfe:	69ce      	ldr	r6, [r1, #28]
{
 8009c00:	4692      	mov	sl, r2
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 8009c02:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
{
 8009c04:	4699      	mov	r9, r3
  my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
 8009c06:	f8d0 319c 	ldr.w	r3, [r0, #412]	@ 0x19c
{
 8009c0a:	b087      	sub	sp, #28
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 8009c0c:	4356      	muls	r6, r2
  JSAMPROW inptr, outptr;
  INT32 outvalue;

  h_expand = downsample->h_expand[compptr->component_index];
 8009c0e:	684a      	ldr	r2, [r1, #4]
{
 8009c10:	4604      	mov	r4, r0

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
 8009c12:	f8d0 1110 	ldr.w	r1, [r0, #272]	@ 0x110
  h_expand = downsample->h_expand[compptr->component_index];
 8009c16:	4413      	add	r3, r2
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
 8009c18:	69c2      	ldr	r2, [r0, #28]
 8009c1a:	4650      	mov	r0, sl
  h_expand = downsample->h_expand[compptr->component_index];
 8009c1c:	f893 505c 	ldrb.w	r5, [r3, #92]	@ 0x5c
  v_expand = downsample->v_expand[compptr->component_index];
 8009c20:	f893 7066 	ldrb.w	r7, [r3, #102]	@ 0x66
  numpix = h_expand * v_expand;
 8009c24:	fb15 f807 	smulbb	r8, r5, r7
  numpix2 = numpix/2;
 8009c28:	ea4f 0368 	mov.w	r3, r8, asr #1
 8009c2c:	9303      	str	r3, [sp, #12]
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
 8009c2e:	fb06 f305 	mul.w	r3, r6, r5
 8009c32:	f7ff ffa2 	bl	8009b7a <expand_right_edge>
		    cinfo->image_width, output_cols * h_expand);

  inrow = outrow = 0;
  while (inrow < cinfo->max_v_samp_factor) {
 8009c36:	f1a9 0304 	sub.w	r3, r9, #4
  inrow = outrow = 0;
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	9301      	str	r3, [sp, #4]
  while (inrow < cinfo->max_v_samp_factor) {
 8009c3e:	f8d4 2110 	ldr.w	r2, [r4, #272]	@ 0x110
 8009c42:	4282      	cmp	r2, r0
 8009c44:	dc02      	bgt.n	8009c4c <int_downsample+0x52>
      *outptr++ = (JSAMPLE) ((outvalue + numpix2) / numpix);
    }
    inrow += v_expand;
    outrow++;
  }
}
 8009c46:	b007      	add	sp, #28
 8009c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 8009c4c:	9b01      	ldr	r3, [sp, #4]
    for (outcol = 0, outcol_h = 0; outcol < output_cols;
 8009c4e:	f04f 0e00 	mov.w	lr, #0
    outptr = output_data[outrow];
 8009c52:	f853 cf04 	ldr.w	ip, [r3, #4]!
 8009c56:	eb0c 0206 	add.w	r2, ip, r6
 8009c5a:	9301      	str	r3, [sp, #4]
    for (outcol = 0, outcol_h = 0; outcol < output_cols;
 8009c5c:	9204      	str	r2, [sp, #16]
 8009c5e:	eb0a 0280 	add.w	r2, sl, r0, lsl #2
 8009c62:	9205      	str	r2, [sp, #20]
 8009c64:	9b04      	ldr	r3, [sp, #16]
 8009c66:	459c      	cmp	ip, r3
 8009c68:	d119      	bne.n	8009c9e <int_downsample+0xa4>
    inrow += v_expand;
 8009c6a:	4438      	add	r0, r7
    outrow++;
 8009c6c:	e7e7      	b.n	8009c3e <int_downsample+0x44>
	inptr = input_data[inrow+v] + outcol_h;
 8009c6e:	f85b 1b04 	ldr.w	r1, [fp], #4
 8009c72:	4471      	add	r1, lr
	for (h = 0; h < h_expand; h++) {
 8009c74:	194b      	adds	r3, r1, r5
 8009c76:	9302      	str	r3, [sp, #8]
 8009c78:	9b02      	ldr	r3, [sp, #8]
 8009c7a:	428b      	cmp	r3, r1
 8009c7c:	d10b      	bne.n	8009c96 <int_downsample+0x9c>
      for (v = 0; v < v_expand; v++) {
 8009c7e:	f109 0901 	add.w	r9, r9, #1
 8009c82:	45b9      	cmp	r9, r7
 8009c84:	dbf3      	blt.n	8009c6e <int_downsample+0x74>
      *outptr++ = (JSAMPLE) ((outvalue + numpix2) / numpix);
 8009c86:	9b03      	ldr	r3, [sp, #12]
	 outcol++, outcol_h += h_expand) {
 8009c88:	44ae      	add	lr, r5
      *outptr++ = (JSAMPLE) ((outvalue + numpix2) / numpix);
 8009c8a:	441a      	add	r2, r3
 8009c8c:	fb92 f2f8 	sdiv	r2, r2, r8
 8009c90:	f80c 2b01 	strb.w	r2, [ip], #1
	 outcol++, outcol_h += h_expand) {
 8009c94:	e7e6      	b.n	8009c64 <int_downsample+0x6a>
	  outvalue += (INT32) GETJSAMPLE(*inptr++);
 8009c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c9a:	441a      	add	r2, r3
	for (h = 0; h < h_expand; h++) {
 8009c9c:	e7ec      	b.n	8009c78 <int_downsample+0x7e>
      outvalue = 0;
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f8dd b014 	ldr.w	fp, [sp, #20]
      for (v = 0; v < v_expand; v++) {
 8009ca4:	4691      	mov	r9, r2
 8009ca6:	e7ec      	b.n	8009c82 <int_downsample+0x88>

08009ca8 <h2v1_downsample>:
 */

METHODDEF(void)
h2v1_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 8009ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int inrow;
  JDIMENSION outcol;
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 8009cac:	69ce      	ldr	r6, [r1, #28]
{
 8009cae:	461f      	mov	r7, r3
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 8009cb0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
{
 8009cb2:	4690      	mov	r8, r2
   * efficient.
   */
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
		    cinfo->image_width, output_cols * 2);

  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
 8009cb4:	2400      	movs	r4, #0
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
 8009cb6:	69c2      	ldr	r2, [r0, #28]
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 8009cb8:	435e      	muls	r6, r3
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
 8009cba:	f8d0 1110 	ldr.w	r1, [r0, #272]	@ 0x110
{
 8009cbe:	4605      	mov	r5, r0
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	0073      	lsls	r3, r6, #1
 8009cc4:	f7ff ff59 	bl	8009b7a <expand_right_edge>
  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
 8009cc8:	f8d5 3110 	ldr.w	r3, [r5, #272]	@ 0x110
 8009ccc:	42a3      	cmp	r3, r4
 8009cce:	dc01      	bgt.n	8009cd4 <h2v1_downsample+0x2c>
			      + bias) >> 1);
      bias ^= 1;		/* 0=>1, 1=>0 */
      inptr += 2;
    }
  }
}
 8009cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[inrow];
 8009cd4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    bias = 0;			/* bias = 0,1,0,1,... for successive samples */
 8009cd8:	2000      	movs	r0, #0
 8009cda:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8009cde:	eb03 0c06 	add.w	ip, r3, r6
    for (outcol = 0; outcol < output_cols; outcol++) {
 8009ce2:	4563      	cmp	r3, ip
 8009ce4:	f102 0202 	add.w	r2, r2, #2
 8009ce8:	d101      	bne.n	8009cee <h2v1_downsample+0x46>
  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
 8009cea:	3401      	adds	r4, #1
 8009cec:	e7ec      	b.n	8009cc8 <h2v1_downsample+0x20>
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr) + GETJSAMPLE(inptr[1])
 8009cee:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8009cf2:	f812 ec01 	ldrb.w	lr, [r2, #-1]
 8009cf6:	4471      	add	r1, lr
			      + bias) >> 1);
 8009cf8:	4401      	add	r1, r0
      bias ^= 1;		/* 0=>1, 1=>0 */
 8009cfa:	f080 0001 	eor.w	r0, r0, #1
			      + bias) >> 1);
 8009cfe:	1049      	asrs	r1, r1, #1
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr) + GETJSAMPLE(inptr[1])
 8009d00:	f803 1b01 	strb.w	r1, [r3], #1
    for (outcol = 0; outcol < output_cols; outcol++) {
 8009d04:	e7ed      	b.n	8009ce2 <h2v1_downsample+0x3a>

08009d06 <h2v2_downsample>:
 */

METHODDEF(void)
h2v2_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 8009d06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int inrow, outrow;
  JDIMENSION outcol;
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 8009d0a:	69cf      	ldr	r7, [r1, #28]
{
 8009d0c:	4698      	mov	r8, r3
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 8009d0e:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
{
 8009d10:	4616      	mov	r6, r2

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
 8009d12:	f8d0 1110 	ldr.w	r1, [r0, #272]	@ 0x110
{
 8009d16:	4605      	mov	r5, r0
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 8009d18:	435f      	muls	r7, r3
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
 8009d1a:	69c2      	ldr	r2, [r0, #28]
 8009d1c:	4630      	mov	r0, r6
		    cinfo->image_width, output_cols * 2);

  inrow = outrow = 0;
 8009d1e:	2400      	movs	r4, #0
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
 8009d20:	007b      	lsls	r3, r7, #1
 8009d22:	f7ff ff2a 	bl	8009b7a <expand_right_edge>
  while (inrow < cinfo->max_v_samp_factor) {
    outptr = output_data[outrow];
    inptr0 = input_data[inrow];
    inptr1 = input_data[inrow+1];
 8009d26:	f106 0e04 	add.w	lr, r6, #4
  while (inrow < cinfo->max_v_samp_factor) {
 8009d2a:	f8d5 3110 	ldr.w	r3, [r5, #272]	@ 0x110
 8009d2e:	42a3      	cmp	r3, r4
 8009d30:	dc02      	bgt.n	8009d38 <h2v2_downsample+0x32>
      inptr0 += 2; inptr1 += 2;
    }
    inrow += 2;
    outrow++;
  }
}
 8009d32:	b003      	add	sp, #12
 8009d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 8009d38:	f858 3014 	ldr.w	r3, [r8, r4, lsl #1]
    for (outcol = 0; outcol < output_cols; outcol++) {
 8009d3c:	2100      	movs	r1, #0
    inptr0 = input_data[inrow];
 8009d3e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    inptr1 = input_data[inrow+1];
 8009d42:	f85e c024 	ldr.w	ip, [lr, r4, lsl #2]
    outptr = output_data[outrow];
 8009d46:	9301      	str	r3, [sp, #4]
    bias = 1;			/* bias = 1,2,1,2,... for successive samples */
 8009d48:	2301      	movs	r3, #1
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 8009d4a:	eb00 0903 	add.w	r9, r0, r3
			      GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
 8009d4e:	eb0c 0a03 	add.w	sl, ip, r3
    bias = 1;			/* bias = 1,2,1,2,... for successive samples */
 8009d52:	9300      	str	r3, [sp, #0]
    for (outcol = 0; outcol < output_cols; outcol++) {
 8009d54:	42b9      	cmp	r1, r7
 8009d56:	d101      	bne.n	8009d5c <h2v2_downsample+0x56>
    inrow += 2;
 8009d58:	3402      	adds	r4, #2
    outrow++;
 8009d5a:	e7e6      	b.n	8009d2a <h2v2_downsample+0x24>
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 8009d5c:	f819 3011 	ldrb.w	r3, [r9, r1, lsl #1]
 8009d60:	f810 b011 	ldrb.w	fp, [r0, r1, lsl #1]
			      + bias) >> 2);
 8009d64:	9a00      	ldr	r2, [sp, #0]
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 8009d66:	449b      	add	fp, r3
			      GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
 8009d68:	f81c 3011 	ldrb.w	r3, [ip, r1, lsl #1]
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 8009d6c:	445b      	add	r3, fp
			      GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
 8009d6e:	f81a b011 	ldrb.w	fp, [sl, r1, lsl #1]
 8009d72:	445b      	add	r3, fp
			      + bias) >> 2);
 8009d74:	4413      	add	r3, r2
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 8009d76:	9a01      	ldr	r2, [sp, #4]
			      + bias) >> 2);
 8009d78:	109b      	asrs	r3, r3, #2
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 8009d7a:	5453      	strb	r3, [r2, r1]
    for (outcol = 0; outcol < output_cols; outcol++) {
 8009d7c:	3101      	adds	r1, #1
      bias ^= 3;		/* 1=>2, 2=>1 */
 8009d7e:	9b00      	ldr	r3, [sp, #0]
 8009d80:	f083 0303 	eor.w	r3, r3, #3
 8009d84:	9300      	str	r3, [sp, #0]
    for (outcol = 0; outcol < output_cols; outcol++) {
 8009d86:	e7e5      	b.n	8009d54 <h2v2_downsample+0x4e>

08009d88 <h2v2_smooth_downsample>:
 */

METHODDEF(void)
h2v2_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
			JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 8009d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	b08b      	sub	sp, #44	@ 0x2c
  int inrow, outrow;
  JDIMENSION colctr;
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 8009d8e:	69cc      	ldr	r4, [r1, #28]
{
 8009d90:	4692      	mov	sl, r2
 8009d92:	4680      	mov	r8, r0
 8009d94:	9308      	str	r3, [sp, #32]
   */

  memberscale = 16384 - cinfo->smoothing_factor * 80; /* scaled (1-5*SF)/4 */
  neighscale = cinfo->smoothing_factor * 16; /* scaled SF/4 */

  inrow = outrow = 0;
 8009d96:	f04f 0b00 	mov.w	fp, #0
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 8009d9a:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
  expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
 8009d9c:	f8d0 1110 	ldr.w	r1, [r0, #272]	@ 0x110
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 8009da0:	435c      	muls	r4, r3
  expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
 8009da2:	69c2      	ldr	r2, [r0, #28]
 8009da4:	3102      	adds	r1, #2
 8009da6:	f1aa 0004 	sub.w	r0, sl, #4
 8009daa:	0063      	lsls	r3, r4, #1
 8009dac:	f7ff fee5 	bl	8009b7a <expand_right_edge>
  memberscale = 16384 - cinfo->smoothing_factor * 80; /* scaled (1-5*SF)/4 */
 8009db0:	f8d8 20e4 	ldr.w	r2, [r8, #228]	@ 0xe4
 8009db4:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 8009db8:	4353      	muls	r3, r2
 8009dba:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009dbe:	9302      	str	r3, [sp, #8]
  neighscale = cinfo->smoothing_factor * 16; /* scaled SF/4 */
 8009dc0:	0113      	lsls	r3, r2, #4
 8009dc2:	9301      	str	r3, [sp, #4]
  while (inrow < cinfo->max_v_samp_factor) {
 8009dc4:	1e63      	subs	r3, r4, #1
 8009dc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dc8:	f8d8 3110 	ldr.w	r3, [r8, #272]	@ 0x110
 8009dcc:	455b      	cmp	r3, fp
 8009dce:	dc02      	bgt.n	8009dd6 <h2v2_smooth_downsample+0x4e>
    *outptr = (JSAMPLE) ((membersum + 32768) >> 16);

    inrow += 2;
    outrow++;
  }
}
 8009dd0:	b00b      	add	sp, #44	@ 0x2c
 8009dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    above_ptr = input_data[inrow-1];
 8009dd6:	f85a 1c04 	ldr.w	r1, [sl, #-4]
    below_ptr = input_data[inrow+2];
 8009dda:	f8da 2008 	ldr.w	r2, [sl, #8]
    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 8009dde:	f891 e000 	ldrb.w	lr, [r1]
 8009de2:	3104      	adds	r1, #4
 8009de4:	f811 6c03 	ldrb.w	r6, [r1, #-3]
 8009de8:	3204      	adds	r2, #4
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 8009dea:	f812 cc04 	ldrb.w	ip, [r2, #-4]
    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 8009dee:	4476      	add	r6, lr
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 8009df0:	f812 9c03 	ldrb.w	r9, [r2, #-3]
    outptr = output_data[outrow];
 8009df4:	9b08      	ldr	r3, [sp, #32]
    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 8009df6:	4466      	add	r6, ip
    outptr = output_data[outrow];
 8009df8:	f853 701b 	ldr.w	r7, [r3, fp, lsl #1]
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 8009dfc:	444e      	add	r6, r9
    inptr1 = input_data[inrow+1];
 8009dfe:	e9da 5400 	ldrd	r5, r4, [sl]
    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 8009e02:	7828      	ldrb	r0, [r5, #0]
 8009e04:	3404      	adds	r4, #4
	       GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
 8009e06:	f895 9002 	ldrb.w	r9, [r5, #2]
 8009e0a:	3504      	adds	r5, #4
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 8009e0c:	4406      	add	r6, r0
		GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 8009e0e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
	       GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
 8009e12:	444e      	add	r6, r9
	       GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
 8009e14:	f814 9c02 	ldrb.w	r9, [r4, #-2]
	       GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
 8009e18:	441e      	add	r6, r3
    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 8009e1a:	444e      	add	r6, r9
    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 8009e1c:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8009e20:	4481      	add	r9, r0
    *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 8009e22:	4638      	mov	r0, r7
    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 8009e24:	4499      	add	r9, r3
		GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 8009e26:	f814 3c03 	ldrb.w	r3, [r4, #-3]
    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 8009e2a:	4499      	add	r9, r3
    neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
 8009e2c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8009e30:	4473      	add	r3, lr
 8009e32:	4463      	add	r3, ip
		GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
 8009e34:	f812 cc02 	ldrb.w	ip, [r2, #-2]
 8009e38:	4463      	add	r3, ip
    neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
 8009e3a:	eb03 0346 	add.w	r3, r3, r6, lsl #1
    membersum = membersum * memberscale + neighsum * neighscale;
 8009e3e:	9e01      	ldr	r6, [sp, #4]
 8009e40:	4373      	muls	r3, r6
 8009e42:	9e02      	ldr	r6, [sp, #8]
 8009e44:	fb06 3309 	mla	r3, r6, r9, r3
    *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 8009e48:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8009e4c:	141b      	asrs	r3, r3, #16
 8009e4e:	f800 3b01 	strb.w	r3, [r0], #1
    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 8009e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e54:	18fb      	adds	r3, r7, r3
 8009e56:	9307      	str	r3, [sp, #28]
		  GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 8009e58:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 8009e5c:	3502      	adds	r5, #2
      neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 8009e5e:	f811 6c02 	ldrb.w	r6, [r1, #-2]
    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 8009e62:	3402      	adds	r4, #2
		  GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 8009e64:	9303      	str	r3, [sp, #12]
    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 8009e66:	3102      	adds	r1, #2
      neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 8009e68:	f811 3c03 	ldrb.w	r3, [r1, #-3]
    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 8009e6c:	3202      	adds	r2, #2
		 GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 8009e6e:	f812 cc03 	ldrb.w	ip, [r2, #-3]
      neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 8009e72:	441e      	add	r6, r3
 8009e74:	9304      	str	r3, [sp, #16]
		 GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 8009e76:	f812 3c04 	ldrb.w	r3, [r2, #-4]
      membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 8009e7a:	f815 7c03 	ldrb.w	r7, [r5, #-3]
      neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 8009e7e:	441e      	add	r6, r3
		 GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
 8009e80:	f815 3c05 	ldrb.w	r3, [r5, #-5]
      neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
 8009e84:	f811 9c05 	ldrb.w	r9, [r1, #-5]
		 GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 8009e88:	4466      	add	r6, ip
		  GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
 8009e8a:	f812 ec05 	ldrb.w	lr, [r2, #-5]
		 GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 8009e8e:	18f3      	adds	r3, r6, r3
		  GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 8009e90:	f814 6c04 	ldrb.w	r6, [r4, #-4]
		 GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 8009e94:	9305      	str	r3, [sp, #20]
		 GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
 8009e96:	f814 3c05 	ldrb.w	r3, [r4, #-5]
 8009e9a:	9306      	str	r3, [sp, #24]
      membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 8009e9c:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8009ea0:	443b      	add	r3, r7
 8009ea2:	4433      	add	r3, r6
 8009ea4:	9e03      	ldr	r6, [sp, #12]
 8009ea6:	4433      	add	r3, r6
      membersum = membersum * memberscale + neighsum * neighscale;
 8009ea8:	9e02      	ldr	r6, [sp, #8]
 8009eaa:	4373      	muls	r3, r6
    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 8009eac:	9e07      	ldr	r6, [sp, #28]
 8009eae:	42b0      	cmp	r0, r6
 8009eb0:	d117      	bne.n	8009ee2 <h2v2_smooth_downsample+0x15a>
	       GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
 8009eb2:	9a05      	ldr	r2, [sp, #20]
    inrow += 2;
 8009eb4:	f10b 0b02 	add.w	fp, fp, #2
 8009eb8:	f10a 0a08 	add.w	sl, sl, #8
	       GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
 8009ebc:	4417      	add	r7, r2
 8009ebe:	9a06      	ldr	r2, [sp, #24]
 8009ec0:	4417      	add	r7, r2
    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 8009ec2:	9a03      	ldr	r2, [sp, #12]
 8009ec4:	4417      	add	r7, r2
    neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
 8009ec6:	9a04      	ldr	r2, [sp, #16]
 8009ec8:	444a      	add	r2, r9
 8009eca:	4472      	add	r2, lr
		GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[1]);
 8009ecc:	4462      	add	r2, ip
    neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
 8009ece:	eb02 0747 	add.w	r7, r2, r7, lsl #1
    membersum = membersum * memberscale + neighsum * neighscale;
 8009ed2:	9a01      	ldr	r2, [sp, #4]
 8009ed4:	fb02 3307 	mla	r3, r2, r7, r3
    *outptr = (JSAMPLE) ((membersum + 32768) >> 16);
 8009ed8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8009edc:	141b      	asrs	r3, r3, #16
 8009ede:	7003      	strb	r3, [r0, #0]
    outrow++;
 8009ee0:	e772      	b.n	8009dc8 <h2v2_smooth_downsample+0x40>
		 GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
 8009ee2:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8009ee6:	9e05      	ldr	r6, [sp, #20]
		  GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
 8009ee8:	f812 cc02 	ldrb.w	ip, [r2, #-2]
		 GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
 8009eec:	4437      	add	r7, r6
 8009eee:	9e06      	ldr	r6, [sp, #24]
 8009ef0:	4437      	add	r7, r6
		 GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
 8009ef2:	f814 6c02 	ldrb.w	r6, [r4, #-2]
      neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 8009ef6:	4437      	add	r7, r6
      neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
 8009ef8:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8009efc:	444e      	add	r6, r9
 8009efe:	4476      	add	r6, lr
		  GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
 8009f00:	4466      	add	r6, ip
      neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
 8009f02:	eb06 0647 	add.w	r6, r6, r7, lsl #1
      membersum = membersum * memberscale + neighsum * neighscale;
 8009f06:	9f01      	ldr	r7, [sp, #4]
 8009f08:	fb07 3606 	mla	r6, r7, r6, r3
      *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 8009f0c:	f506 4600 	add.w	r6, r6, #32768	@ 0x8000
 8009f10:	1436      	asrs	r6, r6, #16
 8009f12:	f800 6b01 	strb.w	r6, [r0], #1
    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 8009f16:	e79f      	b.n	8009e58 <h2v2_smooth_downsample+0xd0>

08009f18 <fullsize_smooth_downsample>:
 */

METHODDEF(void)
fullsize_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info *compptr,
			    JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 8009f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1c:	b087      	sub	sp, #28

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
 8009f1e:	1f14      	subs	r4, r2, #4
{
 8009f20:	4606      	mov	r6, r0
  expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
 8009f22:	69c2      	ldr	r2, [r0, #28]
{
 8009f24:	9304      	str	r3, [sp, #16]
  JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 8009f26:	69cb      	ldr	r3, [r1, #28]
 8009f28:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8009f2a:	fb01 fb03 	mul.w	fp, r1, r3
  expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
 8009f2e:	f8d0 1110 	ldr.w	r1, [r0, #272]	@ 0x110
 8009f32:	4620      	mov	r0, r4
 8009f34:	465b      	mov	r3, fp
 8009f36:	3102      	adds	r1, #2
 8009f38:	f7ff fe1f 	bl	8009b7a <expand_right_edge>
   * smoothed pixel, while the main pixel contributes (1-8*SF).  In order
   * to use integer arithmetic, these factors are multiplied by 2^16 = 65536.
   * Also recall that SF = smoothing_factor / 1024.
   */

  memberscale = 65536L - cinfo->smoothing_factor * 512L; /* scaled 1-8*SF */
 8009f3c:	f8d6 70e4 	ldr.w	r7, [r6, #228]	@ 0xe4
 8009f40:	4622      	mov	r2, r4
  neighscale = cinfo->smoothing_factor * 64; /* scaled SF */

  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
 8009f42:	f04f 0c00 	mov.w	ip, #0
  memberscale = 65536L - cinfo->smoothing_factor * 512L; /* scaled 1-8*SF */
 8009f46:	f1c7 0380 	rsb	r3, r7, #128	@ 0x80
  neighscale = cinfo->smoothing_factor * 64; /* scaled SF */
 8009f4a:	01bf      	lsls	r7, r7, #6
  memberscale = 65536L - cinfo->smoothing_factor * 512L; /* scaled 1-8*SF */
 8009f4c:	025b      	lsls	r3, r3, #9
 8009f4e:	9302      	str	r3, [sp, #8]
    neighsum = colsum + (colsum - membersum) + nextcolsum;
    membersum = membersum * memberscale + neighsum * neighscale;
    *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
    lastcolsum = colsum; colsum = nextcolsum;

    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 8009f50:	f1ab 0302 	sub.w	r3, fp, #2
 8009f54:	9305      	str	r3, [sp, #20]
  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
 8009f56:	f8d6 3110 	ldr.w	r3, [r6, #272]	@ 0x110
 8009f5a:	4563      	cmp	r3, ip
 8009f5c:	dc02      	bgt.n	8009f64 <fullsize_smooth_downsample+0x4c>
    neighsum = lastcolsum + (colsum - membersum) + colsum;
    membersum = membersum * memberscale + neighsum * neighscale;
    *outptr = (JSAMPLE) ((membersum + 32768) >> 16);

  }
}
 8009f5e:	b007      	add	sp, #28
 8009f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_data[inrow];
 8009f64:	f852 9f04 	ldr.w	r9, [r2, #4]!
    below_ptr = input_data[inrow+1];
 8009f68:	6855      	ldr	r5, [r2, #4]
    above_ptr = input_data[inrow-1];
 8009f6a:	f852 0c04 	ldr.w	r0, [r2, #-4]
    colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
 8009f6e:	782b      	ldrb	r3, [r5, #0]
    nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
 8009f70:	7844      	ldrb	r4, [r0, #1]
    colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
 8009f72:	4680      	mov	r8, r0
    nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
 8009f74:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
 8009f78:	f818 1b01 	ldrb.w	r1, [r8], #1
    nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
 8009f7c:	4404      	add	r4, r0
		 GETJSAMPLE(*inptr);
 8009f7e:	4648      	mov	r0, r9
    colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
 8009f80:	4419      	add	r1, r3
    nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
 8009f82:	9500      	str	r5, [sp, #0]
	     GETJSAMPLE(*inptr);
 8009f84:	f899 3000 	ldrb.w	r3, [r9]
		 GETJSAMPLE(*inptr);
 8009f88:	f810 ef01 	ldrb.w	lr, [r0, #1]!
    *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 8009f8c:	9d04      	ldr	r5, [sp, #16]
    colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
 8009f8e:	eb01 0a03 	add.w	sl, r1, r3
    nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
 8009f92:	4474      	add	r4, lr
    neighsum = colsum + (colsum - membersum) + nextcolsum;
 8009f94:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 8009f98:	f855 e02c 	ldr.w	lr, [r5, ip, lsl #2]
    membersum = membersum * memberscale + neighsum * neighscale;
 8009f9c:	9d02      	ldr	r5, [sp, #8]
    neighsum = colsum + (colsum - membersum) + nextcolsum;
 8009f9e:	4421      	add	r1, r4
    membersum = membersum * memberscale + neighsum * neighscale;
 8009fa0:	436b      	muls	r3, r5
 8009fa2:	fb07 3301 	mla	r3, r7, r1, r3
    *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 8009fa6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8009faa:	141b      	asrs	r3, r3, #16
 8009fac:	f80e 3b01 	strb.w	r3, [lr], #1
    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 8009fb0:	eb09 030b 	add.w	r3, r9, fp
    *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 8009fb4:	f8cd e004 	str.w	lr, [sp, #4]
 8009fb8:	9303      	str	r3, [sp, #12]
      membersum = GETJSAMPLE(*inptr++);
 8009fba:	f810 1b01 	ldrb.w	r1, [r0], #1
      membersum = membersum * memberscale + neighsum * neighscale;
 8009fbe:	9d02      	ldr	r5, [sp, #8]
      neighsum = lastcolsum + (colsum - membersum) + nextcolsum;
 8009fc0:	1a63      	subs	r3, r4, r1
      membersum = membersum * memberscale + neighsum * neighscale;
 8009fc2:	4369      	muls	r1, r5
    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 8009fc4:	9d03      	ldr	r5, [sp, #12]
      neighsum = lastcolsum + (colsum - membersum) + nextcolsum;
 8009fc6:	4453      	add	r3, sl
    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 8009fc8:	4285      	cmp	r5, r0
 8009fca:	d10b      	bne.n	8009fe4 <fullsize_smooth_downsample+0xcc>
    neighsum = lastcolsum + (colsum - membersum) + colsum;
 8009fcc:	441c      	add	r4, r3
    *outptr = (JSAMPLE) ((membersum + 32768) >> 16);
 8009fce:	9b05      	ldr	r3, [sp, #20]
  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
 8009fd0:	f10c 0c01 	add.w	ip, ip, #1
    membersum = membersum * memberscale + neighsum * neighscale;
 8009fd4:	fb07 1104 	mla	r1, r7, r4, r1
    *outptr = (JSAMPLE) ((membersum + 32768) >> 16);
 8009fd8:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8009fdc:	1409      	asrs	r1, r1, #16
 8009fde:	f80e 1003 	strb.w	r1, [lr, r3]
  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
 8009fe2:	e7b8      	b.n	8009f56 <fullsize_smooth_downsample+0x3e>
      nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
 8009fe4:	9d00      	ldr	r5, [sp, #0]
 8009fe6:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8009fea:	f815 af01 	ldrb.w	sl, [r5, #1]!
 8009fee:	44ca      	add	sl, r9
		   GETJSAMPLE(*inptr);
 8009ff0:	f890 9000 	ldrb.w	r9, [r0]
      nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
 8009ff4:	9500      	str	r5, [sp, #0]
 8009ff6:	44d1      	add	r9, sl
      lastcolsum = colsum; colsum = nextcolsum;
 8009ff8:	46a2      	mov	sl, r4
      neighsum = lastcolsum + (colsum - membersum) + nextcolsum;
 8009ffa:	444b      	add	r3, r9
      lastcolsum = colsum; colsum = nextcolsum;
 8009ffc:	464c      	mov	r4, r9
      membersum = membersum * memberscale + neighsum * neighscale;
 8009ffe:	fb07 1303 	mla	r3, r7, r3, r1
      *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 800a002:	9901      	ldr	r1, [sp, #4]
 800a004:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800a008:	141b      	asrs	r3, r3, #16
 800a00a:	f801 3b01 	strb.w	r3, [r1], #1
 800a00e:	9101      	str	r1, [sp, #4]
    for (colctr = output_cols - 2; colctr > 0; colctr--) {
 800a010:	e7d3      	b.n	8009fba <fullsize_smooth_downsample+0xa2>

0800a012 <fullsize_downsample>:
{
 800a012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a014:	4604      	mov	r4, r0
 800a016:	461d      	mov	r5, r3
 800a018:	460e      	mov	r6, r1
 800a01a:	4610      	mov	r0, r2
  jcopy_sample_rows(input_data, 0, output_data, 0,
 800a01c:	69e3      	ldr	r3, [r4, #28]
 800a01e:	462a      	mov	r2, r5
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	2300      	movs	r3, #0
 800a02a:	4619      	mov	r1, r3
 800a02c:	f005 fc4d 	bl	800f8ca <jcopy_sample_rows>
  expand_right_edge(output_data, cinfo->max_v_samp_factor, cinfo->image_width,
 800a030:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 800a032:	69f3      	ldr	r3, [r6, #28]
 800a034:	4628      	mov	r0, r5
 800a036:	f8d4 1110 	ldr.w	r1, [r4, #272]	@ 0x110
 800a03a:	4353      	muls	r3, r2
 800a03c:	69e2      	ldr	r2, [r4, #28]
}
 800a03e:	b002      	add	sp, #8
 800a040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  expand_right_edge(output_data, cinfo->max_v_samp_factor, cinfo->image_width,
 800a044:	f7ff bd99 	b.w	8009b7a <expand_right_edge>

0800a048 <jinit_downsampler>:
  jpeg_component_info * compptr;
  boolean smoothok = TRUE;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  downsample = (my_downsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a048:	6843      	ldr	r3, [r0, #4]
 800a04a:	2270      	movs	r2, #112	@ 0x70
 800a04c:	2101      	movs	r1, #1
 800a04e:	681b      	ldr	r3, [r3, #0]
{
 800a050:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a054:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a056:	4798      	blx	r3
				SIZEOF(my_downsampler));
  cinfo->downsample = (struct jpeg_downsampler *) downsample;
  downsample->pub.start_pass = start_pass_downsample;
 800a058:	4b42      	ldr	r3, [pc, #264]	@ (800a164 <jinit_downsampler+0x11c>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a05a:	4605      	mov	r5, r0
  cinfo->downsample = (struct jpeg_downsampler *) downsample;
 800a05c:	f8c4 019c 	str.w	r0, [r4, #412]	@ 0x19c
  downsample->pub.start_pass = start_pass_downsample;
 800a060:	6003      	str	r3, [r0, #0]
  downsample->pub.downsample = sep_downsample;
 800a062:	4b41      	ldr	r3, [pc, #260]	@ (800a168 <jinit_downsampler+0x120>)
 800a064:	6043      	str	r3, [r0, #4]
  downsample->pub.need_context_rows = FALSE;
 800a066:	2300      	movs	r3, #0
 800a068:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)
 800a06a:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 800a06e:	b12b      	cbz	r3, 800a07c <jinit_downsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	221a      	movs	r2, #26
 800a074:	4620      	mov	r0, r4
 800a076:	615a      	str	r2, [r3, #20]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4798      	blx	r3

  /* Verify we can handle the sampling factors, and set up method pointers */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a07c:	6d67      	ldr	r7, [r4, #84]	@ 0x54
 800a07e:	f105 060c 	add.w	r6, r5, #12
 800a082:	46a8      	mov	r8, r5
  boolean smoothok = TRUE;
 800a084:	f04f 0901 	mov.w	r9, #1
      smoothok = FALSE;
      downsample->methods[ci] = int_downsample;
      downsample->h_expand[ci] = (UINT8) (h_in_group / h_out_group);
      downsample->v_expand[ci] = (UINT8) (v_in_group / v_out_group);
    } else
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800a088:	f04f 0b27 	mov.w	fp, #39	@ 0x27
      downsample->methods[ci] = int_downsample;
 800a08c:	f8df a0f0 	ldr.w	sl, [pc, #240]	@ 800a180 <jinit_downsampler+0x138>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a090:	eba8 0205 	sub.w	r2, r8, r5
 800a094:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a096:	4293      	cmp	r3, r2
 800a098:	dc10      	bgt.n	800a0bc <jinit_downsampler+0x74>
  }

#ifdef INPUT_SMOOTHING_SUPPORTED
  if (cinfo->smoothing_factor && !smoothok)
 800a09a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d05c      	beq.n	800a15c <jinit_downsampler+0x114>
 800a0a2:	f1b9 0f00 	cmp.w	r9, #0
 800a0a6:	d159      	bne.n	800a15c <jinit_downsampler+0x114>
    TRACEMS(cinfo, 0, JTRC_SMOOTH_NOTIMPL);
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	2265      	movs	r2, #101	@ 0x65
 800a0ac:	4649      	mov	r1, r9
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	615a      	str	r2, [r3, #20]
 800a0b2:	685b      	ldr	r3, [r3, #4]
#endif
}
 800a0b4:	b001      	add	sp, #4
 800a0b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TRACEMS(cinfo, 0, JTRC_SMOOTH_NOTIMPL);
 800a0ba:	4718      	bx	r3
    h_out_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800a0bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	4353      	muls	r3, r2
 800a0c2:	f8d4 2114 	ldr.w	r2, [r4, #276]	@ 0x114
 800a0c6:	fb93 f1f2 	sdiv	r1, r3, r2
    v_out_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800a0ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4353      	muls	r3, r2
 800a0d0:	f8d4 2118 	ldr.w	r2, [r4, #280]	@ 0x118
 800a0d4:	fb93 f3f2 	sdiv	r3, r3, r2
    v_in_group = cinfo->max_v_samp_factor;
 800a0d8:	e9d4 2c43 	ldrd	r2, ip, [r4, #268]	@ 0x10c
    downsample->rowgroup_height[ci] = v_out_group; /* save for use later */
 800a0dc:	62b3      	str	r3, [r6, #40]	@ 0x28
    if (h_in_group == h_out_group && v_in_group == v_out_group) {
 800a0de:	4291      	cmp	r1, r2
 800a0e0:	d110      	bne.n	800a104 <jinit_downsampler+0xbc>
 800a0e2:	4563      	cmp	r3, ip
 800a0e4:	d10e      	bne.n	800a104 <jinit_downsampler+0xbc>
      if (cinfo->smoothing_factor) {
 800a0e6:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
 800a0ea:	b143      	cbz	r3, 800a0fe <jinit_downsampler+0xb6>
	downsample->methods[ci] = fullsize_smooth_downsample;
 800a0ec:	4b1f      	ldr	r3, [pc, #124]	@ (800a16c <jinit_downsampler+0x124>)
	downsample->methods[ci] = h2v2_smooth_downsample;
 800a0ee:	6033      	str	r3, [r6, #0]
	downsample->pub.need_context_rows = TRUE;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	60ab      	str	r3, [r5, #8]
       ci++, compptr++) {
 800a0f4:	3758      	adds	r7, #88	@ 0x58
 800a0f6:	3604      	adds	r6, #4
 800a0f8:	f108 0801 	add.w	r8, r8, #1
 800a0fc:	e7c8      	b.n	800a090 <jinit_downsampler+0x48>
	downsample->methods[ci] = fullsize_downsample;
 800a0fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a170 <jinit_downsampler+0x128>)
	downsample->methods[ci] = h2v2_downsample;
 800a100:	6033      	str	r3, [r6, #0]
 800a102:	e7f7      	b.n	800a0f4 <jinit_downsampler+0xac>
    } else if (h_in_group == h_out_group * 2 &&
 800a104:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
 800a108:	d110      	bne.n	800a12c <jinit_downsampler+0xe4>
 800a10a:	4563      	cmp	r3, ip
 800a10c:	d104      	bne.n	800a118 <jinit_downsampler+0xd0>
      downsample->methods[ci] = h2v1_downsample;
 800a10e:	4b19      	ldr	r3, [pc, #100]	@ (800a174 <jinit_downsampler+0x12c>)
 800a110:	6033      	str	r3, [r6, #0]
      smoothok = FALSE;
 800a112:	f04f 0900 	mov.w	r9, #0
 800a116:	e7ed      	b.n	800a0f4 <jinit_downsampler+0xac>
    } else if (h_in_group == h_out_group * 2 &&
 800a118:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 800a11c:	d106      	bne.n	800a12c <jinit_downsampler+0xe4>
      if (cinfo->smoothing_factor) {
 800a11e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
 800a122:	b10b      	cbz	r3, 800a128 <jinit_downsampler+0xe0>
	downsample->methods[ci] = h2v2_smooth_downsample;
 800a124:	4b14      	ldr	r3, [pc, #80]	@ (800a178 <jinit_downsampler+0x130>)
 800a126:	e7e2      	b.n	800a0ee <jinit_downsampler+0xa6>
	downsample->methods[ci] = h2v2_downsample;
 800a128:	4b14      	ldr	r3, [pc, #80]	@ (800a17c <jinit_downsampler+0x134>)
 800a12a:	e7e9      	b.n	800a100 <jinit_downsampler+0xb8>
    } else if ((h_in_group % h_out_group) == 0 &&
 800a12c:	fb92 f0f1 	sdiv	r0, r2, r1
 800a130:	fb01 2210 	mls	r2, r1, r0, r2
 800a134:	b95a      	cbnz	r2, 800a14e <jinit_downsampler+0x106>
	       (v_in_group % v_out_group) == 0) {
 800a136:	fb9c f2f3 	sdiv	r2, ip, r3
 800a13a:	fb03 c312 	mls	r3, r3, r2, ip
    } else if ((h_in_group % h_out_group) == 0 &&
 800a13e:	b933      	cbnz	r3, 800a14e <jinit_downsampler+0x106>
      downsample->methods[ci] = int_downsample;
 800a140:	f8c6 a000 	str.w	sl, [r6]
      downsample->h_expand[ci] = (UINT8) (h_in_group / h_out_group);
 800a144:	f888 005c 	strb.w	r0, [r8, #92]	@ 0x5c
      downsample->v_expand[ci] = (UINT8) (v_in_group / v_out_group);
 800a148:	f888 2066 	strb.w	r2, [r8, #102]	@ 0x66
 800a14c:	e7e1      	b.n	800a112 <jinit_downsampler+0xca>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	4620      	mov	r0, r4
 800a152:	f8c3 b014 	str.w	fp, [r3, #20]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4798      	blx	r3
 800a15a:	e7cb      	b.n	800a0f4 <jinit_downsampler+0xac>
}
 800a15c:	b001      	add	sp, #4
 800a15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a162:	bf00      	nop
 800a164:	08009b79 	.word	0x08009b79
 800a168:	08009bab 	.word	0x08009bab
 800a16c:	08009f19 	.word	0x08009f19
 800a170:	0800a013 	.word	0x0800a013
 800a174:	08009ca9 	.word	0x08009ca9
 800a178:	08009d89 	.word	0x08009d89
 800a17c:	08009d07 	.word	0x08009d07
 800a180:	08009bfb 	.word	0x08009bfb

0800a184 <init_destination>:
{
  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;

  /* Allocate the output buffer --- it will be released when done with image */
  dest->buffer = (JOCTET *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a184:	6843      	ldr	r3, [r0, #4]
 800a186:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a18a:	2101      	movs	r1, #1
 800a18c:	681b      	ldr	r3, [r3, #0]
{
 800a18e:	b510      	push	{r4, lr}
  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
 800a190:	6984      	ldr	r4, [r0, #24]
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a192:	4798      	blx	r3
				  OUTPUT_BUF_SIZE * SIZEOF(JOCTET));

  dest->pub.next_output_byte = dest->buffer;
  dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;
 800a194:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  dest->buffer = (JOCTET *)
 800a198:	61a0      	str	r0, [r4, #24]
  dest->pub.next_output_byte = dest->buffer;
 800a19a:	6020      	str	r0, [r4, #0]
  dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;
 800a19c:	6063      	str	r3, [r4, #4]
}
 800a19e:	bd10      	pop	{r4, pc}

0800a1a0 <empty_output_buffer>:
 * write it out when emptying the buffer externally.
 */
#ifdef JFILE
METHODDEF(boolean)
empty_output_buffer (j_compress_ptr cinfo)
{
 800a1a0:	b538      	push	{r3, r4, r5, lr}
  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
 800a1a2:	6984      	ldr	r4, [r0, #24]
{
 800a1a4:	4605      	mov	r5, r0

  if (JFWRITE(dest->outfile, dest->buffer, OUTPUT_BUF_SIZE) !=
 800a1a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a1aa:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
 800a1ae:	f7f9 fe25 	bl	8003dfc <write_file>
 800a1b2:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800a1b6:	d005      	beq.n	800a1c4 <empty_output_buffer+0x24>
      (size_t) OUTPUT_BUF_SIZE)
    ERREXIT(cinfo, JERR_FILE_WRITE);
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	2226      	movs	r2, #38	@ 0x26
 800a1bc:	4628      	mov	r0, r5
 800a1be:	615a      	str	r2, [r3, #20]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4798      	blx	r3

  dest->pub.next_output_byte = dest->buffer;
 800a1c4:	69a3      	ldr	r3, [r4, #24]
  dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;

  return TRUE;
}
 800a1c6:	2001      	movs	r0, #1
  dest->pub.next_output_byte = dest->buffer;
 800a1c8:	6023      	str	r3, [r4, #0]
  dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;
 800a1ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a1ce:	6063      	str	r3, [r4, #4]
}
 800a1d0:	bd38      	pop	{r3, r4, r5, pc}

0800a1d2 <term_destination>:
 */
#ifdef JFILE
METHODDEF(void)
term_destination (j_compress_ptr cinfo)
{
  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
 800a1d2:	6983      	ldr	r3, [r0, #24]
  size_t datacount = OUTPUT_BUF_SIZE - dest->pub.free_in_buffer;
 800a1d4:	685a      	ldr	r2, [r3, #4]
{
 800a1d6:	b570      	push	{r4, r5, r6, lr}

  /* Write any data remaining in the buffer */
  if (datacount > 0) {
 800a1d8:	f5d2 5580 	rsbs	r5, r2, #4096	@ 0x1000
{
 800a1dc:	4604      	mov	r4, r0
  if (datacount > 0) {
 800a1de:	d00e      	beq.n	800a1fe <term_destination+0x2c>
    if (JFWRITE(dest->outfile, dest->buffer, datacount) != datacount)
 800a1e0:	462a      	mov	r2, r5
 800a1e2:	e9d3 0105 	ldrd	r0, r1, [r3, #20]
 800a1e6:	f7f9 fe09 	bl	8003dfc <write_file>
 800a1ea:	42a8      	cmp	r0, r5
 800a1ec:	d007      	beq.n	800a1fe <term_destination+0x2c>
      ERREXIT(cinfo, JERR_FILE_WRITE);
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	2226      	movs	r2, #38	@ 0x26
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	615a      	str	r2, [r3, #20]
 800a1f6:	681b      	ldr	r3, [r3, #0]
  }
}
 800a1f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ERREXIT(cinfo, JERR_FILE_WRITE);
 800a1fc:	4718      	bx	r3
}
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}

0800a200 <jpeg_stdio_dest>:
 * for closing it after finishing compression.
 */
#ifdef JFILE
GLOBAL(void)
jpeg_stdio_dest (j_compress_ptr cinfo, JFILE * outfile)
{
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	460d      	mov	r5, r1
   * can be written to the same file without re-executing jpeg_stdio_dest.
   * This makes it dangerous to use this manager and a different destination
   * manager serially with the same JPEG object, because their private object
   * sizes may be different.  Caveat programmer.
   */
  if (cinfo->dest == NULL) {	/* first time for this JPEG object? */
 800a204:	6981      	ldr	r1, [r0, #24]
{
 800a206:	4604      	mov	r4, r0
  if (cinfo->dest == NULL) {	/* first time for this JPEG object? */
 800a208:	b921      	cbnz	r1, 800a214 <jpeg_stdio_dest+0x14>
    cinfo->dest = (struct jpeg_destination_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800a20a:	6843      	ldr	r3, [r0, #4]
 800a20c:	221c      	movs	r2, #28
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4798      	blx	r3
    cinfo->dest = (struct jpeg_destination_mgr *)
 800a212:	61a0      	str	r0, [r4, #24]
				  SIZEOF(my_destination_mgr));
  }

  dest = (my_dest_ptr) cinfo->dest;
 800a214:	69a3      	ldr	r3, [r4, #24]
  dest->pub.init_destination = init_destination;
 800a216:	4a04      	ldr	r2, [pc, #16]	@ (800a228 <jpeg_stdio_dest+0x28>)
 800a218:	609a      	str	r2, [r3, #8]
  dest->pub.empty_output_buffer = empty_output_buffer;
 800a21a:	4a04      	ldr	r2, [pc, #16]	@ (800a22c <jpeg_stdio_dest+0x2c>)
 800a21c:	60da      	str	r2, [r3, #12]
  dest->pub.term_destination = term_destination;
 800a21e:	4a04      	ldr	r2, [pc, #16]	@ (800a230 <jpeg_stdio_dest+0x30>)
  dest->outfile = outfile;
 800a220:	e9c3 2504 	strd	r2, r5, [r3, #16]
}
 800a224:	bd38      	pop	{r3, r4, r5, pc}
 800a226:	bf00      	nop
 800a228:	0800a185 	.word	0x0800a185
 800a22c:	0800a1a1 	.word	0x0800a1a1
 800a230:	0800a1d3 	.word	0x0800a1d3

0800a234 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 800a234:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 800a236:	6803      	ldr	r3, [r0, #0]
{
 800a238:	b0b3      	sub	sp, #204	@ 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	4669      	mov	r1, sp
 800a23e:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 800a240:	b033      	add	sp, #204	@ 0xcc
 800a242:	f85d fb04 	ldr.w	pc, [sp], #4

0800a246 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 800a246:	2900      	cmp	r1, #0
{
 800a248:	4603      	mov	r3, r0
 800a24a:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 800a24c:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 800a24e:	da0b      	bge.n	800a268 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 800a250:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800a252:	b112      	cbz	r2, 800a25a <emit_message+0x14>
 800a254:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800a256:	2a02      	cmp	r2, #2
 800a258:	dd02      	ble.n	800a260 <emit_message+0x1a>
      (*err->output_message) (cinfo);
 800a25a:	68a2      	ldr	r2, [r4, #8]
 800a25c:	4618      	mov	r0, r3
 800a25e:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 800a260:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800a262:	3301      	adds	r3, #1
 800a264:	66e3      	str	r3, [r4, #108]	@ 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 800a266:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 800a268:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800a26a:	428b      	cmp	r3, r1
 800a26c:	dbfb      	blt.n	800a266 <emit_message+0x20>
      (*err->output_message) (cinfo);
 800a26e:	68a3      	ldr	r3, [r4, #8]
}
 800a270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 800a274:	4718      	bx	r3

0800a276 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 800a276:	6803      	ldr	r3, [r0, #0]
 800a278:	2200      	movs	r2, #0
 800a27a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 800a27c:	615a      	str	r2, [r3, #20]
}
 800a27e:	4770      	bx	lr

0800a280 <format_message>:
{
 800a280:	4603      	mov	r3, r0
 800a282:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 800a284:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 800a286:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800a288:	2b00      	cmp	r3, #0
{
 800a28a:	b530      	push	{r4, r5, lr}
 800a28c:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800a28e:	dd1f      	ble.n	800a2d0 <format_message+0x50>
 800a290:	6f51      	ldr	r1, [r2, #116]	@ 0x74
 800a292:	4299      	cmp	r1, r3
 800a294:	db1c      	blt.n	800a2d0 <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 800a296:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800a298:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 800a29c:	b911      	cbnz	r1, 800a2a4 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 800a29e:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 800a2a0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800a2a2:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 800a2a4:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 800a2a6:	f813 4b01 	ldrb.w	r4, [r3], #1
 800a2aa:	b9fc      	cbnz	r4, 800a2ec <format_message+0x6c>
    sprintf(buffer, msgtext,
 800a2ac:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800a2ae:	9305      	str	r3, [sp, #20]
 800a2b0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a2b2:	9304      	str	r3, [sp, #16]
 800a2b4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a2b6:	9303      	str	r3, [sp, #12]
 800a2b8:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800a2ba:	9302      	str	r3, [sp, #8]
 800a2bc:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800a2be:	9301      	str	r3, [sp, #4]
 800a2c0:	6a13      	ldr	r3, [r2, #32]
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800a2c8:	f005 fbd0 	bl	800fa6c <siprintf>
}
 800a2cc:	b007      	add	sp, #28
 800a2ce:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 800a2d0:	6f94      	ldr	r4, [r2, #120]	@ 0x78
 800a2d2:	2c00      	cmp	r4, #0
 800a2d4:	d0e3      	beq.n	800a29e <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800a2d6:	6fd1      	ldr	r1, [r2, #124]	@ 0x7c
  } else if (err->addon_message_table != NULL &&
 800a2d8:	4299      	cmp	r1, r3
 800a2da:	dce0      	bgt.n	800a29e <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800a2dc:	f8d2 5080 	ldr.w	r5, [r2, #128]	@ 0x80
 800a2e0:	429d      	cmp	r5, r3
 800a2e2:	dbdc      	blt.n	800a29e <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 800a2e4:	1a59      	subs	r1, r3, r1
 800a2e6:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800a2ea:	e7d7      	b.n	800a29c <format_message+0x1c>
    if (ch == '%') {
 800a2ec:	2c25      	cmp	r4, #37	@ 0x25
 800a2ee:	d1da      	bne.n	800a2a6 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	2b73      	cmp	r3, #115	@ 0x73
 800a2f4:	d1da      	bne.n	800a2ac <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 800a2f6:	3218      	adds	r2, #24
}
 800a2f8:	b007      	add	sp, #28
 800a2fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 800a2fe:	f005 bbb5 	b.w	800fa6c <siprintf>

0800a302 <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 800a302:	6803      	ldr	r3, [r0, #0]
{
 800a304:	b510      	push	{r4, lr}
 800a306:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	4798      	blx	r3
  jpeg_destroy(cinfo);
 800a30c:	4620      	mov	r0, r4
}
 800a30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 800a312:	f7ff b805 	b.w	8009320 <jpeg_destroy>
	...

0800a318 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 800a318:	4a0a      	ldr	r2, [pc, #40]	@ (800a344 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 800a31a:	490b      	ldr	r1, [pc, #44]	@ (800a348 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 800a31c:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 800a31e:	4a0b      	ldr	r2, [pc, #44]	@ (800a34c <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 800a320:	6701      	str	r1, [r0, #112]	@ 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 800a322:	217e      	movs	r1, #126	@ 0x7e
  err->emit_message = emit_message;
 800a324:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 800a326:	4a0a      	ldr	r2, [pc, #40]	@ (800a350 <jpeg_std_error+0x38>)
 800a328:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 800a32a:	4a0a      	ldr	r2, [pc, #40]	@ (800a354 <jpeg_std_error+0x3c>)
 800a32c:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 800a32e:	4a0a      	ldr	r2, [pc, #40]	@ (800a358 <jpeg_std_error+0x40>)
 800a330:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 800a332:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 800a334:	e9c0 221a 	strd	r2, r2, [r0, #104]	@ 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 800a338:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 800a33a:	e9c0 121d 	strd	r1, r2, [r0, #116]	@ 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 800a33e:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c

  return err;
}
 800a342:	4770      	bx	lr
 800a344:	0800a303 	.word	0x0800a303
 800a348:	08011bd8 	.word	0x08011bd8
 800a34c:	0800a247 	.word	0x0800a247
 800a350:	0800a235 	.word	0x0800a235
 800a354:	0800a281 	.word	0x0800a281
 800a358:	0800a277 	.word	0x0800a277

0800a35c <jpeg_fdct_float>:
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
jpeg_fdct_float (FAST_FLOAT * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800a35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a35e:	f100 0520 	add.w	r5, r0, #32
 800a362:	f1a1 0e04 	sub.w	lr, r1, #4
 800a366:	f500 7690 	add.w	r6, r0, #288	@ 0x120
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;

    /* Apply unsigned->signed conversion */
    dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
 800a36a:	ed9f 2a7a 	vldr	s4, [pc, #488]	@ 800a554 <jpeg_fdct_float+0x1f8>
 800a36e:	462c      	mov	r4, r5
    dataptr[4] = tmp10 - tmp11;

    z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
    dataptr[2] = tmp13 + z1;	/* phase 5 */
 800a370:	ed9f 5a79 	vldr	s10, [pc, #484]	@ 800a558 <jpeg_fdct_float+0x1fc>
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
    z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
 800a374:	eddf 3a79 	vldr	s7, [pc, #484]	@ 800a55c <jpeg_fdct_float+0x200>
 800a378:	eddf 4a79 	vldr	s9, [pc, #484]	@ 800a560 <jpeg_fdct_float+0x204>
    z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
 800a37c:	ed9f 4a79 	vldr	s8, [pc, #484]	@ 800a564 <jpeg_fdct_float+0x208>
    elemptr = sample_data[ctr] + start_col;
 800a380:	f85e 3f04 	ldr.w	r3, [lr, #4]!
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800a384:	3420      	adds	r4, #32
    elemptr = sample_data[ctr] + start_col;
 800a386:	189f      	adds	r7, r3, r2
    tmp0 = (FAST_FLOAT) (GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]));
 800a388:	5c9b      	ldrb	r3, [r3, r2]
 800a38a:	f897 c007 	ldrb.w	ip, [r7, #7]
 800a38e:	eb03 010c 	add.w	r1, r3, ip
    tmp7 = (FAST_FLOAT) (GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]));
 800a392:	eba3 030c 	sub.w	r3, r3, ip
    tmp1 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]));
 800a396:	f897 c006 	ldrb.w	ip, [r7, #6]
    tmp7 = (FAST_FLOAT) (GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]));
 800a39a:	ee07 3a90 	vmov	s15, r3
    tmp1 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]));
 800a39e:	787b      	ldrb	r3, [r7, #1]
    tmp0 = (FAST_FLOAT) (GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]));
 800a3a0:	ee05 1a90 	vmov	s11, r1
    tmp1 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]));
 800a3a4:	eb03 010c 	add.w	r1, r3, ip
    tmp6 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]));
 800a3a8:	eba3 030c 	sub.w	r3, r3, ip
    tmp7 = (FAST_FLOAT) (GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]));
 800a3ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    tmp2 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]));
 800a3b0:	f897 c005 	ldrb.w	ip, [r7, #5]
    tmp6 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]));
 800a3b4:	ee07 3a90 	vmov	s15, r3
    tmp2 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]));
 800a3b8:	78bb      	ldrb	r3, [r7, #2]
    tmp1 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]));
 800a3ba:	ee03 1a10 	vmov	s6, r1
    tmp0 = (FAST_FLOAT) (GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]));
 800a3be:	eef8 5ae5 	vcvt.f32.s32	s11, s11
    tmp2 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]));
 800a3c2:	eb03 010c 	add.w	r1, r3, ip
    tmp5 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]));
 800a3c6:	eba3 030c 	sub.w	r3, r3, ip
    tmp1 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]));
 800a3ca:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
    tmp5 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]));
 800a3ce:	ee06 3a10 	vmov	s12, r3
    tmp3 = (FAST_FLOAT) (GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]));
 800a3d2:	78fb      	ldrb	r3, [r7, #3]
 800a3d4:	793f      	ldrb	r7, [r7, #4]
    tmp2 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]));
 800a3d6:	ee02 1a90 	vmov	s5, r1
    tmp6 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]));
 800a3da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tmp3 = (FAST_FLOAT) (GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]));
 800a3de:	19d9      	adds	r1, r3, r7
    tmp2 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]));
 800a3e0:	eef8 2ae2 	vcvt.f32.s32	s5, s5
    tmp4 = (FAST_FLOAT) (GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]));
 800a3e4:	1bdb      	subs	r3, r3, r7
    tmp5 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]));
 800a3e6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    tmp3 = (FAST_FLOAT) (GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]));
 800a3ea:	ee01 1a10 	vmov	s2, r1
    tmp11 = tmp1 + tmp2;
 800a3ee:	ee73 0a22 	vadd.f32	s1, s6, s5
    tmp4 = (FAST_FLOAT) (GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]));
 800a3f2:	ee07 3a10 	vmov	s14, r3
    tmp3 = (FAST_FLOAT) (GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]));
 800a3f6:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
    tmp12 = tmp1 - tmp2;
 800a3fa:	ee33 3a62 	vsub.f32	s6, s6, s5
    tmp4 = (FAST_FLOAT) (GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]));
 800a3fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp10 = tmp0 + tmp3;	/* phase 2 */
 800a402:	ee75 1a81 	vadd.f32	s3, s11, s2
    tmp13 = tmp0 - tmp3;
 800a406:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = tmp4 + tmp5;	/* phase 2 */
 800a40a:	ee36 7a07 	vadd.f32	s14, s12, s14
    tmp11 = tmp5 + tmp6;
 800a40e:	ee37 6a86 	vadd.f32	s12, s15, s12
    z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
 800a412:	ee33 3a25 	vadd.f32	s6, s6, s11
    dataptr[2] = tmp13 + z1;	/* phase 5 */
 800a416:	eef0 2a65 	vmov.f32	s5, s11
    tmp12 = tmp6 + tmp7;
 800a41a:	ee76 7aa7 	vadd.f32	s15, s13, s15
    dataptr[6] = tmp13 - z1;
 800a41e:	eee3 5a45 	vfms.f32	s11, s6, s10
    dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
 800a422:	ee31 1aa0 	vadd.f32	s2, s3, s1
    dataptr[2] = tmp13 + z1;	/* phase 5 */
 800a426:	eee3 2a05 	vfma.f32	s5, s6, s10
    dataptr[4] = tmp10 - tmp11;
 800a42a:	ee71 1ae0 	vsub.f32	s3, s3, s1
    dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
 800a42e:	ee31 1a42 	vsub.f32	s2, s2, s4
    dataptr[6] = tmp13 - z1;
 800a432:	ed44 5a0a 	vstr	s11, [r4, #-40]	@ 0xffffffd8
    z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
 800a436:	ee77 5a67 	vsub.f32	s11, s14, s15
    z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
 800a43a:	ee27 7a23 	vmul.f32	s14, s14, s7
    dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
 800a43e:	ed04 1a10 	vstr	s2, [r4, #-64]	@ 0xffffffc0
    z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
 800a442:	ee67 7a84 	vmul.f32	s15, s15, s8
    dataptr[4] = tmp10 - tmp11;
 800a446:	ed44 1a0c 	vstr	s3, [r4, #-48]	@ 0xffffffd0
    dataptr[2] = tmp13 + z1;	/* phase 5 */
 800a44a:	ed44 2a0e 	vstr	s5, [r4, #-56]	@ 0xffffffc8
    z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
 800a44e:	eea5 7aa4 	vfma.f32	s14, s11, s9
    z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
 800a452:	eee5 7aa4 	vfma.f32	s15, s11, s9
    z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */

    z11 = tmp7 + z3;		/* phase 5 */
 800a456:	eef0 5a66 	vmov.f32	s11, s13
    z13 = tmp7 - z3;
 800a45a:	eee6 6a45 	vfms.f32	s13, s12, s10
    z11 = tmp7 + z3;		/* phase 5 */
 800a45e:	eee6 5a05 	vfma.f32	s11, s12, s10

    dataptr[5] = z13 + z2;	/* phase 6 */
 800a462:	ee37 6a26 	vadd.f32	s12, s14, s13
    dataptr[3] = z13 - z2;
 800a466:	ee76 6ac7 	vsub.f32	s13, s13, s14
    dataptr[1] = z11 + z4;
 800a46a:	ee37 7aa5 	vadd.f32	s14, s15, s11
    dataptr[7] = z11 - z4;
 800a46e:	ee75 5ae7 	vsub.f32	s11, s11, s15
    dataptr[5] = z13 + z2;	/* phase 6 */
 800a472:	ed04 6a0b 	vstr	s12, [r4, #-44]	@ 0xffffffd4
    dataptr[3] = z13 - z2;
 800a476:	ed44 6a0d 	vstr	s13, [r4, #-52]	@ 0xffffffcc
    dataptr[1] = z11 + z4;
 800a47a:	ed04 7a0f 	vstr	s14, [r4, #-60]	@ 0xffffffc4
    dataptr[7] = z11 - z4;
 800a47e:	ed44 5a09 	vstr	s11, [r4, #-36]	@ 0xffffffdc
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800a482:	42a6      	cmp	r6, r4
 800a484:	f47f af7c 	bne.w	800a380 <jpeg_fdct_float+0x24>

  /* Pass 2: process columns. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800a488:	edd0 7a38 	vldr	s15, [r0, #224]	@ 0xe0
    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
    dataptr[DCTSIZE*3] = z13 - z2;
    dataptr[DCTSIZE*1] = z11 + z4;
    dataptr[DCTSIZE*7] = z11 - z4;

    dataptr++;			/* advance pointer to next column */
 800a48c:	3004      	adds	r0, #4
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800a48e:	ed50 6a01 	vldr	s13, [r0, #-4]
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800a492:	ed90 7a2f 	vldr	s14, [r0, #188]	@ 0xbc
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800a496:	ee76 5aa7 	vadd.f32	s11, s13, s15
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800a49a:	ed90 6a0f 	vldr	s12, [r0, #60]	@ 0x3c
    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 800a49e:	ee76 6ae7 	vsub.f32	s13, s13, s15
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800a4a2:	edd0 7a07 	vldr	s15, [r0, #28]
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 800a4a6:	edd0 2a1f 	vldr	s5, [r0, #124]	@ 0x7c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800a4aa:	ee37 3a87 	vadd.f32	s6, s15, s14
    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 800a4ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800a4b2:	ed90 7a27 	vldr	s14, [r0, #156]	@ 0x9c
 800a4b6:	ee36 2a07 	vadd.f32	s4, s12, s14
    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
 800a4ba:	ee36 6a47 	vsub.f32	s12, s12, s14
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 800a4be:	ed90 7a17 	vldr	s14, [r0, #92]	@ 0x5c
 800a4c2:	ee77 1a22 	vadd.f32	s3, s14, s5
    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
 800a4c6:	ee37 7a62 	vsub.f32	s14, s14, s5
    tmp10 = tmp0 + tmp3;	/* phase 2 */
 800a4ca:	ee75 2aa1 	vadd.f32	s5, s11, s3
    tmp13 = tmp0 - tmp3;
 800a4ce:	ee75 5ae1 	vsub.f32	s11, s11, s3
    tmp11 = tmp1 + tmp2;
 800a4d2:	ee73 1a02 	vadd.f32	s3, s6, s4
    tmp12 = tmp1 - tmp2;
 800a4d6:	ee33 3a42 	vsub.f32	s6, s6, s4
    tmp10 = tmp4 + tmp5;	/* phase 2 */
 800a4da:	ee36 7a07 	vadd.f32	s14, s12, s14
    dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
 800a4de:	ee32 1aa1 	vadd.f32	s2, s5, s3
    z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
 800a4e2:	ee33 3a25 	vadd.f32	s6, s6, s11
    dataptr[DCTSIZE*4] = tmp10 - tmp11;
 800a4e6:	ee72 2ae1 	vsub.f32	s5, s5, s3
    tmp11 = tmp5 + tmp6;
 800a4ea:	ee37 6a86 	vadd.f32	s12, s15, s12
    dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
 800a4ee:	ed00 1a01 	vstr	s2, [r0, #-4]
    tmp12 = tmp6 + tmp7;
 800a4f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
    dataptr[DCTSIZE*4] = tmp10 - tmp11;
 800a4f6:	edc0 2a1f 	vstr	s5, [r0, #124]	@ 0x7c
    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
 800a4fa:	eef0 2a65 	vmov.f32	s5, s11
    dataptr[DCTSIZE*6] = tmp13 - z1;
 800a4fe:	eee3 5a45 	vfms.f32	s11, s6, s10
    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
 800a502:	eee3 2a05 	vfma.f32	s5, s6, s10
    dataptr[DCTSIZE*6] = tmp13 - z1;
 800a506:	edc0 5a2f 	vstr	s11, [r0, #188]	@ 0xbc
    z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
 800a50a:	ee77 5a67 	vsub.f32	s11, s14, s15
    z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
 800a50e:	ee27 7a23 	vmul.f32	s14, s14, s7
    z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
 800a512:	ee67 7a84 	vmul.f32	s15, s15, s8
    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
 800a516:	edc0 2a0f 	vstr	s5, [r0, #60]	@ 0x3c
    z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
 800a51a:	eea5 7aa4 	vfma.f32	s14, s11, s9
    z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
 800a51e:	eee5 7aa4 	vfma.f32	s15, s11, s9
    z11 = tmp7 + z3;		/* phase 5 */
 800a522:	eef0 5a66 	vmov.f32	s11, s13
    z13 = tmp7 - z3;
 800a526:	eee6 6a45 	vfms.f32	s13, s12, s10
    z11 = tmp7 + z3;		/* phase 5 */
 800a52a:	eee6 5a05 	vfma.f32	s11, s12, s10
    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
 800a52e:	ee37 6a26 	vadd.f32	s12, s14, s13
    dataptr[DCTSIZE*3] = z13 - z2;
 800a532:	ee76 6ac7 	vsub.f32	s13, s13, s14
    dataptr[DCTSIZE*1] = z11 + z4;
 800a536:	ee37 7aa5 	vadd.f32	s14, s15, s11
    dataptr[DCTSIZE*7] = z11 - z4;
 800a53a:	ee75 5ae7 	vsub.f32	s11, s11, s15
    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
 800a53e:	ed80 6a27 	vstr	s12, [r0, #156]	@ 0x9c
    dataptr[DCTSIZE*3] = z13 - z2;
 800a542:	edc0 6a17 	vstr	s13, [r0, #92]	@ 0x5c
    dataptr[DCTSIZE*1] = z11 + z4;
 800a546:	ed80 7a07 	vstr	s14, [r0, #28]
    dataptr[DCTSIZE*7] = z11 - z4;
 800a54a:	edc0 5a37 	vstr	s11, [r0, #220]	@ 0xdc
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800a54e:	42a8      	cmp	r0, r5
 800a550:	d19a      	bne.n	800a488 <jpeg_fdct_float+0x12c>
  }
}
 800a552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a554:	44800000 	.word	0x44800000
 800a558:	3f3504f3 	.word	0x3f3504f3
 800a55c:	3f0a8bd4 	.word	0x3f0a8bd4
 800a560:	3ec3ef15 	.word	0x3ec3ef15
 800a564:	3fa73d75 	.word	0x3fa73d75

0800a568 <jpeg_fdct_ifast>:
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
jpeg_fdct_ifast (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800a568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	f100 0320 	add.w	r3, r0, #32
 800a570:	b085      	sub	sp, #20
 800a572:	3904      	subs	r1, #4
 800a574:	461c      	mov	r4, r3
 800a576:	9301      	str	r3, [sp, #4]
 800a578:	f500 7390 	add.w	r3, r0, #288	@ 0x120
 800a57c:	9202      	str	r2, [sp, #8]
 800a57e:	9303      	str	r3, [sp, #12]

  /* Pass 1: process rows. */

  dataptr = data;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    elemptr = sample_data[ctr] + start_col;
 800a580:	f851 3f04 	ldr.w	r3, [r1, #4]!
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800a584:	3420      	adds	r4, #32
    elemptr = sample_data[ctr] + start_col;
 800a586:	9a02      	ldr	r2, [sp, #8]
 800a588:	eb03 0e02 	add.w	lr, r3, r2

    /* Load data into workspace */
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 800a58c:	5c9f      	ldrb	r7, [r3, r2]
 800a58e:	f89e 3007 	ldrb.w	r3, [lr, #7]
    tmp7 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 800a592:	f89e 2006 	ldrb.w	r2, [lr, #6]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 800a596:	18fe      	adds	r6, r7, r3
    tmp7 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
 800a598:	1aff      	subs	r7, r7, r3
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 800a59a:	f89e 3001 	ldrb.w	r3, [lr, #1]
    tmp6 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 800a59e:	f89e c002 	ldrb.w	ip, [lr, #2]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 800a5a2:	189d      	adds	r5, r3, r2
    tmp6 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
 800a5a4:	1a9b      	subs	r3, r3, r2
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 800a5a6:	f89e 2005 	ldrb.w	r2, [lr, #5]
    tmp5 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 800a5aa:	f89e 9004 	ldrb.w	r9, [lr, #4]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 800a5ae:	eb0c 0a02 	add.w	sl, ip, r2
    tmp5 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
 800a5b2:	ebac 0c02 	sub.w	ip, ip, r2
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 800a5b6:	f89e 2003 	ldrb.w	r2, [lr, #3]

    /* Even part */

    tmp10 = tmp0 + tmp3;	/* phase 2 */
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
 800a5ba:	eb05 0b0a 	add.w	fp, r5, sl
    tmp12 = tmp1 - tmp2;
 800a5be:	eba5 050a 	sub.w	r5, r5, sl
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 800a5c2:	eb02 0809 	add.w	r8, r2, r9
    tmp6 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
 800a5c6:	9300      	str	r3, [sp, #0]

    /* Apply unsigned->signed conversion */
    dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
    dataptr[4] = tmp10 - tmp11;

    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
 800a5c8:	23b5      	movs	r3, #181	@ 0xb5
    tmp4 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
 800a5ca:	eba2 0209 	sub.w	r2, r2, r9
    tmp10 = tmp0 + tmp3;	/* phase 2 */
 800a5ce:	eb06 0e08 	add.w	lr, r6, r8
    tmp13 = tmp0 - tmp3;
 800a5d2:	eba6 0608 	sub.w	r6, r6, r8
    dataptr[2] = tmp13 + z1;	/* phase 5 */
    dataptr[6] = tmp13 - z1;

    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
 800a5d6:	4462      	add	r2, ip
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
 800a5d8:	4435      	add	r5, r6
    dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
 800a5da:	eb0e 080b 	add.w	r8, lr, fp
    dataptr[4] = tmp10 - tmp11;
 800a5de:	ebae 0e0b 	sub.w	lr, lr, fp
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
 800a5e2:	435d      	muls	r5, r3
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;
 800a5e4:	9b00      	ldr	r3, [sp, #0]
    dataptr[4] = tmp10 - tmp11;
 800a5e6:	f844 ec30 	str.w	lr, [r4, #-48]
    dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
 800a5ea:	f5a8 6880 	sub.w	r8, r8, #1024	@ 0x400
    dataptr[2] = tmp13 + z1;	/* phase 5 */
 800a5ee:	eb06 2e25 	add.w	lr, r6, r5, asr #8
    dataptr[6] = tmp13 - z1;
 800a5f2:	eba6 2625 	sub.w	r6, r6, r5, asr #8
    tmp12 = tmp6 + tmp7;
 800a5f6:	18fd      	adds	r5, r7, r3

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
 800a5f8:	2362      	movs	r3, #98	@ 0x62
    dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
 800a5fa:	f844 8c40 	str.w	r8, [r4, #-64]
    dataptr[6] = tmp13 - z1;
 800a5fe:	f844 6c28 	str.w	r6, [r4, #-40]
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
 800a602:	1b56      	subs	r6, r2, r5
    dataptr[2] = tmp13 + z1;	/* phase 5 */
 800a604:	f844 ec38 	str.w	lr, [r4, #-56]
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
 800a608:	435e      	muls	r6, r3
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
 800a60a:	238b      	movs	r3, #139	@ 0x8b
 800a60c:	435a      	muls	r2, r3
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
 800a60e:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
 800a612:	435d      	muls	r5, r3
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
 800a614:	1212      	asrs	r2, r2, #8
    tmp11 = tmp5 + tmp6;
 800a616:	9b00      	ldr	r3, [sp, #0]
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
 800a618:	122d      	asrs	r5, r5, #8
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
 800a61a:	eb02 2226 	add.w	r2, r2, r6, asr #8
    tmp11 = tmp5 + tmp6;
 800a61e:	4463      	add	r3, ip
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
 800a620:	eb05 2526 	add.w	r5, r5, r6, asr #8
    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
 800a624:	26b5      	movs	r6, #181	@ 0xb5
 800a626:	4373      	muls	r3, r6

    z11 = tmp7 + z3;		/* phase 5 */
 800a628:	eb07 2623 	add.w	r6, r7, r3, asr #8
    z13 = tmp7 - z3;
 800a62c:	eba7 2323 	sub.w	r3, r7, r3, asr #8

    dataptr[5] = z13 + z2;	/* phase 6 */
 800a630:	18d7      	adds	r7, r2, r3
    dataptr[3] = z13 - z2;
 800a632:	1a9b      	subs	r3, r3, r2
 800a634:	f844 3c34 	str.w	r3, [r4, #-52]
    dataptr[1] = z11 + z4;
 800a638:	19ab      	adds	r3, r5, r6
    dataptr[7] = z11 - z4;
 800a63a:	1b76      	subs	r6, r6, r5
    dataptr[5] = z13 + z2;	/* phase 6 */
 800a63c:	f844 7c2c 	str.w	r7, [r4, #-44]
    dataptr[1] = z11 + z4;
 800a640:	f844 3c3c 	str.w	r3, [r4, #-60]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800a644:	9b03      	ldr	r3, [sp, #12]
    dataptr[7] = z11 - z4;
 800a646:	f844 6c24 	str.w	r6, [r4, #-36]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800a64a:	42a3      	cmp	r3, r4
 800a64c:	d198      	bne.n	800a580 <jpeg_fdct_ifast+0x18>
    tmp10 = tmp4 + tmp5;	/* phase 2 */
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
 800a64e:	f04f 0a62 	mov.w	sl, #98	@ 0x62
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
 800a652:	f04f 098b 	mov.w	r9, #139	@ 0x8b
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
 800a656:	f44f 7ba7 	mov.w	fp, #334	@ 0x14e
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800a65a:	f8d0 20e0 	ldr.w	r2, [r0, #224]	@ 0xe0
    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
    dataptr[DCTSIZE*3] = z13 - z2;
    dataptr[DCTSIZE*1] = z11 + z4;
    dataptr[DCTSIZE*7] = z11 - z4;

    dataptr++;			/* advance pointer to next column */
 800a65e:	3004      	adds	r0, #4
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800a660:	f850 3c04 	ldr.w	r3, [r0, #-4]
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800a664:	f8d0 50bc 	ldr.w	r5, [r0, #188]	@ 0xbc
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800a668:	189c      	adds	r4, r3, r2
    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 800a66a:	1a9b      	subs	r3, r3, r2
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800a66c:	69c2      	ldr	r2, [r0, #28]
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800a66e:	f8d0 609c 	ldr.w	r6, [r0, #156]	@ 0x9c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800a672:	1951      	adds	r1, r2, r5
    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 800a674:	1b52      	subs	r2, r2, r5
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800a676:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 800a678:	f8d0 c07c 	ldr.w	ip, [r0, #124]	@ 0x7c
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800a67c:	eb05 0e06 	add.w	lr, r5, r6
    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
 800a680:	1bad      	subs	r5, r5, r6
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 800a682:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 800a684:	eb06 080c 	add.w	r8, r6, ip
    tmp10 = tmp0 + tmp3;	/* phase 2 */
 800a688:	eb04 0608 	add.w	r6, r4, r8
    tmp13 = tmp0 - tmp3;
 800a68c:	eba4 0408 	sub.w	r4, r4, r8
    tmp11 = tmp1 + tmp2;
 800a690:	eb01 080e 	add.w	r8, r1, lr
    tmp12 = tmp1 - tmp2;
 800a694:	eba1 010e 	sub.w	r1, r1, lr
    dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
 800a698:	eb06 0708 	add.w	r7, r6, r8
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
 800a69c:	4421      	add	r1, r4
    dataptr[DCTSIZE*4] = tmp10 - tmp11;
 800a69e:	eba6 0608 	sub.w	r6, r6, r8
    dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
 800a6a2:	f840 7c04 	str.w	r7, [r0, #-4]
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
 800a6a6:	27b5      	movs	r7, #181	@ 0xb5
    dataptr[DCTSIZE*4] = tmp10 - tmp11;
 800a6a8:	67c6      	str	r6, [r0, #124]	@ 0x7c
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
 800a6aa:	4379      	muls	r1, r7
    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
 800a6ac:	eb04 2621 	add.w	r6, r4, r1, asr #8
    dataptr[DCTSIZE*6] = tmp13 - z1;
 800a6b0:	eba4 2421 	sub.w	r4, r4, r1, asr #8
    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
 800a6b4:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
 800a6b6:	63c6      	str	r6, [r0, #60]	@ 0x3c
    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
 800a6b8:	eba1 010c 	sub.w	r1, r1, ip
    dataptr[DCTSIZE*6] = tmp13 - z1;
 800a6bc:	f8c0 40bc 	str.w	r4, [r0, #188]	@ 0xbc
    tmp12 = tmp6 + tmp7;
 800a6c0:	189c      	adds	r4, r3, r2
    tmp11 = tmp5 + tmp6;
 800a6c2:	442a      	add	r2, r5
    tmp10 = tmp4 + tmp5;	/* phase 2 */
 800a6c4:	4429      	add	r1, r5
    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
 800a6c6:	437a      	muls	r2, r7
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
 800a6c8:	1b0e      	subs	r6, r1, r4
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
 800a6ca:	fb09 f101 	mul.w	r1, r9, r1
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
 800a6ce:	fb0b f404 	mul.w	r4, fp, r4
    z11 = tmp7 + z3;		/* phase 5 */
 800a6d2:	eb03 2522 	add.w	r5, r3, r2, asr #8
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
 800a6d6:	fb0a f606 	mul.w	r6, sl, r6
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
 800a6da:	1209      	asrs	r1, r1, #8
    z13 = tmp7 - z3;
 800a6dc:	eba3 2322 	sub.w	r3, r3, r2, asr #8
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
 800a6e0:	eb01 2126 	add.w	r1, r1, r6, asr #8
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
 800a6e4:	1224      	asrs	r4, r4, #8
    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
 800a6e6:	18ca      	adds	r2, r1, r3
    dataptr[DCTSIZE*3] = z13 - z2;
 800a6e8:	1a5b      	subs	r3, r3, r1
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
 800a6ea:	eb04 2426 	add.w	r4, r4, r6, asr #8
    dataptr[DCTSIZE*3] = z13 - z2;
 800a6ee:	65c3      	str	r3, [r0, #92]	@ 0x5c
    dataptr[DCTSIZE*1] = z11 + z4;
 800a6f0:	1963      	adds	r3, r4, r5
    dataptr[DCTSIZE*7] = z11 - z4;
 800a6f2:	1b2d      	subs	r5, r5, r4
    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
 800a6f4:	f8c0 209c 	str.w	r2, [r0, #156]	@ 0x9c
    dataptr[DCTSIZE*1] = z11 + z4;
 800a6f8:	61c3      	str	r3, [r0, #28]
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800a6fa:	9b01      	ldr	r3, [sp, #4]
    dataptr[DCTSIZE*7] = z11 - z4;
 800a6fc:	f8c0 50dc 	str.w	r5, [r0, #220]	@ 0xdc
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800a700:	4298      	cmp	r0, r3
 800a702:	d1aa      	bne.n	800a65a <jpeg_fdct_ifast+0xf2>
  }
}
 800a704:	b005      	add	sp, #20
 800a706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a70c <jpeg_fdct_islow>:
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
jpeg_fdct_islow (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800a70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a710:	f100 0320 	add.w	r3, r0, #32
 800a714:	b087      	sub	sp, #28
 800a716:	4698      	mov	r8, r3
 800a718:	9303      	str	r3, [sp, #12]
 800a71a:	1f0b      	subs	r3, r1, #4
 800a71c:	9204      	str	r2, [sp, #16]
 800a71e:	9302      	str	r3, [sp, #8]
 800a720:	f500 7390 	add.w	r3, r0, #288	@ 0x120
 800a724:	9305      	str	r3, [sp, #20]
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  dataptr = data;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    elemptr = sample_data[ctr] + start_col;
 800a726:	9a02      	ldr	r2, [sp, #8]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800a728:	f108 0820 	add.w	r8, r8, #32
    elemptr = sample_data[ctr] + start_col;
 800a72c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800a730:	9202      	str	r2, [sp, #8]
 800a732:	9a04      	ldr	r2, [sp, #16]
 800a734:	1899      	adds	r1, r3, r2

    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 800a736:	5c9a      	ldrb	r2, [r3, r2]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 800a738:	798c      	ldrb	r4, [r1, #6]
 800a73a:	784b      	ldrb	r3, [r1, #1]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 800a73c:	f891 e002 	ldrb.w	lr, [r1, #2]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 800a740:	f891 9007 	ldrb.w	r9, [r1, #7]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 800a744:	191f      	adds	r7, r3, r4
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 800a746:	794d      	ldrb	r5, [r1, #5]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 800a748:	f891 c003 	ldrb.w	ip, [r1, #3]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 800a74c:	eb02 0b09 	add.w	fp, r2, r9
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 800a750:	9401      	str	r4, [sp, #4]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 800a752:	eb0e 0a05 	add.w	sl, lr, r5
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 800a756:	790c      	ldrb	r4, [r1, #4]
    tmp10 = tmp0 + tmp3;
    tmp12 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp13 = tmp1 - tmp2;

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
 800a758:	eba2 0909 	sub.w	r9, r2, r9
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
 800a75c:	9a01      	ldr	r2, [sp, #4]
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
 800a75e:	ebae 0505 	sub.w	r5, lr, r5
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 800a762:	eb0c 0104 	add.w	r1, ip, r4
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
 800a766:	ebac 0404 	sub.w	r4, ip, r4
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
 800a76a:	1a9b      	subs	r3, r3, r2

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);

    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800a76c:	f241 1251 	movw	r2, #4433	@ 0x1151
    tmp10 = tmp0 + tmp3;
 800a770:	eb0b 0601 	add.w	r6, fp, r1
    tmp12 = tmp0 - tmp3;
 800a774:	ebab 0101 	sub.w	r1, fp, r1
    tmp11 = tmp1 + tmp2;
 800a778:	eb07 0b0a 	add.w	fp, r7, sl
    tmp13 = tmp1 - tmp2;
 800a77c:	eba7 070a 	sub.w	r7, r7, sl
     */

    tmp10 = tmp0 + tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp1 + tmp3;
 800a780:	eb03 0e04 	add.w	lr, r3, r4
    dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
 800a784:	eb06 0c0b 	add.w	ip, r6, fp
    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
 800a788:	eba6 060b 	sub.w	r6, r6, fp
 800a78c:	00b6      	lsls	r6, r6, #2
    dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
 800a78e:	f5ac 6c80 	sub.w	ip, ip, #1024	@ 0x400
    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
 800a792:	f848 6c30 	str.w	r6, [r8, #-48]
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800a796:	19ce      	adds	r6, r1, r7
    dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
 800a798:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800a79c:	4356      	muls	r6, r2
    dataptr[2] = (DCTELEM) RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865),
 800a79e:	f641 027e 	movw	r2, #6270	@ 0x187e
    dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
 800a7a2:	f848 cc40 	str.w	ip, [r8, #-64]
    tmp12 = tmp0 + tmp2;
 800a7a6:	eb09 0c05 	add.w	ip, r9, r5
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 800a7aa:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
    dataptr[2] = (DCTELEM) RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865),
 800a7ae:	fb02 6101 	mla	r1, r2, r1, r6
    dataptr[6] = (DCTELEM) RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 800a7b2:	4a62      	ldr	r2, [pc, #392]	@ (800a93c <jpeg_fdct_islow+0x230>)
    dataptr[2] = (DCTELEM) RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865),
 800a7b4:	12c9      	asrs	r1, r1, #11
    dataptr[6] = (DCTELEM) RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 800a7b6:	fb02 6607 	mla	r6, r2, r7, r6
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800a7ba:	eb0c 070e 	add.w	r7, ip, lr
 800a7be:	f242 52a1 	movw	r2, #9633	@ 0x25a1
    dataptr[2] = (DCTELEM) RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865),
 800a7c2:	f848 1c38 	str.w	r1, [r8, #-56]
    dataptr[6] = (DCTELEM) RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 800a7c6:	12f6      	asrs	r6, r6, #11
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800a7c8:	4357      	muls	r7, r2
    tmp10 = tmp0 + tmp3;
 800a7ca:	eb09 0104 	add.w	r1, r9, r4

    tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
    tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
    tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
    tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 800a7ce:	4a5c      	ldr	r2, [pc, #368]	@ (800a940 <jpeg_fdct_islow+0x234>)
    dataptr[6] = (DCTELEM) RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 800a7d0:	f848 6c28 	str.w	r6, [r8, #-40]
    tmp11 = tmp1 + tmp2;
 800a7d4:	195e      	adds	r6, r3, r5
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 800a7d6:	4351      	muls	r1, r2
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 800a7d8:	4a5a      	ldr	r2, [pc, #360]	@ (800a944 <jpeg_fdct_islow+0x238>)
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 800a7da:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 800a7de:	4356      	muls	r6, r2
    tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
    tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */

    tmp12 += z1;
 800a7e0:	4a59      	ldr	r2, [pc, #356]	@ (800a948 <jpeg_fdct_islow+0x23c>)
 800a7e2:	fb02 7c0c 	mla	ip, r2, ip, r7
    tmp13 += z1;
 800a7e6:	4a59      	ldr	r2, [pc, #356]	@ (800a94c <jpeg_fdct_islow+0x240>)
 800a7e8:	fb02 770e 	mla	r7, r2, lr, r7

    dataptr[1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
 800a7ec:	f243 020b 	movw	r2, #12299	@ 0x300b
 800a7f0:	fb02 1209 	mla	r2, r2, r9, r1
 800a7f4:	4462      	add	r2, ip
 800a7f6:	12d2      	asrs	r2, r2, #11
    dataptr[1] = (DCTELEM)
 800a7f8:	f848 2c3c 	str.w	r2, [r8, #-60]
    dataptr[3] = (DCTELEM)
      RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
 800a7fc:	f246 2254 	movw	r2, #25172	@ 0x6254
 800a800:	fb02 6303 	mla	r3, r2, r3, r6
 800a804:	443b      	add	r3, r7
 800a806:	12db      	asrs	r3, r3, #11
    dataptr[3] = (DCTELEM)
 800a808:	f848 3c34 	str.w	r3, [r8, #-52]
    dataptr[5] = (DCTELEM)
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
 800a80c:	f244 13b3 	movw	r3, #16819	@ 0x41b3
 800a810:	fb03 6605 	mla	r6, r3, r5, r6
    dataptr[7] = (DCTELEM)
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 800a814:	f640 138e 	movw	r3, #2446	@ 0x98e
 800a818:	fb03 1104 	mla	r1, r3, r4, r1
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
 800a81c:	4466      	add	r6, ip
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800a81e:	9b05      	ldr	r3, [sp, #20]
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 800a820:	4439      	add	r1, r7
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
 800a822:	12f6      	asrs	r6, r6, #11
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 800a824:	12c9      	asrs	r1, r1, #11
    dataptr[5] = (DCTELEM)
 800a826:	f848 6c2c 	str.w	r6, [r8, #-44]
    dataptr[7] = (DCTELEM)
 800a82a:	f848 1c24 	str.w	r1, [r8, #-36]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800a82e:	4543      	cmp	r3, r8
 800a830:	f47f af79 	bne.w	800a726 <jpeg_fdct_islow+0x1a>

    tmp10 = tmp0 + tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp1 + tmp3;
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800a834:	f242 59a1 	movw	r9, #9633	@ 0x25a1
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS+PASS1_BITS-1);

    tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
 800a838:	f243 080b 	movw	r8, #12299	@ 0x300b
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 800a83c:	f8d0 c060 	ldr.w	ip, [r0, #96]	@ 0x60
    dataptr[DCTSIZE*5] = (DCTELEM)
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*7] = (DCTELEM)
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 800a840:	3004      	adds	r0, #4
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800a842:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a846:	f8d0 30dc 	ldr.w	r3, [r0, #220]	@ 0xdc
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 800a84a:	6fc5      	ldr	r5, [r0, #124]	@ 0x7c
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800a84c:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800a850:	18d1      	adds	r1, r2, r3
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 800a852:	eb0c 0b05 	add.w	fp, ip, r5
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800a856:	69c3      	ldr	r3, [r0, #28]
 800a858:	f8d0 40bc 	ldr.w	r4, [r0, #188]	@ 0xbc
    tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
 800a85c:	ebac 0505 	sub.w	r5, ip, r5
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800a860:	f8d0 609c 	ldr.w	r6, [r0, #156]	@ 0x9c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800a864:	191f      	adds	r7, r3, r4
    tmp10 = tmp0 + tmp3 + (ONE << (PASS1_BITS-1));
 800a866:	eb01 040b 	add.w	r4, r1, fp
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800a86a:	eb0e 0a06 	add.w	sl, lr, r6
    tmp12 = tmp0 - tmp3;
 800a86e:	eba1 010b 	sub.w	r1, r1, fp
    tmp10 = tmp0 + tmp3 + (ONE << (PASS1_BITS-1));
 800a872:	3402      	adds	r4, #2
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
 800a874:	ebae 0606 	sub.w	r6, lr, r6
    tmp11 = tmp1 + tmp2;
 800a878:	eb07 0b0a 	add.w	fp, r7, sl
    tmp12 = tmp0 - tmp3;
 800a87c:	9101      	str	r1, [sp, #4]
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 800a87e:	f8d0 10dc 	ldr.w	r1, [r0, #220]	@ 0xdc
    tmp13 = tmp1 - tmp2;
 800a882:	eba7 0a0a 	sub.w	sl, r7, sl
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp10 + tmp11, PASS1_BITS);
 800a886:	eb04 0c0b 	add.w	ip, r4, fp
    dataptr[DCTSIZE*4] = (DCTELEM) RIGHT_SHIFT(tmp10 - tmp11, PASS1_BITS);
 800a88a:	eba4 040b 	sub.w	r4, r4, fp
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 800a88e:	1a52      	subs	r2, r2, r1
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 800a890:	f8d0 10bc 	ldr.w	r1, [r0, #188]	@ 0xbc
    dataptr[DCTSIZE*4] = (DCTELEM) RIGHT_SHIFT(tmp10 - tmp11, PASS1_BITS);
 800a894:	10a4      	asrs	r4, r4, #2
      RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
 800a896:	9f01      	ldr	r7, [sp, #4]
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 800a898:	1a5b      	subs	r3, r3, r1
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800a89a:	9901      	ldr	r1, [sp, #4]
    dataptr[DCTSIZE*4] = (DCTELEM) RIGHT_SHIFT(tmp10 - tmp11, PASS1_BITS);
 800a89c:	67c4      	str	r4, [r0, #124]	@ 0x7c
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp10 + tmp11, PASS1_BITS);
 800a89e:	ea4f 0cac 	mov.w	ip, ip, asr #2
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800a8a2:	eb01 040a 	add.w	r4, r1, sl
 800a8a6:	f241 1151 	movw	r1, #4433	@ 0x1151
    tmp13 = tmp1 + tmp3;
 800a8aa:	eb03 0e05 	add.w	lr, r3, r5
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp10 + tmp11, PASS1_BITS);
 800a8ae:	f840 cc04 	str.w	ip, [r0, #-4]
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800a8b2:	434c      	muls	r4, r1
      RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
 800a8b4:	f641 017e 	movw	r1, #6270	@ 0x187e
    tmp12 = tmp0 + tmp2;
 800a8b8:	eb02 0c06 	add.w	ip, r2, r6
    z1 += ONE << (CONST_BITS+PASS1_BITS-1);
 800a8bc:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
      RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
 800a8c0:	fb01 4107 	mla	r1, r1, r7, r4
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800a8c4:	eb0c 070e 	add.w	r7, ip, lr
      RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
 800a8c8:	13c9      	asrs	r1, r1, #15
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800a8ca:	fb09 f707 	mul.w	r7, r9, r7
    dataptr[DCTSIZE*2] = (DCTELEM)
 800a8ce:	63c1      	str	r1, [r0, #60]	@ 0x3c
      RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065), CONST_BITS+PASS1_BITS);
 800a8d0:	491a      	ldr	r1, [pc, #104]	@ (800a93c <jpeg_fdct_islow+0x230>)
 800a8d2:	fb01 440a 	mla	r4, r1, sl, r4
    z1 += ONE << (CONST_BITS+PASS1_BITS-1);
 800a8d6:	f507 4a80 	add.w	sl, r7, #16384	@ 0x4000
    tmp10 = tmp0 + tmp3;
 800a8da:	1951      	adds	r1, r2, r5
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 800a8dc:	4f18      	ldr	r7, [pc, #96]	@ (800a940 <jpeg_fdct_islow+0x234>)
      RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065), CONST_BITS+PASS1_BITS);
 800a8de:	13e4      	asrs	r4, r4, #15
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 800a8e0:	4379      	muls	r1, r7
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 800a8e2:	4f18      	ldr	r7, [pc, #96]	@ (800a944 <jpeg_fdct_islow+0x238>)
    dataptr[DCTSIZE*6] = (DCTELEM)
 800a8e4:	f8c0 40bc 	str.w	r4, [r0, #188]	@ 0xbc
    tmp11 = tmp1 + tmp2;
 800a8e8:	199c      	adds	r4, r3, r6
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
 800a8ea:	fb08 1202 	mla	r2, r8, r2, r1
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 800a8ee:	437c      	muls	r4, r7
    tmp12 += z1;
 800a8f0:	4f15      	ldr	r7, [pc, #84]	@ (800a948 <jpeg_fdct_islow+0x23c>)
 800a8f2:	fb07 ac0c 	mla	ip, r7, ip, sl
    tmp13 += z1;
 800a8f6:	4f15      	ldr	r7, [pc, #84]	@ (800a94c <jpeg_fdct_islow+0x240>)
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
 800a8f8:	4462      	add	r2, ip
    tmp13 += z1;
 800a8fa:	fb07 a70e 	mla	r7, r7, lr, sl
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
 800a8fe:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 800a900:	61c2      	str	r2, [r0, #28]
      RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
 800a902:	f246 2254 	movw	r2, #25172	@ 0x6254
 800a906:	fb02 4303 	mla	r3, r2, r3, r4
 800a90a:	443b      	add	r3, r7
 800a90c:	13db      	asrs	r3, r3, #15
    dataptr[DCTSIZE*3] = (DCTELEM)
 800a90e:	65c3      	str	r3, [r0, #92]	@ 0x5c
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
 800a910:	f244 13b3 	movw	r3, #16819	@ 0x41b3
 800a914:	fb03 4406 	mla	r4, r3, r6, r4
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);
 800a918:	f640 138e 	movw	r3, #2446	@ 0x98e
 800a91c:	fb03 1105 	mla	r1, r3, r5, r1
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
 800a920:	4464      	add	r4, ip
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800a922:	9b03      	ldr	r3, [sp, #12]
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);
 800a924:	4439      	add	r1, r7
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
 800a926:	13e4      	asrs	r4, r4, #15
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);
 800a928:	13c9      	asrs	r1, r1, #15
    dataptr[DCTSIZE*5] = (DCTELEM)
 800a92a:	f8c0 409c 	str.w	r4, [r0, #156]	@ 0x9c
    dataptr[DCTSIZE*7] = (DCTELEM)
 800a92e:	f8c0 10dc 	str.w	r1, [r0, #220]	@ 0xdc
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800a932:	4298      	cmp	r0, r3
 800a934:	d182      	bne.n	800a83c <jpeg_fdct_islow+0x130>
  }
}
 800a936:	b007      	add	sp, #28
 800a938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93c:	ffffc4df 	.word	0xffffc4df
 800a940:	ffffe333 	.word	0xffffe333
 800a944:	ffffadfd 	.word	0xffffadfd
 800a948:	fffff384 	.word	0xfffff384
 800a94c:	ffffc13b 	.word	0xffffc13b

0800a950 <jpeg_fdct_7x7>:
 * Perform the forward DCT on a 7x7 sample block.
 */

GLOBAL(void)
jpeg_fdct_7x7 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800a950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a954:	4604      	mov	r4, r0
 800a956:	460d      	mov	r5, r1
 800a958:	4690      	mov	r8, r2
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800a95a:	2100      	movs	r1, #0
 800a95c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a960:	f104 0720 	add.w	r7, r4, #32
 800a964:	f005 f8a4 	bl	800fab0 <memset>
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* cK represents sqrt(2) * cos(K*pi/14). */

  dataptr = data;
  for (ctr = 0; ctr < 7; ctr++) {
 800a968:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 800a96c:	f1a5 0e04 	sub.w	lr, r5, #4
 800a970:	9301      	str	r3, [sp, #4]
    elemptr = sample_data[ctr] + start_col;
 800a972:	f85e 3f04 	ldr.w	r3, [lr, #4]!
  for (ctr = 0; ctr < 7; ctr++) {
 800a976:	3720      	adds	r7, #32
    elemptr = sample_data[ctr] + start_col;
 800a978:	eb03 0908 	add.w	r9, r3, r8

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[6]);
 800a97c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a980:	f899 a006 	ldrb.w	sl, [r9, #6]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[5]);
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[4]);
 800a984:	f899 1004 	ldrb.w	r1, [r9, #4]
 800a988:	f899 2002 	ldrb.w	r2, [r9, #2]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[6]);
 800a98c:	eb03 0c0a 	add.w	ip, r3, sl
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[5]);
 800a990:	f899 5005 	ldrb.w	r5, [r9, #5]
    tmp3 = GETJSAMPLE(elemptr[3]);

    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[6]);
 800a994:	eba3 030a 	sub.w	r3, r3, sl
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[5]);
 800a998:	f899 6001 	ldrb.w	r6, [r9, #1]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[4]);
 800a99c:	1850      	adds	r0, r2, r1
    tmp3 = GETJSAMPLE(elemptr[3]);
 800a99e:	f899 9003 	ldrb.w	r9, [r9, #3]
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[5]);
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[4]);
 800a9a2:	1a52      	subs	r2, r2, r1
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[5]);
 800a9a4:	eb06 0b05 	add.w	fp, r6, r5
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[5]);
 800a9a8:	1b76      	subs	r6, r6, r5

    z1 = tmp0 + tmp2;
 800a9aa:	eb0c 0500 	add.w	r5, ip, r0
      ((z1 + tmp1 + tmp3 - 7 * CENTERJSAMPLE) << PASS1_BITS);
    tmp3 += tmp3;
    z1 -= tmp3;
    z1 -= tmp3;
    z1 = MULTIPLY(z1, FIX(0.353553391));                /* (c2+c6-c4)/2 */
    z2 = MULTIPLY(tmp0 - tmp2, FIX(0.920609002));       /* (c2+c4-c6)/2 */
 800a9ae:	ebac 0a00 	sub.w	sl, ip, r0
    z3 = MULTIPLY(tmp1 - tmp2, FIX(0.314692123));       /* c6 */
 800a9b2:	ebab 0000 	sub.w	r0, fp, r0
    dataptr[2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS-PASS1_BITS);
    z1 -= z2;
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.881747734));       /* c4 */
 800a9b6:	ebac 0c0b 	sub.w	ip, ip, fp
      ((z1 + tmp1 + tmp3 - 7 * CENTERJSAMPLE) << PASS1_BITS);
 800a9ba:	eb0b 0105 	add.w	r1, fp, r5
    z1 -= tmp3;
 800a9be:	eba5 0589 	sub.w	r5, r5, r9, lsl #2
      ((z1 + tmp1 + tmp3 - 7 * CENTERJSAMPLE) << PASS1_BITS);
 800a9c2:	4449      	add	r1, r9
    dataptr[4] = (DCTELEM)
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
 800a9c4:	ebab 0949 	sub.w	r9, fp, r9, lsl #1
      ((z1 + tmp1 + tmp3 - 7 * CENTERJSAMPLE) << PASS1_BITS);
 800a9c8:	f5a1 7160 	sub.w	r1, r1, #896	@ 0x380
    dataptr[0] = (DCTELEM)
 800a9cc:	0089      	lsls	r1, r1, #2
 800a9ce:	f847 1c40 	str.w	r1, [r7, #-64]
    z1 = MULTIPLY(z1, FIX(0.353553391));                /* (c2+c6-c4)/2 */
 800a9d2:	f44f 6135 	mov.w	r1, #2896	@ 0xb50
 800a9d6:	434d      	muls	r5, r1
    z2 = MULTIPLY(tmp0 - tmp2, FIX(0.920609002));       /* (c2+c4-c6)/2 */
 800a9d8:	f641 5176 	movw	r1, #7542	@ 0x1d76
 800a9dc:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = MULTIPLY(tmp1 - tmp2, FIX(0.314692123));       /* c6 */
 800a9e0:	f640 2112 	movw	r1, #2578	@ 0xa12
 800a9e4:	4348      	muls	r0, r1
    dataptr[2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS-PASS1_BITS);
 800a9e6:	eb05 010a 	add.w	r1, r5, sl
    z1 -= z2;
 800a9ea:	eba5 050a 	sub.w	r5, r5, sl
    dataptr[2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS-PASS1_BITS);
 800a9ee:	4401      	add	r1, r0
 800a9f0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a9f4:	12c9      	asrs	r1, r1, #11
 800a9f6:	f847 1c38 	str.w	r1, [r7, #-56]
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.881747734));       /* c4 */
 800a9fa:	f641 4137 	movw	r1, #7223	@ 0x1c37
 800a9fe:	fb01 fc0c 	mul.w	ip, r1, ip
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
 800aa02:	f46f 51b5 	mvn.w	r1, #5792	@ 0x16a0
 800aa06:	4460      	add	r0, ip
	      CONST_BITS-PASS1_BITS);
    dataptr[6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS-PASS1_BITS);
 800aa08:	4465      	add	r5, ip
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
 800aa0a:	fb01 0009 	mla	r0, r1, r9, r0
    dataptr[6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS-PASS1_BITS);
 800aa0e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400

    /* Odd part */

    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(0.935414347));   /* (c3+c1-c5)/2 */
 800aa12:	f641 51ef 	movw	r1, #7663	@ 0x1def
    dataptr[6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS-PASS1_BITS);
 800aa16:	12ed      	asrs	r5, r5, #11
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
 800aa18:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
    dataptr[6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS-PASS1_BITS);
 800aa1c:	f847 5c28 	str.w	r5, [r7, #-40]
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
 800aa20:	12c0      	asrs	r0, r0, #11
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(0.935414347));   /* (c3+c1-c5)/2 */
 800aa22:	199d      	adds	r5, r3, r6
    dataptr[4] = (DCTELEM)
 800aa24:	f847 0c30 	str.w	r0, [r7, #-48]
    tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.170262339));   /* (c3+c5-c1)/2 */
 800aa28:	f240 5073 	movw	r0, #1395	@ 0x573
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(0.935414347));   /* (c3+c1-c5)/2 */
 800aa2c:	434d      	muls	r5, r1
    tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.170262339));   /* (c3+c5-c1)/2 */
 800aa2e:	1b99      	subs	r1, r3, r6
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.378756276)); /* -c1 */
 800aa30:	4416      	add	r6, r2
    tmp1 += tmp2;
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.613604268));   /* c5 */
 800aa32:	4413      	add	r3, r2
    tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.170262339));   /* (c3+c5-c1)/2 */
 800aa34:	4341      	muls	r1, r0
    tmp0 = tmp1 - tmp2;
 800aa36:	1a68      	subs	r0, r5, r1
    tmp1 += tmp2;
 800aa38:	4429      	add	r1, r5
    tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.378756276)); /* -c1 */
 800aa3a:	4d4f      	ldr	r5, [pc, #316]	@ (800ab78 <jpeg_fdct_7x7+0x228>)
 800aa3c:	436e      	muls	r6, r5
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.613604268));   /* c5 */
 800aa3e:	f241 35a3 	movw	r5, #5027	@ 0x13a3
    tmp1 += tmp2;
 800aa42:	4431      	add	r1, r6
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.613604268));   /* c5 */
 800aa44:	436b      	muls	r3, r5
    tmp0 += tmp3;
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(1.870828693));   /* c3+c1-c5 */

    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS-PASS1_BITS);
    dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS-PASS1_BITS);
 800aa46:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    tmp0 += tmp3;
 800aa4a:	4418      	add	r0, r3
    dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS-PASS1_BITS);
 800aa4c:	12c9      	asrs	r1, r1, #11
    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS-PASS1_BITS);
 800aa4e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
    dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS-PASS1_BITS);
 800aa52:	f847 1c34 	str.w	r1, [r7, #-52]
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(1.870828693));   /* c3+c1-c5 */
 800aa56:	f643 31de 	movw	r1, #15326	@ 0x3bde
    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS-PASS1_BITS);
 800aa5a:	12c0      	asrs	r0, r0, #11
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(1.870828693));   /* c3+c1-c5 */
 800aa5c:	fb01 3302 	mla	r3, r1, r2, r3
    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS-PASS1_BITS);
 800aa60:	f847 0c3c 	str.w	r0, [r7, #-60]
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(1.870828693));   /* c3+c1-c5 */
 800aa64:	4433      	add	r3, r6
    dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS-PASS1_BITS);
 800aa66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aa6a:	12db      	asrs	r3, r3, #11
 800aa6c:	f847 3c2c 	str.w	r3, [r7, #-44]
  for (ctr = 0; ctr < 7; ctr++) {
 800aa70:	9b01      	ldr	r3, [sp, #4]
 800aa72:	42bb      	cmp	r3, r7
 800aa74:	f47f af7d 	bne.w	800a972 <jpeg_fdct_7x7+0x22>
 800aa78:	f104 031c 	add.w	r3, r4, #28
    tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*5];
    tmp12 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*4];

    z1 = tmp0 + tmp2;
    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(z1 + tmp1 + tmp3, FIX(1.306122449)), /* 64/49 */
 800aa7c:	f642 1bcc 	movw	fp, #10700	@ 0x29cc
	      CONST_BITS+PASS1_BITS);
    tmp3 += tmp3;
    z1 -= tmp3;
    z1 -= tmp3;
    z1 = MULTIPLY(z1, FIX(0.461784020));                /* (c2+c6-c4)/2 */
 800aa80:	f640 6ac7 	movw	sl, #3783	@ 0xec7
    z2 = MULTIPLY(tmp0 - tmp2, FIX(1.202428084));       /* (c2+c4-c6)/2 */
 800aa84:	f242 697a 	movw	r9, #9850	@ 0x267a
 800aa88:	9301      	str	r3, [sp, #4]
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*6];
 800aa8a:	f8d4 e000 	ldr.w	lr, [r4]

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 800aa8e:	3404      	adds	r4, #4
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*4];
 800aa90:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*6];
 800aa92:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*4];
 800aa96:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*5];
 800aa98:	f8d4 609c 	ldr.w	r6, [r4, #156]	@ 0x9c
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*6];
 800aa9c:	eb0e 0503 	add.w	r5, lr, r3
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*5];
 800aaa0:	69e0      	ldr	r0, [r4, #28]
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*4];
 800aaa2:	187a      	adds	r2, r7, r1
    tmp12 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*4];
 800aaa4:	1a7f      	subs	r7, r7, r1
    tmp3 = dataptr[DCTSIZE*3];
 800aaa6:	f8d4 c05c 	ldr.w	ip, [r4, #92]	@ 0x5c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*5];
 800aaaa:	eb00 0806 	add.w	r8, r0, r6
    z1 = tmp0 + tmp2;
 800aaae:	18a9      	adds	r1, r5, r2
    tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*5];
 800aab0:	1b80      	subs	r0, r0, r6
    tmp10 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*6];
 800aab2:	ebae 0303 	sub.w	r3, lr, r3
      DESCALE(MULTIPLY(z1 + tmp1 + tmp3, FIX(1.306122449)), /* 64/49 */
 800aab6:	eb08 0601 	add.w	r6, r8, r1
    z2 = MULTIPLY(tmp0 - tmp2, FIX(1.202428084));       /* (c2+c4-c6)/2 */
 800aaba:	eba5 0e02 	sub.w	lr, r5, r2
    z1 -= tmp3;
 800aabe:	eba1 018c 	sub.w	r1, r1, ip, lsl #2
    z3 = MULTIPLY(tmp1 - tmp2, FIX(0.411026446));       /* c6 */
 800aac2:	eba8 0202 	sub.w	r2, r8, r2
      DESCALE(MULTIPLY(z1 + tmp1 + tmp3, FIX(1.306122449)), /* 64/49 */
 800aac6:	4466      	add	r6, ip
    z2 = MULTIPLY(tmp0 - tmp2, FIX(1.202428084));       /* (c2+c4-c6)/2 */
 800aac8:	fb09 fe0e 	mul.w	lr, r9, lr
    z1 = MULTIPLY(z1, FIX(0.461784020));                /* (c2+c6-c4)/2 */
 800aacc:	fb0a f101 	mul.w	r1, sl, r1
    z2 = MULTIPLY(tmp0 - tmp1, FIX(1.151670509));       /* c4 */
 800aad0:	eba5 0508 	sub.w	r5, r5, r8
      DESCALE(MULTIPLY(z1 + tmp1 + tmp3, FIX(1.306122449)), /* 64/49 */
 800aad4:	fb0b f606 	mul.w	r6, fp, r6
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
 800aad8:	eba8 0c4c 	sub.w	ip, r8, ip, lsl #1
      DESCALE(MULTIPLY(z1 + tmp1 + tmp3, FIX(1.306122449)), /* 64/49 */
 800aadc:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800aae0:	13f6      	asrs	r6, r6, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 800aae2:	f844 6c04 	str.w	r6, [r4, #-4]
    z3 = MULTIPLY(tmp1 - tmp2, FIX(0.411026446));       /* c6 */
 800aae6:	f640 5627 	movw	r6, #3367	@ 0xd27
 800aaea:	4372      	muls	r2, r6
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS+PASS1_BITS);
 800aaec:	eb01 060e 	add.w	r6, r1, lr
    z1 -= z2;
 800aaf0:	eba1 010e 	sub.w	r1, r1, lr
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS+PASS1_BITS);
 800aaf4:	4416      	add	r6, r2
 800aaf6:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800aafa:	13f6      	asrs	r6, r6, #15
 800aafc:	63e6      	str	r6, [r4, #60]	@ 0x3c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(1.151670509));       /* c4 */
 800aafe:	f242 46da 	movw	r6, #9434	@ 0x24da
 800ab02:	4375      	muls	r5, r6
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
 800ab04:	4e1d      	ldr	r6, [pc, #116]	@ (800ab7c <jpeg_fdct_7x7+0x22c>)
 800ab06:	442a      	add	r2, r5
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+PASS1_BITS);
 800ab08:	4429      	add	r1, r5
    tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.222383464));   /* (c3+c5-c1)/2 */
 800ab0a:	1a1d      	subs	r5, r3, r0
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
 800ab0c:	fb06 220c 	mla	r2, r6, ip, r2
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+PASS1_BITS);
 800ab10:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
 800ab14:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+PASS1_BITS);
 800ab18:	13c9      	asrs	r1, r1, #15
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
 800ab1a:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+PASS1_BITS);
 800ab1c:	f8c4 10bc 	str.w	r1, [r4, #188]	@ 0xbc
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.221765677));   /* (c3+c1-c5)/2 */
 800ab20:	f242 7119 	movw	r1, #10009	@ 0x2719
    dataptr[DCTSIZE*4] = (DCTELEM)
 800ab24:	67e2      	str	r2, [r4, #124]	@ 0x7c
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.221765677));   /* (c3+c1-c5)/2 */
 800ab26:	181a      	adds	r2, r3, r0
    tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.800824523)); /* -c1 */
 800ab28:	4438      	add	r0, r7
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.801442310));   /* c5 */
 800ab2a:	443b      	add	r3, r7
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.221765677));   /* (c3+c1-c5)/2 */
 800ab2c:	434a      	muls	r2, r1
    tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.222383464));   /* (c3+c5-c1)/2 */
 800ab2e:	f240 711e 	movw	r1, #1822	@ 0x71e
 800ab32:	434d      	muls	r5, r1
    tmp0 = tmp1 - tmp2;
 800ab34:	1b51      	subs	r1, r2, r5
    tmp1 += tmp2;
 800ab36:	442a      	add	r2, r5
    tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.800824523)); /* -c1 */
 800ab38:	4d11      	ldr	r5, [pc, #68]	@ (800ab80 <jpeg_fdct_7x7+0x230>)
 800ab3a:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.801442310));   /* c5 */
 800ab3c:	f641 15a5 	movw	r5, #6565	@ 0x19a5
    tmp1 += tmp2;
 800ab40:	4402      	add	r2, r0
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.801442310));   /* c5 */
 800ab42:	436b      	muls	r3, r5
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+PASS1_BITS);
 800ab44:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
    tmp0 += tmp3;
 800ab48:	4419      	add	r1, r3
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+PASS1_BITS);
 800ab4a:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+PASS1_BITS);
 800ab4c:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+PASS1_BITS);
 800ab50:	65e2      	str	r2, [r4, #92]	@ 0x5c
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(2.443531355));   /* c3+c1-c5 */
 800ab52:	f644 6231 	movw	r2, #20017	@ 0x4e31
    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+PASS1_BITS);
 800ab56:	13c9      	asrs	r1, r1, #15
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(2.443531355));   /* c3+c1-c5 */
 800ab58:	fb02 3307 	mla	r3, r2, r7, r3
    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+PASS1_BITS);
 800ab5c:	61e1      	str	r1, [r4, #28]
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(2.443531355));   /* c3+c1-c5 */
 800ab5e:	4403      	add	r3, r0
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+PASS1_BITS);
 800ab60:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab64:	13db      	asrs	r3, r3, #15
 800ab66:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  for (ctr = 0; ctr < 7; ctr++) {
 800ab6a:	9b01      	ldr	r3, [sp, #4]
 800ab6c:	429c      	cmp	r4, r3
 800ab6e:	d18c      	bne.n	800aa8a <jpeg_fdct_7x7+0x13a>
  }
}
 800ab70:	b003      	add	sp, #12
 800ab72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab76:	bf00      	nop
 800ab78:	ffffd3e1 	.word	0xffffd3e1
 800ab7c:	ffffe272 	.word	0xffffe272
 800ab80:	ffffc660 	.word	0xffffc660

0800ab84 <jpeg_fdct_6x6>:
 * Perform the forward DCT on a 6x6 sample block.
 */

GLOBAL(void)
jpeg_fdct_6x6 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800ab84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab88:	460d      	mov	r5, r1
 800ab8a:	4690      	mov	r8, r2
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 800ab92:	4604      	mov	r4, r0
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800ab94:	f004 ff8c 	bl	800fab0 <memset>
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* cK represents sqrt(2) * cos(K*pi/12). */

  dataptr = data;
  for (ctr = 0; ctr < 6; ctr++) {
 800ab98:	1f2b      	subs	r3, r5, #4
 800ab9a:	f104 0720 	add.w	r7, r4, #32
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	f104 03e0 	add.w	r3, r4, #224	@ 0xe0
 800aba4:	9301      	str	r3, [sp, #4]
    elemptr = sample_data[ctr] + start_col;
 800aba6:	9b00      	ldr	r3, [sp, #0]

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp11 - 6 * CENTERJSAMPLE) << PASS1_BITS);
    dataptr[2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 800aba8:	f242 7131 	movw	r1, #10033	@ 0x2731
  for (ctr = 0; ctr < 6; ctr++) {
 800abac:	3720      	adds	r7, #32
    elemptr = sample_data[ctr] + start_col;
 800abae:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	eb02 0308 	add.w	r3, r2, r8
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[5]);
 800abb8:	f812 0008 	ldrb.w	r0, [r2, r8]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[3]);
 800abbc:	f893 9002 	ldrb.w	r9, [r3, #2]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[5]);
 800abc0:	f893 b005 	ldrb.w	fp, [r3, #5]
    tmp11 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[4]);
 800abc4:	f893 a001 	ldrb.w	sl, [r3, #1]
 800abc8:	f893 c004 	ldrb.w	ip, [r3, #4]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[5]);
 800abcc:	eb00 060b 	add.w	r6, r0, fp
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[3]);
 800abd0:	78db      	ldrb	r3, [r3, #3]
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[5]);
 800abd2:	eba0 000b 	sub.w	r0, r0, fp
    tmp11 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[4]);
 800abd6:	eb0a 020c 	add.w	r2, sl, ip
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[4]);
 800abda:	ebaa 0c0c 	sub.w	ip, sl, ip
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[3]);
 800abde:	eb09 0e03 	add.w	lr, r9, r3
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[3]);
 800abe2:	eba9 0303 	sub.w	r3, r9, r3
    tmp10 = tmp0 + tmp2;
 800abe6:	eb06 050e 	add.w	r5, r6, lr
    tmp12 = tmp0 - tmp2;
 800abea:	eba6 060e 	sub.w	r6, r6, lr
      ((tmp10 + tmp11 - 6 * CENTERJSAMPLE) << PASS1_BITS);
 800abee:	eb02 0905 	add.w	r9, r2, r5
	      CONST_BITS-PASS1_BITS);
    dataptr[4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 800abf2:	eba5 0542 	sub.w	r5, r5, r2, lsl #1
 800abf6:	f241 62a1 	movw	r2, #5793	@ 0x16a1
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 800abfa:	434e      	muls	r6, r1
	      CONST_BITS-PASS1_BITS);

    /* Odd part */

    tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
 800abfc:	f640 31b6 	movw	r1, #2998	@ 0xbb6
      ((tmp10 + tmp11 - 6 * CENTERJSAMPLE) << PASS1_BITS);
 800ac00:	f5a9 7940 	sub.w	r9, r9, #768	@ 0x300
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 800ac04:	4355      	muls	r5, r2
    tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
 800ac06:	18c2      	adds	r2, r0, r3
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 800ac08:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
    dataptr[0] = (DCTELEM)
 800ac0c:	ea4f 0989 	mov.w	r9, r9, lsl #2
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 800ac10:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
    tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
 800ac14:	434a      	muls	r2, r1
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 800ac16:	12f6      	asrs	r6, r6, #11
    dataptr[0] = (DCTELEM)
 800ac18:	f847 9c40 	str.w	r9, [r7, #-64]
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 800ac1c:	12ed      	asrs	r5, r5, #11
    tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
 800ac1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
    dataptr[2] = (DCTELEM)
 800ac22:	f847 6c38 	str.w	r6, [r7, #-56]
    dataptr[4] = (DCTELEM)
 800ac26:	f847 5c30 	str.w	r5, [r7, #-48]
		    CONST_BITS-PASS1_BITS);

    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << PASS1_BITS));
 800ac2a:	eb00 050c 	add.w	r5, r0, ip
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << PASS1_BITS);
 800ac2e:	eba0 000c 	sub.w	r0, r0, ip
    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << PASS1_BITS));
 800ac32:	00ad      	lsls	r5, r5, #2
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << PASS1_BITS);
 800ac34:	1ac0      	subs	r0, r0, r3
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << PASS1_BITS));
 800ac36:	eba3 030c 	sub.w	r3, r3, ip
    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << PASS1_BITS));
 800ac3a:	eb05 25e2 	add.w	r5, r5, r2, asr #11
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << PASS1_BITS));
 800ac3e:	009b      	lsls	r3, r3, #2
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << PASS1_BITS);
 800ac40:	0080      	lsls	r0, r0, #2
    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << PASS1_BITS));
 800ac42:	f847 5c3c 	str.w	r5, [r7, #-60]
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << PASS1_BITS));
 800ac46:	eb03 23e2 	add.w	r3, r3, r2, asr #11
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << PASS1_BITS);
 800ac4a:	f847 0c34 	str.w	r0, [r7, #-52]
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << PASS1_BITS));
 800ac4e:	f847 3c2c 	str.w	r3, [r7, #-44]
  for (ctr = 0; ctr < 6; ctr++) {
 800ac52:	9b01      	ldr	r3, [sp, #4]
 800ac54:	42bb      	cmp	r3, r7
 800ac56:	d1a6      	bne.n	800aba6 <jpeg_fdct_6x6+0x22>
 800ac58:	f104 0818 	add.w	r8, r4, #24
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*5];
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*4];
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*3];

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800ac5c:	f643 05e4 	movw	r5, #14564	@ 0x38e4
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 800ac60:	f244 5bad 	movw	fp, #17837	@ 0x45ad
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 800ac64:	f642 0a3a 	movw	sl, #10298	@ 0x283a
	      CONST_BITS+PASS1_BITS);

    /* Odd part */

    tmp10 = MULTIPLY(tmp0 + tmp2, FIX(0.650711829));             /* c5 */
 800ac68:	f241 49d3 	movw	r9, #5331	@ 0x14d3
    tmp11 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*4];
 800ac6c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
	      CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 800ac70:	3404      	adds	r4, #4
    tmp11 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*4];
 800ac72:	69e2      	ldr	r2, [r4, #28]
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*5];
 800ac74:	f8d4 e09c 	ldr.w	lr, [r4, #156]	@ 0x9c
 800ac78:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp11 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*4];
 800ac7c:	1816      	adds	r6, r2, r0
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*3];
 800ac7e:	f8d4 c05c 	ldr.w	ip, [r4, #92]	@ 0x5c
 800ac82:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*5];
 800ac84:	eb03 010e 	add.w	r1, r3, lr
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*5];
 800ac88:	eba3 030e 	sub.w	r3, r3, lr
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*3];
 800ac8c:	eb02 070c 	add.w	r7, r2, ip
    tmp10 = tmp0 + tmp2;
 800ac90:	19ca      	adds	r2, r1, r7
 800ac92:	9200      	str	r2, [sp, #0]
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*4];
 800ac94:	69e2      	ldr	r2, [r4, #28]
 800ac96:	1a10      	subs	r0, r2, r0
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*3];
 800ac98:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800ac9a:	eba2 0c0c 	sub.w	ip, r2, ip
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800ac9e:	19ca      	adds	r2, r1, r7
    tmp12 = tmp0 - tmp2;
 800aca0:	1bc9      	subs	r1, r1, r7
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800aca2:	eb06 0e02 	add.w	lr, r6, r2
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 800aca6:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 800acaa:	fb0b f101 	mul.w	r1, fp, r1
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 800acae:	fb0a f202 	mul.w	r2, sl, r2
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 800acb2:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800acb6:	fb05 fe0e 	mul.w	lr, r5, lr
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 800acba:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 800acbe:	13c9      	asrs	r1, r1, #15
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800acc0:	f50e 4e80 	add.w	lr, lr, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 800acc4:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 800acc6:	63e1      	str	r1, [r4, #60]	@ 0x3c
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 800acc8:	1819      	adds	r1, r3, r0
    dataptr[DCTSIZE*4] = (DCTELEM)
 800acca:	67e2      	str	r2, [r4, #124]	@ 0x7c
    tmp10 = MULTIPLY(tmp0 + tmp2, FIX(0.650711829));             /* c5 */
 800accc:	eb03 020c 	add.w	r2, r3, ip
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 800acd0:	1a1b      	subs	r3, r3, r0
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800acd2:	ea4f 3eee 	mov.w	lr, lr, asr #15
    tmp10 = MULTIPLY(tmp0 + tmp2, FIX(0.650711829));             /* c5 */
 800acd6:	fb09 f202 	mul.w	r2, r9, r2
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 800acda:	eba3 030c 	sub.w	r3, r3, ip
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 800acde:	ebac 0c00 	sub.w	ip, ip, r0
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 800ace2:	fb05 2101 	mla	r1, r5, r1, r2
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 800ace6:	436b      	muls	r3, r5
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 800ace8:	fb05 220c 	mla	r2, r5, ip, r2
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 800acec:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 800acf0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*0] = (DCTELEM)
 800acf4:	f844 ec04 	str.w	lr, [r4, #-4]
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 800acf8:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 800acfc:	13c9      	asrs	r1, r1, #15
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 800acfe:	13db      	asrs	r3, r3, #15
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 800ad00:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 800ad02:	61e1      	str	r1, [r4, #28]
    dataptr[DCTSIZE*3] = (DCTELEM)
 800ad04:	65e3      	str	r3, [r4, #92]	@ 0x5c
    dataptr[DCTSIZE*5] = (DCTELEM)
 800ad06:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
  for (ctr = 0; ctr < 6; ctr++) {
 800ad0a:	4544      	cmp	r4, r8
 800ad0c:	d1ae      	bne.n	800ac6c <jpeg_fdct_6x6+0xe8>
  }
}
 800ad0e:	b003      	add	sp, #12
 800ad10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad14 <jpeg_fdct_5x5>:
 * Perform the forward DCT on a 5x5 sample block.
 */

GLOBAL(void)
jpeg_fdct_5x5 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800ad14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad18:	4604      	mov	r4, r0
 800ad1a:	460e      	mov	r6, r1
 800ad1c:	4690      	mov	r8, r2
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800ad1e:	2100      	movs	r1, #0
 800ad20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad24:	f104 0520 	add.w	r5, r4, #32
 800ad28:	f004 fec2 	bl	800fab0 <memset>
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[3]);

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp2 - 5 * CENTERJSAMPLE) << (PASS1_BITS+1));
    tmp11 = MULTIPLY(tmp11, FIX(0.790569415));          /* (c2+c4)/2 */
 800ad2c:	f641 1b4c 	movw	fp, #6476	@ 0x194c
 800ad30:	f104 03c0 	add.w	r3, r4, #192	@ 0xc0
 800ad34:	1f31      	subs	r1, r6, #4
    tmp10 -= tmp2 << 2;
    tmp10 = MULTIPLY(tmp10, FIX(0.353553391));          /* (c2-c4)/2 */
 800ad36:	f44f 6a35 	mov.w	sl, #2896	@ 0xb50
 800ad3a:	9301      	str	r3, [sp, #4]
    elemptr = sample_data[ctr] + start_col;
 800ad3c:	f851 3f04 	ldr.w	r3, [r1, #4]!
  for (ctr = 0; ctr < 5; ctr++) {
 800ad40:	3520      	adds	r5, #32
    elemptr = sample_data[ctr] + start_col;
 800ad42:	eb03 0208 	add.w	r2, r3, r8
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[4]);
 800ad46:	f813 e008 	ldrb.w	lr, [r3, r8]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[3]);
 800ad4a:	78d7      	ldrb	r7, [r2, #3]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[4]);
 800ad4c:	7910      	ldrb	r0, [r2, #4]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[3]);
 800ad4e:	f892 c001 	ldrb.w	ip, [r2, #1]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[4]);
 800ad52:	eb0e 0300 	add.w	r3, lr, r0
    tmp2 = GETJSAMPLE(elemptr[2]);
 800ad56:	7892      	ldrb	r2, [r2, #2]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[3]);
 800ad58:	eb0c 0907 	add.w	r9, ip, r7
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[3]);
 800ad5c:	ebac 0c07 	sub.w	ip, ip, r7
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[4]);
 800ad60:	ebae 0000 	sub.w	r0, lr, r0
    tmp10 = tmp0 + tmp1;
 800ad64:	eb03 0609 	add.w	r6, r3, r9
    tmp11 = tmp0 - tmp1;
 800ad68:	eba3 0309 	sub.w	r3, r3, r9
      ((tmp10 + tmp2 - 5 * CENTERJSAMPLE) << (PASS1_BITS+1));
 800ad6c:	1997      	adds	r7, r2, r6
    tmp10 -= tmp2 << 2;
 800ad6e:	eba6 0682 	sub.w	r6, r6, r2, lsl #2
    tmp11 = MULTIPLY(tmp11, FIX(0.790569415));          /* (c2+c4)/2 */
 800ad72:	fb0b f303 	mul.w	r3, fp, r3
    tmp10 = MULTIPLY(tmp10, FIX(0.353553391));          /* (c2-c4)/2 */
 800ad76:	fb0a f606 	mul.w	r6, sl, r6
      ((tmp10 + tmp2 - 5 * CENTERJSAMPLE) << (PASS1_BITS+1));
 800ad7a:	f5a7 7720 	sub.w	r7, r7, #640	@ 0x280
    dataptr[2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS-PASS1_BITS-1);
 800ad7e:	199a      	adds	r2, r3, r6
    dataptr[4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS-PASS1_BITS-1);
 800ad80:	1b9b      	subs	r3, r3, r6
    dataptr[0] = (DCTELEM)
 800ad82:	00ff      	lsls	r7, r7, #3
    dataptr[2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS-PASS1_BITS-1);
 800ad84:	f502 7200 	add.w	r2, r2, #512	@ 0x200
    dataptr[4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS-PASS1_BITS-1);
 800ad88:	f503 7300 	add.w	r3, r3, #512	@ 0x200
    dataptr[0] = (DCTELEM)
 800ad8c:	f845 7c40 	str.w	r7, [r5, #-64]
    dataptr[2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS-PASS1_BITS-1);
 800ad90:	1292      	asrs	r2, r2, #10
    dataptr[4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS-PASS1_BITS-1);
 800ad92:	129b      	asrs	r3, r3, #10
    dataptr[2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS-PASS1_BITS-1);
 800ad94:	f845 2c38 	str.w	r2, [r5, #-56]

    /* Odd part */

    tmp10 = MULTIPLY(tmp0 + tmp1, FIX(0.831253876));    /* c3 */
 800ad98:	f641 229a 	movw	r2, #6810	@ 0x1a9a
    dataptr[4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS-PASS1_BITS-1);
 800ad9c:	f845 3c30 	str.w	r3, [r5, #-48]
    tmp10 = MULTIPLY(tmp0 + tmp1, FIX(0.831253876));    /* c3 */
 800ada0:	eb00 030c 	add.w	r3, r0, ip
 800ada4:	4353      	muls	r3, r2

    dataptr[1] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.513743148)), /* c1-c3 */
 800ada6:	f241 0271 	movw	r2, #4209	@ 0x1071
 800adaa:	fb02 3000 	mla	r0, r2, r0, r3
	      CONST_BITS-PASS1_BITS-1);
    dataptr[3] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.176250899)), /* c1+c3 */
 800adae:	4a2c      	ldr	r2, [pc, #176]	@ (800ae60 <jpeg_fdct_5x5+0x14c>)
 800adb0:	fb02 330c 	mla	r3, r2, ip, r3
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.513743148)), /* c1-c3 */
 800adb4:	f500 7000 	add.w	r0, r0, #512	@ 0x200
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.176250899)), /* c1+c3 */
 800adb8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.513743148)), /* c1-c3 */
 800adbc:	1280      	asrs	r0, r0, #10
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.176250899)), /* c1+c3 */
 800adbe:	129b      	asrs	r3, r3, #10
    dataptr[1] = (DCTELEM)
 800adc0:	f845 0c3c 	str.w	r0, [r5, #-60]
    dataptr[3] = (DCTELEM)
 800adc4:	f845 3c34 	str.w	r3, [r5, #-52]
  for (ctr = 0; ctr < 5; ctr++) {
 800adc8:	9b01      	ldr	r3, [sp, #4]
 800adca:	42ab      	cmp	r3, r5
 800adcc:	d1b6      	bne.n	800ad3c <jpeg_fdct_5x5+0x28>
 800adce:	f104 0714 	add.w	r7, r4, #20

    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*4];
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*3];

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp2, FIX(1.28)),        /* 32/25 */
 800add2:	f642 0bf6 	movw	fp, #10486	@ 0x28f6
	      CONST_BITS+PASS1_BITS);
    tmp11 = MULTIPLY(tmp11, FIX(1.011928851));          /* (c2+c4)/2 */
 800add6:	f242 0a62 	movw	sl, #8290	@ 0x2062
    tmp10 -= tmp2 << 2;
    tmp10 = MULTIPLY(tmp10, FIX(0.452548340));          /* (c2-c4)/2 */
 800adda:	f640 697b 	movw	r9, #3707	@ 0xe7b
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS+PASS1_BITS);

    /* Odd part */

    tmp10 = MULTIPLY(tmp0 + tmp1, FIX(1.064004961));    /* c3 */
 800adde:	f242 280c 	movw	r8, #8716	@ 0x220c

    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.657591230)), /* c1-c3 */
 800ade2:	f241 5e0b 	movw	lr, #5387	@ 0x150b
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.785601151)), /* c1+c3 */
 800ade6:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 800ae64 <jpeg_fdct_5x5+0x150>
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*4];
 800adea:	6825      	ldr	r5, [r4, #0]
	      CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 800adec:	3404      	adds	r4, #4
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*4];
 800adee:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*3];
 800adf0:	69e0      	ldr	r0, [r4, #28]
 800adf2:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*4];
 800adf4:	18ab      	adds	r3, r5, r2
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*4];
 800adf6:	1aaa      	subs	r2, r5, r2
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*3];
 800adf8:	6de5      	ldr	r5, [r4, #92]	@ 0x5c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*3];
 800adfa:	1846      	adds	r6, r0, r1
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*3];
 800adfc:	1b40      	subs	r0, r0, r5
      DESCALE(MULTIPLY(tmp10 + tmp2, FIX(1.28)),        /* 32/25 */
 800adfe:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    tmp10 = tmp0 + tmp1;
 800ae00:	1999      	adds	r1, r3, r6
    tmp11 = tmp0 - tmp1;
 800ae02:	1b9b      	subs	r3, r3, r6
      DESCALE(MULTIPLY(tmp10 + tmp2, FIX(1.28)),        /* 32/25 */
 800ae04:	440d      	add	r5, r1
    tmp11 = MULTIPLY(tmp11, FIX(1.011928851));          /* (c2+c4)/2 */
 800ae06:	fb0a f303 	mul.w	r3, sl, r3
      DESCALE(MULTIPLY(tmp10 + tmp2, FIX(1.28)),        /* 32/25 */
 800ae0a:	fb0b f505 	mul.w	r5, fp, r5
 800ae0e:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800ae12:	13ed      	asrs	r5, r5, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 800ae14:	f844 5c04 	str.w	r5, [r4, #-4]
    tmp10 -= tmp2 << 2;
 800ae18:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800ae1a:	eba1 0185 	sub.w	r1, r1, r5, lsl #2
    tmp10 = MULTIPLY(tmp10, FIX(0.452548340));          /* (c2-c4)/2 */
 800ae1e:	fb09 f101 	mul.w	r1, r9, r1
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS+PASS1_BITS);
 800ae22:	185d      	adds	r5, r3, r1
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS+PASS1_BITS);
 800ae24:	1a5b      	subs	r3, r3, r1
 800ae26:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS+PASS1_BITS);
 800ae2a:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS+PASS1_BITS);
 800ae2e:	13db      	asrs	r3, r3, #15
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS+PASS1_BITS);
 800ae30:	13ed      	asrs	r5, r5, #15
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS+PASS1_BITS);
 800ae32:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tmp10 = MULTIPLY(tmp0 + tmp1, FIX(1.064004961));    /* c3 */
 800ae34:	1813      	adds	r3, r2, r0
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS+PASS1_BITS);
 800ae36:	63e5      	str	r5, [r4, #60]	@ 0x3c
    tmp10 = MULTIPLY(tmp0 + tmp1, FIX(1.064004961));    /* c3 */
 800ae38:	fb08 f303 	mul.w	r3, r8, r3
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.657591230)), /* c1-c3 */
 800ae3c:	fb0e 3202 	mla	r2, lr, r2, r3
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.785601151)), /* c1+c3 */
 800ae40:	fb0c 3300 	mla	r3, ip, r0, r3
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.657591230)), /* c1-c3 */
 800ae44:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.785601151)), /* c1+c3 */
 800ae48:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.657591230)), /* c1-c3 */
 800ae4c:	13d2      	asrs	r2, r2, #15
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.785601151)), /* c1+c3 */
 800ae4e:	13db      	asrs	r3, r3, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 800ae50:	61e2      	str	r2, [r4, #28]
    dataptr[DCTSIZE*3] = (DCTELEM)
 800ae52:	65e3      	str	r3, [r4, #92]	@ 0x5c
  for (ctr = 0; ctr < 5; ctr++) {
 800ae54:	42bc      	cmp	r4, r7
 800ae56:	d1c8      	bne.n	800adea <jpeg_fdct_5x5+0xd6>
  }
}
 800ae58:	b003      	add	sp, #12
 800ae5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae5e:	bf00      	nop
 800ae60:	ffffba5c 	.word	0xffffba5c
 800ae64:	ffffa6dc 	.word	0xffffa6dc

0800ae68 <jpeg_fdct_4x4>:
 * Perform the forward DCT on a 4x4 sample block.
 */

GLOBAL(void)
jpeg_fdct_4x4 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800ae68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	460f      	mov	r7, r1
 800ae70:	4616      	mov	r6, r2
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800ae72:	2100      	movs	r1, #0
 800ae74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ae78:	f104 0520 	add.w	r5, r4, #32
 800ae7c:	f004 fe18 	bl	800fab0 <memset>
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* We must also scale the output by (8/4)**2 = 2**2, which we add here. */
  /* cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point FDCT]. */

  dataptr = data;
  for (ctr = 0; ctr < 4; ctr++) {
 800ae80:	1f39      	subs	r1, r7, #4
 800ae82:	f104 02a0 	add.w	r2, r4, #160	@ 0xa0
      ((tmp0 + tmp1 - 4 * CENTERJSAMPLE) << (PASS1_BITS+2));
    dataptr[2] = (DCTELEM) ((tmp0 - tmp1) << (PASS1_BITS+2));

    /* Odd part */

    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 800ae86:	f241 1e51 	movw	lr, #4433	@ 0x1151
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-3);

    dataptr[1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800ae8a:	f641 0c7e 	movw	ip, #6270	@ 0x187e
		  CONST_BITS-PASS1_BITS-2);
    dataptr[3] = (DCTELEM)
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800ae8e:	4f32      	ldr	r7, [pc, #200]	@ (800af58 <jpeg_fdct_4x4+0xf0>)
    elemptr = sample_data[ctr] + start_col;
 800ae90:	f851 3f04 	ldr.w	r3, [r1, #4]!
  for (ctr = 0; ctr < 4; ctr++) {
 800ae94:	3520      	adds	r5, #32
    elemptr = sample_data[ctr] + start_col;
 800ae96:	eb03 0906 	add.w	r9, r3, r6
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[3]);
 800ae9a:	5d98      	ldrb	r0, [r3, r6]
 800ae9c:	f899 b003 	ldrb.w	fp, [r9, #3]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[2]);
 800aea0:	f899 8001 	ldrb.w	r8, [r9, #1]
 800aea4:	f899 9002 	ldrb.w	r9, [r9, #2]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[3]);
 800aea8:	eb00 030b 	add.w	r3, r0, fp
    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[3]);
 800aeac:	eba0 000b 	sub.w	r0, r0, fp
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[2]);
 800aeb0:	eb08 0a09 	add.w	sl, r8, r9
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[2]);
 800aeb4:	eba8 0809 	sub.w	r8, r8, r9
      ((tmp0 + tmp1 - 4 * CENTERJSAMPLE) << (PASS1_BITS+2));
 800aeb8:	eb03 090a 	add.w	r9, r3, sl
    dataptr[2] = (DCTELEM) ((tmp0 - tmp1) << (PASS1_BITS+2));
 800aebc:	eba3 030a 	sub.w	r3, r3, sl
 800aec0:	011b      	lsls	r3, r3, #4
      ((tmp0 + tmp1 - 4 * CENTERJSAMPLE) << (PASS1_BITS+2));
 800aec2:	f5a9 7900 	sub.w	r9, r9, #512	@ 0x200
    dataptr[2] = (DCTELEM) ((tmp0 - tmp1) << (PASS1_BITS+2));
 800aec6:	f845 3c38 	str.w	r3, [r5, #-56]
    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 800aeca:	eb00 0308 	add.w	r3, r0, r8
    dataptr[0] = (DCTELEM)
 800aece:	ea4f 1909 	mov.w	r9, r9, lsl #4
    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 800aed2:	fb0e f303 	mul.w	r3, lr, r3
    dataptr[0] = (DCTELEM)
 800aed6:	f845 9c40 	str.w	r9, [r5, #-64]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-3);
 800aeda:	f503 7380 	add.w	r3, r3, #256	@ 0x100
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800aede:	fb0c 3000 	mla	r0, ip, r0, r3
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800aee2:	fb07 3308 	mla	r3, r7, r8, r3
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800aee6:	1240      	asrs	r0, r0, #9
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800aee8:	125b      	asrs	r3, r3, #9
    dataptr[1] = (DCTELEM)
 800aeea:	f845 0c3c 	str.w	r0, [r5, #-60]
    dataptr[3] = (DCTELEM)
 800aeee:	f845 3c34 	str.w	r3, [r5, #-52]
  for (ctr = 0; ctr < 4; ctr++) {
 800aef2:	42aa      	cmp	r2, r5
 800aef4:	d1cc      	bne.n	800ae90 <jpeg_fdct_4x4+0x28>
 800aef6:	f104 0110 	add.w	r1, r4, #16
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
    dataptr[DCTSIZE*2] = (DCTELEM) RIGHT_SHIFT(tmp0 - tmp1, PASS1_BITS);

    /* Odd part */

    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 800aefa:	f241 1651 	movw	r6, #4433	@ 0x1151
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS+PASS1_BITS-1);

    dataptr[DCTSIZE*1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800aefe:	f641 057e 	movw	r5, #6270	@ 0x187e
		  CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM)
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800af02:	4815      	ldr	r0, [pc, #84]	@ (800af58 <jpeg_fdct_4x4+0xf0>)
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3] + (ONE << (PASS1_BITS-1));
 800af04:	f8d4 8000 	ldr.w	r8, [r4]
		  CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 800af08:	3404      	adds	r4, #4
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3] + (ONE << (PASS1_BITS-1));
 800af0a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*2];
 800af0c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800af10:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3] + (ONE << (PASS1_BITS-1));
 800af12:	eb08 0302 	add.w	r3, r8, r2
    tmp10 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*3];
 800af16:	eba8 0202 	sub.w	r2, r8, r2
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*2];
 800af1a:	eb0c 0e07 	add.w	lr, ip, r7
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3] + (ONE << (PASS1_BITS-1));
 800af1e:	3302      	adds	r3, #2
    tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*2];
 800af20:	ebac 0707 	sub.w	r7, ip, r7
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
 800af24:	eb03 0c0e 	add.w	ip, r3, lr
    dataptr[DCTSIZE*2] = (DCTELEM) RIGHT_SHIFT(tmp0 - tmp1, PASS1_BITS);
 800af28:	eba3 030e 	sub.w	r3, r3, lr
 800af2c:	109b      	asrs	r3, r3, #2
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
 800af2e:	ea4f 0cac 	mov.w	ip, ip, asr #2
    dataptr[DCTSIZE*2] = (DCTELEM) RIGHT_SHIFT(tmp0 - tmp1, PASS1_BITS);
 800af32:	63e3      	str	r3, [r4, #60]	@ 0x3c
    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 800af34:	19d3      	adds	r3, r2, r7
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
 800af36:	f844 cc04 	str.w	ip, [r4, #-4]
    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 800af3a:	4373      	muls	r3, r6
    tmp0 += ONE << (CONST_BITS+PASS1_BITS-1);
 800af3c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800af40:	fb05 3202 	mla	r2, r5, r2, r3
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800af44:	fb00 3307 	mla	r3, r0, r7, r3
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800af48:	13d2      	asrs	r2, r2, #15
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800af4a:	13db      	asrs	r3, r3, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 800af4c:	61e2      	str	r2, [r4, #28]
    dataptr[DCTSIZE*3] = (DCTELEM)
 800af4e:	65e3      	str	r3, [r4, #92]	@ 0x5c
  for (ctr = 0; ctr < 4; ctr++) {
 800af50:	428c      	cmp	r4, r1
 800af52:	d1d7      	bne.n	800af04 <jpeg_fdct_4x4+0x9c>
  }
}
 800af54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af58:	ffffc4df 	.word	0xffffc4df

0800af5c <jpeg_fdct_3x3>:
 * Perform the forward DCT on a 3x3 sample block.
 */

GLOBAL(void)
jpeg_fdct_3x3 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800af5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af60:	4604      	mov	r4, r0
 800af62:	460e      	mov	r6, r1
 800af64:	4615      	mov	r5, r2
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800af66:	2100      	movs	r1, #0
 800af68:	f44f 7280 	mov.w	r2, #256	@ 0x100
	      CONST_BITS-PASS1_BITS-2);

    /* Odd part */

    dataptr[1] = (DCTELEM)
      DESCALE(MULTIPLY(tmp2, FIX(1.224744871)),               /* c1 */
 800af6c:	f242 7731 	movw	r7, #10033	@ 0x2731
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800af70:	f004 fd9e 	bl	800fab0 <memset>
  for (ctr = 0; ctr < 3; ctr++) {
 800af74:	1f31      	subs	r1, r6, #4
 800af76:	f104 0220 	add.w	r2, r4, #32
 800af7a:	f104 0680 	add.w	r6, r4, #128	@ 0x80
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
 800af7e:	f241 6ca1 	movw	ip, #5793	@ 0x16a1
    elemptr = sample_data[ctr] + start_col;
 800af82:	f851 3f04 	ldr.w	r3, [r1, #4]!
  for (ctr = 0; ctr < 3; ctr++) {
 800af86:	3220      	adds	r2, #32
    elemptr = sample_data[ctr] + start_col;
 800af88:	eb03 0805 	add.w	r8, r3, r5
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[2]);
 800af8c:	5d5b      	ldrb	r3, [r3, r5]
 800af8e:	f898 e002 	ldrb.w	lr, [r8, #2]
    tmp1 = GETJSAMPLE(elemptr[1]);
 800af92:	f898 9001 	ldrb.w	r9, [r8, #1]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[2]);
 800af96:	eb03 000e 	add.w	r0, r3, lr
    tmp2 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[2]);
 800af9a:	eba3 030e 	sub.w	r3, r3, lr
      ((tmp0 + tmp1 - 3 * CENTERJSAMPLE) << (PASS1_BITS+2));
 800af9e:	eb00 0809 	add.w	r8, r0, r9
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
 800afa2:	eba0 0049 	sub.w	r0, r0, r9, lsl #1
      DESCALE(MULTIPLY(tmp2, FIX(1.224744871)),               /* c1 */
 800afa6:	437b      	muls	r3, r7
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
 800afa8:	fb0c f000 	mul.w	r0, ip, r0
      ((tmp0 + tmp1 - 3 * CENTERJSAMPLE) << (PASS1_BITS+2));
 800afac:	f5a8 78c0 	sub.w	r8, r8, #384	@ 0x180
      DESCALE(MULTIPLY(tmp2, FIX(1.224744871)),               /* c1 */
 800afb0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
 800afb4:	f500 7080 	add.w	r0, r0, #256	@ 0x100
    dataptr[0] = (DCTELEM)
 800afb8:	ea4f 1808 	mov.w	r8, r8, lsl #4
      DESCALE(MULTIPLY(tmp2, FIX(1.224744871)),               /* c1 */
 800afbc:	125b      	asrs	r3, r3, #9
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
 800afbe:	1240      	asrs	r0, r0, #9
    dataptr[0] = (DCTELEM)
 800afc0:	f842 8c40 	str.w	r8, [r2, #-64]
    dataptr[1] = (DCTELEM)
 800afc4:	f842 3c3c 	str.w	r3, [r2, #-60]
    dataptr[2] = (DCTELEM)
 800afc8:	f842 0c38 	str.w	r0, [r2, #-56]
  for (ctr = 0; ctr < 3; ctr++) {
 800afcc:	4296      	cmp	r6, r2
 800afce:	d1d8      	bne.n	800af82 <jpeg_fdct_3x3+0x26>
 800afd0:	f104 010c 	add.w	r1, r4, #12
    tmp1 = dataptr[DCTSIZE*1];

    tmp2 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*2];

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),        /* 16/9 */
 800afd4:	f643 06e4 	movw	r6, #14564	@ 0x38e4
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
 800afd8:	f642 053a 	movw	r5, #10298	@ 0x283a
	      CONST_BITS+PASS1_BITS);

    /* Odd part */

    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(MULTIPLY(tmp2, FIX(2.177324216)),               /* c1 */
 800afdc:	f244 50ad 	movw	r0, #17837	@ 0x45ad
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*2];
 800afe0:	6823      	ldr	r3, [r4, #0]
	      CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 800afe2:	3404      	adds	r4, #4
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*2];
 800afe4:	f8d4 c03c 	ldr.w	ip, [r4, #60]	@ 0x3c
    tmp1 = dataptr[DCTSIZE*1];
 800afe8:	f8d4 e01c 	ldr.w	lr, [r4, #28]
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*2];
 800afec:	eb03 020c 	add.w	r2, r3, ip
    tmp2 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*2];
 800aff0:	eba3 030c 	sub.w	r3, r3, ip
      DESCALE(MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),        /* 16/9 */
 800aff4:	eb02 070e 	add.w	r7, r2, lr
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
 800aff8:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
      DESCALE(MULTIPLY(tmp2, FIX(2.177324216)),               /* c1 */
 800affc:	4343      	muls	r3, r0
      DESCALE(MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),        /* 16/9 */
 800affe:	4377      	muls	r7, r6
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
 800b000:	436a      	muls	r2, r5
      DESCALE(MULTIPLY(tmp2, FIX(2.177324216)),               /* c1 */
 800b002:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),        /* 16/9 */
 800b006:	f507 4780 	add.w	r7, r7, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
 800b00a:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp2, FIX(2.177324216)),               /* c1 */
 800b00e:	13db      	asrs	r3, r3, #15
      DESCALE(MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),        /* 16/9 */
 800b010:	13ff      	asrs	r7, r7, #15
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
 800b012:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 800b014:	61e3      	str	r3, [r4, #28]
    dataptr[DCTSIZE*0] = (DCTELEM)
 800b016:	f844 7c04 	str.w	r7, [r4, #-4]
    dataptr[DCTSIZE*2] = (DCTELEM)
 800b01a:	63e2      	str	r2, [r4, #60]	@ 0x3c
  for (ctr = 0; ctr < 3; ctr++) {
 800b01c:	428c      	cmp	r4, r1
 800b01e:	d1df      	bne.n	800afe0 <jpeg_fdct_3x3+0x84>
  }
}
 800b020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b024 <jpeg_fdct_2x2>:
 * Perform the forward DCT on a 2x2 sample block.
 */

GLOBAL(void)
jpeg_fdct_2x2 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	460e      	mov	r6, r1
 800b028:	4615      	mov	r5, r2
  INT32 tmp0, tmp1, tmp2, tmp3;
  JSAMPROW elemptr;

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800b02a:	2100      	movs	r1, #0
 800b02c:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 800b030:	4604      	mov	r4, r0
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800b032:	f004 fd3d 	bl	800fab0 <memset>

  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT. */

  /* Row 0 */
  elemptr = sample_data[0] + start_col;
 800b036:	6833      	ldr	r3, [r6, #0]
 800b038:	195a      	adds	r2, r3, r5

  tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[1]);
 800b03a:	5d5b      	ldrb	r3, [r3, r5]
 800b03c:	7852      	ldrb	r2, [r2, #1]
 800b03e:	1898      	adds	r0, r3, r2
  tmp1 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[1]);
 800b040:	1a9b      	subs	r3, r3, r2

  /* Row 1 */
  elemptr = sample_data[1] + start_col;
 800b042:	6872      	ldr	r2, [r6, #4]
 800b044:	1951      	adds	r1, r2, r5

  tmp2 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[1]);
 800b046:	5d52      	ldrb	r2, [r2, r5]
 800b048:	7849      	ldrb	r1, [r1, #1]
 800b04a:	1855      	adds	r5, r2, r1
  tmp3 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[1]);
 800b04c:	1a52      	subs	r2, r2, r1
   * We must also scale the output by (8/2)**2 = 2**4.
   */

  /* Column 0 */
  /* Apply unsigned->signed conversion */
  data[DCTSIZE*0] = (DCTELEM) ((tmp0 + tmp2 - 4 * CENTERJSAMPLE) << 4);
 800b04e:	1941      	adds	r1, r0, r5
  data[DCTSIZE*1] = (DCTELEM) ((tmp0 - tmp2) << 4);
 800b050:	1b40      	subs	r0, r0, r5
  data[DCTSIZE*0] = (DCTELEM) ((tmp0 + tmp2 - 4 * CENTERJSAMPLE) << 4);
 800b052:	f5a1 7100 	sub.w	r1, r1, #512	@ 0x200
  data[DCTSIZE*1] = (DCTELEM) ((tmp0 - tmp2) << 4);
 800b056:	0100      	lsls	r0, r0, #4
  data[DCTSIZE*0] = (DCTELEM) ((tmp0 + tmp2 - 4 * CENTERJSAMPLE) << 4);
 800b058:	0109      	lsls	r1, r1, #4
  data[DCTSIZE*1] = (DCTELEM) ((tmp0 - tmp2) << 4);
 800b05a:	6220      	str	r0, [r4, #32]
  data[DCTSIZE*0] = (DCTELEM) ((tmp0 + tmp2 - 4 * CENTERJSAMPLE) << 4);
 800b05c:	6021      	str	r1, [r4, #0]

  /* Column 1 */
  data[DCTSIZE*0+1] = (DCTELEM) ((tmp1 + tmp3) << 4);
 800b05e:	1899      	adds	r1, r3, r2
  data[DCTSIZE*1+1] = (DCTELEM) ((tmp1 - tmp3) << 4);
 800b060:	1a9b      	subs	r3, r3, r2
  data[DCTSIZE*0+1] = (DCTELEM) ((tmp1 + tmp3) << 4);
 800b062:	0109      	lsls	r1, r1, #4
  data[DCTSIZE*1+1] = (DCTELEM) ((tmp1 - tmp3) << 4);
 800b064:	011b      	lsls	r3, r3, #4
  data[DCTSIZE*0+1] = (DCTELEM) ((tmp1 + tmp3) << 4);
 800b066:	6061      	str	r1, [r4, #4]
  data[DCTSIZE*1+1] = (DCTELEM) ((tmp1 - tmp3) << 4);
 800b068:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800b06a:	bd70      	pop	{r4, r5, r6, pc}

0800b06c <jpeg_fdct_1x1>:
 * Perform the forward DCT on a 1x1 sample block.
 */

GLOBAL(void)
jpeg_fdct_1x1 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800b06c:	b570      	push	{r4, r5, r6, lr}
 800b06e:	460e      	mov	r6, r1
 800b070:	4615      	mov	r5, r2
  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800b072:	2100      	movs	r1, #0
 800b074:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 800b078:	4604      	mov	r4, r0
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800b07a:	f004 fd19 	bl	800fab0 <memset>

  /* We leave the result scaled up by an overall factor of 8. */
  /* We must also scale the output by (8/1)**2 = 2**6. */
  /* Apply unsigned->signed conversion */
  data[0] = (DCTELEM)
    ((GETJSAMPLE(sample_data[0][start_col]) - CENTERJSAMPLE) << 6);
 800b07e:	6833      	ldr	r3, [r6, #0]
 800b080:	5d5b      	ldrb	r3, [r3, r5]
 800b082:	3b80      	subs	r3, #128	@ 0x80
  data[0] = (DCTELEM)
 800b084:	019b      	lsls	r3, r3, #6
 800b086:	6023      	str	r3, [r4, #0]
}
 800b088:	bd70      	pop	{r4, r5, r6, pc}

0800b08a <jpeg_fdct_9x9>:
 * Perform the forward DCT on a 9x9 sample block.
 */

GLOBAL(void)
jpeg_fdct_9x9 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800b08a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08e:	b08f      	sub	sp, #60	@ 0x3c
 800b090:	4683      	mov	fp, r0
  /* we scale the results further by 2 as part of output adaption */
  /* scaling for different DCT size. */
  /* cK represents sqrt(2) * cos(K*pi/18). */

  dataptr = data;
  ctr = 0;
 800b092:	f04f 0c00 	mov.w	ip, #0
{
 800b096:	e9cd 2104 	strd	r2, r1, [sp, #16]
  dataptr = data;
 800b09a:	4601      	mov	r1, r0
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 800b09c:	9b05      	ldr	r3, [sp, #20]
 800b09e:	9a04      	ldr	r2, [sp, #16]
 800b0a0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
    tmp2 = MULTIPLY(tmp12 - tmp13, FIX(1.392728481)); /* c1 */

    dataptr[5] = (DCTELEM) DESCALE(tmp0 - tmp11 - tmp2, CONST_BITS-1);
    dataptr[7] = (DCTELEM) DESCALE(tmp1 - tmp11 + tmp2, CONST_BITS-1);

    ctr++;
 800b0a4:	f10c 0c01 	add.w	ip, ip, #1
    elemptr = sample_data[ctr] + start_col;
 800b0a8:	189c      	adds	r4, r3, r2
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[8]);
 800b0aa:	5c9b      	ldrb	r3, [r3, r2]

    if (ctr != DCTSIZE) {
 800b0ac:	f1bc 0f08 	cmp.w	ip, #8
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[8]);
 800b0b0:	7a22      	ldrb	r2, [r4, #8]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[7]);
 800b0b2:	f894 9007 	ldrb.w	r9, [r4, #7]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[6]);
 800b0b6:	f894 8002 	ldrb.w	r8, [r4, #2]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[5]);
 800b0ba:	f894 e003 	ldrb.w	lr, [r4, #3]
 800b0be:	7966      	ldrb	r6, [r4, #5]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[7]);
 800b0c0:	f894 a001 	ldrb.w	sl, [r4, #1]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[6]);
 800b0c4:	79a0      	ldrb	r0, [r4, #6]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[5]);
 800b0c6:	eb0e 0706 	add.w	r7, lr, r6
    tmp4 = GETJSAMPLE(elemptr[4]);
 800b0ca:	7924      	ldrb	r4, [r4, #4]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[7]);
 800b0cc:	eb0a 0509 	add.w	r5, sl, r9
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[8]);
 800b0d0:	9202      	str	r2, [sp, #8]
 800b0d2:	441a      	add	r2, r3
    tmp4 = GETJSAMPLE(elemptr[4]);
 800b0d4:	9403      	str	r4, [sp, #12]
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[7]);
 800b0d6:	ebaa 0a09 	sub.w	sl, sl, r9
    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[8]);
 800b0da:	9c02      	ldr	r4, [sp, #8]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[8]);
 800b0dc:	9201      	str	r2, [sp, #4]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[6]);
 800b0de:	eb08 0200 	add.w	r2, r8, r0
    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[8]);
 800b0e2:	eba3 0304 	sub.w	r3, r3, r4
    z1 = tmp0 + tmp2 + tmp3;
 800b0e6:	9c01      	ldr	r4, [sp, #4]
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[6]);
 800b0e8:	eba8 0000 	sub.w	r0, r8, r0
    tmp13 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[5]);
 800b0ec:	ebae 0806 	sub.w	r8, lr, r6
    z1 = tmp0 + tmp2 + tmp3;
 800b0f0:	eb04 0e02 	add.w	lr, r4, r2
    z2 = tmp1 + tmp4;
 800b0f4:	9c03      	ldr	r4, [sp, #12]
    z1 = tmp0 + tmp2 + tmp3;
 800b0f6:	44be      	add	lr, r7
    z2 = tmp1 + tmp4;
 800b0f8:	eb05 0904 	add.w	r9, r5, r4
      DESCALE(MULTIPLY(z1 - z2 - z2, FIX(0.707106781)),  /* c6 */
 800b0fc:	f241 64a1 	movw	r4, #5793	@ 0x16a1
    dataptr[0] = (DCTELEM) ((z1 + z2 - 9 * CENTERJSAMPLE) << 1);
 800b100:	eb0e 0609 	add.w	r6, lr, r9
 800b104:	f5a6 6690 	sub.w	r6, r6, #1152	@ 0x480
 800b108:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800b10c:	600e      	str	r6, [r1, #0]
      DESCALE(MULTIPLY(z1 - z2 - z2, FIX(0.707106781)),  /* c6 */
 800b10e:	ebae 0649 	sub.w	r6, lr, r9, lsl #1
 800b112:	fb04 f606 	mul.w	r6, r4, r6
    z1 = MULTIPLY(tmp0 - tmp2, FIX(1.328926049));        /* c2 */
 800b116:	f642 2487 	movw	r4, #10887	@ 0x2a87
      DESCALE(MULTIPLY(z1 - z2 - z2, FIX(0.707106781)),  /* c6 */
 800b11a:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 800b11e:	ea4f 3626 	mov.w	r6, r6, asr #12
    dataptr[6] = (DCTELEM)
 800b122:	618e      	str	r6, [r1, #24]
    z1 = MULTIPLY(tmp0 - tmp2, FIX(1.328926049));        /* c2 */
 800b124:	9e01      	ldr	r6, [sp, #4]
 800b126:	eba6 0602 	sub.w	r6, r6, r2
      DESCALE(MULTIPLY(tmp2 - tmp3, FIX(1.083350441))    /* c4 */
 800b12a:	eba2 0207 	sub.w	r2, r2, r7
    z1 = MULTIPLY(tmp0 - tmp2, FIX(1.328926049));        /* c2 */
 800b12e:	fb04 f606 	mul.w	r6, r4, r6
    z2 = MULTIPLY(tmp1 - tmp4 - tmp4, FIX(0.707106781)); /* c6 */
 800b132:	9c03      	ldr	r4, [sp, #12]
 800b134:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 800b138:	f241 64a1 	movw	r4, #5793	@ 0x16a1
 800b13c:	fb04 f505 	mul.w	r5, r4, r5
      DESCALE(MULTIPLY(tmp2 - tmp3, FIX(1.083350441))    /* c4 */
 800b140:	f242 24ab 	movw	r4, #8875	@ 0x22ab
 800b144:	fb04 6202 	mla	r2, r4, r2, r6
      DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.224744871)), /* c3 */
 800b148:	f242 7431 	movw	r4, #10033	@ 0x2731
      DESCALE(MULTIPLY(tmp2 - tmp3, FIX(1.083350441))    /* c4 */
 800b14c:	442a      	add	r2, r5
 800b14e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b152:	ea4f 3222 	mov.w	r2, r2, asr #12
    dataptr[2] = (DCTELEM)
 800b156:	608a      	str	r2, [r1, #8]
      DESCALE(MULTIPLY(tmp3 - tmp0, FIX(0.245575608))    /* c8 */
 800b158:	9a01      	ldr	r2, [sp, #4]
 800b15a:	eba7 0702 	sub.w	r7, r7, r2
 800b15e:	f240 72dc 	movw	r2, #2012	@ 0x7dc
 800b162:	fb02 6607 	mla	r6, r2, r7, r6
      DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.224744871)), /* c3 */
 800b166:	eba3 0200 	sub.w	r2, r3, r0
 800b16a:	eba2 0208 	sub.w	r2, r2, r8
      DESCALE(MULTIPLY(tmp3 - tmp0, FIX(0.245575608))    /* c8 */
 800b16e:	eba6 0605 	sub.w	r6, r6, r5
    tmp0 = MULTIPLY(tmp10 + tmp12, FIX(0.909038955)); /* c5 */
 800b172:	f641 5517 	movw	r5, #7447	@ 0x1d17
      DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.224744871)), /* c3 */
 800b176:	fb04 f202 	mul.w	r2, r4, r2
      DESCALE(MULTIPLY(tmp3 - tmp0, FIX(0.245575608))    /* c8 */
 800b17a:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
    tmp11 = MULTIPLY(tmp11, FIX(1.224744871));        /* c3 */
 800b17e:	fb04 f40a 	mul.w	r4, r4, sl
      DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.224744871)), /* c3 */
 800b182:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
      DESCALE(MULTIPLY(tmp3 - tmp0, FIX(0.245575608))    /* c8 */
 800b186:	ea4f 3626 	mov.w	r6, r6, asr #12
      DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.224744871)), /* c3 */
 800b18a:	ea4f 3222 	mov.w	r2, r2, asr #12
    dataptr[4] = (DCTELEM)
 800b18e:	610e      	str	r6, [r1, #16]
    dataptr[3] = (DCTELEM)
 800b190:	60ca      	str	r2, [r1, #12]
    tmp0 = MULTIPLY(tmp10 + tmp12, FIX(0.909038955)); /* c5 */
 800b192:	eb03 0200 	add.w	r2, r3, r0
    tmp1 = MULTIPLY(tmp10 + tmp13, FIX(0.483689525)); /* c7 */
 800b196:	4443      	add	r3, r8
    tmp2 = MULTIPLY(tmp12 - tmp13, FIX(1.392728481)); /* c1 */
 800b198:	eba0 0008 	sub.w	r0, r0, r8
    tmp0 = MULTIPLY(tmp10 + tmp12, FIX(0.909038955)); /* c5 */
 800b19c:	fb05 f202 	mul.w	r2, r5, r2
    tmp1 = MULTIPLY(tmp10 + tmp13, FIX(0.483689525)); /* c7 */
 800b1a0:	f640 757a 	movw	r5, #3962	@ 0xf7a
 800b1a4:	fb05 f303 	mul.w	r3, r5, r3
    dataptr[1] = (DCTELEM) DESCALE(tmp11 + tmp0 + tmp1, CONST_BITS-1);
 800b1a8:	eb04 0502 	add.w	r5, r4, r2
    dataptr[5] = (DCTELEM) DESCALE(tmp0 - tmp11 - tmp2, CONST_BITS-1);
 800b1ac:	eba2 0204 	sub.w	r2, r2, r4
    dataptr[1] = (DCTELEM) DESCALE(tmp11 + tmp0 + tmp1, CONST_BITS-1);
 800b1b0:	441d      	add	r5, r3
    dataptr[7] = (DCTELEM) DESCALE(tmp1 - tmp11 + tmp2, CONST_BITS-1);
 800b1b2:	eba3 0304 	sub.w	r3, r3, r4
    dataptr[1] = (DCTELEM) DESCALE(tmp11 + tmp0 + tmp1, CONST_BITS-1);
 800b1b6:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800b1ba:	ea4f 3525 	mov.w	r5, r5, asr #12
 800b1be:	604d      	str	r5, [r1, #4]
    tmp2 = MULTIPLY(tmp12 - tmp13, FIX(1.392728481)); /* c1 */
 800b1c0:	f642 4591 	movw	r5, #11409	@ 0x2c91
 800b1c4:	fb05 f000 	mul.w	r0, r5, r0
    dataptr[5] = (DCTELEM) DESCALE(tmp0 - tmp11 - tmp2, CONST_BITS-1);
 800b1c8:	eba2 0200 	sub.w	r2, r2, r0
    dataptr[7] = (DCTELEM) DESCALE(tmp1 - tmp11 + tmp2, CONST_BITS-1);
 800b1cc:	4403      	add	r3, r0
    dataptr[5] = (DCTELEM) DESCALE(tmp0 - tmp11 - tmp2, CONST_BITS-1);
 800b1ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
    dataptr[7] = (DCTELEM) DESCALE(tmp1 - tmp11 + tmp2, CONST_BITS-1);
 800b1d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
    dataptr[5] = (DCTELEM) DESCALE(tmp0 - tmp11 - tmp2, CONST_BITS-1);
 800b1d6:	ea4f 3222 	mov.w	r2, r2, asr #12
    dataptr[7] = (DCTELEM) DESCALE(tmp1 - tmp11 + tmp2, CONST_BITS-1);
 800b1da:	ea4f 3323 	mov.w	r3, r3, asr #12
    dataptr[5] = (DCTELEM) DESCALE(tmp0 - tmp11 - tmp2, CONST_BITS-1);
 800b1de:	614a      	str	r2, [r1, #20]
    dataptr[7] = (DCTELEM) DESCALE(tmp1 - tmp11 + tmp2, CONST_BITS-1);
 800b1e0:	61cb      	str	r3, [r1, #28]
    if (ctr != DCTSIZE) {
 800b1e2:	d004      	beq.n	800b1ee <jpeg_fdct_9x9+0x164>
      if (ctr == 9)
 800b1e4:	f1bc 0f09 	cmp.w	ip, #9
 800b1e8:	d003      	beq.n	800b1f2 <jpeg_fdct_9x9+0x168>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 800b1ea:	3120      	adds	r1, #32
 800b1ec:	e756      	b.n	800b09c <jpeg_fdct_9x9+0x12>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 800b1ee:	a906      	add	r1, sp, #24
 800b1f0:	e754      	b.n	800b09c <jpeg_fdct_9x9+0x12>
 800b1f2:	f10b 031c 	add.w	r3, fp, #28
 800b1f6:	f1ab 0204 	sub.w	r2, fp, #4
	      + z1 - z2, CONST_BITS+2);

    /* Odd part */

    dataptr[DCTSIZE*3] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.935399303)), /* c3 */
 800b1fa:	f643 5eef 	movw	lr, #15855	@ 0x3def
      DESCALE(MULTIPLY(z1 - z2 - z2, FIX(1.117403309)),  /* c6 */
 800b1fe:	f242 3bc2 	movw	fp, #9154	@ 0x23c2
 800b202:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 800b204:	ab06      	add	r3, sp, #24
 800b206:	9301      	str	r3, [sp, #4]
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*0];
 800b208:	f852 6f04 	ldr.w	r6, [r2, #4]!
 800b20c:	9901      	ldr	r1, [sp, #4]
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*6];
 800b20e:	f8d2 9040 	ldr.w	r9, [r2, #64]	@ 0x40
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*0];
 800b212:	f851 3b04 	ldr.w	r3, [r1], #4
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*6];
 800b216:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*0];
 800b21a:	eb06 0c03 	add.w	ip, r6, r3
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*7];
 800b21e:	f8d2 a020 	ldr.w	sl, [r2, #32]
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*5];
 800b222:	f8d2 8060 	ldr.w	r8, [r2, #96]	@ 0x60
    tmp10 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*0];
 800b226:	1af3      	subs	r3, r6, r3
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*7];
 800b228:	f8d2 40e0 	ldr.w	r4, [r2, #224]	@ 0xe0
    tmp13 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*5];
 800b22c:	f8d2 60a0 	ldr.w	r6, [r2, #160]	@ 0xa0
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*5];
 800b230:	f8d2 70a0 	ldr.w	r7, [r2, #160]	@ 0xa0
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*7];
 800b234:	eb0a 0504 	add.w	r5, sl, r4
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*0];
 800b238:	9101      	str	r1, [sp, #4]
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*6];
 800b23a:	eb09 0100 	add.w	r1, r9, r0
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*5];
 800b23e:	4447      	add	r7, r8
    tmp12 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*6];
 800b240:	eba9 0000 	sub.w	r0, r9, r0
    tmp13 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*5];
 800b244:	eba8 0906 	sub.w	r9, r8, r6
    z2 = tmp1 + tmp4;
 800b248:	f8d2 6080 	ldr.w	r6, [r2, #128]	@ 0x80
    z1 = tmp0 + tmp2 + tmp3;
 800b24c:	eb0c 0801 	add.w	r8, ip, r1
    tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*7];
 800b250:	ebaa 0404 	sub.w	r4, sl, r4
    z2 = tmp1 + tmp4;
 800b254:	eb05 0a06 	add.w	sl, r5, r6
    z1 = tmp0 + tmp2 + tmp3;
 800b258:	44b8      	add	r8, r7
    tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*7];
 800b25a:	9402      	str	r4, [sp, #8]
      DESCALE(MULTIPLY(z1 + z2, FIX(1.580246914)),       /* 128/81 */
 800b25c:	f243 2491 	movw	r4, #12945	@ 0x3291
 800b260:	eb08 060a 	add.w	r6, r8, sl
 800b264:	4366      	muls	r6, r4
    z1 = MULTIPLY(tmp0 - tmp2, FIX(2.100031287));        /* c2 */
 800b266:	f244 3433 	movw	r4, #17203	@ 0x4333
      DESCALE(MULTIPLY(z1 + z2, FIX(1.580246914)),       /* 128/81 */
 800b26a:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800b26e:	13f6      	asrs	r6, r6, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 800b270:	6016      	str	r6, [r2, #0]
      DESCALE(MULTIPLY(z1 - z2 - z2, FIX(1.117403309)),  /* c6 */
 800b272:	eba8 064a 	sub.w	r6, r8, sl, lsl #1
 800b276:	fb0b f606 	mul.w	r6, fp, r6
 800b27a:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800b27e:	13f6      	asrs	r6, r6, #15
    dataptr[DCTSIZE*6] = (DCTELEM)
 800b280:	f8c2 60c0 	str.w	r6, [r2, #192]	@ 0xc0
    z1 = MULTIPLY(tmp0 - tmp2, FIX(2.100031287));        /* c2 */
 800b284:	ebac 0601 	sub.w	r6, ip, r1
      DESCALE(MULTIPLY(tmp2 - tmp3, FIX(1.711961190))    /* c4 */
 800b288:	1bc9      	subs	r1, r1, r7
      DESCALE(MULTIPLY(tmp3 - tmp0, FIX(0.388070096))    /* c8 */
 800b28a:	eba7 070c 	sub.w	r7, r7, ip
    z1 = MULTIPLY(tmp0 - tmp2, FIX(2.100031287));        /* c2 */
 800b28e:	4366      	muls	r6, r4
    z2 = MULTIPLY(tmp1 - tmp4 - tmp4, FIX(1.117403309)); /* c6 */
 800b290:	f8d2 4080 	ldr.w	r4, [r2, #128]	@ 0x80
 800b294:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
      DESCALE(MULTIPLY(tmp2 - tmp3, FIX(1.711961190))    /* c4 */
 800b298:	f243 64c8 	movw	r4, #14024	@ 0x36c8
    z2 = MULTIPLY(tmp1 - tmp4 - tmp4, FIX(1.117403309)); /* c6 */
 800b29c:	fb0b f505 	mul.w	r5, fp, r5
      DESCALE(MULTIPLY(tmp2 - tmp3, FIX(1.711961190))    /* c4 */
 800b2a0:	fb04 6101 	mla	r1, r4, r1, r6
 800b2a4:	4429      	add	r1, r5
 800b2a6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
 800b2aa:	13c9      	asrs	r1, r1, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 800b2ac:	6411      	str	r1, [r2, #64]	@ 0x40
      DESCALE(MULTIPLY(tmp3 - tmp0, FIX(0.388070096))    /* c8 */
 800b2ae:	f640 416b 	movw	r1, #3179	@ 0xc6b
 800b2b2:	fb01 6607 	mla	r6, r1, r7, r6
      DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.935399303)), /* c3 */
 800b2b6:	1a19      	subs	r1, r3, r0
 800b2b8:	eba1 0109 	sub.w	r1, r1, r9
      DESCALE(MULTIPLY(tmp3 - tmp0, FIX(0.388070096))    /* c8 */
 800b2bc:	1b76      	subs	r6, r6, r5
	      CONST_BITS+2);

    tmp11 = MULTIPLY(tmp11, FIX(1.935399303));        /* c3 */
    tmp0 = MULTIPLY(tmp10 + tmp12, FIX(1.436506004)); /* c5 */
 800b2be:	f642 55f8 	movw	r5, #11768	@ 0x2df8
      DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.935399303)), /* c3 */
 800b2c2:	fb0e f101 	mul.w	r1, lr, r1
      DESCALE(MULTIPLY(tmp3 - tmp0, FIX(0.388070096))    /* c8 */
 800b2c6:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.935399303)), /* c3 */
 800b2ca:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp3 - tmp0, FIX(0.388070096))    /* c8 */
 800b2ce:	13f6      	asrs	r6, r6, #15
      DESCALE(MULTIPLY(tmp10 - tmp12 - tmp13, FIX(1.935399303)), /* c3 */
 800b2d0:	13c9      	asrs	r1, r1, #15
    dataptr[DCTSIZE*4] = (DCTELEM)
 800b2d2:	f8c2 6080 	str.w	r6, [r2, #128]	@ 0x80
    dataptr[DCTSIZE*3] = (DCTELEM)
 800b2d6:	6611      	str	r1, [r2, #96]	@ 0x60
    tmp11 = MULTIPLY(tmp11, FIX(1.935399303));        /* c3 */
 800b2d8:	9902      	ldr	r1, [sp, #8]
 800b2da:	fb0e f401 	mul.w	r4, lr, r1
    tmp0 = MULTIPLY(tmp10 + tmp12, FIX(1.436506004)); /* c5 */
 800b2de:	1819      	adds	r1, r3, r0
    tmp1 = MULTIPLY(tmp10 + tmp13, FIX(0.764348879)); /* c7 */
 800b2e0:	444b      	add	r3, r9

    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(tmp11 + tmp0 + tmp1, CONST_BITS+2);

    tmp2 = MULTIPLY(tmp12 - tmp13, FIX(2.200854883)); /* c1 */
 800b2e2:	eba0 0009 	sub.w	r0, r0, r9
    tmp0 = MULTIPLY(tmp10 + tmp12, FIX(1.436506004)); /* c5 */
 800b2e6:	4369      	muls	r1, r5
    tmp1 = MULTIPLY(tmp10 + tmp13, FIX(0.764348879)); /* c7 */
 800b2e8:	f641 0576 	movw	r5, #6262	@ 0x1876
 800b2ec:	436b      	muls	r3, r5
      DESCALE(tmp11 + tmp0 + tmp1, CONST_BITS+2);
 800b2ee:	1865      	adds	r5, r4, r1

    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(tmp0 - tmp11 - tmp2, CONST_BITS+2);
 800b2f0:	1b09      	subs	r1, r1, r4
      DESCALE(tmp11 + tmp0 + tmp1, CONST_BITS+2);
 800b2f2:	441d      	add	r5, r3
    dataptr[DCTSIZE*7] = (DCTELEM)
      DESCALE(tmp1 - tmp11 + tmp2, CONST_BITS+2);
 800b2f4:	1b1b      	subs	r3, r3, r4
      DESCALE(tmp11 + tmp0 + tmp1, CONST_BITS+2);
 800b2f6:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800b2fa:	13ed      	asrs	r5, r5, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 800b2fc:	6215      	str	r5, [r2, #32]
    tmp2 = MULTIPLY(tmp12 - tmp13, FIX(2.200854883)); /* c1 */
 800b2fe:	f244 656d 	movw	r5, #18029	@ 0x466d
 800b302:	4368      	muls	r0, r5
      DESCALE(tmp1 - tmp11 + tmp2, CONST_BITS+2);
 800b304:	4403      	add	r3, r0
      DESCALE(tmp0 - tmp11 - tmp2, CONST_BITS+2);
 800b306:	1a09      	subs	r1, r1, r0
      DESCALE(tmp1 - tmp11 + tmp2, CONST_BITS+2);
 800b308:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
      DESCALE(tmp0 - tmp11 - tmp2, CONST_BITS+2);
 800b30c:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
      DESCALE(tmp1 - tmp11 + tmp2, CONST_BITS+2);
 800b310:	13db      	asrs	r3, r3, #15
      DESCALE(tmp0 - tmp11 - tmp2, CONST_BITS+2);
 800b312:	13c9      	asrs	r1, r1, #15
    dataptr[DCTSIZE*7] = (DCTELEM)
 800b314:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800b318:	9b03      	ldr	r3, [sp, #12]
    dataptr[DCTSIZE*5] = (DCTELEM)
 800b31a:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800b31e:	4293      	cmp	r3, r2
 800b320:	f47f af72 	bne.w	800b208 <jpeg_fdct_9x9+0x17e>

    dataptr++;			/* advance pointer to next column */
    wsptr++;			/* advance pointer to next column */
  }
}
 800b324:	b00f      	add	sp, #60	@ 0x3c
 800b326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b32c <jpeg_fdct_10x10>:
 * Perform the forward DCT on a 10x10 sample block.
 */

GLOBAL(void)
jpeg_fdct_10x10 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800b32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* we scale the results further by 2 as part of output adaption */
  /* scaling for different DCT size. */
  /* cK represents sqrt(2) * cos(K*pi/20). */

  dataptr = data;
  ctr = 0;
 800b330:	f04f 0c00 	mov.w	ip, #0
{
 800b334:	b099      	sub	sp, #100	@ 0x64
  dataptr = data;
 800b336:	4686      	mov	lr, r0
{
 800b338:	9000      	str	r0, [sp, #0]
 800b33a:	e9cd 2106 	strd	r2, r1, [sp, #24]
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 800b33e:	9b07      	ldr	r3, [sp, #28]
 800b340:	9a06      	ldr	r2, [sp, #24]
 800b342:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.309016994)) +   /* (c3-c7)/2 */
	    (tmp11 << (CONST_BITS - 1)) - tmp2;
    dataptr[3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS-1);
    dataptr[7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS-1);

    ctr++;
 800b346:	f10c 0c01 	add.w	ip, ip, #1
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[9]);
 800b34a:	9906      	ldr	r1, [sp, #24]
    elemptr = sample_data[ctr] + start_col;
 800b34c:	189a      	adds	r2, r3, r2

    if (ctr != DCTSIZE) {
 800b34e:	f1bc 0f08 	cmp.w	ip, #8
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[9]);
 800b352:	5c5b      	ldrb	r3, [r3, r1]
 800b354:	f892 9009 	ldrb.w	r9, [r2, #9]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[8]);
 800b358:	7a11      	ldrb	r1, [r2, #8]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[9]);
 800b35a:	eb03 0b09 	add.w	fp, r3, r9
 800b35e:	9301      	str	r3, [sp, #4]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[8]);
 800b360:	7853      	ldrb	r3, [r2, #1]
 800b362:	9102      	str	r1, [sp, #8]
 800b364:	4419      	add	r1, r3
    tmp12 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[7]);
 800b366:	79d0      	ldrb	r0, [r2, #7]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[6]);
 800b368:	78d7      	ldrb	r7, [r2, #3]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[8]);
 800b36a:	9105      	str	r1, [sp, #20]
    tmp12 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[7]);
 800b36c:	7891      	ldrb	r1, [r2, #2]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[5]);
 800b36e:	7916      	ldrb	r6, [r2, #4]
    tmp12 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[7]);
 800b370:	eb01 0500 	add.w	r5, r1, r0
 800b374:	9003      	str	r0, [sp, #12]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[6]);
 800b376:	7990      	ldrb	r0, [r2, #6]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[5]);
 800b378:	7952      	ldrb	r2, [r2, #5]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[6]);
 800b37a:	eb07 0800 	add.w	r8, r7, r0
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[6]);
 800b37e:	eba7 0000 	sub.w	r0, r7, r0
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[5]);
 800b382:	eb06 0a02 	add.w	sl, r6, r2
 800b386:	9204      	str	r2, [sp, #16]
    tmp11 = tmp1 + tmp3;
 800b388:	9a05      	ldr	r2, [sp, #20]
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 800b38a:	f642 47b3 	movw	r7, #11443	@ 0x2cb3
    tmp10 = tmp0 + tmp4;
 800b38e:	eb0b 040a 	add.w	r4, fp, sl
    tmp13 = tmp0 - tmp4;
 800b392:	ebab 0b0a 	sub.w	fp, fp, sl
    tmp11 = tmp1 + tmp3;
 800b396:	eb02 0a08 	add.w	sl, r2, r8
    tmp14 = tmp1 - tmp3;
 800b39a:	eba2 0808 	sub.w	r8, r2, r8
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[9]);
 800b39e:	9a01      	ldr	r2, [sp, #4]
 800b3a0:	eba2 0909 	sub.w	r9, r2, r9
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[8]);
 800b3a4:	9a02      	ldr	r2, [sp, #8]
 800b3a6:	eba3 0302 	sub.w	r3, r3, r2
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[7]);
 800b3aa:	9a03      	ldr	r2, [sp, #12]
 800b3ac:	eba1 0102 	sub.w	r1, r1, r2
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[5]);
 800b3b0:	9a04      	ldr	r2, [sp, #16]
 800b3b2:	eba6 0202 	sub.w	r2, r6, r2
      ((tmp10 + tmp11 + tmp12 - 10 * CENTERJSAMPLE) << 1);
 800b3b6:	eb04 060a 	add.w	r6, r4, sl
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
 800b3ba:	eba4 0445 	sub.w	r4, r4, r5, lsl #1
      ((tmp10 + tmp11 + tmp12 - 10 * CENTERJSAMPLE) << 1);
 800b3be:	442e      	add	r6, r5
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
 800b3c0:	ebaa 0a45 	sub.w	sl, sl, r5, lsl #1
 800b3c4:	4d96      	ldr	r5, [pc, #600]	@ (800b620 <jpeg_fdct_10x10+0x2f4>)
      ((tmp10 + tmp11 + tmp12 - 10 * CENTERJSAMPLE) << 1);
 800b3c6:	f5a6 66a0 	sub.w	r6, r6, #1280	@ 0x500
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
 800b3ca:	fb05 fa0a 	mul.w	sl, r5, sl
 800b3ce:	f242 459d 	movw	r5, #9373	@ 0x249d
    dataptr[0] = (DCTELEM)
 800b3d2:	ea4f 0646 	mov.w	r6, r6, lsl #1
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
 800b3d6:	fb05 a404 	mla	r4, r5, r4, sl
    tmp10 = MULTIPLY(tmp13 + tmp14, FIX(0.831253876));    /* c6 */
 800b3da:	f641 259a 	movw	r5, #6810	@ 0x1a9a
    dataptr[0] = (DCTELEM)
 800b3de:	f8ce 6000 	str.w	r6, [lr]
    tmp10 = tmp0 + tmp4;
 800b3e2:	eb09 0602 	add.w	r6, r9, r2
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
 800b3e6:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800b3ea:	ea4f 3424 	mov.w	r4, r4, asr #12
    dataptr[4] = (DCTELEM)
 800b3ee:	f8ce 4010 	str.w	r4, [lr, #16]
    tmp10 = MULTIPLY(tmp13 + tmp14, FIX(0.831253876));    /* c6 */
 800b3f2:	eb0b 0408 	add.w	r4, fp, r8
 800b3f6:	fb05 f404 	mul.w	r4, r5, r4
      DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.513743148)),  /* c2-c6 */
 800b3fa:	f241 0571 	movw	r5, #4209	@ 0x1071
 800b3fe:	fb05 450b 	mla	r5, r5, fp, r4
 800b402:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800b406:	ea4f 3525 	mov.w	r5, r5, asr #12
    dataptr[2] = (DCTELEM)
 800b40a:	f8ce 5008 	str.w	r5, [lr, #8]
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.176250899)),  /* c2+c6 */
 800b40e:	4d85      	ldr	r5, [pc, #532]	@ (800b624 <jpeg_fdct_10x10+0x2f8>)
 800b410:	fb05 4408 	mla	r4, r5, r8, r4
    tmp11 = tmp1 - tmp3;
 800b414:	eba3 0500 	sub.w	r5, r3, r0
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.176250899)),  /* c2+c6 */
 800b418:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800b41c:	ea4f 3424 	mov.w	r4, r4, asr #12
    dataptr[6] = (DCTELEM)
 800b420:	f8ce 4018 	str.w	r4, [lr, #24]
    dataptr[5] = (DCTELEM) ((tmp10 - tmp11 - tmp2) << 1);
 800b424:	eba6 0405 	sub.w	r4, r6, r5
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.309016994)) +   /* (c3-c7)/2 */
 800b428:	442e      	add	r6, r5
	    (tmp11 << (CONST_BITS - 1)) - tmp2;
 800b42a:	ea4f 3505 	mov.w	r5, r5, lsl #12
    dataptr[5] = (DCTELEM) ((tmp10 - tmp11 - tmp2) << 1);
 800b42e:	eba4 0401 	sub.w	r4, r4, r1
 800b432:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b436:	f8ce 4014 	str.w	r4, [lr, #20]
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 800b43a:	f642 0453 	movw	r4, #10323	@ 0x2853
 800b43e:	fb04 f403 	mul.w	r4, r4, r3
	    MULTIPLY(tmp1 + tmp3, FIX(0.587785252));      /* (c1-c9)/2 */
 800b442:	4403      	add	r3, r0
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 800b444:	fb07 4409 	mla	r4, r7, r9, r4
 800b448:	f241 478c 	movw	r7, #5260	@ 0x148c
 800b44c:	eb04 3441 	add.w	r4, r4, r1, lsl #13
 800b450:	fb07 4400 	mla	r4, r7, r0, r4
	    MULTIPLY(tmp1 + tmp3, FIX(0.587785252));      /* (c1-c9)/2 */
 800b454:	4874      	ldr	r0, [pc, #464]	@ (800b628 <jpeg_fdct_10x10+0x2fc>)
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 800b456:	f240 7714 	movw	r7, #1812	@ 0x714
	    MULTIPLY(tmp1 + tmp3, FIX(0.587785252));      /* (c1-c9)/2 */
 800b45a:	fb00 f303 	mul.w	r3, r0, r3
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(0.951056516)) -     /* (c3+c7)/2 */
 800b45e:	f641 606f 	movw	r0, #7791	@ 0x1e6f
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 800b462:	fb07 4402 	mla	r4, r7, r2, r4
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(0.951056516)) -     /* (c3+c7)/2 */
 800b466:	eba9 0202 	sub.w	r2, r9, r2
 800b46a:	fb00 3302 	mla	r3, r0, r2, r3
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.309016994)) +   /* (c3-c7)/2 */
 800b46e:	f640 12e3 	movw	r2, #2531	@ 0x9e3
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 800b472:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.309016994)) +   /* (c3-c7)/2 */
 800b476:	fb02 5506 	mla	r5, r2, r6, r5
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 800b47a:	ea4f 3424 	mov.w	r4, r4, asr #12
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.309016994)) +   /* (c3-c7)/2 */
 800b47e:	eba5 3541 	sub.w	r5, r5, r1, lsl #13
    dataptr[1] = (DCTELEM)
 800b482:	f8ce 4004 	str.w	r4, [lr, #4]
    dataptr[3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS-1);
 800b486:	eb03 0205 	add.w	r2, r3, r5
    dataptr[7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS-1);
 800b48a:	eba3 0305 	sub.w	r3, r3, r5
    dataptr[3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS-1);
 800b48e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
    dataptr[7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS-1);
 800b492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
    dataptr[3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS-1);
 800b496:	ea4f 3222 	mov.w	r2, r2, asr #12
    dataptr[7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS-1);
 800b49a:	ea4f 3323 	mov.w	r3, r3, asr #12
    dataptr[3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS-1);
 800b49e:	f8ce 200c 	str.w	r2, [lr, #12]
    dataptr[7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS-1);
 800b4a2:	f8ce 301c 	str.w	r3, [lr, #28]
    if (ctr != DCTSIZE) {
 800b4a6:	d005      	beq.n	800b4b4 <jpeg_fdct_10x10+0x188>
      if (ctr == 10)
 800b4a8:	f1bc 0f0a 	cmp.w	ip, #10
 800b4ac:	d005      	beq.n	800b4ba <jpeg_fdct_10x10+0x18e>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 800b4ae:	f10e 0e20 	add.w	lr, lr, #32
 800b4b2:	e744      	b.n	800b33e <jpeg_fdct_10x10+0x12>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 800b4b4:	f10d 0e20 	add.w	lr, sp, #32
 800b4b8:	e741      	b.n	800b33e <jpeg_fdct_10x10+0x12>
 800b4ba:	9b00      	ldr	r3, [sp, #0]
   * fold into the constant multipliers and final/initial shifting:
   * cK now represents sqrt(2) * cos(K*pi/20) * 32/25.
   */

  dataptr = data;
  wsptr = workspace;
 800b4bc:	f10d 0b20 	add.w	fp, sp, #32
 800b4c0:	9a00      	ldr	r2, [sp, #0]
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*7];
    tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*6];
    tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*5];

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(1.28)), /* 32/25 */
 800b4c2:	f642 08f6 	movw	r8, #10486	@ 0x28f6
 800b4c6:	3b04      	subs	r3, #4
 800b4c8:	321c      	adds	r2, #28
 800b4ca:	9202      	str	r2, [sp, #8]
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*1];
 800b4cc:	f853 5f04 	ldr.w	r5, [r3, #4]!
 800b4d0:	f8db a020 	ldr.w	sl, [fp, #32]
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*0];
 800b4d4:	6a19      	ldr	r1, [r3, #32]
 800b4d6:	f85b 9b04 	ldr.w	r9, [fp], #4
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*1];
 800b4da:	eb05 020a 	add.w	r2, r5, sl
    tmp12 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*7];
 800b4de:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*1];
 800b4e2:	eba5 050a 	sub.w	r5, r5, sl
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*0];
 800b4e6:	eb01 0609 	add.w	r6, r1, r9
    tmp12 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*7];
 800b4ea:	6c19      	ldr	r1, [r3, #64]	@ 0x40
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*5];
 800b4ec:	f8d3 e080 	ldr.w	lr, [r3, #128]	@ 0x80
    tmp12 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*7];
 800b4f0:	eb01 0c00 	add.w	ip, r1, r0
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*6];
 800b4f4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*7];
 800b4f8:	f8d3 40e0 	ldr.w	r4, [r3, #224]	@ 0xe0
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*6];
 800b4fc:	9100      	str	r1, [sp, #0]
 800b4fe:	9800      	ldr	r0, [sp, #0]
 800b500:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800b502:	4401      	add	r1, r0
 800b504:	4608      	mov	r0, r1
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*5];
 800b506:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800b50a:	9101      	str	r1, [sp, #4]
 800b50c:	4471      	add	r1, lr
    tmp10 = tmp0 + tmp4;
 800b50e:	1857      	adds	r7, r2, r1
    tmp13 = tmp0 - tmp4;
 800b510:	1a51      	subs	r1, r2, r1
    tmp11 = tmp1 + tmp3;
 800b512:	1832      	adds	r2, r6, r0
    tmp14 = tmp1 - tmp3;
 800b514:	1a36      	subs	r6, r6, r0
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*0];
 800b516:	6a18      	ldr	r0, [r3, #32]
 800b518:	eba0 0909 	sub.w	r9, r0, r9
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*7];
 800b51c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800b51e:	eba0 0a04 	sub.w	sl, r0, r4
    tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*6];
 800b522:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 800b524:	9c00      	ldr	r4, [sp, #0]
 800b526:	1b04      	subs	r4, r0, r4
    tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*5];
 800b528:	9801      	ldr	r0, [sp, #4]
 800b52a:	ebae 0e00 	sub.w	lr, lr, r0
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(1.28)), /* 32/25 */
 800b52e:	18b8      	adds	r0, r7, r2
	      CONST_BITS+2);
    tmp12 += tmp12;
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.464477191)) - /* c4 */
 800b530:	eba2 024c 	sub.w	r2, r2, ip, lsl #1
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(1.28)), /* 32/25 */
 800b534:	4460      	add	r0, ip
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.464477191)) - /* c4 */
 800b536:	eba7 074c 	sub.w	r7, r7, ip, lsl #1
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(1.28)), /* 32/25 */
 800b53a:	fb08 f000 	mul.w	r0, r8, r0
 800b53e:	f500 4080 	add.w	r0, r0, #16384	@ 0x4000
 800b542:	13c0      	asrs	r0, r0, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 800b544:	6018      	str	r0, [r3, #0]
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.464477191)) - /* c4 */
 800b546:	4839      	ldr	r0, [pc, #228]	@ (800b62c <jpeg_fdct_10x10+0x300>)
 800b548:	4342      	muls	r2, r0
 800b54a:	f642 60dd 	movw	r0, #11997	@ 0x2edd
 800b54e:	fb00 2207 	mla	r2, r0, r7, r2
	      MULTIPLY(tmp11 - tmp12, FIX(0.559380511)),  /* c8 */
	      CONST_BITS+2);
    tmp10 = MULTIPLY(tmp13 + tmp14, FIX(1.064004961));    /* c6 */
 800b552:	f242 200c 	movw	r0, #8716	@ 0x220c
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.464477191)) - /* c4 */
 800b556:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800b55a:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*4] = (DCTELEM)
 800b55c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    tmp10 = MULTIPLY(tmp13 + tmp14, FIX(1.064004961));    /* c6 */
 800b560:	198a      	adds	r2, r1, r6
 800b562:	4342      	muls	r2, r0
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.657591230)),  /* c2-c6 */
 800b564:	f241 500b 	movw	r0, #5387	@ 0x150b
 800b568:	fb00 2101 	mla	r1, r0, r1, r2
    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp2, FIX(1.28)),  /* 32/25 */
	      CONST_BITS+2);
    tmp2 = MULTIPLY(tmp2, FIX(1.28));                     /* 32/25 */
    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0, FIX(1.787906876)) +          /* c1 */
 800b56c:	f643 1037 	movw	r0, #14647	@ 0x3937
      DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.657591230)),  /* c2-c6 */
 800b570:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
 800b574:	13c9      	asrs	r1, r1, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 800b576:	6419      	str	r1, [r3, #64]	@ 0x40
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.785601151)),  /* c2+c6 */
 800b578:	492d      	ldr	r1, [pc, #180]	@ (800b630 <jpeg_fdct_10x10+0x304>)
 800b57a:	fb01 2206 	mla	r2, r1, r6, r2
    tmp11 = tmp1 - tmp3;
 800b57e:	eba9 0604 	sub.w	r6, r9, r4
    tmp10 = tmp0 + tmp4;
 800b582:	eb05 010e 	add.w	r1, r5, lr
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.785601151)),  /* c2+c6 */
 800b586:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800b58a:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*6] = (DCTELEM)
 800b58c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp2, FIX(1.28)),  /* 32/25 */
 800b590:	1b8a      	subs	r2, r1, r6
	      MULTIPLY(tmp3, FIX(0.821810588)) +          /* c7 */
	      MULTIPLY(tmp4, FIX(0.283176630)),           /* c9 */
	      CONST_BITS+2);
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(1.217352341)) -     /* (c3+c7)/2 */
	    MULTIPLY(tmp1 + tmp3, FIX(0.752365123));      /* (c1-c9)/2 */
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.395541753)) +   /* (c3-c7)/2 */
 800b592:	4431      	add	r1, r6
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp2, FIX(1.28)),  /* 32/25 */
 800b594:	eba2 020a 	sub.w	r2, r2, sl
    tmp2 = MULTIPLY(tmp2, FIX(1.28));                     /* 32/25 */
 800b598:	fb08 fa0a 	mul.w	sl, r8, sl
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp2, FIX(1.28)),  /* 32/25 */
 800b59c:	fb08 f202 	mul.w	r2, r8, r2
 800b5a0:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800b5a4:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*5] = (DCTELEM)
 800b5a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      DESCALE(MULTIPLY(tmp0, FIX(1.787906876)) +          /* c1 */
 800b5aa:	f243 329d 	movw	r2, #13213	@ 0x339d
 800b5ae:	fb02 f209 	mul.w	r2, r2, r9
	    MULTIPLY(tmp1 + tmp3, FIX(0.752365123));      /* (c1-c9)/2 */
 800b5b2:	44a1      	add	r9, r4
      DESCALE(MULTIPLY(tmp0, FIX(1.787906876)) +          /* c1 */
 800b5b4:	fb00 2205 	mla	r2, r0, r5, r2
 800b5b8:	f641 204c 	movw	r0, #6732	@ 0x1a4c
 800b5bc:	4452      	add	r2, sl
 800b5be:	fb00 2204 	mla	r2, r0, r4, r2
 800b5c2:	f44f 6011 	mov.w	r0, #2320	@ 0x910
 800b5c6:	fb00 220e 	mla	r2, r0, lr, r2
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(1.217352341)) -     /* (c3+c7)/2 */
 800b5ca:	eba5 000e 	sub.w	r0, r5, lr
      DESCALE(MULTIPLY(tmp0, FIX(1.787906876)) +          /* c1 */
 800b5ce:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800b5d2:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 800b5d4:	621a      	str	r2, [r3, #32]
	    MULTIPLY(tmp1 + tmp3, FIX(0.752365123));      /* (c1-c9)/2 */
 800b5d6:	4a17      	ldr	r2, [pc, #92]	@ (800b634 <jpeg_fdct_10x10+0x308>)
 800b5d8:	fb02 f909 	mul.w	r9, r2, r9
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(1.217352341)) -     /* (c3+c7)/2 */
 800b5dc:	f242 62f5 	movw	r2, #9973	@ 0x26f5
 800b5e0:	fb02 9900 	mla	r9, r2, r0, r9
	    MULTIPLY(tmp11, FIX(0.64)) - tmp2;            /* 16/25 */
 800b5e4:	f241 427b 	movw	r2, #5243	@ 0x147b
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.395541753)) +   /* (c3-c7)/2 */
 800b5e8:	f640 40a8 	movw	r0, #3240	@ 0xca8
	    MULTIPLY(tmp11, FIX(0.64)) - tmp2;            /* 16/25 */
 800b5ec:	4372      	muls	r2, r6
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.395541753)) +   /* (c3-c7)/2 */
 800b5ee:	fb00 2201 	mla	r2, r0, r1, r2
 800b5f2:	eba2 020a 	sub.w	r2, r2, sl
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS+2);
 800b5f6:	eb09 0102 	add.w	r1, r9, r2
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS+2);
 800b5fa:	eba9 0902 	sub.w	r9, r9, r2
 800b5fe:	f509 4280 	add.w	r2, r9, #16384	@ 0x4000
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS+2);
 800b602:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS+2);
 800b606:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS+2);
 800b608:	13c9      	asrs	r1, r1, #15
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS+2);
 800b60a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800b60e:	9a02      	ldr	r2, [sp, #8]
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS+2);
 800b610:	6619      	str	r1, [r3, #96]	@ 0x60
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800b612:	429a      	cmp	r2, r3
 800b614:	f47f af5a 	bne.w	800b4cc <jpeg_fdct_10x10+0x1a0>

    dataptr++;			/* advance pointer to next column */
    wsptr++;			/* advance pointer to next column */
  }
}
 800b618:	b019      	add	sp, #100	@ 0x64
 800b61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b61e:	bf00      	nop
 800b620:	fffff204 	.word	0xfffff204
 800b624:	ffffba5c 	.word	0xffffba5c
 800b628:	ffffed31 	.word	0xffffed31
 800b62c:	ffffee1a 	.word	0xffffee1a
 800b630:	ffffa6dc 	.word	0xffffa6dc
 800b634:	ffffe7ed 	.word	0xffffe7ed

0800b638 <jpeg_fdct_11x11>:
 * Perform the forward DCT on an 11x11 sample block.
 */

GLOBAL(void)
jpeg_fdct_11x11 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800b638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* we scale the results further by 2 as part of output adaption */
  /* scaling for different DCT size. */
  /* cK represents sqrt(2) * cos(K*pi/22). */

  dataptr = data;
  ctr = 0;
 800b63c:	2300      	movs	r3, #0
{
 800b63e:	b0a1      	sub	sp, #132	@ 0x84
  dataptr = data;
 800b640:	4681      	mov	r9, r0
{
 800b642:	9004      	str	r0, [sp, #16]
  ctr = 0;
 800b644:	9300      	str	r3, [sp, #0]
{
 800b646:	e9cd 2106 	strd	r2, r1, [sp, #24]
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 800b64a:	9a00      	ldr	r2, [sp, #0]
 800b64c:	9b07      	ldr	r3, [sp, #28]

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[10]);
 800b64e:	9906      	ldr	r1, [sp, #24]
    elemptr = sample_data[ctr] + start_col;
 800b650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b654:	9a06      	ldr	r2, [sp, #24]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[10]);
 800b656:	f813 b001 	ldrb.w	fp, [r3, r1]
    elemptr = sample_data[ctr] + start_col;
 800b65a:	189a      	adds	r2, r3, r2
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[10]);
 800b65c:	f892 a00a 	ldrb.w	sl, [r2, #10]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[9]);
 800b660:	f892 8009 	ldrb.w	r8, [r2, #9]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[10]);
 800b664:	eb0b 030a 	add.w	r3, fp, sl
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[8]);
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[7]);
 800b668:	78d7      	ldrb	r7, [r2, #3]
 800b66a:	79d6      	ldrb	r6, [r2, #7]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[6]);
    tmp5 = GETJSAMPLE(elemptr[5]);

    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[10]);
 800b66c:	ebab 0a0a 	sub.w	sl, fp, sl
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[10]);
 800b670:	9303      	str	r3, [sp, #12]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[9]);
 800b672:	7853      	ldrb	r3, [r2, #1]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[8]);
 800b674:	f892 c008 	ldrb.w	ip, [r2, #8]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[9]);
 800b678:	4619      	mov	r1, r3
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[8]);
 800b67a:	f892 e002 	ldrb.w	lr, [r2, #2]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[9]);
 800b67e:	4443      	add	r3, r8
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[6]);
 800b680:	7915      	ldrb	r5, [r2, #4]
 800b682:	7994      	ldrb	r4, [r2, #6]
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[9]);
 800b684:	eba1 0808 	sub.w	r8, r1, r8
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[8]);
    tmp13 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[7]);
 800b688:	1bb9      	subs	r1, r7, r6
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[9]);
 800b68a:	9301      	str	r3, [sp, #4]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[8]);
 800b68c:	eb0e 030c 	add.w	r3, lr, ip
    tmp14 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[6]);
 800b690:	eba5 0b04 	sub.w	fp, r5, r4
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[6]);
 800b694:	1928      	adds	r0, r5, r4
    tmp13 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[7]);
 800b696:	9102      	str	r1, [sp, #8]

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 - 11 * CENTERJSAMPLE) << 1);
 800b698:	9c01      	ldr	r4, [sp, #4]
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[8]);
 800b69a:	ebae 0e0c 	sub.w	lr, lr, ip
      ((tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 - 11 * CENTERJSAMPLE) << 1);
 800b69e:	9903      	ldr	r1, [sp, #12]
    tmp1 -= tmp5;
    tmp2 -= tmp5;
    tmp3 -= tmp5;
    tmp4 -= tmp5;
    z1 = MULTIPLY(tmp0 + tmp3, FIX(1.356927976)) +       /* c2 */
	 MULTIPLY(tmp2 + tmp4, FIX(0.201263574));        /* c10 */
 800b6a0:	f240 6c71 	movw	ip, #1649	@ 0x671
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[8]);
 800b6a4:	9305      	str	r3, [sp, #20]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[7]);
 800b6a6:	19bb      	adds	r3, r7, r6
      ((tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 - 11 * CENTERJSAMPLE) << 1);
 800b6a8:	190c      	adds	r4, r1, r4
 800b6aa:	9905      	ldr	r1, [sp, #20]
    tmp5 = GETJSAMPLE(elemptr[5]);
 800b6ac:	7952      	ldrb	r2, [r2, #5]
      ((tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 - 11 * CENTERJSAMPLE) << 1);
 800b6ae:	440c      	add	r4, r1
    tmp0 -= tmp5;
 800b6b0:	9903      	ldr	r1, [sp, #12]
    tmp3 -= tmp5;
 800b6b2:	eba3 0642 	sub.w	r6, r3, r2, lsl #1
      ((tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 - 11 * CENTERJSAMPLE) << 1);
 800b6b6:	441c      	add	r4, r3
    tmp0 -= tmp5;
 800b6b8:	eba1 0542 	sub.w	r5, r1, r2, lsl #1
    tmp2 -= tmp5;
 800b6bc:	9905      	ldr	r1, [sp, #20]
      ((tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 - 11 * CENTERJSAMPLE) << 1);
 800b6be:	4404      	add	r4, r0
    tmp4 -= tmp5;
 800b6c0:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
    tmp2 -= tmp5;
 800b6c4:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    z1 = MULTIPLY(tmp0 + tmp3, FIX(1.356927976)) +       /* c2 */
 800b6c8:	19af      	adds	r7, r5, r6
      ((tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 - 11 * CENTERJSAMPLE) << 1);
 800b6ca:	4414      	add	r4, r2
 800b6cc:	f5a4 64b0 	sub.w	r4, r4, #1408	@ 0x580
    dataptr[0] = (DCTELEM)
 800b6d0:	0064      	lsls	r4, r4, #1
 800b6d2:	f8c9 4000 	str.w	r4, [r9]
	 MULTIPLY(tmp2 + tmp4, FIX(0.201263574));        /* c10 */
 800b6d6:	180c      	adds	r4, r1, r0
 800b6d8:	fb0c f404 	mul.w	r4, ip, r4
    z1 = MULTIPLY(tmp0 + tmp3, FIX(1.356927976)) +       /* c2 */
 800b6dc:	f642 3c6c 	movw	ip, #11116	@ 0x2b6c
 800b6e0:	fb0c 4407 	mla	r4, ip, r7, r4
    z2 = MULTIPLY(tmp1 - tmp3, FIX(0.926112931));        /* c6 */
 800b6e4:	9f01      	ldr	r7, [sp, #4]
 800b6e6:	1afb      	subs	r3, r7, r3
 800b6e8:	f641 57a3 	movw	r7, #7587	@ 0x1da3
 800b6ec:	437b      	muls	r3, r7
    z3 = MULTIPLY(tmp0 - tmp1, FIX(1.189712156));        /* c4 */
 800b6ee:	9f03      	ldr	r7, [sp, #12]
    z2 = MULTIPLY(tmp1 - tmp3, FIX(0.926112931));        /* c6 */
 800b6f0:	9305      	str	r3, [sp, #20]
    z3 = MULTIPLY(tmp0 - tmp1, FIX(1.189712156));        /* c4 */
 800b6f2:	9b01      	ldr	r3, [sp, #4]
 800b6f4:	eba7 0c03 	sub.w	ip, r7, r3
    dataptr[2] = (DCTELEM)
      DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.018300590)) /* c2+c8-c6 */
 800b6f8:	9b05      	ldr	r3, [sp, #20]
    z3 = MULTIPLY(tmp0 - tmp1, FIX(1.189712156));        /* c4 */
 800b6fa:	f242 6712 	movw	r7, #9746	@ 0x2612
 800b6fe:	fb07 fc0c 	mul.w	ip, r7, ip
      DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.018300590)) /* c2+c8-c6 */
 800b702:	18e7      	adds	r7, r4, r3
 800b704:	4bc2      	ldr	r3, [pc, #776]	@ (800ba10 <jpeg_fdct_11x11+0x3d8>)
      DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.062335650)) /* c4-c6-c10 */
	      - MULTIPLY(tmp2, FIX(1.356927976))         /* c2 */
	      + MULTIPLY(tmp4, FIX(0.587485545)),        /* c8 */
	      CONST_BITS-1);
    dataptr[6] = (DCTELEM)
      DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.620527200)) /* c2+c4-c6 */
 800b706:	4464      	add	r4, ip
      DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.018300590)) /* c2+c8-c6 */
 800b708:	fb03 7706 	mla	r7, r3, r6, r7
 800b70c:	f6a3 33ed 	subw	r3, r3, #3053	@ 0xbed
	      - MULTIPLY(tmp2, FIX(0.788749120)),        /* c8+c10 */
	      CONST_BITS-1);

    /* Odd part */

    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.286413905));    /* c3 */
 800b710:	eb0a 0608 	add.w	r6, sl, r8
      DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.018300590)) /* c2+c8-c6 */
 800b714:	fb03 7700 	mla	r7, r3, r0, r7
 800b718:	f507 6700 	add.w	r7, r7, #2048	@ 0x800
 800b71c:	133f      	asrs	r7, r7, #12
    dataptr[2] = (DCTELEM)
 800b71e:	f8c9 7008 	str.w	r7, [r9, #8]
    tmp1 -= tmp5;
 800b722:	9b01      	ldr	r3, [sp, #4]
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.068791298));    /* c5 */
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.764581576));    /* c7 */
    tmp0 = tmp1 + tmp2 + tmp3 - MULTIPLY(tmp10, FIX(1.719967871)) /* c7+c5+c3-c1 */
 800b724:	4fbb      	ldr	r7, [pc, #748]	@ (800ba14 <jpeg_fdct_11x11+0x3dc>)
    tmp1 -= tmp5;
 800b726:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
      DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.062335650)) /* c4-c6-c10 */
 800b72a:	9b05      	ldr	r3, [sp, #20]
 800b72c:	ebc2 2242 	rsb	r2, r2, r2, lsl #9
 800b730:	4463      	add	r3, ip
	   + MULTIPLY(tmp14, FIX(0.398430003));          /* c9 */
    tmp4 = MULTIPLY(tmp11 + tmp12, - FIX(0.764581576));  /* -c7 */
    tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.399818907));  /* -c1 */
    tmp1 += tmp4 + tmp5 + MULTIPLY(tmp11, FIX(1.276416582)) /* c9+c7+c1-c3 */
	    - MULTIPLY(tmp14, FIX(1.068791298));         /* c5 */
    tmp10 = MULTIPLY(tmp12 + tmp13, FIX(0.398430003));   /* c9 */
 800b732:	f44f 6c4c 	mov.w	ip, #3264	@ 0xcc0
      DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.062335650)) /* c4-c6-c10 */
 800b736:	441a      	add	r2, r3
 800b738:	4bb7      	ldr	r3, [pc, #732]	@ (800ba18 <jpeg_fdct_11x11+0x3e0>)
 800b73a:	fb03 2301 	mla	r3, r3, r1, r2
 800b73e:	f241 22cd 	movw	r2, #4813	@ 0x12cd
 800b742:	fb02 3300 	mla	r3, r2, r0, r3
    tmp4 = MULTIPLY(tmp11 + tmp12, - FIX(0.764581576));  /* -c7 */
 800b746:	eb08 020e 	add.w	r2, r8, lr
      DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.062335650)) /* c4-c6-c10 */
 800b74a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b74e:	131b      	asrs	r3, r3, #12
    dataptr[4] = (DCTELEM)
 800b750:	f8c9 3010 	str.w	r3, [r9, #16]
      DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.620527200)) /* c2+c4-c6 */
 800b754:	4bb1      	ldr	r3, [pc, #708]	@ (800ba1c <jpeg_fdct_11x11+0x3e4>)
 800b756:	fb03 4405 	mla	r4, r3, r5, r4
 800b75a:	4bb1      	ldr	r3, [pc, #708]	@ (800ba20 <jpeg_fdct_11x11+0x3e8>)
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.068791298));    /* c5 */
 800b75c:	eb0a 050e 	add.w	r5, sl, lr
      DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.620527200)) /* c2+c4-c6 */
 800b760:	fb03 4401 	mla	r4, r3, r1, r4
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.286413905));    /* c3 */
 800b764:	f642 132a 	movw	r3, #10538	@ 0x292a
    tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.399818907));  /* -c1 */
 800b768:	49ae      	ldr	r1, [pc, #696]	@ (800ba24 <jpeg_fdct_11x11+0x3ec>)
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.286413905));    /* c3 */
 800b76a:	435e      	muls	r6, r3
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.068791298));    /* c5 */
 800b76c:	f242 2334 	movw	r3, #8756	@ 0x2234
      DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.620527200)) /* c2+c4-c6 */
 800b770:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.068791298));    /* c5 */
 800b774:	435d      	muls	r5, r3
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.764581576));    /* c7 */
 800b776:	9b02      	ldr	r3, [sp, #8]
      DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.620527200)) /* c2+c4-c6 */
 800b778:	1324      	asrs	r4, r4, #12
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.764581576));    /* c7 */
 800b77a:	eb0a 0003 	add.w	r0, sl, r3
 800b77e:	f641 0377 	movw	r3, #6263	@ 0x1877
    dataptr[6] = (DCTELEM)
 800b782:	f8c9 4018 	str.w	r4, [r9, #24]
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.764581576));    /* c7 */
 800b786:	4358      	muls	r0, r3
    tmp4 = MULTIPLY(tmp11 + tmp12, - FIX(0.764581576));  /* -c7 */
 800b788:	4ba7      	ldr	r3, [pc, #668]	@ (800ba28 <jpeg_fdct_11x11+0x3f0>)
 800b78a:	435a      	muls	r2, r3
    tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.399818907));  /* -c1 */
 800b78c:	9b02      	ldr	r3, [sp, #8]
 800b78e:	4443      	add	r3, r8
 800b790:	434b      	muls	r3, r1
    tmp10 = MULTIPLY(tmp12 + tmp13, FIX(0.398430003));   /* c9 */
 800b792:	9902      	ldr	r1, [sp, #8]
 800b794:	eb0e 0401 	add.w	r4, lr, r1
    tmp0 = tmp1 + tmp2 + tmp3 - MULTIPLY(tmp10, FIX(1.719967871)) /* c7+c5+c3-c1 */
 800b798:	1971      	adds	r1, r6, r5
 800b79a:	4401      	add	r1, r0
    tmp10 = MULTIPLY(tmp12 + tmp13, FIX(0.398430003));   /* c9 */
 800b79c:	fb0c f404 	mul.w	r4, ip, r4
    tmp0 = tmp1 + tmp2 + tmp3 - MULTIPLY(tmp10, FIX(1.719967871)) /* c7+c5+c3-c1 */
 800b7a0:	fb07 110a 	mla	r1, r7, sl, r1
    tmp1 += tmp4 + tmp5 + MULTIPLY(tmp11, FIX(1.276416582)) /* c9+c7+c1-c3 */
 800b7a4:	f642 07d8 	movw	r7, #10456	@ 0x28d8
    tmp0 = tmp1 + tmp2 + tmp3 - MULTIPLY(tmp10, FIX(1.719967871)) /* c7+c5+c3-c1 */
 800b7a8:	fb0c 110b 	mla	r1, ip, fp, r1
    tmp2 += tmp4 + tmp10 - MULTIPLY(tmp12, FIX(1.989053629)) /* c9+c5+c3-c7 */
	    + MULTIPLY(tmp14, FIX(1.399818907));         /* c1 */
    tmp3 += tmp5 + tmp10 + MULTIPLY(tmp13, FIX(1.305598626)) /* c1+c5-c9-c7 */
	    - MULTIPLY(tmp14, FIX(1.286413905));         /* c3 */

    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS-1);
 800b7ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b7b0:	1309      	asrs	r1, r1, #12
 800b7b2:	f8c9 1004 	str.w	r1, [r9, #4]
    tmp1 += tmp4 + tmp5 + MULTIPLY(tmp11, FIX(1.276416582)) /* c9+c7+c1-c3 */
 800b7b6:	18d1      	adds	r1, r2, r3
    tmp2 += tmp4 + tmp10 - MULTIPLY(tmp12, FIX(1.989053629)) /* c9+c5+c3-c7 */
 800b7b8:	4422      	add	r2, r4
    tmp3 += tmp5 + tmp10 + MULTIPLY(tmp13, FIX(1.305598626)) /* c1+c5-c9-c7 */
 800b7ba:	4423      	add	r3, r4
    tmp1 += tmp4 + tmp5 + MULTIPLY(tmp11, FIX(1.276416582)) /* c9+c7+c1-c3 */
 800b7bc:	fb07 1108 	mla	r1, r7, r8, r1
	    - MULTIPLY(tmp14, FIX(1.068791298));         /* c5 */
 800b7c0:	4f9a      	ldr	r7, [pc, #616]	@ (800ba2c <jpeg_fdct_11x11+0x3f4>)
 800b7c2:	fb07 110b 	mla	r1, r7, fp, r1
    tmp1 += tmp4 + tmp5 + MULTIPLY(tmp11, FIX(1.276416582)) /* c9+c7+c1-c3 */
 800b7c6:	4431      	add	r1, r6
    dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS-1);
 800b7c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b7cc:	1309      	asrs	r1, r1, #12
 800b7ce:	f8c9 100c 	str.w	r1, [r9, #12]
    tmp2 += tmp4 + tmp10 - MULTIPLY(tmp12, FIX(1.989053629)) /* c9+c5+c3-c7 */
 800b7d2:	4997      	ldr	r1, [pc, #604]	@ (800ba30 <jpeg_fdct_11x11+0x3f8>)
 800b7d4:	fb01 220e 	mla	r2, r1, lr, r2
	    + MULTIPLY(tmp14, FIX(1.399818907));         /* c1 */
 800b7d8:	f642 41cb 	movw	r1, #11467	@ 0x2ccb
 800b7dc:	fb01 220b 	mla	r2, r1, fp, r2
    tmp3 += tmp5 + tmp10 + MULTIPLY(tmp13, FIX(1.305598626)) /* c1+c5-c9-c7 */
 800b7e0:	9902      	ldr	r1, [sp, #8]
    tmp2 += tmp4 + tmp10 - MULTIPLY(tmp12, FIX(1.989053629)) /* c9+c5+c3-c7 */
 800b7e2:	442a      	add	r2, r5
    dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS-1);
 800b7e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b7e8:	1312      	asrs	r2, r2, #12
 800b7ea:	f8c9 2014 	str.w	r2, [r9, #20]
    tmp3 += tmp5 + tmp10 + MULTIPLY(tmp13, FIX(1.305598626)) /* c1+c5-c9-c7 */
 800b7ee:	f642 12c7 	movw	r2, #10695	@ 0x29c7
 800b7f2:	fb02 3301 	mla	r3, r2, r1, r3
	    - MULTIPLY(tmp14, FIX(1.286413905));         /* c3 */
 800b7f6:	4a8f      	ldr	r2, [pc, #572]	@ (800ba34 <jpeg_fdct_11x11+0x3fc>)
 800b7f8:	fb02 330b 	mla	r3, r2, fp, r3
    tmp3 += tmp5 + tmp10 + MULTIPLY(tmp13, FIX(1.305598626)) /* c1+c5-c9-c7 */
 800b7fc:	4403      	add	r3, r0
    dataptr[7] = (DCTELEM) DESCALE(tmp3, CONST_BITS-1);
 800b7fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b802:	131b      	asrs	r3, r3, #12
 800b804:	f8c9 301c 	str.w	r3, [r9, #28]

    ctr++;
 800b808:	9b00      	ldr	r3, [sp, #0]
 800b80a:	3301      	adds	r3, #1

    if (ctr != DCTSIZE) {
 800b80c:	2b08      	cmp	r3, #8
    ctr++;
 800b80e:	9300      	str	r3, [sp, #0]
    if (ctr != DCTSIZE) {
 800b810:	d004      	beq.n	800b81c <jpeg_fdct_11x11+0x1e4>
      if (ctr == 11)
 800b812:	2b0b      	cmp	r3, #11
 800b814:	d005      	beq.n	800b822 <jpeg_fdct_11x11+0x1ea>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 800b816:	f109 0920 	add.w	r9, r9, #32
 800b81a:	e716      	b.n	800b64a <jpeg_fdct_11x11+0x12>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 800b81c:	f10d 0920 	add.w	r9, sp, #32
 800b820:	e713      	b.n	800b64a <jpeg_fdct_11x11+0x12>
 800b822:	9b04      	ldr	r3, [sp, #16]
 800b824:	1f1a      	subs	r2, r3, #4
 800b826:	331c      	adds	r3, #28
 800b828:	9306      	str	r3, [sp, #24]
   * fold into the constant multipliers and final/initial shifting:
   * cK now represents sqrt(2) * cos(K*pi/22) * 128/121.
   */

  dataptr = data;
  wsptr = workspace;
 800b82a:	ab08      	add	r3, sp, #32
 800b82c:	9303      	str	r3, [sp, #12]
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*2];
 800b82e:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b832:	9b03      	ldr	r3, [sp, #12]
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*7];
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*6];
    tmp5 = dataptr[DCTSIZE*5];

    tmp10 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*2];
    tmp11 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*1];
 800b834:	6a15      	ldr	r5, [r2, #32]
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*2];
 800b836:	f8d3 a040 	ldr.w	sl, [r3, #64]	@ 0x40
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*1];
 800b83a:	f8d3 9020 	ldr.w	r9, [r3, #32]
 800b83e:	6a13      	ldr	r3, [r2, #32]
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*2];
 800b840:	eb0b 0c0a 	add.w	ip, fp, sl
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*7];
 800b844:	f8d2 e060 	ldr.w	lr, [r2, #96]	@ 0x60
    tmp10 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*2];
 800b848:	ebab 0a0a 	sub.w	sl, fp, sl
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*1];
 800b84c:	444b      	add	r3, r9
    tmp11 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*1];
 800b84e:	eba5 0909 	sub.w	r9, r5, r9
    tmp12 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*0];
 800b852:	6c15      	ldr	r5, [r2, #64]	@ 0x40
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*1];
 800b854:	9300      	str	r3, [sp, #0]
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*0];
 800b856:	9b03      	ldr	r3, [sp, #12]
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*6];
 800b858:	f8d2 7080 	ldr.w	r7, [r2, #128]	@ 0x80
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*0];
 800b85c:	f853 8b04 	ldr.w	r8, [r3], #4
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*6];
 800b860:	f8d2 60c0 	ldr.w	r6, [r2, #192]	@ 0xc0
    tmp12 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*0];
 800b864:	eba5 0b08 	sub.w	fp, r5, r8
    tmp13 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*7];
 800b868:	f8d2 50e0 	ldr.w	r5, [r2, #224]	@ 0xe0
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*0];
 800b86c:	9303      	str	r3, [sp, #12]
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*6];
 800b86e:	19bc      	adds	r4, r7, r6
    tmp13 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*7];
 800b870:	ebae 0505 	sub.w	r5, lr, r5
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*0];
 800b874:	6c13      	ldr	r3, [r2, #64]	@ 0x40
    tmp5 = dataptr[DCTSIZE*5];
 800b876:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
    tmp13 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*7];
 800b87a:	9501      	str	r5, [sp, #4]
    tmp14 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*6];
 800b87c:	1bbd      	subs	r5, r7, r6
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*0];
 800b87e:	eb03 0008 	add.w	r0, r3, r8
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*7];
 800b882:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    tmp14 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*6];
 800b886:	9502      	str	r5, [sp, #8]

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5,
 800b888:	f242 17da 	movw	r7, #8666	@ 0x21da
 800b88c:	9d00      	ldr	r5, [sp, #0]
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*7];
 800b88e:	4473      	add	r3, lr
    tmp1 -= tmp5;
    tmp2 -= tmp5;
    tmp3 -= tmp5;
    tmp4 -= tmp5;
    z1 = MULTIPLY(tmp0 + tmp3, FIX(1.435427942)) +       /* c2 */
	 MULTIPLY(tmp2 + tmp4, FIX(0.212906922));        /* c10 */
 800b890:	f44f 68da 	mov.w	r8, #1744	@ 0x6d0
      DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5,
 800b894:	eb0c 0605 	add.w	r6, ip, r5
    tmp3 -= tmp5;
 800b898:	eba3 0541 	sub.w	r5, r3, r1, lsl #1
      DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5,
 800b89c:	4406      	add	r6, r0
    tmp2 -= tmp5;
 800b89e:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
    tmp3 -= tmp5;
 800b8a2:	9504      	str	r5, [sp, #16]
      DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5,
 800b8a4:	441e      	add	r6, r3
 800b8a6:	4426      	add	r6, r4
    tmp4 -= tmp5;
 800b8a8:	eba4 0441 	sub.w	r4, r4, r1, lsl #1
      DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5,
 800b8ac:	440e      	add	r6, r1
 800b8ae:	437e      	muls	r6, r7
    tmp0 -= tmp5;
 800b8b0:	ebac 0741 	sub.w	r7, ip, r1, lsl #1
      DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5,
 800b8b4:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
    z1 = MULTIPLY(tmp0 + tmp3, FIX(1.435427942)) +       /* c2 */
 800b8b8:	eb07 0e05 	add.w	lr, r7, r5
    z2 = MULTIPLY(tmp1 - tmp3, FIX(0.979689713));        /* c6 */
 800b8bc:	9d00      	ldr	r5, [sp, #0]
      DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5,
 800b8be:	13f6      	asrs	r6, r6, #15
    z2 = MULTIPLY(tmp1 - tmp3, FIX(0.979689713));        /* c6 */
 800b8c0:	1aeb      	subs	r3, r5, r3
    dataptr[DCTSIZE*0] = (DCTELEM)
 800b8c2:	6016      	str	r6, [r2, #0]
	 MULTIPLY(tmp2 + tmp4, FIX(0.212906922));        /* c10 */
 800b8c4:	1906      	adds	r6, r0, r4
 800b8c6:	fb08 f606 	mul.w	r6, r8, r6
    z1 = MULTIPLY(tmp0 + tmp3, FIX(1.435427942)) +       /* c2 */
 800b8ca:	f642 58ef 	movw	r8, #11759	@ 0x2def
 800b8ce:	fb08 660e 	mla	r6, r8, lr, r6
    z2 = MULTIPLY(tmp1 - tmp3, FIX(0.979689713));        /* c6 */
 800b8d2:	f641 7e5a 	movw	lr, #8026	@ 0x1f5a
    z3 = MULTIPLY(tmp0 - tmp1, FIX(1.258538479));        /* c4 */
 800b8d6:	ebac 0805 	sub.w	r8, ip, r5
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.077210542)) /* c2+c8-c6 */
 800b8da:	9d04      	ldr	r5, [sp, #16]
    z2 = MULTIPLY(tmp1 - tmp3, FIX(0.979689713));        /* c6 */
 800b8dc:	fb0e f303 	mul.w	r3, lr, r3
    z3 = MULTIPLY(tmp0 - tmp1, FIX(1.258538479));        /* c4 */
 800b8e0:	f642 0e46 	movw	lr, #10310	@ 0x2846
	   + MULTIPLY(tmp14, FIX(0.421479672));          /* c9 */
    tmp4 = MULTIPLY(tmp11 + tmp12, - FIX(0.808813568));  /* -c7 */
    tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.480800167));  /* -c1 */
    tmp1 += tmp4 + tmp5 + MULTIPLY(tmp11, FIX(1.350258864)) /* c9+c7+c1-c3 */
	    - MULTIPLY(tmp14, FIX(1.130622199));         /* c5 */
    tmp10 = MULTIPLY(tmp12 + tmp13, FIX(0.421479672));   /* c9 */
 800b8e4:	f640 5c7d 	movw	ip, #3453	@ 0xd7d
    z2 = MULTIPLY(tmp1 - tmp3, FIX(0.979689713));        /* c6 */
 800b8e8:	9305      	str	r3, [sp, #20]
      DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.077210542)) /* c2+c8-c6 */
 800b8ea:	9b05      	ldr	r3, [sp, #20]
    z3 = MULTIPLY(tmp0 - tmp1, FIX(1.258538479));        /* c4 */
 800b8ec:	fb0e f808 	mul.w	r8, lr, r8
      DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.077210542)) /* c2+c8-c6 */
 800b8f0:	eb06 0e03 	add.w	lr, r6, r3
 800b8f4:	4b50      	ldr	r3, [pc, #320]	@ (800ba38 <jpeg_fdct_11x11+0x400>)
      DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.714276708)) /* c2+c4-c6 */
 800b8f6:	4446      	add	r6, r8
      DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.077210542)) /* c2+c8-c6 */
 800b8f8:	fb03 ee05 	mla	lr, r3, r5, lr
 800b8fc:	f6a3 439d 	subw	r3, r3, #3229	@ 0xc9d
      DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.065941844)) /* c4-c6-c10 */
 800b900:	f44f 7507 	mov.w	r5, #540	@ 0x21c
      DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.077210542)) /* c2+c8-c6 */
 800b904:	fb03 ee04 	mla	lr, r3, r4, lr
    tmp1 -= tmp5;
 800b908:	9b00      	ldr	r3, [sp, #0]
 800b90a:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
      DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.065941844)) /* c4-c6-c10 */
 800b90e:	9b05      	ldr	r3, [sp, #20]
      DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.077210542)) /* c2+c8-c6 */
 800b910:	f50e 4e80 	add.w	lr, lr, #16384	@ 0x4000
      DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.065941844)) /* c4-c6-c10 */
 800b914:	4443      	add	r3, r8
      DESCALE(z1 + z2 - MULTIPLY(tmp3, FIX(1.077210542)) /* c2+c8-c6 */
 800b916:	ea4f 3eee 	mov.w	lr, lr, asr #15
      DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.065941844)) /* c4-c6-c10 */
 800b91a:	fb05 3301 	mla	r3, r5, r1, r3
 800b91e:	4947      	ldr	r1, [pc, #284]	@ (800ba3c <jpeg_fdct_11x11+0x404>)
    dataptr[DCTSIZE*2] = (DCTELEM)
 800b920:	f8c2 e040 	str.w	lr, [r2, #64]	@ 0x40
      DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.065941844)) /* c4-c6-c10 */
 800b924:	fb01 3300 	mla	r3, r1, r0, r3
 800b928:	f241 31e3 	movw	r1, #5091	@ 0x13e3
 800b92c:	fb01 3304 	mla	r3, r1, r4, r3
    tmp4 = MULTIPLY(tmp11 + tmp12, - FIX(0.808813568));  /* -c7 */
 800b930:	eb09 010b 	add.w	r1, r9, fp
      DESCALE(z2 + z3 + MULTIPLY(tmp1, FIX(0.065941844)) /* c4-c6-c10 */
 800b934:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b938:	13db      	asrs	r3, r3, #15
    dataptr[DCTSIZE*4] = (DCTELEM)
 800b93a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.714276708)) /* c2+c4-c6 */
 800b93e:	4b40      	ldr	r3, [pc, #256]	@ (800ba40 <jpeg_fdct_11x11+0x408>)
 800b940:	fb03 6607 	mla	r6, r3, r7, r6
 800b944:	4b3f      	ldr	r3, [pc, #252]	@ (800ba44 <jpeg_fdct_11x11+0x40c>)
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.360834544));    /* c3 */
 800b946:	eb0a 0709 	add.w	r7, sl, r9
      DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.714276708)) /* c2+c4-c6 */
 800b94a:	fb03 6600 	mla	r6, r3, r0, r6
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.360834544));    /* c3 */
 800b94e:	f642 338c 	movw	r3, #11148	@ 0x2b8c
    tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.480800167));  /* -c1 */
 800b952:	483d      	ldr	r0, [pc, #244]	@ (800ba48 <jpeg_fdct_11x11+0x410>)
      DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.714276708)) /* c2+c4-c6 */
 800b954:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.360834544));    /* c3 */
 800b958:	435f      	muls	r7, r3
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.130622199));    /* c5 */
 800b95a:	f242 432e 	movw	r3, #9262	@ 0x242e
      DESCALE(z1 + z3 - MULTIPLY(tmp0, FIX(1.714276708)) /* c2+c4-c6 */
 800b95e:	13f6      	asrs	r6, r6, #15
    dataptr[DCTSIZE*6] = (DCTELEM)
 800b960:	f8c2 60c0 	str.w	r6, [r2, #192]	@ 0xc0
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.130622199));    /* c5 */
 800b964:	eb0a 060b 	add.w	r6, sl, fp
 800b968:	435e      	muls	r6, r3
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.808813568));    /* c7 */
 800b96a:	9b01      	ldr	r3, [sp, #4]
 800b96c:	eb0a 0403 	add.w	r4, sl, r3
 800b970:	f641 13e2 	movw	r3, #6626	@ 0x19e2
 800b974:	435c      	muls	r4, r3
    tmp4 = MULTIPLY(tmp11 + tmp12, - FIX(0.808813568));  /* -c7 */
 800b976:	4b35      	ldr	r3, [pc, #212]	@ (800ba4c <jpeg_fdct_11x11+0x414>)
 800b978:	fb03 fe01 	mul.w	lr, r3, r1
    tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.480800167));  /* -c1 */
 800b97c:	9b01      	ldr	r3, [sp, #4]
	    - MULTIPLY(tmp14, FIX(1.130622199));         /* c5 */
 800b97e:	4934      	ldr	r1, [pc, #208]	@ (800ba50 <jpeg_fdct_11x11+0x418>)
    tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.480800167));  /* -c1 */
 800b980:	444b      	add	r3, r9
 800b982:	fb00 f803 	mul.w	r8, r0, r3
    tmp10 = MULTIPLY(tmp12 + tmp13, FIX(0.421479672));   /* c9 */
 800b986:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + tmp2 + tmp3 - MULTIPLY(tmp10, FIX(1.819470145)) /* c7+c5+c3-c1 */
 800b988:	4b32      	ldr	r3, [pc, #200]	@ (800ba54 <jpeg_fdct_11x11+0x41c>)
    tmp10 = MULTIPLY(tmp12 + tmp13, FIX(0.421479672));   /* c9 */
 800b98a:	eb0b 0500 	add.w	r5, fp, r0
    tmp0 = tmp1 + tmp2 + tmp3 - MULTIPLY(tmp10, FIX(1.819470145)) /* c7+c5+c3-c1 */
 800b98e:	19b8      	adds	r0, r7, r6
 800b990:	4420      	add	r0, r4
    tmp10 = MULTIPLY(tmp12 + tmp13, FIX(0.421479672));   /* c9 */
 800b992:	fb0c f505 	mul.w	r5, ip, r5
    tmp0 = tmp1 + tmp2 + tmp3 - MULTIPLY(tmp10, FIX(1.819470145)) /* c7+c5+c3-c1 */
 800b996:	fb03 000a 	mla	r0, r3, sl, r0
 800b99a:	9b02      	ldr	r3, [sp, #8]
 800b99c:	fb0c 0003 	mla	r0, ip, r3, r0
    tmp1 += tmp4 + tmp5 + MULTIPLY(tmp11, FIX(1.350258864)) /* c9+c7+c1-c3 */
 800b9a0:	f642 3c35 	movw	ip, #11061	@ 0x2b35
    tmp2 += tmp4 + tmp10 - MULTIPLY(tmp12, FIX(2.104122847)) /* c9+c5+c3-c7 */
	    + MULTIPLY(tmp14, FIX(1.480800167));         /* c1 */
    tmp3 += tmp5 + tmp10 + MULTIPLY(tmp13, FIX(1.381129125)) /* c1+c5-c9-c7 */
	    - MULTIPLY(tmp14, FIX(1.360834544));         /* c3 */

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+2);
 800b9a4:	f500 4080 	add.w	r0, r0, #16384	@ 0x4000
 800b9a8:	13c0      	asrs	r0, r0, #15
 800b9aa:	6210      	str	r0, [r2, #32]
    tmp1 += tmp4 + tmp5 + MULTIPLY(tmp11, FIX(1.350258864)) /* c9+c7+c1-c3 */
 800b9ac:	eb0e 0008 	add.w	r0, lr, r8
 800b9b0:	fb0c 0009 	mla	r0, ip, r9, r0
	    - MULTIPLY(tmp14, FIX(1.130622199));         /* c5 */
 800b9b4:	fb01 0003 	mla	r0, r1, r3, r0
    tmp2 += tmp4 + tmp10 - MULTIPLY(tmp12, FIX(2.104122847)) /* c9+c5+c3-c7 */
 800b9b8:	eb0e 0105 	add.w	r1, lr, r5
    tmp1 += tmp4 + tmp5 + MULTIPLY(tmp11, FIX(1.350258864)) /* c9+c7+c1-c3 */
 800b9bc:	4438      	add	r0, r7
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+2);
 800b9be:	f500 4080 	add.w	r0, r0, #16384	@ 0x4000
 800b9c2:	13c0      	asrs	r0, r0, #15
 800b9c4:	6610      	str	r0, [r2, #96]	@ 0x60
    tmp2 += tmp4 + tmp10 - MULTIPLY(tmp12, FIX(2.104122847)) /* c9+c5+c3-c7 */
 800b9c6:	4824      	ldr	r0, [pc, #144]	@ (800ba58 <jpeg_fdct_11x11+0x420>)
 800b9c8:	fb00 110b 	mla	r1, r0, fp, r1
	    + MULTIPLY(tmp14, FIX(1.480800167));         /* c1 */
 800b9cc:	f642 7063 	movw	r0, #12131	@ 0x2f63
 800b9d0:	fb00 1103 	mla	r1, r0, r3, r1
    tmp3 += tmp5 + tmp10 + MULTIPLY(tmp13, FIX(1.381129125)) /* c1+c5-c9-c7 */
 800b9d4:	9801      	ldr	r0, [sp, #4]
 800b9d6:	eb08 0305 	add.w	r3, r8, r5
    tmp2 += tmp4 + tmp10 - MULTIPLY(tmp12, FIX(2.104122847)) /* c9+c5+c3-c7 */
 800b9da:	4431      	add	r1, r6
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+2);
 800b9dc:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
 800b9e0:	13c9      	asrs	r1, r1, #15
 800b9e2:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
    tmp3 += tmp5 + tmp10 + MULTIPLY(tmp13, FIX(1.381129125)) /* c1+c5-c9-c7 */
 800b9e6:	f642 4132 	movw	r1, #11314	@ 0x2c32
 800b9ea:	fb01 3300 	mla	r3, r1, r0, r3
	    - MULTIPLY(tmp14, FIX(1.360834544));         /* c3 */
 800b9ee:	491b      	ldr	r1, [pc, #108]	@ (800ba5c <jpeg_fdct_11x11+0x424>)
 800b9f0:	9802      	ldr	r0, [sp, #8]
 800b9f2:	fb01 3300 	mla	r3, r1, r0, r3
    tmp3 += tmp5 + tmp10 + MULTIPLY(tmp13, FIX(1.381129125)) /* c1+c5-c9-c7 */
 800b9f6:	4423      	add	r3, r4
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3, CONST_BITS+2);
 800b9f8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b9fc:	13db      	asrs	r3, r3, #15
 800b9fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800ba02:	9b06      	ldr	r3, [sp, #24]
 800ba04:	4293      	cmp	r3, r2
 800ba06:	f47f af12 	bne.w	800b82e <jpeg_fdct_11x11+0x1f6>

    dataptr++;			/* advance pointer to next column */
    wsptr++;			/* advance pointer to next column */
  }
}
 800ba0a:	b021      	add	sp, #132	@ 0x84
 800ba0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba10:	ffffdf6a 	.word	0xffffdf6a
 800ba14:	ffffc8f6 	.word	0xffffc8f6
 800ba18:	ffffd494 	.word	0xffffd494
 800ba1c:	ffffcc25 	.word	0xffffcc25
 800ba20:	ffffe6c3 	.word	0xffffe6c3
 800ba24:	ffffd335 	.word	0xffffd335
 800ba28:	ffffe789 	.word	0xffffe789
 800ba2c:	ffffddcc 	.word	0xffffddcc
 800ba30:	ffffc05a 	.word	0xffffc05a
 800ba34:	ffffd6d6 	.word	0xffffd6d6
 800ba38:	ffffdd87 	.word	0xffffdd87
 800ba3c:	ffffd211 	.word	0xffffd211
 800ba40:	ffffc925 	.word	0xffffc925
 800ba44:	ffffe54d 	.word	0xffffe54d
 800ba48:	ffffd09d 	.word	0xffffd09d
 800ba4c:	ffffe61e 	.word	0xffffe61e
 800ba50:	ffffdbd2 	.word	0xffffdbd2
 800ba54:	ffffc5c7 	.word	0xffffc5c7
 800ba58:	ffffbcab 	.word	0xffffbcab
 800ba5c:	ffffd474 	.word	0xffffd474

0800ba60 <jpeg_fdct_12x12>:
 * Perform the forward DCT on a 12x12 sample block.
 */

GLOBAL(void)
jpeg_fdct_12x12 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800ba60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT. */
  /* cK represents sqrt(2) * cos(K*pi/24). */

  dataptr = data;
 800ba64:	4684      	mov	ip, r0
{
 800ba66:	b0ad      	sub	sp, #180	@ 0xb4
  ctr = 0;
 800ba68:	f04f 0900 	mov.w	r9, #0
{
 800ba6c:	9001      	str	r0, [sp, #4]
 800ba6e:	e9cd 210a 	strd	r2, r1, [sp, #40]	@ 0x28
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 800ba72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[11]);
 800ba74:	990a      	ldr	r1, [sp, #40]	@ 0x28
    elemptr = sample_data[ctr] + start_col;
 800ba76:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    dataptr[1] = (DCTELEM) DESCALE(tmp10, CONST_BITS);
    dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS);
    dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS);
    dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS);

    ctr++;
 800ba7a:	f109 0901 	add.w	r9, r9, #1
    elemptr = sample_data[ctr] + start_col;
 800ba7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28

    if (ctr != DCTSIZE) {
 800ba80:	f1b9 0f08 	cmp.w	r9, #8
    elemptr = sample_data[ctr] + start_col;
 800ba84:	4413      	add	r3, r2
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[11]);
 800ba86:	5c52      	ldrb	r2, [r2, r1]
 800ba88:	9200      	str	r2, [sp, #0]
 800ba8a:	7ada      	ldrb	r2, [r3, #11]
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[6]);
 800ba8c:	795d      	ldrb	r5, [r3, #5]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[11]);
 800ba8e:	9202      	str	r2, [sp, #8]
 800ba90:	9902      	ldr	r1, [sp, #8]
 800ba92:	9a00      	ldr	r2, [sp, #0]
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[6]);
 800ba94:	9506      	str	r5, [sp, #24]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[11]);
 800ba96:	eb02 0b01 	add.w	fp, r2, r1
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[10]);
 800ba9a:	785a      	ldrb	r2, [r3, #1]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[9]);
 800ba9c:	f893 8002 	ldrb.w	r8, [r3, #2]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[10]);
 800baa0:	9203      	str	r2, [sp, #12]
 800baa2:	7a9a      	ldrb	r2, [r3, #10]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[7]);
 800baa4:	79de      	ldrb	r6, [r3, #7]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[10]);
 800baa6:	9204      	str	r2, [sp, #16]
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[6]);
 800baa8:	799d      	ldrb	r5, [r3, #6]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[9]);
 800baaa:	f893 e009 	ldrb.w	lr, [r3, #9]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[8]);
 800baae:	7a1f      	ldrb	r7, [r3, #8]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[7]);
 800bab0:	7918      	ldrb	r0, [r3, #4]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[10]);
 800bab2:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[7]);
 800bab6:	eb00 0406 	add.w	r4, r0, r6
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[7]);
 800baba:	eba0 0006 	sub.w	r0, r0, r6
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[10]);
 800babe:	440a      	add	r2, r1
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[9]);
 800bac0:	eb08 010e 	add.w	r1, r8, lr
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[9]);
 800bac4:	eba8 0e0e 	sub.w	lr, r8, lr
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.580774953)) /* c5+c7-c1 */
 800bac8:	f44f 68bd 	mov.w	r8, #1512	@ 0x5e8
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[10]);
 800bacc:	9207      	str	r2, [sp, #28]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[8]);
 800bace:	78da      	ldrb	r2, [r3, #3]
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[6]);
 800bad0:	9b06      	ldr	r3, [sp, #24]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[8]);
 800bad2:	9205      	str	r2, [sp, #20]
 800bad4:	443a      	add	r2, r7
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[6]);
 800bad6:	eb03 0a05 	add.w	sl, r3, r5
    tmp10 = tmp0 + tmp5;
 800bada:	eb0b 030a 	add.w	r3, fp, sl
    tmp13 = tmp0 - tmp5;
 800bade:	ebab 0b0a 	sub.w	fp, fp, sl
    tmp12 = tmp2 + tmp3;
 800bae2:	eb01 0a02 	add.w	sl, r1, r2
    tmp15 = tmp2 - tmp3;
 800bae6:	eba1 0102 	sub.w	r1, r1, r2
    tmp10 = tmp0 + tmp5;
 800baea:	9308      	str	r3, [sp, #32]
    tmp14 = tmp1 - tmp4;
 800baec:	9b07      	ldr	r3, [sp, #28]
 800baee:	eba3 0304 	sub.w	r3, r3, r4
 800baf2:	9309      	str	r3, [sp, #36]	@ 0x24
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[11]);
 800baf4:	9b00      	ldr	r3, [sp, #0]
 800baf6:	9a02      	ldr	r2, [sp, #8]
 800baf8:	eba3 0302 	sub.w	r3, r3, r2
 800bafc:	9300      	str	r3, [sp, #0]
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[10]);
 800bafe:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800bb02:	eba3 0302 	sub.w	r3, r3, r2
 800bb06:	9302      	str	r3, [sp, #8]
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[8]);
 800bb08:	9b05      	ldr	r3, [sp, #20]
 800bb0a:	eba3 0707 	sub.w	r7, r3, r7
    tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[6]);
 800bb0e:	9b06      	ldr	r3, [sp, #24]
 800bb10:	eba3 0205 	sub.w	r2, r3, r5
    tmp11 = tmp1 + tmp4;
 800bb14:	9b07      	ldr	r3, [sp, #28]
    tmp14 = tmp10 + MULTIPLY(tmp1, FIX_0_765366865);   /* c3-c9 */
 800bb16:	f641 057e 	movw	r5, #6270	@ 0x187e
    tmp11 = tmp1 + tmp4;
 800bb1a:	441c      	add	r4, r3
    dataptr[0] = (DCTELEM) (tmp10 + tmp11 + tmp12 - 12 * CENTERJSAMPLE);
 800bb1c:	9b08      	ldr	r3, [sp, #32]
 800bb1e:	441c      	add	r4, r3
    dataptr[6] = (DCTELEM) (tmp13 - tmp14 - tmp15);
 800bb20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    dataptr[0] = (DCTELEM) (tmp10 + tmp11 + tmp12 - 12 * CENTERJSAMPLE);
 800bb22:	4454      	add	r4, sl
 800bb24:	f5a4 64c0 	sub.w	r4, r4, #1536	@ 0x600
 800bb28:	f8cc 4000 	str.w	r4, [ip]
    dataptr[6] = (DCTELEM) (tmp13 - tmp14 - tmp15);
 800bb2c:	ebab 0403 	sub.w	r4, fp, r3
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.224744871)), /* c4 */
 800bb30:	9b08      	ldr	r3, [sp, #32]
      DESCALE(tmp14 - tmp15 + MULTIPLY(tmp13 + tmp15, FIX(1.366025404)), /* c2 */
 800bb32:	448b      	add	fp, r1
    dataptr[6] = (DCTELEM) (tmp13 - tmp14 - tmp15);
 800bb34:	eba4 0401 	sub.w	r4, r4, r1
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.224744871)), /* c4 */
 800bb38:	eba3 030a 	sub.w	r3, r3, sl
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.860918669));   /* c7 */
 800bb3c:	f641 3a8d 	movw	sl, #7053	@ 0x1b8d
    dataptr[6] = (DCTELEM) (tmp13 - tmp14 - tmp15);
 800bb40:	f8cc 4018 	str.w	r4, [ip, #24]
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.224744871)), /* c4 */
 800bb44:	f242 7431 	movw	r4, #10033	@ 0x2731
 800bb48:	fb04 f303 	mul.w	r3, r4, r3
 800bb4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb50:	ea4f 3363 	mov.w	r3, r3, asr #13
    dataptr[4] = (DCTELEM)
 800bb54:	f8cc 3010 	str.w	r3, [ip, #16]
      DESCALE(tmp14 - tmp15 + MULTIPLY(tmp13 + tmp15, FIX(1.366025404)), /* c2 */
 800bb58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb5a:	eba3 0301 	sub.w	r3, r3, r1
 800bb5e:	f642 31b6 	movw	r1, #11190	@ 0x2bb6
 800bb62:	fb01 330b 	mla	r3, r1, fp, r3
    tmp10 = MULTIPLY(tmp1 + tmp4, FIX_0_541196100);    /* c9 */
 800bb66:	f241 1151 	movw	r1, #4433	@ 0x1151
      DESCALE(tmp14 - tmp15 + MULTIPLY(tmp13 + tmp15, FIX(1.366025404)), /* c2 */
 800bb6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb6e:	ea4f 3363 	mov.w	r3, r3, asr #13
    dataptr[2] = (DCTELEM)
 800bb72:	f8cc 3008 	str.w	r3, [ip, #8]
    tmp10 = MULTIPLY(tmp1 + tmp4, FIX_0_541196100);    /* c9 */
 800bb76:	9b02      	ldr	r3, [sp, #8]
 800bb78:	4403      	add	r3, r0
 800bb7a:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 = tmp10 + MULTIPLY(tmp1, FIX_0_765366865);   /* c3-c9 */
 800bb7e:	9902      	ldr	r1, [sp, #8]
 800bb80:	fb05 3501 	mla	r5, r5, r1, r3
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX_1_847759065);   /* c3+c9 */
 800bb84:	499b      	ldr	r1, [pc, #620]	@ (800bdf4 <jpeg_fdct_12x12+0x394>)
 800bb86:	fb01 3b00 	mla	fp, r1, r0, r3
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.121971054));   /* c5 */
 800bb8a:	9900      	ldr	r1, [sp, #0]
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.184591911)); /* -c11 */
 800bb8c:	489a      	ldr	r0, [pc, #616]	@ (800bdf8 <jpeg_fdct_12x12+0x398>)
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.121971054));   /* c5 */
 800bb8e:	eb01 060e 	add.w	r6, r1, lr
 800bb92:	f242 31e7 	movw	r1, #9191	@ 0x23e7
 800bb96:	fb01 f606 	mul.w	r6, r1, r6
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.860918669));   /* c7 */
 800bb9a:	9900      	ldr	r1, [sp, #0]
 800bb9c:	eb01 0407 	add.w	r4, r1, r7
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.184591911)); /* -c11 */
 800bba0:	eb0e 0107 	add.w	r1, lr, r7
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.860918669));   /* c7 */
 800bba4:	fb0a f404 	mul.w	r4, sl, r4
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.184591911)); /* -c11 */
 800bba8:	fb00 f301 	mul.w	r3, r0, r1
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.580774953)) /* c5+c7-c1 */
 800bbac:	4993      	ldr	r1, [pc, #588]	@ (800bdfc <jpeg_fdct_12x12+0x39c>)
 800bbae:	eb06 0004 	add.w	r0, r6, r4
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.184591911)); /* -c11 */
 800bbb2:	9302      	str	r3, [sp, #8]
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.580774953)) /* c5+c7-c1 */
 800bbb4:	4428      	add	r0, r5
 800bbb6:	9b00      	ldr	r3, [sp, #0]
 800bbb8:	fb01 0003 	mla	r0, r1, r3, r0
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.339493912)) /* c1+c5-c11 */
 800bbbc:	4990      	ldr	r1, [pc, #576]	@ (800be00 <jpeg_fdct_12x12+0x3a0>)
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.580774953)) /* c5+c7-c1 */
 800bbbe:	fb08 0002 	mla	r0, r8, r2, r0
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.306562965)) /* c3 */
 800bbc2:	f642 18cf 	movw	r8, #10703	@ 0x29cf
    dataptr[1] = (DCTELEM) DESCALE(tmp10, CONST_BITS);
 800bbc6:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 800bbca:	ea4f 3060 	mov.w	r0, r0, asr #13
 800bbce:	f8cc 0004 	str.w	r0, [ip, #4]
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.306562965)) /* c3 */
 800bbd2:	eba3 0007 	sub.w	r0, r3, r7
 800bbd6:	4b8b      	ldr	r3, [pc, #556]	@ (800be04 <jpeg_fdct_12x12+0x3a4>)
 800bbd8:	fb08 b000 	mla	r0, r8, r0, fp
	    - MULTIPLY(tmp2 + tmp5, FIX_0_541196100);  /* c9 */
 800bbdc:	eb0e 0802 	add.w	r8, lr, r2
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.306562965)) /* c3 */
 800bbe0:	fb03 0008 	mla	r0, r3, r8, r0
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.339493912)) /* c1+c5-c11 */
 800bbe4:	9b02      	ldr	r3, [sp, #8]
 800bbe6:	eba3 030b 	sub.w	r3, r3, fp
    dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS);
 800bbea:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.339493912)) /* c1+c5-c11 */
 800bbee:	fb01 330e 	mla	r3, r1, lr, r3
    dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS);
 800bbf2:	ea4f 3060 	mov.w	r0, r0, asr #13
	    + MULTIPLY(tmp5, FIX(0.860918669));        /* c7 */
 800bbf6:	fb0a 3302 	mla	r3, sl, r2, r3
    dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS);
 800bbfa:	f8cc 000c 	str.w	r0, [ip, #12]
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.339493912)) /* c1+c5-c11 */
 800bbfe:	4433      	add	r3, r6
    dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS);
 800bc00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc04:	ea4f 3363 	mov.w	r3, r3, asr #13
 800bc08:	f8cc 3014 	str.w	r3, [ip, #20]
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.725788011)) /* c1+c11-c7 */
 800bc0c:	9b02      	ldr	r3, [sp, #8]
 800bc0e:	eba3 0105 	sub.w	r1, r3, r5
 800bc12:	f241 733a 	movw	r3, #5946	@ 0x173a
 800bc16:	fb03 1107 	mla	r1, r3, r7, r1
	    - MULTIPLY(tmp5, FIX(1.121971054));        /* c5 */
 800bc1a:	4b7b      	ldr	r3, [pc, #492]	@ (800be08 <jpeg_fdct_12x12+0x3a8>)
 800bc1c:	fb03 1102 	mla	r1, r3, r2, r1
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.725788011)) /* c1+c11-c7 */
 800bc20:	4421      	add	r1, r4
    dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS);
 800bc22:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800bc26:	ea4f 3161 	mov.w	r1, r1, asr #13
 800bc2a:	f8cc 101c 	str.w	r1, [ip, #28]
    if (ctr != DCTSIZE) {
 800bc2e:	d005      	beq.n	800bc3c <jpeg_fdct_12x12+0x1dc>
      if (ctr == 12)
 800bc30:	f1b9 0f0c 	cmp.w	r9, #12
 800bc34:	d005      	beq.n	800bc42 <jpeg_fdct_12x12+0x1e2>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 800bc36:	f10c 0c20 	add.w	ip, ip, #32
 800bc3a:	e71a      	b.n	800ba72 <jpeg_fdct_12x12+0x12>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 800bc3c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800bc40:	e717      	b.n	800ba72 <jpeg_fdct_12x12+0x12>
 800bc42:	9b01      	ldr	r3, [sp, #4]
   * fold into the constant multipliers and final shifting:
   * cK now represents sqrt(2) * cos(K*pi/24) * 8/9.
   */

  dataptr = data;
  wsptr = workspace;
 800bc44:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 800bc48:	9a01      	ldr	r2, [sp, #4]
 800bc4a:	3b04      	subs	r3, #4
 800bc4c:	321c      	adds	r2, #28
 800bc4e:	9203      	str	r2, [sp, #12]
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*3];
 800bc50:	f853 af04 	ldr.w	sl, [r3, #4]!
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*2];
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*1];
 800bc54:	f8d8 5020 	ldr.w	r5, [r8, #32]
 800bc58:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*3];
 800bc5a:	f8d8 2060 	ldr.w	r2, [r8, #96]	@ 0x60
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*1];
 800bc5e:	eb04 0b05 	add.w	fp, r4, r5
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*2];
 800bc62:	f8d8 7040 	ldr.w	r7, [r8, #64]	@ 0x40
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*0];
 800bc66:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*3];
 800bc68:	eb0a 0102 	add.w	r1, sl, r2
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*0];
 800bc6c:	f858 9b04 	ldr.w	r9, [r8], #4
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*3];
 800bc70:	9200      	str	r2, [sp, #0]
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*0];
 800bc72:	eb04 0609 	add.w	r6, r4, r9
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*7];
 800bc76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800bc7a:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*2];
 800bc7e:	6a18      	ldr	r0, [r3, #32]

    tmp10 = tmp0 + tmp5;
    tmp13 = tmp0 - tmp5;
    tmp11 = tmp1 + tmp4;
    tmp14 = tmp1 - tmp4;
    tmp12 = tmp2 + tmp3;
 800bc80:	eb0b 0e06 	add.w	lr, fp, r6
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*7];
 800bc84:	4414      	add	r4, r2
    tmp5 = dataptr[DCTSIZE*5] + dataptr[DCTSIZE*6];
 800bc86:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*2];
 800bc8a:	4438      	add	r0, r7
    tmp15 = tmp2 - tmp3;
 800bc8c:	ebab 0606 	sub.w	r6, fp, r6
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*7];
 800bc90:	9401      	str	r4, [sp, #4]
    tmp5 = dataptr[DCTSIZE*5] + dataptr[DCTSIZE*6];
 800bc92:	f8d3 40c0 	ldr.w	r4, [r3, #192]	@ 0xc0
 800bc96:	eb02 0c04 	add.w	ip, r2, r4
    tmp13 = tmp0 - tmp5;
 800bc9a:	eba1 020c 	sub.w	r2, r1, ip
    tmp10 = tmp0 + tmp5;
 800bc9e:	eb01 040c 	add.w	r4, r1, ip

    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*3];
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*2];
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*1];
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*0];
    tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*7];
 800bca2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
    tmp13 = tmp0 - tmp5;
 800bca6:	9202      	str	r2, [sp, #8]
    tmp14 = tmp1 - tmp4;
 800bca8:	9a01      	ldr	r2, [sp, #4]
 800bcaa:	eba0 0c02 	sub.w	ip, r0, r2
    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*3];
 800bcae:	9a00      	ldr	r2, [sp, #0]
 800bcb0:	ebaa 0202 	sub.w	r2, sl, r2
 800bcb4:	9200      	str	r2, [sp, #0]
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*2];
 800bcb6:	6a1a      	ldr	r2, [r3, #32]
 800bcb8:	1bd7      	subs	r7, r2, r7
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*1];
 800bcba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bcbc:	1b55      	subs	r5, r2, r5
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*0];
 800bcbe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bcc0:	eba2 0909 	sub.w	r9, r2, r9
    tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*7];
 800bcc4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800bcc8:	eba2 0a01 	sub.w	sl, r2, r1
    tmp5 = dataptr[DCTSIZE*5] - dataptr[DCTSIZE*6];
 800bccc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800bcd0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800bcd4:	eba2 0b01 	sub.w	fp, r2, r1
    tmp11 = tmp1 + tmp4;
 800bcd8:	9a01      	ldr	r2, [sp, #4]

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(0.888888889)), /* 8/9 */
	      CONST_BITS+1);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 800bcda:	9902      	ldr	r1, [sp, #8]
    tmp11 = tmp1 + tmp4;
 800bcdc:	4410      	add	r0, r2
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(0.888888889)), /* 8/9 */
 800bcde:	f641 4272 	movw	r2, #7282	@ 0x1c72
 800bce2:	4420      	add	r0, r4
	      CONST_BITS+1);
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
 800bce4:	eba4 040e 	sub.w	r4, r4, lr
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(0.888888889)), /* 8/9 */
 800bce8:	4470      	add	r0, lr

    tmp10 = MULTIPLY(tmp1 + tmp4, FIX(0.481063200));   /* c9 */
    tmp14 = tmp10 + MULTIPLY(tmp1, FIX(0.680326102));  /* c3-c9 */
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX(1.642452502));  /* c3+c9 */
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(0.997307603));   /* c5 */
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.765261039));   /* c7 */
 800bcea:	f641 0e7d 	movw	lr, #6269	@ 0x187d
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(0.888888889)), /* 8/9 */
 800bcee:	4350      	muls	r0, r2
 800bcf0:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 800bcf4:	1380      	asrs	r0, r0, #14
    dataptr[DCTSIZE*0] = (DCTELEM)
 800bcf6:	6018      	str	r0, [r3, #0]
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 800bcf8:	eba1 000c 	sub.w	r0, r1, ip
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
 800bcfc:	f242 21d6 	movw	r1, #8918	@ 0x22d6
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 800bd00:	ebac 0c06 	sub.w	ip, ip, r6
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 800bd04:	1b80      	subs	r0, r0, r6
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
 800bd06:	434c      	muls	r4, r1
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 800bd08:	9902      	ldr	r1, [sp, #8]
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 800bd0a:	4350      	muls	r0, r2
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 800bd0c:	4431      	add	r1, r6
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
 800bd0e:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 800bd12:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
 800bd16:	13a4      	asrs	r4, r4, #14
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 800bd18:	1380      	asrs	r0, r0, #14
    dataptr[DCTSIZE*4] = (DCTELEM)
 800bd1a:	f8c3 4080 	str.w	r4, [r3, #128]	@ 0x80
    dataptr[DCTSIZE*6] = (DCTELEM)
 800bd1e:	f8c3 00c0 	str.w	r0, [r3, #192]	@ 0xc0
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 800bd22:	f242 60db 	movw	r0, #9947	@ 0x26db
 800bd26:	4341      	muls	r1, r0
    tmp10 = MULTIPLY(tmp1 + tmp4, FIX(0.481063200));   /* c9 */
 800bd28:	f640 7065 	movw	r0, #3941	@ 0xf65
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 800bd2c:	fb02 110c 	mla	r1, r2, ip, r1
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX(1.642452502));  /* c3+c9 */
 800bd30:	4a36      	ldr	r2, [pc, #216]	@ (800be0c <jpeg_fdct_12x12+0x3ac>)
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 800bd32:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800bd36:	1389      	asrs	r1, r1, #14
    dataptr[DCTSIZE*2] = (DCTELEM)
 800bd38:	6419      	str	r1, [r3, #64]	@ 0x40
    tmp10 = MULTIPLY(tmp1 + tmp4, FIX(0.481063200));   /* c9 */
 800bd3a:	eb07 010a 	add.w	r1, r7, sl
 800bd3e:	4341      	muls	r1, r0
    tmp14 = tmp10 + MULTIPLY(tmp1, FIX(0.680326102));  /* c3-c9 */
 800bd40:	f241 50c5 	movw	r0, #5573	@ 0x15c5
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX(1.642452502));  /* c3+c9 */
 800bd44:	fb02 120a 	mla	r2, r2, sl, r1
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.516244403)) /* c5+c7-c1 */
 800bd48:	f44f 6aa8 	mov.w	sl, #1344	@ 0x540
    tmp14 = tmp10 + MULTIPLY(tmp1, FIX(0.680326102));  /* c3-c9 */
 800bd4c:	fb00 1707 	mla	r7, r0, r7, r1
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(0.997307603));   /* c5 */
 800bd50:	f641 70ea 	movw	r0, #8170	@ 0x1fea
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX(1.642452502));  /* c3+c9 */
 800bd54:	9201      	str	r2, [sp, #4]
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(0.997307603));   /* c5 */
 800bd56:	9a00      	ldr	r2, [sp, #0]
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.516244403)) /* c5+c7-c1 */
 800bd58:	9900      	ldr	r1, [sp, #0]
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(0.997307603));   /* c5 */
 800bd5a:	eb02 0c05 	add.w	ip, r2, r5
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.765261039));   /* c7 */
 800bd5e:	eb02 0609 	add.w	r6, r2, r9
	    + MULTIPLY(tmp5, FIX(0.164081699));        /* c11 */
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.164081699)); /* -c11 */
 800bd62:	4a2b      	ldr	r2, [pc, #172]	@ (800be10 <jpeg_fdct_12x12+0x3b0>)
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(0.997307603));   /* c5 */
 800bd64:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.164081699)); /* -c11 */
 800bd68:	eb05 0009 	add.w	r0, r5, r9
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.765261039));   /* c7 */
 800bd6c:	fb0e f606 	mul.w	r6, lr, r6
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.164081699)); /* -c11 */
 800bd70:	4350      	muls	r0, r2
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.516244403)) /* c5+c7-c1 */
 800bd72:	f6a2 3245 	subw	r2, r2, #2885	@ 0xb45
 800bd76:	eb0c 0406 	add.w	r4, ip, r6
 800bd7a:	443c      	add	r4, r7
 800bd7c:	fb02 4401 	mla	r4, r2, r1, r4
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.079550144)) /* c1+c5-c11 */
	    + MULTIPLY(tmp5, FIX(0.765261039));        /* c7 */
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.645144899)) /* c1+c11-c7 */
	    - MULTIPLY(tmp5, FIX(0.997307603));        /* c5 */
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.161389302)) /* c3 */
 800bd80:	eba1 0209 	sub.w	r2, r1, r9
 800bd84:	9901      	ldr	r1, [sp, #4]
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.516244403)) /* c5+c7-c1 */
 800bd86:	fb0a 440b 	mla	r4, sl, fp, r4
	    - MULTIPLY(tmp2 + tmp5, FIX(0.481063200)); /* c9 */

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp10, CONST_BITS+1);
 800bd8a:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
 800bd8e:	13a4      	asrs	r4, r4, #14
 800bd90:	621c      	str	r4, [r3, #32]
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.161389302)) /* c3 */
 800bd92:	f242 542a 	movw	r4, #9514	@ 0x252a
 800bd96:	fb04 1202 	mla	r2, r4, r2, r1
 800bd9a:	491e      	ldr	r1, [pc, #120]	@ (800be14 <jpeg_fdct_12x12+0x3b4>)
	    - MULTIPLY(tmp2 + tmp5, FIX(0.481063200)); /* c9 */
 800bd9c:	eb05 040b 	add.w	r4, r5, fp
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.161389302)) /* c3 */
 800bda0:	fb01 2204 	mla	r2, r1, r4, r2
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp11, CONST_BITS+1);
 800bda4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800bda8:	1392      	asrs	r2, r2, #14
 800bdaa:	661a      	str	r2, [r3, #96]	@ 0x60
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.079550144)) /* c1+c5-c11 */
 800bdac:	9a01      	ldr	r2, [sp, #4]
 800bdae:	1a81      	subs	r1, r0, r2
 800bdb0:	4a19      	ldr	r2, [pc, #100]	@ (800be18 <jpeg_fdct_12x12+0x3b8>)
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.645144899)) /* c1+c11-c7 */
 800bdb2:	1bc0      	subs	r0, r0, r7
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.079550144)) /* c1+c5-c11 */
 800bdb4:	fb02 1105 	mla	r1, r2, r5, r1
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.645144899)) /* c1+c11-c7 */
 800bdb8:	f241 42a5 	movw	r2, #5285	@ 0x14a5
 800bdbc:	fb02 0009 	mla	r0, r2, r9, r0
	    - MULTIPLY(tmp5, FIX(0.997307603));        /* c5 */
 800bdc0:	4a16      	ldr	r2, [pc, #88]	@ (800be1c <jpeg_fdct_12x12+0x3bc>)
	    + MULTIPLY(tmp5, FIX(0.765261039));        /* c7 */
 800bdc2:	fb0e 110b 	mla	r1, lr, fp, r1
	    - MULTIPLY(tmp5, FIX(0.997307603));        /* c5 */
 800bdc6:	fb02 000b 	mla	r0, r2, fp, r0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800bdca:	9a03      	ldr	r2, [sp, #12]
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.079550144)) /* c1+c5-c11 */
 800bdcc:	4461      	add	r1, ip
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.645144899)) /* c1+c11-c7 */
 800bdce:	4430      	add	r0, r6
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800bdd0:	429a      	cmp	r2, r3
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+1);
 800bdd2:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+1);
 800bdd6:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+1);
 800bdda:	ea4f 31a1 	mov.w	r1, r1, asr #14
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+1);
 800bdde:	ea4f 30a0 	mov.w	r0, r0, asr #14
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+1);
 800bde2:	f8c3 10a0 	str.w	r1, [r3, #160]	@ 0xa0
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+1);
 800bde6:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800bdea:	f47f af31 	bne.w	800bc50 <jpeg_fdct_12x12+0x1f0>

    dataptr++;			/* advance pointer to next column */
    wsptr++;			/* advance pointer to next column */
  }
}
 800bdee:	b02d      	add	sp, #180	@ 0xb4
 800bdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf4:	ffffc4df 	.word	0xffffc4df
 800bdf8:	fffffa18 	.word	0xfffffa18
 800bdfc:	ffffed6a 	.word	0xffffed6a
 800be00:	ffffb523 	.word	0xffffb523
 800be04:	ffffeeaf 	.word	0xffffeeaf
 800be08:	ffffdc19 	.word	0xffffdc19
 800be0c:	ffffcb71 	.word	0xffffcb71
 800be10:	fffffac0 	.word	0xfffffac0
 800be14:	fffff09b 	.word	0xfffff09b
 800be18:	ffffbd74 	.word	0xffffbd74
 800be1c:	ffffe016 	.word	0xffffe016

0800be20 <jpeg_fdct_13x13>:
 * Perform the forward DCT on a 13x13 sample block.
 */

GLOBAL(void)
jpeg_fdct_13x13 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800be20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT. */
  /* cK represents sqrt(2) * cos(K*pi/26). */

  dataptr = data;
  ctr = 0;
 800be24:	2300      	movs	r3, #0
{
 800be26:	b0b7      	sub	sp, #220	@ 0xdc
  dataptr = data;
 800be28:	4686      	mov	lr, r0
{
 800be2a:	900a      	str	r0, [sp, #40]	@ 0x28
  ctr = 0;
 800be2c:	9301      	str	r3, [sp, #4]
{
 800be2e:	e9cd 210c 	strd	r2, r1, [sp, #48]	@ 0x30
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 800be32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be34:	9a01      	ldr	r2, [sp, #4]

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[12]);
 800be36:	990c      	ldr	r1, [sp, #48]	@ 0x30
    elemptr = sample_data[ctr] + start_col;
 800be38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[12]);
 800be3e:	f812 b001 	ldrb.w	fp, [r2, r1]
    elemptr = sample_data[ctr] + start_col;
 800be42:	18d3      	adds	r3, r2, r3
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[12]);
 800be44:	f893 a00c 	ldrb.w	sl, [r3, #12]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[11]);
 800be48:	f893 800b 	ldrb.w	r8, [r3, #11]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[12]);
 800be4c:	eb0b 020a 	add.w	r2, fp, sl
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[10]);
 800be50:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800be54:	f893 9002 	ldrb.w	r9, [r3, #2]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[9]);
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[8]);
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[7]);
    tmp6 = GETJSAMPLE(elemptr[6]);

    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[12]);
 800be58:	ebab 0a0a 	sub.w	sl, fp, sl
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[12]);
 800be5c:	9204      	str	r2, [sp, #16]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[11]);
 800be5e:	785a      	ldrb	r2, [r3, #1]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[9]);
 800be60:	78df      	ldrb	r7, [r3, #3]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[11]);
 800be62:	9202      	str	r2, [sp, #8]
 800be64:	4442      	add	r2, r8
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[9]);
 800be66:	7a5e      	ldrb	r6, [r3, #9]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[11]);
 800be68:	9205      	str	r2, [sp, #20]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[10]);
 800be6a:	eb09 020c 	add.w	r2, r9, ip
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[8]);
 800be6e:	791d      	ldrb	r5, [r3, #4]
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[11]);
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[10]);
    tmp13 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[9]);
 800be70:	eba7 0b06 	sub.w	fp, r7, r6
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[8]);
 800be74:	7a1c      	ldrb	r4, [r3, #8]
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[10]);
 800be76:	eba9 090c 	sub.w	r9, r9, ip
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[10]);
 800be7a:	9206      	str	r2, [sp, #24]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[9]);
 800be7c:	19ba      	adds	r2, r7, r6
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[7]);
 800be7e:	7958      	ldrb	r0, [r3, #5]
    tmp2 -= tmp6;
    tmp3 -= tmp6;
    tmp4 -= tmp6;
    tmp5 -= tmp6;
    dataptr[2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0, FIX(1.373119086)) +   /* c2 */
 800be80:	f642 3cf1 	movw	ip, #11249	@ 0x2bf1
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[7]);
 800be84:	79d9      	ldrb	r1, [r3, #7]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[9]);
 800be86:	9207      	str	r2, [sp, #28]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[8]);
 800be88:	192a      	adds	r2, r5, r4
    tmp6 = GETJSAMPLE(elemptr[6]);
 800be8a:	799b      	ldrb	r3, [r3, #6]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[8]);
 800be8c:	9208      	str	r2, [sp, #32]
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[7]);
 800be8e:	1842      	adds	r2, r0, r1
 800be90:	9209      	str	r2, [sp, #36]	@ 0x24
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[11]);
 800be92:	9a02      	ldr	r2, [sp, #8]
 800be94:	eba2 0808 	sub.w	r8, r2, r8
    tmp14 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[8]);
 800be98:	1b2a      	subs	r2, r5, r4
 800be9a:	9202      	str	r2, [sp, #8]
    tmp15 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[7]);
 800be9c:	1a42      	subs	r2, r0, r1
 800be9e:	9203      	str	r2, [sp, #12]
      (tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 + tmp6 - 13 * CENTERJSAMPLE);
 800bea0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800bea4:	1851      	adds	r1, r2, r1
 800bea6:	9a06      	ldr	r2, [sp, #24]
 800bea8:	4411      	add	r1, r2
 800beaa:	9a07      	ldr	r2, [sp, #28]
 800beac:	4411      	add	r1, r2
 800beae:	9a08      	ldr	r2, [sp, #32]
 800beb0:	4411      	add	r1, r2
 800beb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800beb4:	4411      	add	r1, r2
    tmp0 -= tmp6;
 800beb6:	9a04      	ldr	r2, [sp, #16]
      (tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 + tmp6 - 13 * CENTERJSAMPLE);
 800beb8:	4419      	add	r1, r3
    tmp0 -= tmp6;
 800beba:	eba2 0743 	sub.w	r7, r2, r3, lsl #1
    tmp1 -= tmp6;
 800bebe:	9a05      	ldr	r2, [sp, #20]
      (tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 + tmp6 - 13 * CENTERJSAMPLE);
 800bec0:	f5a1 61d0 	sub.w	r1, r1, #1664	@ 0x680
    tmp1 -= tmp6;
 800bec4:	eba2 0443 	sub.w	r4, r2, r3, lsl #1
    tmp2 -= tmp6;
 800bec8:	9a06      	ldr	r2, [sp, #24]
    dataptr[0] = (DCTELEM)
 800beca:	f8ce 1000 	str.w	r1, [lr]
      DESCALE(MULTIPLY(tmp0, FIX(1.373119086)) +   /* c2 */
 800bece:	f242 11e0 	movw	r1, #8672	@ 0x21e0
    tmp2 -= tmp6;
 800bed2:	eba2 0543 	sub.w	r5, r2, r3, lsl #1
    tmp3 -= tmp6;
 800bed6:	9a07      	ldr	r2, [sp, #28]
      DESCALE(MULTIPLY(tmp0, FIX(1.373119086)) +   /* c2 */
 800bed8:	4361      	muls	r1, r4
    tmp3 -= tmp6;
 800beda:	eba2 0043 	sub.w	r0, r2, r3, lsl #1
    tmp4 -= tmp6;
 800bede:	9a08      	ldr	r2, [sp, #32]
      DESCALE(MULTIPLY(tmp0, FIX(1.373119086)) +   /* c2 */
 800bee0:	fb0c 1107 	mla	r1, ip, r7, r1
 800bee4:	f241 0c0c 	movw	ip, #4108	@ 0x100c
    tmp4 -= tmp6;
 800bee8:	eba2 0643 	sub.w	r6, r2, r3, lsl #1
    tmp5 -= tmp6;
 800beec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
      DESCALE(MULTIPLY(tmp0, FIX(1.373119086)) +   /* c2 */
 800beee:	fb0c 1105 	mla	r1, ip, r5, r1
	      MULTIPLY(tmp2, FIX(0.501487041)) -   /* c10 */
	      MULTIPLY(tmp3, FIX(0.170464608)) -   /* c12 */
	      MULTIPLY(tmp4, FIX(0.803364869)) -   /* c8 */
	      MULTIPLY(tmp5, FIX(1.252223920)),    /* c4 */
	      CONST_BITS);
    z1 = MULTIPLY(tmp0 - tmp2, FIX(1.155388986)) - /* (c4+c6)/2 */
 800bef2:	f242 4cf9 	movw	ip, #9465	@ 0x24f9
    tmp5 -= tmp6;
 800bef6:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
      DESCALE(MULTIPLY(tmp0, FIX(1.373119086)) +   /* c2 */
 800befa:	4a56      	ldr	r2, [pc, #344]	@ (800c054 <jpeg_fdct_13x13+0x234>)
	 MULTIPLY(tmp3 - tmp4, FIX(0.435816023)) - /* (c2-c10)/2 */
	 MULTIPLY(tmp1 - tmp5, FIX(0.316450131));  /* (c8-c12)/2 */
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.096834934)) - /* (c4-c6)/2 */
 800befc:	443d      	add	r5, r7

    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.322312651));   /* c3 */
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.163874945));   /* c5 */
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.937797057)) +  /* c7 */
	   MULTIPLY(tmp14 + tmp15, FIX(0.338443458));   /* c11 */
    tmp0 = tmp1 + tmp2 + tmp3 -
 800befe:	4f56      	ldr	r7, [pc, #344]	@ (800c058 <jpeg_fdct_13x13+0x238>)
      DESCALE(MULTIPLY(tmp0, FIX(1.373119086)) +   /* c2 */
 800bf00:	fb02 1100 	mla	r1, r2, r0, r1
 800bf04:	4a55      	ldr	r2, [pc, #340]	@ (800c05c <jpeg_fdct_13x13+0x23c>)
    tmp5 -= tmp6;
 800bf06:	930b      	str	r3, [sp, #44]	@ 0x2c
	 MULTIPLY(tmp3 + tmp4, FIX(0.937303064)) + /* (c2+c10)/2 */
 800bf08:	4430      	add	r0, r6
      DESCALE(MULTIPLY(tmp0, FIX(1.373119086)) +   /* c2 */
 800bf0a:	fb02 1106 	mla	r1, r2, r6, r1
 800bf0e:	f6a2 625d 	subw	r2, r2, #3677	@ 0xe5d
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.322312651));   /* c3 */
 800bf12:	eb0a 0608 	add.w	r6, sl, r8
      DESCALE(MULTIPLY(tmp0, FIX(1.373119086)) +   /* c2 */
 800bf16:	fb02 1103 	mla	r1, r2, r3, r1
    z1 = MULTIPLY(tmp0 - tmp2, FIX(1.155388986)) - /* (c4+c6)/2 */
 800bf1a:	9a04      	ldr	r2, [sp, #16]
      DESCALE(MULTIPLY(tmp0, FIX(1.373119086)) +   /* c2 */
 800bf1c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800bf20:	1349      	asrs	r1, r1, #13
    dataptr[2] = (DCTELEM)
 800bf22:	f8ce 1008 	str.w	r1, [lr, #8]
    z1 = MULTIPLY(tmp0 - tmp2, FIX(1.155388986)) - /* (c4+c6)/2 */
 800bf26:	9906      	ldr	r1, [sp, #24]
 800bf28:	1a51      	subs	r1, r2, r1
	 MULTIPLY(tmp3 - tmp4, FIX(0.435816023)) - /* (c2-c10)/2 */
 800bf2a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bf2e:	1ad2      	subs	r2, r2, r3
 800bf30:	4b4b      	ldr	r3, [pc, #300]	@ (800c060 <jpeg_fdct_13x13+0x240>)
 800bf32:	435a      	muls	r2, r3
	 MULTIPLY(tmp1 - tmp5, FIX(0.316450131));  /* (c8-c12)/2 */
 800bf34:	9b05      	ldr	r3, [sp, #20]
    z1 = MULTIPLY(tmp0 - tmp2, FIX(1.155388986)) - /* (c4+c6)/2 */
 800bf36:	fb0c 2201 	mla	r2, ip, r1, r2
	 MULTIPLY(tmp1 - tmp5, FIX(0.316450131));  /* (c8-c12)/2 */
 800bf3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf3c:	1a59      	subs	r1, r3, r1
    z1 = MULTIPLY(tmp0 - tmp2, FIX(1.155388986)) - /* (c4+c6)/2 */
 800bf3e:	4b49      	ldr	r3, [pc, #292]	@ (800c064 <jpeg_fdct_13x13+0x244>)
 800bf40:	fb03 2201 	mla	r2, r3, r1, r2
	 MULTIPLY(tmp3 + tmp4, FIX(0.937303064)) + /* (c2+c10)/2 */
 800bf44:	4b48      	ldr	r3, [pc, #288]	@ (800c068 <jpeg_fdct_13x13+0x248>)
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.096834934)) - /* (c4-c6)/2 */
 800bf46:	f240 3119 	movw	r1, #793	@ 0x319
	 MULTIPLY(tmp3 + tmp4, FIX(0.937303064)) + /* (c2+c10)/2 */
 800bf4a:	4358      	muls	r0, r3
	 MULTIPLY(tmp1 + tmp5, FIX(0.486914739));  /* (c8+c12)/2 */
 800bf4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.096834934)) - /* (c4-c6)/2 */
 800bf4e:	fb01 0005 	mla	r0, r1, r5, r0
	 MULTIPLY(tmp1 + tmp5, FIX(0.486914739));  /* (c8+c12)/2 */
 800bf52:	441c      	add	r4, r3
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.096834934)) - /* (c4-c6)/2 */
 800bf54:	f640 7395 	movw	r3, #3989	@ 0xf95
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.163874945));   /* c5 */
 800bf58:	eb0a 0509 	add.w	r5, sl, r9
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.096834934)) - /* (c4-c6)/2 */
 800bf5c:	fb03 0404 	mla	r4, r3, r4, r0
    dataptr[4] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS);
 800bf60:	1913      	adds	r3, r2, r4
    dataptr[6] = (DCTELEM) DESCALE(z1 - z2, CONST_BITS);
 800bf62:	1b12      	subs	r2, r2, r4
	   MULTIPLY(tmp10, FIX(2.020082300)) +          /* c3+c5+c7-c1 */
	   MULTIPLY(tmp14, FIX(0.318774355));           /* c9-c11 */
    tmp4 = MULTIPLY(tmp14 - tmp15, FIX(0.937797057)) -  /* c7 */
	   MULTIPLY(tmp11 + tmp12, FIX(0.338443458));   /* c11 */
 800bf64:	4c41      	ldr	r4, [pc, #260]	@ (800c06c <jpeg_fdct_13x13+0x24c>)
    dataptr[4] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS);
 800bf66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
    dataptr[6] = (DCTELEM) DESCALE(z1 - z2, CONST_BITS);
 800bf6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
    dataptr[4] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS);
 800bf6e:	135b      	asrs	r3, r3, #13
    dataptr[6] = (DCTELEM) DESCALE(z1 - z2, CONST_BITS);
 800bf70:	1352      	asrs	r2, r2, #13
    dataptr[4] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS);
 800bf72:	f8ce 3010 	str.w	r3, [lr, #16]
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.322312651));   /* c3 */
 800bf76:	f642 2350 	movw	r3, #10832	@ 0x2a50
    dataptr[6] = (DCTELEM) DESCALE(z1 - z2, CONST_BITS);
 800bf7a:	f8ce 2018 	str.w	r2, [lr, #24]
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.937797057)) +  /* c7 */
 800bf7e:	f641 6202 	movw	r2, #7682	@ 0x1e02
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.322312651));   /* c3 */
 800bf82:	435e      	muls	r6, r3
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.163874945));   /* c5 */
 800bf84:	f242 533e 	movw	r3, #9534	@ 0x253e
	   MULTIPLY(tmp14 + tmp15, FIX(0.338443458));   /* c11 */
 800bf88:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(1.163874945));   /* c5 */
 800bf8c:	435d      	muls	r5, r3
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.937797057)) +  /* c7 */
 800bf8e:	eb0a 030b 	add.w	r3, sl, fp
	   MULTIPLY(tmp14 + tmp15, FIX(0.338443458));   /* c11 */
 800bf92:	1808      	adds	r0, r1, r0
 800bf94:	f640 21d5 	movw	r1, #2773	@ 0xad5
 800bf98:	4348      	muls	r0, r1
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.937797057)) +  /* c7 */
 800bf9a:	fb02 0003 	mla	r0, r2, r3, r0
    tmp4 = MULTIPLY(tmp14 - tmp15, FIX(0.937797057)) -  /* c7 */
 800bf9e:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
 800bfa2:	1a59      	subs	r1, r3, r1
	   MULTIPLY(tmp11 + tmp12, FIX(0.338443458));   /* c11 */
 800bfa4:	eb08 0309 	add.w	r3, r8, r9
 800bfa8:	4363      	muls	r3, r4
    tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.163874945)); /* -c5 */
    tmp1 += tmp4 + tmp5 +
	    MULTIPLY(tmp11, FIX(0.837223564)) -         /* c5+c9+c11-c3 */
	    MULTIPLY(tmp14, FIX(2.341699410));          /* c1+c7 */
    tmp6 = MULTIPLY(tmp12 + tmp13, - FIX(0.657217813)); /* -c9 */
 800bfaa:	eb09 040b 	add.w	r4, r9, fp
    tmp4 = MULTIPLY(tmp14 - tmp15, FIX(0.937797057)) -  /* c7 */
 800bfae:	fb02 3c01 	mla	ip, r2, r1, r3
    tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.163874945)); /* -c5 */
 800bfb2:	492f      	ldr	r1, [pc, #188]	@ (800c070 <jpeg_fdct_13x13+0x250>)
 800bfb4:	eb08 020b 	add.w	r2, r8, fp
    tmp0 = tmp1 + tmp2 + tmp3 -
 800bfb8:	9b02      	ldr	r3, [sp, #8]
    tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(1.163874945)); /* -c5 */
 800bfba:	434a      	muls	r2, r1
    tmp6 = MULTIPLY(tmp12 + tmp13, - FIX(0.657217813)); /* -c9 */
 800bfbc:	492d      	ldr	r1, [pc, #180]	@ (800c074 <jpeg_fdct_13x13+0x254>)
 800bfbe:	434c      	muls	r4, r1
    tmp0 = tmp1 + tmp2 + tmp3 -
 800bfc0:	1971      	adds	r1, r6, r5
 800bfc2:	4401      	add	r1, r0
 800bfc4:	fb07 110a 	mla	r1, r7, sl, r1
 800bfc8:	f640 2733 	movw	r7, #2611	@ 0xa33
 800bfcc:	fb07 1103 	mla	r1, r7, r3, r1
    tmp1 += tmp4 + tmp5 +
 800bfd0:	f641 27cb 	movw	r7, #6859	@ 0x1acb
	    MULTIPLY(tmp15, FIX(2.260109708));          /* c3+c7 */
    tmp3 += tmp5 + tmp6 +
	    MULTIPLY(tmp13, FIX(2.205608352)) -         /* c3+c5+c9-c7 */
	    MULTIPLY(tmp15, FIX(1.742345811));          /* c1+c11 */

    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS);
 800bfd4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800bfd8:	1349      	asrs	r1, r1, #13
 800bfda:	f8ce 1004 	str.w	r1, [lr, #4]
    tmp1 += tmp4 + tmp5 +
 800bfde:	eb0c 0102 	add.w	r1, ip, r2
    tmp3 += tmp5 + tmp6 +
 800bfe2:	4422      	add	r2, r4
    tmp1 += tmp4 + tmp5 +
 800bfe4:	fb07 1108 	mla	r1, r7, r8, r1
	    MULTIPLY(tmp11, FIX(0.837223564)) -         /* c5+c9+c11-c3 */
 800bfe8:	4f23      	ldr	r7, [pc, #140]	@ (800c078 <jpeg_fdct_13x13+0x258>)
 800bfea:	fb07 1103 	mla	r1, r7, r3, r1
    tmp2 += tmp4 + tmp6 -
 800bfee:	eb0c 0304 	add.w	r3, ip, r4
    tmp1 += tmp4 + tmp5 +
 800bff2:	4431      	add	r1, r6
	    MULTIPLY(tmp12, FIX(1.572116027)) +         /* c1+c5-c9-c11 */
 800bff4:	9e03      	ldr	r6, [sp, #12]
    dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS);
 800bff6:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800bffa:	1349      	asrs	r1, r1, #13
 800bffc:	f8ce 100c 	str.w	r1, [lr, #12]
    tmp2 += tmp4 + tmp6 -
 800c000:	491e      	ldr	r1, [pc, #120]	@ (800c07c <jpeg_fdct_13x13+0x25c>)
 800c002:	fb01 3309 	mla	r3, r1, r9, r3
	    MULTIPLY(tmp12, FIX(1.572116027)) +         /* c1+c5-c9-c11 */
 800c006:	f644 0153 	movw	r1, #18515	@ 0x4853
 800c00a:	fb01 3306 	mla	r3, r1, r6, r3
    tmp2 += tmp4 + tmp6 -
 800c00e:	442b      	add	r3, r5
    dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS);
 800c010:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c014:	135b      	asrs	r3, r3, #13
 800c016:	f8ce 3014 	str.w	r3, [lr, #20]
    tmp3 += tmp5 + tmp6 +
 800c01a:	f244 6394 	movw	r3, #18068	@ 0x4694
 800c01e:	fb03 220b 	mla	r2, r3, fp, r2
	    MULTIPLY(tmp13, FIX(2.205608352)) -         /* c3+c5+c9-c7 */
 800c022:	f46f 535f 	mvn.w	r3, #14272	@ 0x37c0
 800c026:	fb03 2206 	mla	r2, r3, r6, r2
    dataptr[7] = (DCTELEM) DESCALE(tmp3, CONST_BITS);

    ctr++;
 800c02a:	9b01      	ldr	r3, [sp, #4]
    tmp3 += tmp5 + tmp6 +
 800c02c:	4402      	add	r2, r0
    ctr++;
 800c02e:	3301      	adds	r3, #1
    dataptr[7] = (DCTELEM) DESCALE(tmp3, CONST_BITS);
 800c030:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000

    if (ctr != DCTSIZE) {
 800c034:	2b08      	cmp	r3, #8
    ctr++;
 800c036:	9301      	str	r3, [sp, #4]
    dataptr[7] = (DCTELEM) DESCALE(tmp3, CONST_BITS);
 800c038:	ea4f 3262 	mov.w	r2, r2, asr #13
 800c03c:	f8ce 201c 	str.w	r2, [lr, #28]
    if (ctr != DCTSIZE) {
 800c040:	d004      	beq.n	800c04c <jpeg_fdct_13x13+0x22c>
      if (ctr == 13)
 800c042:	2b0d      	cmp	r3, #13
 800c044:	d01c      	beq.n	800c080 <jpeg_fdct_13x13+0x260>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 800c046:	f10e 0e20 	add.w	lr, lr, #32
 800c04a:	e6f2      	b.n	800be32 <jpeg_fdct_13x13+0x12>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 800c04c:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 800c050:	e6ef      	b.n	800be32 <jpeg_fdct_13x13+0x12>
 800c052:	bf00      	nop
 800c054:	fffffa8c 	.word	0xfffffa8c
 800c058:	ffffbf5b 	.word	0xffffbf5b
 800c05c:	ffffe64b 	.word	0xffffe64b
 800c060:	fffff20e 	.word	0xfffff20e
 800c064:	fffff5e0 	.word	0xfffff5e0
 800c068:	ffffe202 	.word	0xffffe202
 800c06c:	fffff52b 	.word	0xfffff52b
 800c070:	ffffdac2 	.word	0xffffdac2
 800c074:	ffffeaf8 	.word	0xffffeaf8
 800c078:	ffffb511 	.word	0xffffb511
 800c07c:	ffffcdb1 	.word	0xffffcdb1
 800c080:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c084:	321c      	adds	r2, #28
 800c086:	3b04      	subs	r3, #4
 800c088:	920a      	str	r2, [sp, #40]	@ 0x28
   * fold into the constant multipliers and final shifting:
   * cK now represents sqrt(2) * cos(K*pi/26) * 128/169.
   */

  dataptr = data;
  wsptr = workspace;
 800c08a:	aa0e      	add	r2, sp, #56	@ 0x38
 800c08c:	9201      	str	r2, [sp, #4]
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*4];
 800c08e:	9a01      	ldr	r2, [sp, #4]
 800c090:	f853 bf04 	ldr.w	fp, [r3, #4]!
 800c094:	f8d2 a080 	ldr.w	sl, [r2, #128]	@ 0x80
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*3];
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*2];
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*1];
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*0];
 800c098:	9901      	ldr	r1, [sp, #4]
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*4];
 800c09a:	eb0b 020a 	add.w	r2, fp, sl
    tmp5 = dataptr[DCTSIZE*5] + dataptr[DCTSIZE*7];
 800c09e:	f8d3 60a0 	ldr.w	r6, [r3, #160]	@ 0xa0
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*0];
 800c0a2:	f851 7b04 	ldr.w	r7, [r1], #4
    tmp6 = dataptr[DCTSIZE*6];

    tmp10 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*4];
 800c0a6:	ebab 0a0a 	sub.w	sl, fp, sl
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*4];
 800c0aa:	9203      	str	r2, [sp, #12]
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*3];
 800c0ac:	9a01      	ldr	r2, [sp, #4]
    tmp5 = dataptr[DCTSIZE*5] + dataptr[DCTSIZE*7];
 800c0ae:	f8d3 50e0 	ldr.w	r5, [r3, #224]	@ 0xe0
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*3];
 800c0b2:	f8d2 9060 	ldr.w	r9, [r2, #96]	@ 0x60
 800c0b6:	6a1a      	ldr	r2, [r3, #32]
    tmp5 = dataptr[DCTSIZE*5] + dataptr[DCTSIZE*7];
 800c0b8:	1970      	adds	r0, r6, r5
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*3];
 800c0ba:	eb02 0c09 	add.w	ip, r2, r9
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*2];
 800c0be:	9a01      	ldr	r2, [sp, #4]
 800c0c0:	f8d2 8040 	ldr.w	r8, [r2, #64]	@ 0x40
 800c0c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c0c6:	4442      	add	r2, r8
 800c0c8:	9204      	str	r2, [sp, #16]
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*1];
 800c0ca:	9a01      	ldr	r2, [sp, #4]
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*0];
 800c0cc:	9101      	str	r1, [sp, #4]
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*1];
 800c0ce:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800c0d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*0];
 800c0d4:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*1];
 800c0d8:	4472      	add	r2, lr
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*0];
 800c0da:	19cc      	adds	r4, r1, r7
    tmp6 = dataptr[DCTSIZE*6];
 800c0dc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*1];
 800c0e0:	9205      	str	r2, [sp, #20]
    tmp11 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*3];
 800c0e2:	6a1a      	ldr	r2, [r3, #32]
 800c0e4:	eba2 0909 	sub.w	r9, r2, r9
    tmp12 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*2];
 800c0e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c0ea:	eba2 0208 	sub.w	r2, r2, r8
 800c0ee:	9202      	str	r2, [sp, #8]
    tmp13 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*1];
 800c0f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c0f2:	eba2 080e 	sub.w	r8, r2, lr
    tmp14 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*0];
 800c0f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
    tmp15 = dataptr[DCTSIZE*5] - dataptr[DCTSIZE*7];
 800c0fa:	eba6 0e05 	sub.w	lr, r6, r5

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 + tmp6,
 800c0fe:	f641 063d 	movw	r6, #6205	@ 0x183d
    tmp14 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*0];
 800c102:	eba2 0b07 	sub.w	fp, r2, r7
      DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 + tmp6,
 800c106:	9a03      	ldr	r2, [sp, #12]
		       FIX(0.757396450)),          /* 128/169 */
	      CONST_BITS+1);
    tmp6 += tmp6;
    tmp0 -= tmp6;
    tmp1 -= tmp6;
 800c108:	ebac 0741 	sub.w	r7, ip, r1, lsl #1
      DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 + tmp6,
 800c10c:	eb02 050c 	add.w	r5, r2, ip
 800c110:	9a04      	ldr	r2, [sp, #16]
 800c112:	4415      	add	r5, r2
 800c114:	9a05      	ldr	r2, [sp, #20]
 800c116:	4415      	add	r5, r2
    tmp0 -= tmp6;
 800c118:	9a03      	ldr	r2, [sp, #12]
      DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 + tmp6,
 800c11a:	4425      	add	r5, r4
    tmp0 -= tmp6;
 800c11c:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
      DESCALE(MULTIPLY(tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5 + tmp6,
 800c120:	4405      	add	r5, r0
 800c122:	440d      	add	r5, r1
 800c124:	4375      	muls	r5, r6
 800c126:	f505 5500 	add.w	r5, r5, #8192	@ 0x2000
 800c12a:	13ad      	asrs	r5, r5, #14
    dataptr[DCTSIZE*0] = (DCTELEM)
 800c12c:	601d      	str	r5, [r3, #0]
    tmp2 -= tmp6;
    tmp3 -= tmp6;
    tmp4 -= tmp6;
    tmp5 -= tmp6;
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0, FIX(1.039995521)) +   /* c2 */
 800c12e:	f641 15a8 	movw	r5, #6568	@ 0x19a8
    tmp0 -= tmp6;
 800c132:	9206      	str	r2, [sp, #24]
    tmp2 -= tmp6;
 800c134:	9a04      	ldr	r2, [sp, #16]
      DESCALE(MULTIPLY(tmp0, FIX(1.039995521)) +   /* c2 */
 800c136:	437d      	muls	r5, r7
    tmp2 -= tmp6;
 800c138:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
 800c13c:	9207      	str	r2, [sp, #28]
    tmp3 -= tmp6;
 800c13e:	9a05      	ldr	r2, [sp, #20]
 800c140:	eba2 0641 	sub.w	r6, r2, r1, lsl #1
    tmp4 -= tmp6;
 800c144:	eba4 0241 	sub.w	r2, r4, r1, lsl #1
 800c148:	9208      	str	r2, [sp, #32]
    tmp5 -= tmp6;
 800c14a:	eba0 0241 	sub.w	r2, r0, r1, lsl #1
      DESCALE(MULTIPLY(tmp0, FIX(1.039995521)) +   /* c2 */
 800c14e:	f242 1148 	movw	r1, #8520	@ 0x2148
	      MULTIPLY(tmp4, FIX(0.608465700)) -   /* c8 */
	      MULTIPLY(tmp5, FIX(0.948429952)),    /* c4 */
	      CONST_BITS+1);
    z1 = MULTIPLY(tmp0 - tmp2, FIX(0.875087516)) - /* (c4+c6)/2 */
	 MULTIPLY(tmp3 - tmp4, FIX(0.330085509)) - /* (c2-c10)/2 */
	 MULTIPLY(tmp1 - tmp5, FIX(0.239678205));  /* (c8-c12)/2 */
 800c152:	ebac 0000 	sub.w	r0, ip, r0
    tmp5 -= tmp6;
 800c156:	9209      	str	r2, [sp, #36]	@ 0x24
      DESCALE(MULTIPLY(tmp0, FIX(1.039995521)) +   /* c2 */
 800c158:	9a06      	ldr	r2, [sp, #24]
 800c15a:	fb01 5502 	mla	r5, r1, r2, r5
 800c15e:	9a07      	ldr	r2, [sp, #28]
 800c160:	f640 4128 	movw	r1, #3112	@ 0xc28
 800c164:	fb01 5502 	mla	r5, r1, r2, r5
 800c168:	4a51      	ldr	r2, [pc, #324]	@ (800c2b0 <jpeg_fdct_13x13+0x490>)
 800c16a:	4952      	ldr	r1, [pc, #328]	@ (800c2b4 <jpeg_fdct_13x13+0x494>)
 800c16c:	fb02 5506 	mla	r5, r2, r6, r5
 800c170:	9a08      	ldr	r2, [sp, #32]
 800c172:	fb01 5502 	mla	r5, r1, r2, r5
 800c176:	4a50      	ldr	r2, [pc, #320]	@ (800c2b8 <jpeg_fdct_13x13+0x498>)
 800c178:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c17a:	fb02 5501 	mla	r5, r2, r1, r5
 800c17e:	f505 5500 	add.w	r5, r5, #8192	@ 0x2000
    z1 = MULTIPLY(tmp0 - tmp2, FIX(0.875087516)) - /* (c4+c6)/2 */
 800c182:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
      DESCALE(MULTIPLY(tmp0, FIX(1.039995521)) +   /* c2 */
 800c186:	13ad      	asrs	r5, r5, #14
    dataptr[DCTSIZE*2] = (DCTELEM)
 800c188:	641d      	str	r5, [r3, #64]	@ 0x40
    z1 = MULTIPLY(tmp0 - tmp2, FIX(0.875087516)) - /* (c4+c6)/2 */
 800c18a:	1a55      	subs	r5, r2, r1
	 MULTIPLY(tmp3 - tmp4, FIX(0.330085509)) - /* (c2-c10)/2 */
 800c18c:	9a05      	ldr	r2, [sp, #20]
 800c18e:	494b      	ldr	r1, [pc, #300]	@ (800c2bc <jpeg_fdct_13x13+0x49c>)
 800c190:	1b12      	subs	r2, r2, r4
    z1 = MULTIPLY(tmp0 - tmp2, FIX(0.875087516)) - /* (c4+c6)/2 */
 800c192:	f641 4401 	movw	r4, #7169	@ 0x1c01
	 MULTIPLY(tmp3 - tmp4, FIX(0.330085509)) - /* (c2-c10)/2 */
 800c196:	434a      	muls	r2, r1
    z1 = MULTIPLY(tmp0 - tmp2, FIX(0.875087516)) - /* (c4+c6)/2 */
 800c198:	f201 21e5 	addw	r1, r1, #741	@ 0x2e5
 800c19c:	fb04 2205 	mla	r2, r4, r5, r2
    /* Odd part */

    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.001514908));   /* c3 */
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(0.881514751));   /* c5 */
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.710284161)) +  /* c7 */
	   MULTIPLY(tmp14 + tmp15, FIX(0.256335874));   /* c11 */
 800c1a0:	eb0b 040e 	add.w	r4, fp, lr
    tmp0 = tmp1 + tmp2 + tmp3 -
	   MULTIPLY(tmp10, FIX(1.530003162)) +          /* c3+c5+c7-c1 */
	   MULTIPLY(tmp14, FIX(0.241438564));           /* c9-c11 */
    tmp4 = MULTIPLY(tmp14 - tmp15, FIX(0.710284161)) -  /* c7 */
	   MULTIPLY(tmp11 + tmp12, FIX(0.256335874));   /* c11 */
 800c1a4:	4d46      	ldr	r5, [pc, #280]	@ (800c2c0 <jpeg_fdct_13x13+0x4a0>)
    z1 = MULTIPLY(tmp0 - tmp2, FIX(0.875087516)) - /* (c4+c6)/2 */
 800c1a6:	fb01 2200 	mla	r2, r1, r0, r2
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.073342435)) - /* (c4-c6)/2 */
 800c1aa:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 800c1ae:	eb01 0c00 	add.w	ip, r1, r0
	 MULTIPLY(tmp3 + tmp4, FIX(0.709910013)) + /* (c2+c10)/2 */
 800c1b2:	9908      	ldr	r1, [sp, #32]
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.073342435)) - /* (c4-c6)/2 */
 800c1b4:	f240 2059 	movw	r0, #601	@ 0x259
	 MULTIPLY(tmp3 + tmp4, FIX(0.709910013)) + /* (c2+c10)/2 */
 800c1b8:	440e      	add	r6, r1
 800c1ba:	4942      	ldr	r1, [pc, #264]	@ (800c2c4 <jpeg_fdct_13x13+0x4a4>)
 800c1bc:	434e      	muls	r6, r1
	 MULTIPLY(tmp1 + tmp5, FIX(0.368787494));  /* (c8+c12)/2 */
 800c1be:	9909      	ldr	r1, [sp, #36]	@ 0x24
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.073342435)) - /* (c4-c6)/2 */
 800c1c0:	fb00 660c 	mla	r6, r0, ip, r6
	 MULTIPLY(tmp1 + tmp5, FIX(0.368787494));  /* (c8+c12)/2 */
 800c1c4:	440f      	add	r7, r1
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.073342435)) - /* (c4-c6)/2 */
 800c1c6:	f640 31cd 	movw	r1, #3021	@ 0xbcd
	   MULTIPLY(tmp14 + tmp15, FIX(0.256335874));   /* c11 */
 800c1ca:	f640 0034 	movw	r0, #2100	@ 0x834
    tmp0 = tmp1 + tmp2 + tmp3 -
 800c1ce:	f8df c108 	ldr.w	ip, [pc, #264]	@ 800c2d8 <jpeg_fdct_13x13+0x4b8>
    z2 = MULTIPLY(tmp0 + tmp2, FIX(0.073342435)) - /* (c4-c6)/2 */
 800c1d2:	fb01 6707 	mla	r7, r1, r7, r6
	   MULTIPLY(tmp14 + tmp15, FIX(0.256335874));   /* c11 */
 800c1d6:	4344      	muls	r4, r0
    tmp4 = MULTIPLY(tmp14 - tmp15, FIX(0.710284161)) -  /* c7 */
 800c1d8:	ebab 000e 	sub.w	r0, fp, lr
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+1);
 800c1dc:	19d1      	adds	r1, r2, r7
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 - z2, CONST_BITS+1);
 800c1de:	1bd2      	subs	r2, r2, r7
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.001514908));   /* c3 */
 800c1e0:	eb0a 0709 	add.w	r7, sl, r9
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 - z2, CONST_BITS+1);
 800c1e4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+1);
 800c1e8:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 - z2, CONST_BITS+1);
 800c1ec:	1392      	asrs	r2, r2, #14
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+1);
 800c1ee:	1389      	asrs	r1, r1, #14
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 - z2, CONST_BITS+1);
 800c1f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.001514908));   /* c3 */
 800c1f4:	f242 020c 	movw	r2, #8204	@ 0x200c
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+1);
 800c1f8:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.710284161)) +  /* c7 */
 800c1fc:	f241 61bb 	movw	r1, #5819	@ 0x16bb
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.001514908));   /* c3 */
 800c200:	4357      	muls	r7, r2
    tmp2 = MULTIPLY(tmp10 + tmp12, FIX(0.881514751));   /* c5 */
 800c202:	9a02      	ldr	r2, [sp, #8]
 800c204:	eb0a 0602 	add.w	r6, sl, r2
 800c208:	f641 4235 	movw	r2, #7221	@ 0x1c35
 800c20c:	4356      	muls	r6, r2
    tmp3 = MULTIPLY(tmp10 + tmp13, FIX(0.710284161)) +  /* c7 */
 800c20e:	eb0a 0208 	add.w	r2, sl, r8
 800c212:	fb01 4402 	mla	r4, r1, r2, r4
	   MULTIPLY(tmp11 + tmp12, FIX(0.256335874));   /* c11 */
 800c216:	9a02      	ldr	r2, [sp, #8]
 800c218:	444a      	add	r2, r9
 800c21a:	436a      	muls	r2, r5
    tmp4 = MULTIPLY(tmp14 - tmp15, FIX(0.710284161)) -  /* c7 */
 800c21c:	fb01 2200 	mla	r2, r1, r0, r2
    tmp5 = MULTIPLY(tmp11 + tmp13, - FIX(0.881514751)); /* -c5 */
 800c220:	4829      	ldr	r0, [pc, #164]	@ (800c2c8 <jpeg_fdct_13x13+0x4a8>)
 800c222:	eb09 0108 	add.w	r1, r9, r8
 800c226:	4341      	muls	r1, r0
    tmp1 += tmp4 + tmp5 +
	    MULTIPLY(tmp11, FIX(0.634110155)) -         /* c5+c9+c11-c3 */
	    MULTIPLY(tmp14, FIX(1.773594819));          /* c1+c7 */
    tmp6 = MULTIPLY(tmp12 + tmp13, - FIX(0.497774438)); /* -c9 */
 800c228:	9802      	ldr	r0, [sp, #8]
 800c22a:	eb00 0508 	add.w	r5, r0, r8
 800c22e:	4827      	ldr	r0, [pc, #156]	@ (800c2cc <jpeg_fdct_13x13+0x4ac>)
 800c230:	4345      	muls	r5, r0
    tmp0 = tmp1 + tmp2 + tmp3 -
 800c232:	19b8      	adds	r0, r7, r6
 800c234:	4420      	add	r0, r4
 800c236:	fb0c 000a 	mla	r0, ip, sl, r0
 800c23a:	f240 7cba 	movw	ip, #1978	@ 0x7ba
 800c23e:	fb0c 000b 	mla	r0, ip, fp, r0
    tmp1 += tmp4 + tmp5 +
 800c242:	f241 4c4b 	movw	ip, #5195	@ 0x144b
	    MULTIPLY(tmp15, FIX(1.711799069));          /* c3+c7 */
    tmp3 += tmp5 + tmp6 +
	    MULTIPLY(tmp13, FIX(1.670519935)) -         /* c3+c5+c9-c7 */
	    MULTIPLY(tmp15, FIX(1.319646532));          /* c1+c11 */

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+1);
 800c246:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 800c24a:	1380      	asrs	r0, r0, #14
 800c24c:	6218      	str	r0, [r3, #32]
    tmp1 += tmp4 + tmp5 +
 800c24e:	1850      	adds	r0, r2, r1
    tmp2 += tmp4 + tmp6 -
 800c250:	442a      	add	r2, r5
    tmp3 += tmp5 + tmp6 +
 800c252:	4429      	add	r1, r5
    tmp1 += tmp4 + tmp5 +
 800c254:	fb0c 0009 	mla	r0, ip, r9, r0
	    MULTIPLY(tmp11, FIX(0.634110155)) -         /* c5+c9+c11-c3 */
 800c258:	f46f 5c63 	mvn.w	ip, #14528	@ 0x38c0
 800c25c:	fb0c 000b 	mla	r0, ip, fp, r0
    tmp1 += tmp4 + tmp5 +
 800c260:	4438      	add	r0, r7
    tmp2 += tmp4 + tmp6 -
 800c262:	9f02      	ldr	r7, [sp, #8]
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+1);
 800c264:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 800c268:	1380      	asrs	r0, r0, #14
 800c26a:	6618      	str	r0, [r3, #96]	@ 0x60
    tmp2 += tmp4 + tmp6 -
 800c26c:	4818      	ldr	r0, [pc, #96]	@ (800c2d0 <jpeg_fdct_13x13+0x4b0>)
 800c26e:	fb00 2207 	mla	r2, r0, r7, r2
	    MULTIPLY(tmp12, FIX(1.190715098)) +         /* c1+c5-c9-c11 */
 800c272:	f243 60c7 	movw	r0, #14023	@ 0x36c7
 800c276:	fb00 220e 	mla	r2, r0, lr, r2
    tmp2 += tmp4 + tmp6 -
 800c27a:	4432      	add	r2, r6
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+1);
 800c27c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800c280:	1392      	asrs	r2, r2, #14
 800c282:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    tmp3 += tmp5 + tmp6 +
 800c286:	f243 5275 	movw	r2, #13685	@ 0x3575
 800c28a:	fb02 1108 	mla	r1, r2, r8, r1
	    MULTIPLY(tmp13, FIX(1.670519935)) -         /* c3+c5+c9-c7 */
 800c28e:	4a11      	ldr	r2, [pc, #68]	@ (800c2d4 <jpeg_fdct_13x13+0x4b4>)
 800c290:	fb02 110e 	mla	r1, r2, lr, r1
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800c294:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    tmp3 += tmp5 + tmp6 +
 800c296:	4421      	add	r1, r4
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800c298:	429a      	cmp	r2, r3
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3, CONST_BITS+1);
 800c29a:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800c29e:	ea4f 31a1 	mov.w	r1, r1, asr #14
 800c2a2:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800c2a6:	f47f aef2 	bne.w	800c08e <jpeg_fdct_13x13+0x26e>

    dataptr++;			/* advance pointer to next column */
    wsptr++;			/* advance pointer to next column */
  }
}
 800c2aa:	b037      	add	sp, #220	@ 0xdc
 800c2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b0:	fffffbde 	.word	0xfffffbde
 800c2b4:	ffffec87 	.word	0xffffec87
 800c2b8:	ffffe1a6 	.word	0xffffe1a6
 800c2bc:	fffff570 	.word	0xfffff570
 800c2c0:	fffff7cc 	.word	0xfffff7cc
 800c2c4:	ffffe948 	.word	0xffffe948
 800c2c8:	ffffe3cb 	.word	0xffffe3cb
 800c2cc:	fffff012 	.word	0xfffff012
 800c2d0:	ffffd9e6 	.word	0xffffd9e6
 800c2d4:	ffffd5c5 	.word	0xffffd5c5
 800c2d8:	ffffcf0a 	.word	0xffffcf0a

0800c2dc <jpeg_fdct_14x14>:
 * Perform the forward DCT on a 14x14 sample block.
 */

GLOBAL(void)
jpeg_fdct_14x14 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800c2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT. */
  /* cK represents sqrt(2) * cos(K*pi/28). */

  dataptr = data;
  ctr = 0;
 800c2e0:	f04f 0c00 	mov.w	ip, #0
{
 800c2e4:	b0bf      	sub	sp, #252	@ 0xfc
  dataptr = data;
 800c2e6:	4607      	mov	r7, r0
{
 800c2e8:	9001      	str	r0, [sp, #4]
 800c2ea:	e9cd 210c 	strd	r2, r1, [sp, #48]	@ 0x30
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 800c2ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[13]);
 800c2f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
    elemptr = sample_data[ctr] + start_col;
 800c2f2:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
    dataptr[1] = (DCTELEM)
      DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
	      MULTIPLY(tmp0 + tmp6, FIX(1.126980169)),    /* c3+c5-c1 */
	      CONST_BITS);

    ctr++;
 800c2f6:	f10c 0c01 	add.w	ip, ip, #1
    elemptr = sample_data[ctr] + start_col;
 800c2fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30

    if (ctr != DCTSIZE) {
 800c2fc:	f1bc 0f08 	cmp.w	ip, #8
    elemptr = sample_data[ctr] + start_col;
 800c300:	4413      	add	r3, r2
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[13]);
 800c302:	5c52      	ldrb	r2, [r2, r1]
 800c304:	f893 900d 	ldrb.w	r9, [r3, #13]
 800c308:	9200      	str	r2, [sp, #0]
 800c30a:	444a      	add	r2, r9
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[11]);
 800c30c:	f893 e00b 	ldrb.w	lr, [r3, #11]
    tmp13 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[10]);
 800c310:	f893 b00a 	ldrb.w	fp, [r3, #10]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[13]);
 800c314:	9209      	str	r2, [sp, #36]	@ 0x24
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[12]);
 800c316:	785a      	ldrb	r2, [r3, #1]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[9]);
 800c318:	7a58      	ldrb	r0, [r3, #9]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[12]);
 800c31a:	9202      	str	r2, [sp, #8]
 800c31c:	7b1a      	ldrb	r2, [r3, #12]
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[8]);
 800c31e:	795e      	ldrb	r6, [r3, #5]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[12]);
 800c320:	9203      	str	r2, [sp, #12]
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[7]);
 800c322:	799c      	ldrb	r4, [r3, #6]
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[8]);
 800c324:	7a1d      	ldrb	r5, [r3, #8]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[9]);
 800c326:	9007      	str	r0, [sp, #28]
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[8]);
 800c328:	eb06 0805 	add.w	r8, r6, r5
    tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[8]);
 800c32c:	eba6 0505 	sub.w	r5, r6, r5
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[12]);
 800c330:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c334:	440a      	add	r2, r1
 800c336:	920a      	str	r2, [sp, #40]	@ 0x28
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[11]);
 800c338:	789a      	ldrb	r2, [r3, #2]
 800c33a:	9204      	str	r2, [sp, #16]
 800c33c:	4472      	add	r2, lr
 800c33e:	920b      	str	r2, [sp, #44]	@ 0x2c
    tmp13 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[10]);
 800c340:	78da      	ldrb	r2, [r3, #3]
 800c342:	eb02 010b 	add.w	r1, r2, fp
 800c346:	9205      	str	r2, [sp, #20]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[9]);
 800c348:	791a      	ldrb	r2, [r3, #4]
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[7]);
 800c34a:	79db      	ldrb	r3, [r3, #7]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[9]);
 800c34c:	4410      	add	r0, r2
 800c34e:	9206      	str	r2, [sp, #24]
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[7]);
 800c350:	eb04 0a03 	add.w	sl, r4, r3
 800c354:	9308      	str	r3, [sp, #32]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[9]);
 800c356:	4602      	mov	r2, r0
    tmp10 = tmp0 + tmp6;
 800c358:	9809      	ldr	r0, [sp, #36]	@ 0x24
    tmp14 = tmp0 - tmp6;
 800c35a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    tmp10 = tmp0 + tmp6;
 800c35c:	4450      	add	r0, sl
    tmp14 = tmp0 - tmp6;
 800c35e:	eba3 030a 	sub.w	r3, r3, sl
 800c362:	9309      	str	r3, [sp, #36]	@ 0x24
    tmp11 = tmp1 + tmp5;
 800c364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c366:	eb03 0a08 	add.w	sl, r3, r8
    tmp15 = tmp1 - tmp5;
 800c36a:	eba3 0308 	sub.w	r3, r3, r8
 800c36e:	930a      	str	r3, [sp, #40]	@ 0x28
    tmp12 = tmp2 + tmp4;
 800c370:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c372:	eb03 0802 	add.w	r8, r3, r2
    tmp16 = tmp2 - tmp4;
 800c376:	eba3 0302 	sub.w	r3, r3, r2
 800c37a:	930b      	str	r3, [sp, #44]	@ 0x2c
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[13]);
 800c37c:	9b00      	ldr	r3, [sp, #0]
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.273079590))   /* c2-c6 */
 800c37e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[13]);
 800c380:	eba3 0909 	sub.w	r9, r3, r9
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[12]);
 800c384:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c388:	eba3 0302 	sub.w	r3, r3, r2
 800c38c:	9300      	str	r3, [sp, #0]
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[11]);
 800c38e:	9b04      	ldr	r3, [sp, #16]
 800c390:	eba3 0e0e 	sub.w	lr, r3, lr
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[10]);
 800c394:	9b05      	ldr	r3, [sp, #20]
 800c396:	eba3 0b0b 	sub.w	fp, r3, fp
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[9]);
 800c39a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c39e:	eba2 0203 	sub.w	r2, r2, r3
    tmp6 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[7]);
 800c3a2:	9b08      	ldr	r3, [sp, #32]
 800c3a4:	eba4 0303 	sub.w	r3, r4, r3
      (tmp10 + tmp11 + tmp12 + tmp13 - 14 * CENTERJSAMPLE);
 800c3a8:	eb00 040a 	add.w	r4, r0, sl
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
 800c3ac:	ebaa 0a41 	sub.w	sl, sl, r1, lsl #1
      (tmp10 + tmp11 + tmp12 + tmp13 - 14 * CENTERJSAMPLE);
 800c3b0:	4444      	add	r4, r8
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
 800c3b2:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 800c3b6:	eba8 0841 	sub.w	r8, r8, r1, lsl #1
      (tmp10 + tmp11 + tmp12 + tmp13 - 14 * CENTERJSAMPLE);
 800c3ba:	440c      	add	r4, r1
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
 800c3bc:	49c9      	ldr	r1, [pc, #804]	@ (800c6e4 <jpeg_fdct_14x14+0x408>)
      (tmp10 + tmp11 + tmp12 + tmp13 - 14 * CENTERJSAMPLE);
 800c3be:	f5a4 64e0 	sub.w	r4, r4, #1792	@ 0x700
    dataptr[0] = (DCTELEM)
 800c3c2:	603c      	str	r4, [r7, #0]
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
 800c3c4:	f640 2412 	movw	r4, #2578	@ 0xa12
 800c3c8:	fb04 fa0a 	mul.w	sl, r4, sl
 800c3cc:	f642 04c6 	movw	r4, #10438	@ 0x28c6
 800c3d0:	fb04 aa00 	mla	sl, r4, r0, sl
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.273079590))   /* c2-c6 */
 800c3d4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
 800c3d6:	fb01 aa08 	mla	sl, r1, r8, sl
 800c3da:	f50a 5180 	add.w	r1, sl, #4096	@ 0x1000
 800c3de:	ea4f 3161 	mov.w	r1, r1, asr #13
    dataptr[4] = (DCTELEM)
 800c3e2:	6139      	str	r1, [r7, #16]
    tmp10 = MULTIPLY(tmp14 + tmp15, FIX(1.105676686));    /* c6 */
 800c3e4:	e9dd 1009 	ldrd	r1, r0, [sp, #36]	@ 0x24
 800c3e8:	4401      	add	r1, r0
 800c3ea:	f242 3062 	movw	r0, #9058	@ 0x2362
 800c3ee:	fb00 f101 	mul.w	r1, r0, r1
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.273079590))   /* c2-c6 */
 800c3f2:	f640 00bd 	movw	r0, #2237	@ 0x8bd
 800c3f6:	fb00 1004 	mla	r0, r0, r4, r1
 800c3fa:	f241 34a3 	movw	r4, #5027	@ 0x13a3
 800c3fe:	fb04 0006 	mla	r0, r4, r6, r0
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.719280954))   /* c6+c10 */
 800c402:	4cb9      	ldr	r4, [pc, #740]	@ (800c6e8 <jpeg_fdct_14x14+0x40c>)
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.273079590))   /* c2-c6 */
 800c404:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 800c408:	ea4f 3060 	mov.w	r0, r0, asr #13
    dataptr[2] = (DCTELEM)
 800c40c:	60b8      	str	r0, [r7, #8]
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.719280954))   /* c6+c10 */
 800c40e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c410:	fb04 1100 	mla	r1, r4, r0, r1
 800c414:	f604 24e5 	addw	r4, r4, #2789	@ 0xae5
 800c418:	fb04 1106 	mla	r1, r4, r6, r1
	    MULTIPLY(tmp4 + tmp6, FIX(0.752406978));      /* c9 */
 800c41c:	f641 0614 	movw	r6, #6164	@ 0x1814
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.719280954))   /* c6+c10 */
 800c420:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800c424:	ea4f 3161 	mov.w	r1, r1, asr #13
    dataptr[6] = (DCTELEM)
 800c428:	61b9      	str	r1, [r7, #24]
    tmp10 = tmp1 + tmp2;
 800c42a:	9900      	ldr	r1, [sp, #0]
 800c42c:	eb01 040e 	add.w	r4, r1, lr
    tmp11 = tmp5 - tmp4;
 800c430:	eba5 0102 	sub.w	r1, r5, r2
    dataptr[7] = (DCTELEM) (tmp0 - tmp10 + tmp3 - tmp11 - tmp6);
 800c434:	eba9 0004 	sub.w	r0, r9, r4
 800c438:	4458      	add	r0, fp
 800c43a:	eba0 0001 	sub.w	r0, r0, r1
 800c43e:	eba0 0003 	sub.w	r0, r0, r3
 800c442:	61f8      	str	r0, [r7, #28]
    tmp11 = MULTIPLY(tmp11, FIX(1.405321284));            /* c1 */
 800c444:	f642 40f8 	movw	r0, #11512	@ 0x2cf8
 800c448:	fb00 f101 	mul.w	r1, r0, r1
    tmp10 += tmp11 - tmp3;
 800c44c:	f46f 60a2 	mvn.w	r0, #1296	@ 0x510
 800c450:	eba1 314b 	sub.w	r1, r1, fp, lsl #13
 800c454:	fb00 1104 	mla	r1, r0, r4, r1
	    MULTIPLY(tmp4 + tmp6, FIX(0.752406978));      /* c9 */
 800c458:	eb02 0003 	add.w	r0, r2, r3
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(1.197448846)) +     /* c5 */
 800c45c:	eb09 040e 	add.w	r4, r9, lr
	    MULTIPLY(tmp4 + tmp6, FIX(0.752406978));      /* c9 */
 800c460:	fb06 f000 	mul.w	r0, r6, r0
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(1.197448846)) +     /* c5 */
 800c464:	f242 6652 	movw	r6, #9810	@ 0x2652
 800c468:	fb06 0004 	mla	r0, r6, r4, r0
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(2.373959773)) /* c3+c5-c13 */
 800c46c:	4e9f      	ldr	r6, [pc, #636]	@ (800c6ec <jpeg_fdct_14x14+0x410>)
 800c46e:	eb01 0400 	add.w	r4, r1, r0
 800c472:	fb06 440e 	mla	r4, r6, lr, r4
 800c476:	f242 36d7 	movw	r6, #9175	@ 0x23d7
 800c47a:	fb06 4402 	mla	r4, r6, r2, r4
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(1.334852607)) +     /* c3 */
 800c47e:	9a00      	ldr	r2, [sp, #0]
	    MULTIPLY(tmp5 - tmp6, FIX(0.467085129));      /* c11 */
 800c480:	f640 66f2 	movw	r6, #3826	@ 0xef2
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(2.373959773)) /* c3+c5-c13 */
 800c484:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 800c488:	ea4f 3464 	mov.w	r4, r4, asr #13
    dataptr[5] = (DCTELEM)
 800c48c:	617c      	str	r4, [r7, #20]
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(1.334852607)) +     /* c3 */
 800c48e:	eb09 0402 	add.w	r4, r9, r2
	    MULTIPLY(tmp5 - tmp6, FIX(0.467085129));      /* c11 */
 800c492:	eba5 0203 	sub.w	r2, r5, r3
 800c496:	fb06 f202 	mul.w	r2, r6, r2
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(1.334852607)) +     /* c3 */
 800c49a:	f642 26b7 	movw	r6, #10935	@ 0x2ab7
 800c49e:	fb06 2204 	mla	r2, r6, r4, r2
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
 800c4a2:	9c00      	ldr	r4, [sp, #0]
 800c4a4:	4e92      	ldr	r6, [pc, #584]	@ (800c6f0 <jpeg_fdct_14x14+0x414>)
      DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
 800c4a6:	4410      	add	r0, r2
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
 800c4a8:	4411      	add	r1, r2
      DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
 800c4aa:	4a92      	ldr	r2, [pc, #584]	@ (800c6f4 <jpeg_fdct_14x14+0x418>)
 800c4ac:	eb00 304b 	add.w	r0, r0, fp, lsl #13
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
 800c4b0:	fb06 1104 	mla	r1, r6, r4, r1
 800c4b4:	4c90      	ldr	r4, [pc, #576]	@ (800c6f8 <jpeg_fdct_14x14+0x41c>)
      DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
 800c4b6:	4418      	add	r0, r3
 800c4b8:	444b      	add	r3, r9
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
 800c4ba:	fb04 1105 	mla	r1, r4, r5, r1
      DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
 800c4be:	fb02 0003 	mla	r0, r2, r3, r0
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
 800c4c2:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
      DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
 800c4c6:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
 800c4ca:	ea4f 3161 	mov.w	r1, r1, asr #13
      DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
 800c4ce:	ea4f 3060 	mov.w	r0, r0, asr #13
    dataptr[3] = (DCTELEM)
 800c4d2:	60f9      	str	r1, [r7, #12]
    dataptr[1] = (DCTELEM)
 800c4d4:	6078      	str	r0, [r7, #4]
    if (ctr != DCTSIZE) {
 800c4d6:	d004      	beq.n	800c4e2 <jpeg_fdct_14x14+0x206>
      if (ctr == 14)
 800c4d8:	f1bc 0f0e 	cmp.w	ip, #14
 800c4dc:	d003      	beq.n	800c4e6 <jpeg_fdct_14x14+0x20a>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 800c4de:	3720      	adds	r7, #32
 800c4e0:	e705      	b.n	800c2ee <jpeg_fdct_14x14+0x12>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 800c4e2:	af0e      	add	r7, sp, #56	@ 0x38
 800c4e4:	e703      	b.n	800c2ee <jpeg_fdct_14x14+0x12>
 800c4e6:	9b01      	ldr	r3, [sp, #4]
   * fold into the constant multipliers and final shifting:
   * cK now represents sqrt(2) * cos(K*pi/28) * 32/49.
   */

  dataptr = data;
  wsptr = workspace;
 800c4e8:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 800c4ec:	9a01      	ldr	r2, [sp, #4]
 800c4ee:	3b04      	subs	r3, #4
 800c4f0:	321c      	adds	r2, #28
 800c4f2:	9206      	str	r2, [sp, #24]
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*5];
 800c4f4:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*4];
 800c4f8:	f8db c080 	ldr.w	ip, [fp, #128]	@ 0x80
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*5];
 800c4fc:	9200      	str	r2, [sp, #0]
 800c4fe:	f8db 20a0 	ldr.w	r2, [fp, #160]	@ 0xa0
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*3];
    tmp13 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*2];
 800c502:	f8db 0040 	ldr.w	r0, [fp, #64]	@ 0x40
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*5];
 800c506:	9201      	str	r2, [sp, #4]
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*1];
 800c508:	f8d3 6080 	ldr.w	r6, [r3, #128]	@ 0x80
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*5];
 800c50c:	e9dd 2100 	ldrd	r2, r1, [sp]
 800c510:	440a      	add	r2, r1
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*3];
 800c512:	f8db 1060 	ldr.w	r1, [fp, #96]	@ 0x60
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*5];
 800c516:	9203      	str	r2, [sp, #12]
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*4];
 800c518:	6a1a      	ldr	r2, [r3, #32]
 800c51a:	eb02 090c 	add.w	r9, r2, ip
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*3];
 800c51e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c520:	1854      	adds	r4, r2, r1
    tmp13 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*2];
 800c522:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c524:	1815      	adds	r5, r2, r0
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*1];
 800c526:	f8db 2020 	ldr.w	r2, [fp, #32]
 800c52a:	eb06 0e02 	add.w	lr, r6, r2
    tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*0];
 800c52e:	f85b 6b04 	ldr.w	r6, [fp], #4
 800c532:	9602      	str	r6, [sp, #8]
 800c534:	9f02      	ldr	r7, [sp, #8]
 800c536:	f8d3 60a0 	ldr.w	r6, [r3, #160]	@ 0xa0
 800c53a:	eb06 0807 	add.w	r8, r6, r7
    tmp6 = dataptr[DCTSIZE*6] + dataptr[DCTSIZE*7];
 800c53e:	f8d3 60c0 	ldr.w	r6, [r3, #192]	@ 0xc0
 800c542:	f8d3 70e0 	ldr.w	r7, [r3, #224]	@ 0xe0
 800c546:	eb06 0a07 	add.w	sl, r6, r7

    tmp10 = tmp0 + tmp6;
    tmp14 = tmp0 - tmp6;
 800c54a:	9f03      	ldr	r7, [sp, #12]
    tmp10 = tmp0 + tmp6;
 800c54c:	9e03      	ldr	r6, [sp, #12]
    tmp14 = tmp0 - tmp6;
 800c54e:	eba7 070a 	sub.w	r7, r7, sl
    tmp10 = tmp0 + tmp6;
 800c552:	4456      	add	r6, sl
    tmp11 = tmp1 + tmp5;
 800c554:	eb09 0a08 	add.w	sl, r9, r8
    tmp14 = tmp0 - tmp6;
 800c558:	9703      	str	r7, [sp, #12]
    tmp15 = tmp1 - tmp5;
 800c55a:	eba9 0708 	sub.w	r7, r9, r8
    tmp12 = tmp2 + tmp4;
 800c55e:	eb04 080e 	add.w	r8, r4, lr
    tmp16 = tmp2 - tmp4;
 800c562:	eba4 040e 	sub.w	r4, r4, lr
    tmp15 = tmp1 - tmp5;
 800c566:	9704      	str	r7, [sp, #16]
    tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*1];
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*0];
    tmp6 = dataptr[DCTSIZE*6] - dataptr[DCTSIZE*7];

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12 + tmp13,
 800c568:	eb06 0e0a 	add.w	lr, r6, sl
    tmp16 = tmp2 - tmp4;
 800c56c:	9405      	str	r4, [sp, #20]
		       FIX(0.653061224)),                 /* 32/49 */
	      CONST_BITS+1);
    tmp13 += tmp13;
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
 800c56e:	ebaa 0a45 	sub.w	sl, sl, r5, lsl #1
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12 + tmp13,
 800c572:	44c6      	add	lr, r8
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
 800c574:	eba6 0645 	sub.w	r6, r6, r5, lsl #1
 800c578:	eba8 0845 	sub.w	r8, r8, r5, lsl #1
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12 + tmp13,
 800c57c:	44ae      	add	lr, r5
    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*5];
 800c57e:	e9dd 7400 	ldrd	r7, r4, [sp]
 800c582:	eba7 0904 	sub.w	r9, r7, r4
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*4];
 800c586:	6a1c      	ldr	r4, [r3, #32]
 800c588:	eba4 040c 	sub.w	r4, r4, ip
 800c58c:	9400      	str	r4, [sp, #0]
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*3];
 800c58e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800c590:	1a61      	subs	r1, r4, r1
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*2];
 800c592:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 800c594:	1a20      	subs	r0, r4, r0
    tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*1];
 800c596:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*0];
 800c59a:	9f02      	ldr	r7, [sp, #8]
    tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*1];
 800c59c:	1aa2      	subs	r2, r4, r2
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*0];
 800c59e:	f8d3 40a0 	ldr.w	r4, [r3, #160]	@ 0xa0
 800c5a2:	1be4      	subs	r4, r4, r7
    tmp6 = dataptr[DCTSIZE*6] - dataptr[DCTSIZE*7];
 800c5a4:	f8d3 70e0 	ldr.w	r7, [r3, #224]	@ 0xe0
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*0];
 800c5a8:	9401      	str	r4, [sp, #4]
    tmp6 = dataptr[DCTSIZE*6] - dataptr[DCTSIZE*7];
 800c5aa:	f8d3 40c0 	ldr.w	r4, [r3, #192]	@ 0xc0
 800c5ae:	eba4 0c07 	sub.w	ip, r4, r7
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12 + tmp13,
 800c5b2:	f241 47e6 	movw	r7, #5350	@ 0x14e6
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
 800c5b6:	4c51      	ldr	r4, [pc, #324]	@ (800c6fc <jpeg_fdct_14x14+0x420>)
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12 + tmp13,
 800c5b8:	fb07 fe0e 	mul.w	lr, r7, lr
 800c5bc:	f50e 5e00 	add.w	lr, lr, #8192	@ 0x2000
 800c5c0:	ea4f 3eae 	mov.w	lr, lr, asr #14
    dataptr[DCTSIZE*0] = (DCTELEM)
 800c5c4:	f8c3 e000 	str.w	lr, [r3]
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
 800c5c8:	f240 6e94 	movw	lr, #1684	@ 0x694
 800c5cc:	fb0e fa0a 	mul.w	sl, lr, sl
 800c5d0:	f641 2ea1 	movw	lr, #6817	@ 0x1aa1
 800c5d4:	fb0e aa06 	mla	sl, lr, r6, sl
	      MULTIPLY(tmp11 - tmp13, FIX(0.205513223)) - /* c12 */
	      MULTIPLY(tmp12 - tmp13, FIX(0.575835255)),  /* c8 */
	      CONST_BITS+1);

    tmp10 = MULTIPLY(tmp14 + tmp15, FIX(0.722074570));    /* c6 */
 800c5d8:	f241 761b 	movw	r6, #5915	@ 0x171b

    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.178337691))   /* c2-c6 */
 800c5dc:	f640 4ed3 	movw	lr, #3283	@ 0xcd3
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
 800c5e0:	fb04 aa08 	mla	sl, r4, r8, sl
 800c5e4:	f50a 5500 	add.w	r5, sl, #8192	@ 0x2000
 800c5e8:	13ad      	asrs	r5, r5, #14
    dataptr[DCTSIZE*4] = (DCTELEM)
 800c5ea:	f8c3 5080 	str.w	r5, [r3, #128]	@ 0x80
    tmp10 = MULTIPLY(tmp14 + tmp15, FIX(0.722074570));    /* c6 */
 800c5ee:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
 800c5f2:	1965      	adds	r5, r4, r5
 800c5f4:	4375      	muls	r5, r6
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.178337691))   /* c2-c6 */
 800c5f6:	f240 56b5 	movw	r6, #1461	@ 0x5b5
 800c5fa:	fb06 5604 	mla	r6, r6, r4, r5
 800c5fe:	9c05      	ldr	r4, [sp, #20]
 800c600:	fb0e 6604 	mla	r6, lr, r4, r6
	      + MULTIPLY(tmp16, FIX(0.400721155)),        /* c10 */
	      CONST_BITS+1);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.122795725))   /* c6+c10 */
 800c604:	9c04      	ldr	r4, [sp, #16]
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.178337691))   /* c2-c6 */
 800c606:	f506 5600 	add.w	r6, r6, #8192	@ 0x2000
 800c60a:	13b6      	asrs	r6, r6, #14
    dataptr[DCTSIZE*2] = (DCTELEM)
 800c60c:	641e      	str	r6, [r3, #64]	@ 0x40
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.122795725))   /* c6+c10 */
 800c60e:	4e3c      	ldr	r6, [pc, #240]	@ (800c700 <jpeg_fdct_14x14+0x424>)
 800c610:	fb06 5504 	mla	r5, r6, r4, r5
 800c614:	4c3b      	ldr	r4, [pc, #236]	@ (800c704 <jpeg_fdct_14x14+0x428>)
 800c616:	9e05      	ldr	r6, [sp, #20]
 800c618:	fb04 5506 	mla	r5, r4, r6, r5
	      - MULTIPLY(tmp16, FIX(0.900412262)),        /* c2 */
	      CONST_BITS+1);

    /* Odd part */

    tmp10 = tmp1 + tmp2;
 800c61c:	9c00      	ldr	r4, [sp, #0]
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.122795725))   /* c6+c10 */
 800c61e:	f505 5500 	add.w	r5, r5, #8192	@ 0x2000
 800c622:	13ad      	asrs	r5, r5, #14
    dataptr[DCTSIZE*6] = (DCTELEM)
 800c624:	f8c3 50c0 	str.w	r5, [r3, #192]	@ 0xc0
    tmp10 = tmp1 + tmp2;
 800c628:	1865      	adds	r5, r4, r1
    tmp11 = tmp5 - tmp4;
 800c62a:	9c01      	ldr	r4, [sp, #4]
    dataptr[DCTSIZE*7] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 - tmp10 + tmp3 - tmp11 - tmp6,
 800c62c:	eba9 0605 	sub.w	r6, r9, r5
    tmp11 = tmp5 - tmp4;
 800c630:	1aa4      	subs	r4, r4, r2
      DESCALE(MULTIPLY(tmp0 - tmp10 + tmp3 - tmp11 - tmp6,
 800c632:	4406      	add	r6, r0
 800c634:	1b36      	subs	r6, r6, r4
 800c636:	eba6 060c 	sub.w	r6, r6, ip
 800c63a:	437e      	muls	r6, r7
		       FIX(0.653061224)),                 /* 32/49 */
	      CONST_BITS+1);
    tmp3  = MULTIPLY(tmp3 , FIX(0.653061224));            /* 32/49 */
 800c63c:	4347      	muls	r7, r0
    tmp10 = MULTIPLY(tmp10, - FIX(0.103406812));          /* -c13 */
    tmp11 = MULTIPLY(tmp11, FIX(0.917760839));            /* c1 */
 800c63e:	f641 505e 	movw	r0, #7518	@ 0x1d5e
      DESCALE(MULTIPLY(tmp0 - tmp10 + tmp3 - tmp11 - tmp6,
 800c642:	f506 5600 	add.w	r6, r6, #8192	@ 0x2000
    tmp11 = MULTIPLY(tmp11, FIX(0.917760839));            /* c1 */
 800c646:	4360      	muls	r0, r4
    tmp10 += tmp11 - tmp3;
 800c648:	4c2f      	ldr	r4, [pc, #188]	@ (800c708 <jpeg_fdct_14x14+0x42c>)
      DESCALE(MULTIPLY(tmp0 - tmp10 + tmp3 - tmp11 - tmp6,
 800c64a:	13b6      	asrs	r6, r6, #14
    tmp10 += tmp11 - tmp3;
 800c64c:	1bc0      	subs	r0, r0, r7
    dataptr[DCTSIZE*7] = (DCTELEM)
 800c64e:	f8c3 60e0 	str.w	r6, [r3, #224]	@ 0xe0
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(0.782007410)) +     /* c5 */
	    MULTIPLY(tmp4 + tmp6, FIX(0.491367823));      /* c9 */
 800c652:	f640 76b9 	movw	r6, #4025	@ 0xfb9
    tmp10 += tmp11 - tmp3;
 800c656:	fb04 0005 	mla	r0, r4, r5, r0
	    MULTIPLY(tmp4 + tmp6, FIX(0.491367823));      /* c9 */
 800c65a:	eb02 040c 	add.w	r4, r2, ip
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(0.782007410)) +     /* c5 */
 800c65e:	eb09 0501 	add.w	r5, r9, r1
	    MULTIPLY(tmp4 + tmp6, FIX(0.491367823));      /* c9 */
 800c662:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(0.782007410)) +     /* c5 */
 800c664:	f641 1606 	movw	r6, #6406	@ 0x1906
 800c668:	fb06 4405 	mla	r4, r6, r5, r4
    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(1.550341076)) /* c3+c5-c13 */
 800c66c:	4e27      	ldr	r6, [pc, #156]	@ (800c70c <jpeg_fdct_14x14+0x430>)
 800c66e:	1905      	adds	r5, r0, r4
 800c670:	fb06 5101 	mla	r1, r6, r1, r5
 800c674:	f241 7568 	movw	r5, #5992	@ 0x1768
 800c678:	fb05 1102 	mla	r1, r5, r2, r1
	      + MULTIPLY(tmp4, FIX(0.731428202)),         /* c1+c11-c9 */
	      CONST_BITS+1);
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(0.871740478)) +     /* c3 */
 800c67c:	9a00      	ldr	r2, [sp, #0]
	    MULTIPLY(tmp5 - tmp6, FIX(0.305035186));      /* c11 */
 800c67e:	f640 15c3 	movw	r5, #2499	@ 0x9c3
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(1.550341076)) /* c3+c5-c13 */
 800c682:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800c686:	1389      	asrs	r1, r1, #14
    dataptr[DCTSIZE*5] = (DCTELEM)
 800c688:	f8c3 10a0 	str.w	r1, [r3, #160]	@ 0xa0
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(0.871740478)) +     /* c3 */
 800c68c:	eb09 0102 	add.w	r1, r9, r2
	    MULTIPLY(tmp5 - tmp6, FIX(0.305035186));      /* c11 */
 800c690:	9a01      	ldr	r2, [sp, #4]
 800c692:	eba2 020c 	sub.w	r2, r2, ip
 800c696:	436a      	muls	r2, r5
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(0.871740478)) +     /* c3 */
 800c698:	f641 35e5 	movw	r5, #7141	@ 0x1be5
 800c69c:	fb05 2201 	mla	r2, r5, r1, r2
    dataptr[DCTSIZE*3] = (DCTELEM)
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 800c6a0:	9900      	ldr	r1, [sp, #0]
 800c6a2:	4d1b      	ldr	r5, [pc, #108]	@ (800c710 <jpeg_fdct_14x14+0x434>)
	      - MULTIPLY(tmp5, FIX(2.004803435)),         /* c1+c5+c11 */
	      CONST_BITS+1);
    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(tmp11 + tmp12 + tmp3
 800c6a4:	4414      	add	r4, r2
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 800c6a6:	4410      	add	r0, r2
      DESCALE(tmp11 + tmp12 + tmp3
 800c6a8:	4a1a      	ldr	r2, [pc, #104]	@ (800c714 <jpeg_fdct_14x14+0x438>)
 800c6aa:	443c      	add	r4, r7
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 800c6ac:	fb05 0001 	mla	r0, r5, r1, r0
 800c6b0:	9901      	ldr	r1, [sp, #4]
      DESCALE(tmp11 + tmp12 + tmp3
 800c6b2:	fb02 4409 	mla	r4, r2, r9, r4
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 800c6b6:	4d18      	ldr	r5, [pc, #96]	@ (800c718 <jpeg_fdct_14x14+0x43c>)
      DESCALE(tmp11 + tmp12 + tmp3
 800c6b8:	4a18      	ldr	r2, [pc, #96]	@ (800c71c <jpeg_fdct_14x14+0x440>)
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 800c6ba:	fb05 0001 	mla	r0, r5, r1, r0
      DESCALE(tmp11 + tmp12 + tmp3
 800c6be:	fb02 440c 	mla	r4, r2, ip, r4
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800c6c2:	9a06      	ldr	r2, [sp, #24]
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 800c6c4:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
      DESCALE(tmp11 + tmp12 + tmp3
 800c6c8:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800c6cc:	429a      	cmp	r2, r3
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 800c6ce:	ea4f 30a0 	mov.w	r0, r0, asr #14
      DESCALE(tmp11 + tmp12 + tmp3
 800c6d2:	ea4f 34a4 	mov.w	r4, r4, asr #14
    dataptr[DCTSIZE*3] = (DCTELEM)
 800c6d6:	6618      	str	r0, [r3, #96]	@ 0x60
    dataptr[DCTSIZE*1] = (DCTELEM)
 800c6d8:	621c      	str	r4, [r3, #32]
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800c6da:	f47f af0b 	bne.w	800c4f4 <jpeg_fdct_14x14+0x218>
	      CONST_BITS+1);

    dataptr++;			/* advance pointer to next column */
    wsptr++;			/* advance pointer to next column */
  }
}
 800c6de:	b03f      	add	sp, #252	@ 0xfc
 800c6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e4:	ffffe3c9 	.word	0xffffe3c9
 800c6e8:	ffffc8fc 	.word	0xffffc8fc
 800c6ec:	ffffb409 	.word	0xffffb409
 800c6f0:	fffff26e 	.word	0xfffff26e
 800c6f4:	ffffdbf0 	.word	0xffffdbf0
 800c6f8:	ffff9dc4 	.word	0xffff9dc4
 800c6fc:	ffffed93 	.word	0xffffed93
 800c700:	ffffdc12 	.word	0xffffdc12
 800c704:	ffffe330 	.word	0xffffe330
 800c708:	fffffcb1 	.word	0xfffffcb1
 800c70c:	ffffce64 	.word	0xffffce64
 800c710:	fffff723 	.word	0xfffff723
 800c714:	ffffe873 	.word	0xffffe873
 800c718:	ffffbfd9 	.word	0xffffbfd9
 800c71c:	fffffd59 	.word	0xfffffd59

0800c720 <jpeg_fdct_15x15>:
 * Perform the forward DCT on a 15x15 sample block.
 */

GLOBAL(void)
jpeg_fdct_15x15 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800c720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT. */
  /* cK represents sqrt(2) * cos(K*pi/30). */

  dataptr = data;
  ctr = 0;
 800c724:	2300      	movs	r3, #0
{
 800c726:	b0c7      	sub	sp, #284	@ 0x11c
  dataptr = data;
 800c728:	4682      	mov	sl, r0
{
 800c72a:	9006      	str	r0, [sp, #24]
  ctr = 0;
 800c72c:	9300      	str	r3, [sp, #0]
{
 800c72e:	e9cd 210c 	strd	r2, r1, [sp, #48]	@ 0x30
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 800c732:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c734:	9a00      	ldr	r2, [sp, #0]

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[14]);
 800c736:	990c      	ldr	r1, [sp, #48]	@ 0x30
    elemptr = sample_data[ctr] + start_col;
 800c738:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c73c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c73e:	18d3      	adds	r3, r2, r3
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[14]);
 800c740:	5c52      	ldrb	r2, [r2, r1]
 800c742:	f893 b00e 	ldrb.w	fp, [r3, #14]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[13]);
 800c746:	f893 900d 	ldrb.w	r9, [r3, #13]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[14]);
 800c74a:	eb02 0e0b 	add.w	lr, r2, fp
 800c74e:	9207      	str	r2, [sp, #28]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[13]);
 800c750:	785a      	ldrb	r2, [r3, #1]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[12]);
 800c752:	f893 8002 	ldrb.w	r8, [r3, #2]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[13]);
 800c756:	9208      	str	r2, [sp, #32]
 800c758:	444a      	add	r2, r9
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[11]);
 800c75a:	f893 c003 	ldrb.w	ip, [r3, #3]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[13]);
 800c75e:	9201      	str	r2, [sp, #4]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[12]);
 800c760:	7b1a      	ldrb	r2, [r3, #12]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[11]);
 800c762:	7adf      	ldrb	r7, [r3, #11]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[12]);
 800c764:	9209      	str	r2, [sp, #36]	@ 0x24
 800c766:	4442      	add	r2, r8
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[10]);
 800c768:	7a9d      	ldrb	r5, [r3, #10]
 800c76a:	791e      	ldrb	r6, [r3, #4]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[12]);
 800c76c:	920b      	str	r2, [sp, #44]	@ 0x2c
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[11]);
 800c76e:	eb0c 0207 	add.w	r2, ip, r7
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[9]);
 800c772:	795c      	ldrb	r4, [r3, #5]
    tmp7 = GETJSAMPLE(elemptr[7]);

    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[14]);
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[13]);
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[12]);
    tmp13 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[11]);
 800c774:	ebac 0707 	sub.w	r7, ip, r7
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[11]);
 800c778:	9202      	str	r2, [sp, #8]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[10]);
 800c77a:	1972      	adds	r2, r6, r5
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[8]);
 800c77c:	7999      	ldrb	r1, [r3, #6]
    tmp14 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[10]);
 800c77e:	1b76      	subs	r6, r6, r5
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[10]);
 800c780:	9203      	str	r2, [sp, #12]
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[9]);
 800c782:	7a5a      	ldrb	r2, [r3, #9]
 800c784:	920a      	str	r2, [sp, #40]	@ 0x28
 800c786:	18a2      	adds	r2, r4, r2
 800c788:	9204      	str	r2, [sp, #16]
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[8]);
 800c78a:	7a1a      	ldrb	r2, [r3, #8]
    tmp7 = GETJSAMPLE(elemptr[7]);
 800c78c:	79db      	ldrb	r3, [r3, #7]
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[8]);
 800c78e:	1888      	adds	r0, r1, r2
    tmp15 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[9]);
    tmp16 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[8]);
 800c790:	1a8a      	subs	r2, r1, r2
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[8]);
 800c792:	9005      	str	r0, [sp, #20]
    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[14]);
 800c794:	9807      	ldr	r0, [sp, #28]
 800c796:	eba0 0b0b 	sub.w	fp, r0, fp
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[13]);
 800c79a:	9808      	ldr	r0, [sp, #32]
 800c79c:	eba0 0909 	sub.w	r9, r0, r9
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[12]);
 800c7a0:	9809      	ldr	r0, [sp, #36]	@ 0x24

    z1 = tmp0 + tmp4 + tmp5;
 800c7a2:	9903      	ldr	r1, [sp, #12]
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[12]);
 800c7a4:	eba8 0800 	sub.w	r8, r8, r0
    tmp15 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[9]);
 800c7a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c7aa:	eba4 0c00 	sub.w	ip, r4, r0
    z1 = tmp0 + tmp4 + tmp5;
 800c7ae:	eb0e 0001 	add.w	r0, lr, r1
 800c7b2:	9904      	ldr	r1, [sp, #16]
 800c7b4:	4408      	add	r0, r1
    z2 = tmp1 + tmp3 + tmp6;
 800c7b6:	e9dd 1401 	ldrd	r1, r4, [sp, #4]
 800c7ba:	4421      	add	r1, r4
 800c7bc:	9c05      	ldr	r4, [sp, #20]
 800c7be:	4421      	add	r1, r4
    z3 = tmp2 + tmp7;
 800c7c0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c7c2:	18e5      	adds	r5, r4, r3
    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM) (z1 + z2 + z3 - 15 * CENTERJSAMPLE);
 800c7c4:	1844      	adds	r4, r0, r1
 800c7c6:	442c      	add	r4, r5
    z3 += z3;
    dataptr[6] = (DCTELEM)
      DESCALE(MULTIPLY(z1 - z3, FIX(1.144122806)) - /* c6 */
 800c7c8:	eba1 0145 	sub.w	r1, r1, r5, lsl #1
 800c7cc:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
	      MULTIPLY(z2 - z3, FIX(0.437016024)),  /* c12 */
	      CONST_BITS);
    tmp2 += ((tmp1 + tmp4) >> 1) - tmp7 - tmp7;
    z1 = MULTIPLY(tmp3 - tmp2, FIX(1.531135173)) -  /* c2+c14 */
         MULTIPLY(tmp6 - tmp2, FIX(2.238241955));   /* c4+c8 */
 800c7d0:	4dd7      	ldr	r5, [pc, #860]	@ (800cb30 <jpeg_fdct_15x15+0x410>)
    dataptr[0] = (DCTELEM) (z1 + z2 + z3 - 15 * CENTERJSAMPLE);
 800c7d2:	f5a4 64f0 	sub.w	r4, r4, #1920	@ 0x780
 800c7d6:	f8ca 4000 	str.w	r4, [sl]
      DESCALE(MULTIPLY(z1 - z3, FIX(1.144122806)) - /* c6 */
 800c7da:	4cd6      	ldr	r4, [pc, #856]	@ (800cb34 <jpeg_fdct_15x15+0x414>)
 800c7dc:	4361      	muls	r1, r4
 800c7de:	f242 449d 	movw	r4, #9373	@ 0x249d
 800c7e2:	fb04 1100 	mla	r1, r4, r0, r1
    tmp2 += ((tmp1 + tmp4) >> 1) - tmp7 - tmp7;
 800c7e6:	9803      	ldr	r0, [sp, #12]
      DESCALE(MULTIPLY(z1 - z3, FIX(1.144122806)) - /* c6 */
 800c7e8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800c7ec:	1349      	asrs	r1, r1, #13
    dataptr[6] = (DCTELEM)
 800c7ee:	f8ca 1018 	str.w	r1, [sl, #24]
    tmp2 += ((tmp1 + tmp4) >> 1) - tmp7 - tmp7;
 800c7f2:	9901      	ldr	r1, [sp, #4]
 800c7f4:	4401      	add	r1, r0
 800c7f6:	ebc3 0151 	rsb	r1, r3, r1, lsr #1
 800c7fa:	1acb      	subs	r3, r1, r3
 800c7fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c7fe:	440b      	add	r3, r1
    z2 = MULTIPLY(tmp5 - tmp2, FIX(0.798468008)) -  /* c8-c14 */
	 MULTIPLY(tmp0 - tmp2, FIX(0.091361227));   /* c2-c4 */
    z3 = MULTIPLY(tmp0 - tmp3, FIX(1.383309603)) +  /* c2 */
 800c800:	9902      	ldr	r1, [sp, #8]
 800c802:	ebae 0001 	sub.w	r0, lr, r1
	 MULTIPLY(tmp6 - tmp5, FIX(0.946293579)) +  /* c8 */
 800c806:	e9dd 4104 	ldrd	r4, r1, [sp, #16]
 800c80a:	1b09      	subs	r1, r1, r4
 800c80c:	f641 6448 	movw	r4, #7752	@ 0x1e48
 800c810:	4361      	muls	r1, r4
    z3 = MULTIPLY(tmp0 - tmp3, FIX(1.383309603)) +  /* c2 */
 800c812:	f642 4444 	movw	r4, #11332	@ 0x2c44
 800c816:	fb04 1100 	mla	r1, r4, r0, r1
	 MULTIPLY(tmp1 - tmp4, FIX(0.790569415));   /* (c6+c12)/2 */
 800c81a:	9c03      	ldr	r4, [sp, #12]
 800c81c:	9801      	ldr	r0, [sp, #4]
 800c81e:	1b00      	subs	r0, r0, r4
    z3 = MULTIPLY(tmp0 - tmp3, FIX(1.383309603)) +  /* c2 */
 800c820:	f641 144c 	movw	r4, #6476	@ 0x194c
 800c824:	fb04 1000 	mla	r0, r4, r0, r1
    z1 = MULTIPLY(tmp3 - tmp2, FIX(1.531135173)) -  /* c2+c14 */
 800c828:	9902      	ldr	r1, [sp, #8]
 800c82a:	1acc      	subs	r4, r1, r3
         MULTIPLY(tmp6 - tmp2, FIX(2.238241955));   /* c4+c8 */
 800c82c:	9905      	ldr	r1, [sp, #20]
 800c82e:	1ac9      	subs	r1, r1, r3
 800c830:	4369      	muls	r1, r5
    z1 = MULTIPLY(tmp3 - tmp2, FIX(1.531135173)) -  /* c2+c14 */
 800c832:	f243 05ff 	movw	r5, #12543	@ 0x30ff
 800c836:	fb05 1104 	mla	r1, r5, r4, r1
	 MULTIPLY(tmp0 - tmp2, FIX(0.091361227));   /* c2-c4 */
 800c83a:	4cbf      	ldr	r4, [pc, #764]	@ (800cb38 <jpeg_fdct_15x15+0x418>)
		    FIX(1.224744871));                         /* c5 */
    tmp1 = MULTIPLY(tmp10 - tmp14 - tmp15, FIX(1.344997024)) + /* c3 */
	   MULTIPLY(tmp11 - tmp13 - tmp16, FIX(0.831253876));  /* c9 */
    tmp12 = MULTIPLY(tmp12, FIX(1.224744871));                 /* c5 */
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.406466353)) +         /* c1 */
	   MULTIPLY(tmp11 + tmp14, FIX(1.344997024)) +         /* c3 */
 800c83c:	f642 350a 	movw	r5, #11018	@ 0x2b0a
    dataptr[2] = (DCTELEM) DESCALE(z1 + z3, CONST_BITS);
 800c840:	4401      	add	r1, r0
 800c842:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800c846:	1349      	asrs	r1, r1, #13
 800c848:	f8ca 1008 	str.w	r1, [sl, #8]
    z2 = MULTIPLY(tmp5 - tmp2, FIX(0.798468008)) -  /* c8-c14 */
 800c84c:	9904      	ldr	r1, [sp, #16]
 800c84e:	1ac9      	subs	r1, r1, r3
	 MULTIPLY(tmp0 - tmp2, FIX(0.091361227));   /* c2-c4 */
 800c850:	ebae 0303 	sub.w	r3, lr, r3
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.406466353)) +         /* c1 */
 800c854:	f642 5e02 	movw	lr, #11522	@ 0x2d02
	 MULTIPLY(tmp0 - tmp2, FIX(0.091361227));   /* c2-c4 */
 800c858:	4363      	muls	r3, r4
    z2 = MULTIPLY(tmp5 - tmp2, FIX(0.798468008)) -  /* c8-c14 */
 800c85a:	f641 148d 	movw	r4, #6541	@ 0x198d
 800c85e:	fb04 3301 	mla	r3, r4, r1, r3
	   MULTIPLY(tmp11 + tmp14, FIX(1.344997024)) +         /* c3 */
 800c862:	eb09 0106 	add.w	r1, r9, r6
    tmp12 = MULTIPLY(tmp12, FIX(1.224744871));                 /* c5 */
 800c866:	f242 7431 	movw	r4, #10033	@ 0x2731
    dataptr[4] = (DCTELEM) DESCALE(z2 + z3, CONST_BITS);
 800c86a:	4403      	add	r3, r0
	   MULTIPLY(tmp11 + tmp14, FIX(1.344997024)) +         /* c3 */
 800c86c:	4369      	muls	r1, r5
    tmp12 = MULTIPLY(tmp12, FIX(1.224744871));                 /* c5 */
 800c86e:	fb04 f008 	mul.w	r0, r4, r8
    tmp2 = MULTIPLY(tmp10 - tmp12 - tmp13 + tmp15 + tmp16,
 800c872:	ebab 0808 	sub.w	r8, fp, r8
    dataptr[4] = (DCTELEM) DESCALE(z2 + z3, CONST_BITS);
 800c876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
    tmp2 = MULTIPLY(tmp10 - tmp12 - tmp13 + tmp15 + tmp16,
 800c87a:	eba8 0807 	sub.w	r8, r8, r7
    dataptr[4] = (DCTELEM) DESCALE(z2 + z3, CONST_BITS);
 800c87e:	135b      	asrs	r3, r3, #13
    tmp2 = MULTIPLY(tmp10 - tmp12 - tmp13 + tmp15 + tmp16,
 800c880:	44e0      	add	r8, ip
    dataptr[4] = (DCTELEM) DESCALE(z2 + z3, CONST_BITS);
 800c882:	f8ca 3010 	str.w	r3, [sl, #16]
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.406466353)) +         /* c1 */
 800c886:	ebab 0302 	sub.w	r3, fp, r2
    tmp2 = MULTIPLY(tmp10 - tmp12 - tmp13 + tmp15 + tmp16,
 800c88a:	4490      	add	r8, r2
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.406466353)) +         /* c1 */
 800c88c:	fb0e 1103 	mla	r1, lr, r3, r1
	   MULTIPLY(tmp13 + tmp15, FIX(0.575212477));          /* c11 */
 800c890:	eb07 030c 	add.w	r3, r7, ip
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.406466353)) +         /* c1 */
 800c894:	f241 2e68 	movw	lr, #4712	@ 0x1268
    tmp2 = MULTIPLY(tmp10 - tmp12 - tmp13 + tmp15 + tmp16,
 800c898:	fb04 f808 	mul.w	r8, r4, r8
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.406466353)) +         /* c1 */
 800c89c:	fb0e 1103 	mla	r1, lr, r3, r1
    tmp0 = MULTIPLY(tmp13, FIX(0.475753014)) -                 /* c7-c11 */
	   MULTIPLY(tmp14, FIX(0.513743148)) +                 /* c3-c9 */
 800c8a0:	4ba6      	ldr	r3, [pc, #664]	@ (800cb3c <jpeg_fdct_15x15+0x41c>)
    tmp0 = MULTIPLY(tmp13, FIX(0.475753014)) -                 /* c7-c11 */
 800c8a2:	f640 7e39 	movw	lr, #3897	@ 0xf39
	   MULTIPLY(tmp14, FIX(0.513743148)) +                 /* c3-c9 */
 800c8a6:	4373      	muls	r3, r6
    tmp1 = MULTIPLY(tmp10 - tmp14 - tmp15, FIX(1.344997024)) + /* c3 */
 800c8a8:	ebab 0606 	sub.w	r6, fp, r6
    tmp0 = MULTIPLY(tmp13, FIX(0.475753014)) -                 /* c7-c11 */
 800c8ac:	fb0e 3307 	mla	r3, lr, r7, r3
	   MULTIPLY(tmp14, FIX(0.513743148)) +                 /* c3-c9 */
 800c8b0:	f243 6e6a 	movw	lr, #13930	@ 0x366a
    tmp1 = MULTIPLY(tmp10 - tmp14 - tmp15, FIX(1.344997024)) + /* c3 */
 800c8b4:	eba6 060c 	sub.w	r6, r6, ip
	   MULTIPLY(tmp14, FIX(0.513743148)) +                 /* c3-c9 */
 800c8b8:	fb0e 3302 	mla	r3, lr, r2, r3
	   MULTIPLY(tmp11 - tmp13 - tmp16, FIX(0.831253876));  /* c9 */
 800c8bc:	f641 2e9a 	movw	lr, #6810	@ 0x1a9a
	   MULTIPLY(tmp16, FIX(1.700497885)) + tmp4 + tmp12;   /* c1+c13 */
 800c8c0:	440b      	add	r3, r1
    tmp0 = MULTIPLY(tmp13, FIX(0.475753014)) -                 /* c7-c11 */
 800c8c2:	4403      	add	r3, r0
    tmp3 = MULTIPLY(tmp10, - FIX(0.355500862)) -               /* -(c1-c7) */
	   MULTIPLY(tmp11, FIX(2.176250899)) -                 /* c3+c9 */
	   MULTIPLY(tmp15, FIX(0.869244010)) + tmp4 - tmp12;   /* c11+c13 */

    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS);
 800c8c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8c8:	135b      	asrs	r3, r3, #13
 800c8ca:	f8ca 3004 	str.w	r3, [sl, #4]
	   MULTIPLY(tmp11 - tmp13 - tmp16, FIX(0.831253876));  /* c9 */
 800c8ce:	eba9 0307 	sub.w	r3, r9, r7
 800c8d2:	1a9b      	subs	r3, r3, r2
 800c8d4:	fb0e f303 	mul.w	r3, lr, r3
    tmp1 = MULTIPLY(tmp10 - tmp14 - tmp15, FIX(1.344997024)) + /* c3 */
 800c8d8:	fb05 3306 	mla	r3, r5, r6, r3
    dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS);
 800c8dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8e0:	135b      	asrs	r3, r3, #13
 800c8e2:	f8ca 300c 	str.w	r3, [sl, #12]
    dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS);
 800c8e6:	f508 5380 	add.w	r3, r8, #4096	@ 0x1000
 800c8ea:	135b      	asrs	r3, r3, #13
 800c8ec:	f8ca 3014 	str.w	r3, [sl, #20]
	   MULTIPLY(tmp11, FIX(2.176250899)) -                 /* c3+c9 */
 800c8f0:	4b93      	ldr	r3, [pc, #588]	@ (800cb40 <jpeg_fdct_15x15+0x420>)
 800c8f2:	fb03 f909 	mul.w	r9, r3, r9
    tmp3 = MULTIPLY(tmp10, - FIX(0.355500862)) -               /* -(c1-c7) */
 800c8f6:	4b93      	ldr	r3, [pc, #588]	@ (800cb44 <jpeg_fdct_15x15+0x424>)
 800c8f8:	fb03 990b 	mla	r9, r3, fp, r9
	   MULTIPLY(tmp11, FIX(2.176250899)) -                 /* c3+c9 */
 800c8fc:	4b92      	ldr	r3, [pc, #584]	@ (800cb48 <jpeg_fdct_15x15+0x428>)
 800c8fe:	fb03 990c 	mla	r9, r3, ip, r9
	   MULTIPLY(tmp15, FIX(0.869244010)) + tmp4 - tmp12;   /* c11+c13 */
 800c902:	4489      	add	r9, r1
    tmp3 = MULTIPLY(tmp10, - FIX(0.355500862)) -               /* -(c1-c7) */
 800c904:	eba9 0900 	sub.w	r9, r9, r0
    dataptr[7] = (DCTELEM) DESCALE(tmp3, CONST_BITS);
 800c908:	f509 5380 	add.w	r3, r9, #4096	@ 0x1000
 800c90c:	135b      	asrs	r3, r3, #13
 800c90e:	f8ca 301c 	str.w	r3, [sl, #28]

    ctr++;
 800c912:	9b00      	ldr	r3, [sp, #0]
 800c914:	3301      	adds	r3, #1

    if (ctr != DCTSIZE) {
 800c916:	2b08      	cmp	r3, #8
    ctr++;
 800c918:	9300      	str	r3, [sp, #0]
    if (ctr != DCTSIZE) {
 800c91a:	d004      	beq.n	800c926 <jpeg_fdct_15x15+0x206>
      if (ctr == 15)
 800c91c:	2b0f      	cmp	r3, #15
 800c91e:	d005      	beq.n	800c92c <jpeg_fdct_15x15+0x20c>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 800c920:	f10a 0a20 	add.w	sl, sl, #32
 800c924:	e705      	b.n	800c732 <jpeg_fdct_15x15+0x12>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 800c926:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800c92a:	e702      	b.n	800c732 <jpeg_fdct_15x15+0x12>
 800c92c:	9b06      	ldr	r3, [sp, #24]
   * fold into the constant multipliers and final shifting:
   * cK now represents sqrt(2) * cos(K*pi/30) * 256/225.
   */

  dataptr = data;
  wsptr = workspace;
 800c92e:	f10d 0938 	add.w	r9, sp, #56	@ 0x38
 800c932:	9a06      	ldr	r2, [sp, #24]
 800c934:	3b04      	subs	r3, #4
 800c936:	321c      	adds	r2, #28
 800c938:	9208      	str	r2, [sp, #32]
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*6];
 800c93a:	f853 bf04 	ldr.w	fp, [r3, #4]!
 800c93e:	f8d9 a0c0 	ldr.w	sl, [r9, #192]	@ 0xc0
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*5];
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*4];
 800c942:	f8d9 8080 	ldr.w	r8, [r9, #128]	@ 0x80
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*6];
 800c946:	eb0b 020a 	add.w	r2, fp, sl
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*3];
 800c94a:	f8d9 e060 	ldr.w	lr, [r9, #96]	@ 0x60
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*2];
 800c94e:	f8d9 c040 	ldr.w	ip, [r9, #64]	@ 0x40
    tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*1];
    tmp6 = dataptr[DCTSIZE*6] + wsptr[DCTSIZE*0];
    tmp7 = dataptr[DCTSIZE*7];

    tmp10 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*6];
 800c952:	ebab 0a0a 	sub.w	sl, fp, sl
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*6];
 800c956:	9201      	str	r2, [sp, #4]
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*5];
 800c958:	f8d9 20a0 	ldr.w	r2, [r9, #160]	@ 0xa0
    tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*1];
 800c95c:	f8d3 70a0 	ldr.w	r7, [r3, #160]	@ 0xa0
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*5];
 800c960:	4615      	mov	r5, r2
 800c962:	6a1a      	ldr	r2, [r3, #32]
    tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*1];
 800c964:	f8d9 6020 	ldr.w	r6, [r9, #32]
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*5];
 800c968:	442a      	add	r2, r5
    tmp6 = dataptr[DCTSIZE*6] + wsptr[DCTSIZE*0];
 800c96a:	f859 1b04 	ldr.w	r1, [r9], #4
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*5];
 800c96e:	9202      	str	r2, [sp, #8]
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*4];
 800c970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c972:	4442      	add	r2, r8
 800c974:	9206      	str	r2, [sp, #24]
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*3];
 800c976:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c978:	eb02 000e 	add.w	r0, r2, lr
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*2];
 800c97c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800c980:	eb02 040c 	add.w	r4, r2, ip
    tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*1];
 800c984:	19ba      	adds	r2, r7, r6
 800c986:	9203      	str	r2, [sp, #12]
    tmp6 = dataptr[DCTSIZE*6] + wsptr[DCTSIZE*0];
 800c988:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800c98c:	9205      	str	r2, [sp, #20]
 800c98e:	440a      	add	r2, r1
 800c990:	9204      	str	r2, [sp, #16]
    tmp11 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*5];
 800c992:	6a1a      	ldr	r2, [r3, #32]
 800c994:	eba2 0b05 	sub.w	fp, r2, r5
    tmp12 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*4];
 800c998:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c99a:	eba2 0208 	sub.w	r2, r2, r8
 800c99e:	9207      	str	r2, [sp, #28]
    tmp13 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*3];
 800c9a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c9a2:	eba2 0e0e 	sub.w	lr, r2, lr
    tmp14 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*2];
 800c9a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800c9aa:	eba2 080c 	sub.w	r8, r2, ip
    tmp15 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*1];
 800c9ae:	1bba      	subs	r2, r7, r6
 800c9b0:	9200      	str	r2, [sp, #0]
    tmp16 = dataptr[DCTSIZE*6] - wsptr[DCTSIZE*0];
 800c9b2:	9a05      	ldr	r2, [sp, #20]
 800c9b4:	1a51      	subs	r1, r2, r1

    z1 = tmp0 + tmp4 + tmp5;
 800c9b6:	9a01      	ldr	r2, [sp, #4]
 800c9b8:	1917      	adds	r7, r2, r4
 800c9ba:	9a03      	ldr	r2, [sp, #12]
 800c9bc:	4417      	add	r7, r2
    z2 = tmp1 + tmp3 + tmp6;
 800c9be:	9a02      	ldr	r2, [sp, #8]
 800c9c0:	1815      	adds	r5, r2, r0
 800c9c2:	9a04      	ldr	r2, [sp, #16]
 800c9c4:	4415      	add	r5, r2
    z3 = tmp2 + tmp7;
 800c9c6:	9a06      	ldr	r2, [sp, #24]
 800c9c8:	f8d3 60e0 	ldr.w	r6, [r3, #224]	@ 0xe0
 800c9cc:	eb02 0c06 	add.w	ip, r2, r6
    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(z1 + z2 + z3, FIX(1.137777778)), /* 256/225 */
 800c9d0:	197e      	adds	r6, r7, r5
 800c9d2:	f242 4269 	movw	r2, #9321	@ 0x2469
 800c9d6:	4466      	add	r6, ip
	      CONST_BITS+2);
    z3 += z3;
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(MULTIPLY(z1 - z3, FIX(1.301757503)) - /* c6 */
 800c9d8:	eba5 054c 	sub.w	r5, r5, ip, lsl #1
 800c9dc:	eba7 074c 	sub.w	r7, r7, ip, lsl #1
    z1 = MULTIPLY(tmp3 - tmp2, FIX(1.742091575)) -  /* c2+c14 */
         MULTIPLY(tmp6 - tmp2, FIX(2.546621957));   /* c4+c8 */
    z2 = MULTIPLY(tmp5 - tmp2, FIX(0.908479156)) -  /* c8-c14 */
	 MULTIPLY(tmp0 - tmp2, FIX(0.103948774));   /* c2-c4 */
    z3 = MULTIPLY(tmp0 - tmp3, FIX(1.573898926)) +  /* c2 */
	 MULTIPLY(tmp6 - tmp5, FIX(1.076671805)) +  /* c8 */
 800c9e0:	f242 2c74 	movw	ip, #8820	@ 0x2274
      DESCALE(MULTIPLY(z1 + z2 + z3, FIX(1.137777778)), /* 256/225 */
 800c9e4:	4356      	muls	r6, r2
      DESCALE(MULTIPLY(z1 - z3, FIX(1.301757503)) - /* c6 */
 800c9e6:	4a59      	ldr	r2, [pc, #356]	@ (800cb4c <jpeg_fdct_15x15+0x42c>)
 800c9e8:	4355      	muls	r5, r2
 800c9ea:	f642 12a8 	movw	r2, #10664	@ 0x29a8
      DESCALE(MULTIPLY(z1 + z2 + z3, FIX(1.137777778)), /* 256/225 */
 800c9ee:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
      DESCALE(MULTIPLY(z1 - z3, FIX(1.301757503)) - /* c6 */
 800c9f2:	fb02 5507 	mla	r5, r2, r7, r5
    tmp2 += ((tmp1 + tmp4) >> 1) - tmp7 - tmp7;
 800c9f6:	9a02      	ldr	r2, [sp, #8]
      DESCALE(MULTIPLY(z1 + z2 + z3, FIX(1.137777778)), /* 256/225 */
 800c9f8:	13f6      	asrs	r6, r6, #15
      DESCALE(MULTIPLY(z1 - z3, FIX(1.301757503)) - /* c6 */
 800c9fa:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
    dataptr[DCTSIZE*0] = (DCTELEM)
 800c9fe:	601e      	str	r6, [r3, #0]
      DESCALE(MULTIPLY(z1 - z3, FIX(1.301757503)) - /* c6 */
 800ca00:	13ed      	asrs	r5, r5, #15
    dataptr[DCTSIZE*6] = (DCTELEM)
 800ca02:	f8c3 50c0 	str.w	r5, [r3, #192]	@ 0xc0
    tmp2 += ((tmp1 + tmp4) >> 1) - tmp7 - tmp7;
 800ca06:	1915      	adds	r5, r2, r4
 800ca08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ca0c:	ebc2 0565 	rsb	r5, r2, r5, asr #1
 800ca10:	1aad      	subs	r5, r5, r2
 800ca12:	9a06      	ldr	r2, [sp, #24]
 800ca14:	4415      	add	r5, r2
    z3 = MULTIPLY(tmp0 - tmp3, FIX(1.573898926)) +  /* c2 */
 800ca16:	9a01      	ldr	r2, [sp, #4]
 800ca18:	1a17      	subs	r7, r2, r0
    z1 = MULTIPLY(tmp3 - tmp2, FIX(1.742091575)) -  /* c2+c14 */
 800ca1a:	1b40      	subs	r0, r0, r5
	 MULTIPLY(tmp6 - tmp5, FIX(1.076671805)) +  /* c8 */
 800ca1c:	e9dd 2603 	ldrd	r2, r6, [sp, #12]
 800ca20:	1ab6      	subs	r6, r6, r2
	 MULTIPLY(tmp1 - tmp4, FIX(0.899492312));   /* (c6+c12)/2 */
 800ca22:	9a02      	ldr	r2, [sp, #8]
	 MULTIPLY(tmp6 - tmp5, FIX(1.076671805)) +  /* c8 */
 800ca24:	fb0c f606 	mul.w	r6, ip, r6
    z3 = MULTIPLY(tmp0 - tmp3, FIX(1.573898926)) +  /* c2 */
 800ca28:	f243 2c5d 	movw	ip, #12893	@ 0x325d
	 MULTIPLY(tmp1 - tmp4, FIX(0.899492312));   /* (c6+c12)/2 */
 800ca2c:	1b14      	subs	r4, r2, r4
         MULTIPLY(tmp6 - tmp2, FIX(2.546621957));   /* c4+c8 */
 800ca2e:	9a04      	ldr	r2, [sp, #16]
    z3 = MULTIPLY(tmp0 - tmp3, FIX(1.573898926)) +  /* c2 */
 800ca30:	fb0c 6607 	mla	r6, ip, r7, r6
 800ca34:	f641 47c9 	movw	r7, #7369	@ 0x1cc9
         MULTIPLY(tmp6 - tmp2, FIX(2.546621957));   /* c4+c8 */
 800ca38:	1b52      	subs	r2, r2, r5
    z3 = MULTIPLY(tmp0 - tmp3, FIX(1.573898926)) +  /* c2 */
 800ca3a:	fb07 6404 	mla	r4, r7, r4, r6
         MULTIPLY(tmp6 - tmp2, FIX(2.546621957));   /* c4+c8 */
 800ca3e:	4e44      	ldr	r6, [pc, #272]	@ (800cb50 <jpeg_fdct_15x15+0x430>)
    tmp2 = MULTIPLY(tmp10 - tmp12 - tmp13 + tmp15 + tmp16,
		    FIX(1.393487498));                         /* c5 */
    tmp1 = MULTIPLY(tmp10 - tmp14 - tmp15, FIX(1.530307725)) + /* c3 */
	   MULTIPLY(tmp11 - tmp13 - tmp16, FIX(0.945782187));  /* c9 */
    tmp12 = MULTIPLY(tmp12, FIX(1.393487498));                 /* c5 */
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.600246161)) +         /* c1 */
 800ca40:	f243 3735 	movw	r7, #13109	@ 0x3335
         MULTIPLY(tmp6 - tmp2, FIX(2.546621957));   /* c4+c8 */
 800ca44:	4372      	muls	r2, r6
    z1 = MULTIPLY(tmp3 - tmp2, FIX(1.742091575)) -  /* c2+c14 */
 800ca46:	f243 76bf 	movw	r6, #14271	@ 0x37bf
 800ca4a:	fb06 2200 	mla	r2, r6, r0, r2
	 MULTIPLY(tmp0 - tmp2, FIX(0.103948774));   /* c2-c4 */
 800ca4e:	9801      	ldr	r0, [sp, #4]
	   MULTIPLY(tmp11 + tmp14, FIX(1.530307725)) +         /* c3 */
 800ca50:	f243 06f8 	movw	r6, #12536	@ 0x30f8
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + z3, CONST_BITS+2);
 800ca54:	4422      	add	r2, r4
	 MULTIPLY(tmp0 - tmp2, FIX(0.103948774));   /* c2-c4 */
 800ca56:	1b40      	subs	r0, r0, r5
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + z3, CONST_BITS+2);
 800ca58:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800ca5c:	13d2      	asrs	r2, r2, #15
 800ca5e:	641a      	str	r2, [r3, #64]	@ 0x40
    z2 = MULTIPLY(tmp5 - tmp2, FIX(0.908479156)) -  /* c8-c14 */
 800ca60:	9a03      	ldr	r2, [sp, #12]
 800ca62:	1b52      	subs	r2, r2, r5
	 MULTIPLY(tmp0 - tmp2, FIX(0.103948774));   /* c2-c4 */
 800ca64:	4d3b      	ldr	r5, [pc, #236]	@ (800cb54 <jpeg_fdct_15x15+0x434>)
 800ca66:	4368      	muls	r0, r5
    z2 = MULTIPLY(tmp5 - tmp2, FIX(0.908479156)) -  /* c8-c14 */
 800ca68:	f641 5512 	movw	r5, #7442	@ 0x1d12
 800ca6c:	fb05 0002 	mla	r0, r5, r2, r0
    tmp12 = MULTIPLY(tmp12, FIX(1.393487498));                 /* c5 */
 800ca70:	f642 4597 	movw	r5, #11415	@ 0x2c97
 800ca74:	9a07      	ldr	r2, [sp, #28]
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(z2 + z3, CONST_BITS+2);
 800ca76:	4420      	add	r0, r4
    tmp12 = MULTIPLY(tmp12, FIX(1.393487498));                 /* c5 */
 800ca78:	fb05 f402 	mul.w	r4, r5, r2
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.600246161)) +         /* c1 */
 800ca7c:	ebaa 0201 	sub.w	r2, sl, r1
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(z2 + z3, CONST_BITS+2);
 800ca80:	f500 4080 	add.w	r0, r0, #16384	@ 0x4000
 800ca84:	13c0      	asrs	r0, r0, #15
 800ca86:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
	   MULTIPLY(tmp11 + tmp14, FIX(1.530307725)) +         /* c3 */
 800ca8a:	eb0b 0008 	add.w	r0, fp, r8
 800ca8e:	4370      	muls	r0, r6
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.600246161)) +         /* c1 */
 800ca90:	fb07 0002 	mla	r0, r7, r2, r0
	   MULTIPLY(tmp13 + tmp15, FIX(0.654463974));          /* c11 */
 800ca94:	9a00      	ldr	r2, [sp, #0]
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.600246161)) +         /* c1 */
 800ca96:	f241 47f1 	movw	r7, #5361	@ 0x14f1
	   MULTIPLY(tmp13 + tmp15, FIX(0.654463974));          /* c11 */
 800ca9a:	4472      	add	r2, lr
    tmp4 = MULTIPLY(tmp10 - tmp16, FIX(1.600246161)) +         /* c1 */
 800ca9c:	fb07 0002 	mla	r0, r7, r2, r0
    tmp0 = MULTIPLY(tmp13, FIX(0.541301207)) -                 /* c7-c11 */
	   MULTIPLY(tmp14, FIX(0.584525538)) +                 /* c3-c9 */
 800caa0:	4a2d      	ldr	r2, [pc, #180]	@ (800cb58 <jpeg_fdct_15x15+0x438>)
    tmp0 = MULTIPLY(tmp13, FIX(0.541301207)) -                 /* c7-c11 */
 800caa2:	f241 1752 	movw	r7, #4434	@ 0x1152
	   MULTIPLY(tmp14, FIX(0.584525538)) +                 /* c3-c9 */
 800caa6:	fb02 f208 	mul.w	r2, r2, r8
    tmp1 = MULTIPLY(tmp10 - tmp14 - tmp15, FIX(1.530307725)) + /* c3 */
 800caaa:	ebaa 0808 	sub.w	r8, sl, r8
    tmp0 = MULTIPLY(tmp13, FIX(0.541301207)) -                 /* c7-c11 */
 800caae:	fb07 220e 	mla	r2, r7, lr, r2
	   MULTIPLY(tmp14, FIX(0.584525538)) +                 /* c3-c9 */
 800cab2:	f643 57ea 	movw	r7, #15850	@ 0x3dea
 800cab6:	fb07 2201 	mla	r2, r7, r1, r2
	   MULTIPLY(tmp11 - tmp13 - tmp16, FIX(0.945782187));  /* c9 */
 800caba:	f641 6744 	movw	r7, #7748	@ 0x1e44
	   MULTIPLY(tmp16, FIX(1.934788705)) + tmp4 + tmp12;   /* c1+c13 */
 800cabe:	4402      	add	r2, r0
    tmp0 = MULTIPLY(tmp13, FIX(0.541301207)) -                 /* c7-c11 */
 800cac0:	4422      	add	r2, r4
    tmp3 = MULTIPLY(tmp10, - FIX(0.404480980)) -               /* -(c1-c7) */
	   MULTIPLY(tmp11, FIX(2.476089912)) -                 /* c3+c9 */
	   MULTIPLY(tmp15, FIX(0.989006518)) + tmp4 - tmp12;   /* c11+c13 */

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+2);
 800cac2:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800cac6:	13d2      	asrs	r2, r2, #15
 800cac8:	621a      	str	r2, [r3, #32]
    tmp1 = MULTIPLY(tmp10 - tmp14 - tmp15, FIX(1.530307725)) + /* c3 */
 800caca:	9a00      	ldr	r2, [sp, #0]
 800cacc:	eba8 0802 	sub.w	r8, r8, r2
	   MULTIPLY(tmp11 - tmp13 - tmp16, FIX(0.945782187));  /* c9 */
 800cad0:	ebab 020e 	sub.w	r2, fp, lr
 800cad4:	1a52      	subs	r2, r2, r1
 800cad6:	437a      	muls	r2, r7
    tmp1 = MULTIPLY(tmp10 - tmp14 - tmp15, FIX(1.530307725)) + /* c3 */
 800cad8:	fb06 2208 	mla	r2, r6, r8, r2
    tmp2 = MULTIPLY(tmp10 - tmp12 - tmp13 + tmp15 + tmp16,
 800cadc:	9e00      	ldr	r6, [sp, #0]
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+2);
 800cade:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800cae2:	13d2      	asrs	r2, r2, #15
 800cae4:	661a      	str	r2, [r3, #96]	@ 0x60
    tmp2 = MULTIPLY(tmp10 - tmp12 - tmp13 + tmp15 + tmp16,
 800cae6:	9a07      	ldr	r2, [sp, #28]
 800cae8:	ebaa 0202 	sub.w	r2, sl, r2
 800caec:	eba2 020e 	sub.w	r2, r2, lr
 800caf0:	4432      	add	r2, r6
 800caf2:	440a      	add	r2, r1
	   MULTIPLY(tmp11, FIX(2.476089912)) -                 /* c3+c9 */
 800caf4:	4919      	ldr	r1, [pc, #100]	@ (800cb5c <jpeg_fdct_15x15+0x43c>)
    tmp2 = MULTIPLY(tmp10 - tmp12 - tmp13 + tmp15 + tmp16,
 800caf6:	436a      	muls	r2, r5
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+2);
 800caf8:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800cafc:	13d2      	asrs	r2, r2, #15
 800cafe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	   MULTIPLY(tmp11, FIX(2.476089912)) -                 /* c3+c9 */
 800cb02:	4a17      	ldr	r2, [pc, #92]	@ (800cb60 <jpeg_fdct_15x15+0x440>)
 800cb04:	fb02 fb0b 	mul.w	fp, r2, fp
    tmp3 = MULTIPLY(tmp10, - FIX(0.404480980)) -               /* -(c1-c7) */
 800cb08:	4a16      	ldr	r2, [pc, #88]	@ (800cb64 <jpeg_fdct_15x15+0x444>)
 800cb0a:	fb02 bb0a 	mla	fp, r2, sl, fp
	   MULTIPLY(tmp11, FIX(2.476089912)) -                 /* c3+c9 */
 800cb0e:	fb01 bb06 	mla	fp, r1, r6, fp
	   MULTIPLY(tmp15, FIX(0.989006518)) + tmp4 - tmp12;   /* c11+c13 */
 800cb12:	4483      	add	fp, r0
    tmp3 = MULTIPLY(tmp10, - FIX(0.404480980)) -               /* -(c1-c7) */
 800cb14:	ebab 0204 	sub.w	r2, fp, r4
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3, CONST_BITS+2);
 800cb18:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800cb1c:	13d2      	asrs	r2, r2, #15
 800cb1e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800cb22:	9a08      	ldr	r2, [sp, #32]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	f47f af08 	bne.w	800c93a <jpeg_fdct_15x15+0x21a>

    dataptr++;			/* advance pointer to next column */
    wsptr++;			/* advance pointer to next column */
  }
}
 800cb2a:	b047      	add	sp, #284	@ 0x11c
 800cb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb30:	ffffb860 	.word	0xffffb860
 800cb34:	fffff204 	.word	0xfffff204
 800cb38:	fffffd14 	.word	0xfffffd14
 800cb3c:	ffffef8f 	.word	0xffffef8f
 800cb40:	ffffba5c 	.word	0xffffba5c
 800cb44:	fffff4a0 	.word	0xfffff4a0
 800cb48:	ffffe42f 	.word	0xffffe42f
 800cb4c:	fffff017 	.word	0xfffff017
 800cb50:	ffffae82 	.word	0xffffae82
 800cb54:	fffffcac 	.word	0xfffffcac
 800cb58:	ffffed4c 	.word	0xffffed4c
 800cb5c:	ffffe05a 	.word	0xffffe05a
 800cb60:	ffffb0c4 	.word	0xffffb0c4
 800cb64:	fffff30e 	.word	0xfffff30e

0800cb68 <jpeg_fdct_16x16>:
 * Perform the forward DCT on a 16x16 sample block.
 */

GLOBAL(void)
jpeg_fdct_16x16 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800cb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* cK represents sqrt(2) * cos(K*pi/32). */

  dataptr = data;
  ctr = 0;
 800cb6c:	2300      	movs	r3, #0
{
 800cb6e:	b0d3      	sub	sp, #332	@ 0x14c
  dataptr = data;
 800cb70:	4682      	mov	sl, r0
{
 800cb72:	9005      	str	r0, [sp, #20]
  ctr = 0;
 800cb74:	9300      	str	r3, [sp, #0]
{
 800cb76:	e9cd 2110 	strd	r2, r1, [sp, #64]	@ 0x40
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 800cb7a:	9a00      	ldr	r2, [sp, #0]
 800cb7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[15]);
 800cb7e:	9910      	ldr	r1, [sp, #64]	@ 0x40
    elemptr = sample_data[ctr] + start_col;
 800cb80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb84:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800cb86:	189a      	adds	r2, r3, r2
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[15]);
 800cb88:	5c5b      	ldrb	r3, [r3, r1]
 800cb8a:	f892 c00f 	ldrb.w	ip, [r2, #15]
 800cb8e:	9301      	str	r3, [sp, #4]
 800cb90:	4463      	add	r3, ip
 800cb92:	930d      	str	r3, [sp, #52]	@ 0x34
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[14]);
 800cb94:	7853      	ldrb	r3, [r2, #1]
 800cb96:	9302      	str	r3, [sp, #8]
 800cb98:	7b93      	ldrb	r3, [r2, #14]
 800cb9a:	9303      	str	r3, [sp, #12]
 800cb9c:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
 800cba0:	440b      	add	r3, r1
 800cba2:	930e      	str	r3, [sp, #56]	@ 0x38
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[13]);
 800cba4:	7893      	ldrb	r3, [r2, #2]
 800cba6:	9304      	str	r3, [sp, #16]
 800cba8:	7b53      	ldrb	r3, [r2, #13]
 800cbaa:	9306      	str	r3, [sp, #24]
 800cbac:	9906      	ldr	r1, [sp, #24]
 800cbae:	9b04      	ldr	r3, [sp, #16]
 800cbb0:	eb03 0801 	add.w	r8, r3, r1
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[12]);
 800cbb4:	78d3      	ldrb	r3, [r2, #3]
 800cbb6:	9307      	str	r3, [sp, #28]
 800cbb8:	7b13      	ldrb	r3, [r2, #12]
 800cbba:	9308      	str	r3, [sp, #32]
 800cbbc:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 800cbc0:	440b      	add	r3, r1
 800cbc2:	930f      	str	r3, [sp, #60]	@ 0x3c
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[11]);
 800cbc4:	7913      	ldrb	r3, [r2, #4]
 800cbc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbc8:	7ad3      	ldrb	r3, [r2, #11]
 800cbca:	930a      	str	r3, [sp, #40]	@ 0x28
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[10]);
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[9]);
 800cbcc:	7994      	ldrb	r4, [r2, #6]
    tmp7 = GETJSAMPLE(elemptr[7]) + GETJSAMPLE(elemptr[8]);
 800cbce:	79d0      	ldrb	r0, [r2, #7]
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[10]);
 800cbd0:	7956      	ldrb	r6, [r2, #5]
 800cbd2:	7a95      	ldrb	r5, [r2, #10]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[11]);
 800cbd4:	e9dd 3109 	ldrd	r3, r1, [sp, #36]	@ 0x24
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[10]);
 800cbd8:	eb06 0e05 	add.w	lr, r6, r5
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[15]);
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[14]);
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[13]);
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[12]);
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[11]);
    tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[10]);
 800cbdc:	1b75      	subs	r5, r6, r5
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[11]);
 800cbde:	185f      	adds	r7, r3, r1
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[9]);
 800cbe0:	7a53      	ldrb	r3, [r2, #9]
    tmp10 = tmp0 + tmp7;
 800cbe2:	990d      	ldr	r1, [sp, #52]	@ 0x34
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
	    MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
 800cbe4:	f642 5609 	movw	r6, #11529	@ 0x2d09
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[9]);
 800cbe8:	eb04 0903 	add.w	r9, r4, r3
 800cbec:	930b      	str	r3, [sp, #44]	@ 0x2c
    tmp7 = GETJSAMPLE(elemptr[7]) + GETJSAMPLE(elemptr[8]);
 800cbee:	7a13      	ldrb	r3, [r2, #8]
 800cbf0:	eb00 0b03 	add.w	fp, r0, r3
 800cbf4:	930c      	str	r3, [sp, #48]	@ 0x30
    tmp14 = tmp0 - tmp7;
 800cbf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    tmp10 = tmp0 + tmp7;
 800cbf8:	4459      	add	r1, fp
    tmp14 = tmp0 - tmp7;
 800cbfa:	eba3 030b 	sub.w	r3, r3, fp
 800cbfe:	930d      	str	r3, [sp, #52]	@ 0x34
    tmp11 = tmp1 + tmp6;
 800cc00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc02:	eb03 0b09 	add.w	fp, r3, r9
    tmp15 = tmp1 - tmp6;
 800cc06:	eba3 0909 	sub.w	r9, r3, r9
    tmp12 = tmp2 + tmp5;
 800cc0a:	eb08 030e 	add.w	r3, r8, lr
    tmp16 = tmp2 - tmp5;
 800cc0e:	eba8 080e 	sub.w	r8, r8, lr
    tmp12 = tmp2 + tmp5;
 800cc12:	930e      	str	r3, [sp, #56]	@ 0x38
    tmp13 = tmp3 + tmp4;
 800cc14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc16:	eb03 0e07 	add.w	lr, r3, r7
    tmp17 = tmp3 - tmp4;
 800cc1a:	1bdf      	subs	r7, r3, r7
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[15]);
 800cc1c:	9b01      	ldr	r3, [sp, #4]
 800cc1e:	eba3 0c0c 	sub.w	ip, r3, ip
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[14]);
 800cc22:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cc26:	1a9b      	subs	r3, r3, r2
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[13]);
 800cc28:	9a06      	ldr	r2, [sp, #24]
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[14]);
 800cc2a:	9301      	str	r3, [sp, #4]
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[13]);
 800cc2c:	9b04      	ldr	r3, [sp, #16]
 800cc2e:	1a9b      	subs	r3, r3, r2
 800cc30:	9302      	str	r3, [sp, #8]
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[12]);
 800cc32:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800cc36:	1a9b      	subs	r3, r3, r2
 800cc38:	9303      	str	r3, [sp, #12]
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[11]);
 800cc3a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 800cc3e:	1a9b      	subs	r3, r3, r2
    tmp7 = GETJSAMPLE(elemptr[7]) - GETJSAMPLE(elemptr[8]);
 800cc40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[11]);
 800cc42:	9304      	str	r3, [sp, #16]
    tmp7 = GETJSAMPLE(elemptr[7]) - GETJSAMPLE(elemptr[8]);
 800cc44:	1a82      	subs	r2, r0, r2
    tmp6 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[9]);
 800cc46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
      ((tmp10 + tmp11 + tmp12 + tmp13 - 16 * CENTERJSAMPLE) << PASS1_BITS);
 800cc48:	eb01 000b 	add.w	r0, r1, fp
    tmp6 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[9]);
 800cc4c:	1ae3      	subs	r3, r4, r3
      ((tmp10 + tmp11 + tmp12 + tmp13 - 16 * CENTERJSAMPLE) << PASS1_BITS);
 800cc4e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800cc50:	4420      	add	r0, r4
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800cc52:	ebab 0b04 	sub.w	fp, fp, r4
	    MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
 800cc56:	f642 4463 	movw	r4, #11363	@ 0x2c63
      ((tmp10 + tmp11 + tmp12 + tmp13 - 16 * CENTERJSAMPLE) << PASS1_BITS);
 800cc5a:	4470      	add	r0, lr
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800cc5c:	eba1 0e0e 	sub.w	lr, r1, lr
 800cc60:	f241 1151 	movw	r1, #4433	@ 0x1151
      ((tmp10 + tmp11 + tmp12 + tmp13 - 16 * CENTERJSAMPLE) << PASS1_BITS);
 800cc64:	f5a0 6000 	sub.w	r0, r0, #2048	@ 0x800
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800cc68:	fb01 fb0b 	mul.w	fp, r1, fp
 800cc6c:	f642 11cf 	movw	r1, #10703	@ 0x29cf
    dataptr[0] = (DCTELEM)
 800cc70:	0080      	lsls	r0, r0, #2
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800cc72:	fb01 bb0e 	mla	fp, r1, lr, fp
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 800cc76:	eba3 0e02 	sub.w	lr, r3, r2
    dataptr[0] = (DCTELEM)
 800cc7a:	f8ca 0000 	str.w	r0, [sl]
    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 800cc7e:	eba7 0009 	sub.w	r0, r7, r9
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800cc82:	f50b 6180 	add.w	r1, fp, #1024	@ 0x400
 800cc86:	12c9      	asrs	r1, r1, #11
    dataptr[4] = (DCTELEM)
 800cc88:	f8ca 1010 	str.w	r1, [sl, #16]
	    MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
 800cc8c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800cc8e:	eba1 0108 	sub.w	r1, r1, r8
 800cc92:	4361      	muls	r1, r4
    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 800cc94:	f640 04d4 	movw	r4, #2260	@ 0x8d4
 800cc98:	fb04 1100 	mla	r1, r4, r0, r1
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 800cc9c:	f642 6075 	movw	r0, #11893	@ 0x2e75
 800cca0:	f244 5487 	movw	r4, #17799	@ 0x4587
 800cca4:	fb00 1009 	mla	r0, r0, r9, r1
 800cca8:	fb04 0008 	mla	r0, r4, r8, r0
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 800ccac:	4c4d      	ldr	r4, [pc, #308]	@ (800cde4 <jpeg_fdct_16x16+0x27c>)
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 800ccae:	f640 5823 	movw	r8, #3363	@ 0xd23
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 800ccb2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 800ccb6:	fb08 fe0e 	mul.w	lr, r8, lr
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 800ccba:	12c0      	asrs	r0, r0, #11
    dataptr[2] = (DCTELEM)
 800ccbc:	f8ca 0008 	str.w	r0, [sl, #8]
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 800ccc0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ccc2:	fb04 1100 	mla	r1, r4, r0, r1
 800ccc6:	4848      	ldr	r0, [pc, #288]	@ (800cde8 <jpeg_fdct_16x16+0x280>)
 800ccc8:	fb00 1107 	mla	r1, r0, r7, r1
    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 800cccc:	f642 304e 	movw	r0, #11086	@ 0x2b4e
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
 800ccd0:	18af      	adds	r7, r5, r2
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 800ccd2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800ccd6:	12c9      	asrs	r1, r1, #11
    dataptr[6] = (DCTELEM)
 800ccd8:	f8ca 1018 	str.w	r1, [sl, #24]
    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 800ccdc:	9901      	ldr	r1, [sp, #4]
 800ccde:	4461      	add	r1, ip
 800cce0:	fb00 ee01 	mla	lr, r0, r1, lr
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
 800cce4:	f241 5055 	movw	r0, #5461	@ 0x1555
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 800cce8:	9902      	ldr	r1, [sp, #8]
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
 800ccea:	4347      	muls	r7, r0
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 800ccec:	f242 70e9 	movw	r0, #10217	@ 0x27e9
 800ccf0:	4461      	add	r1, ip
 800ccf2:	fb00 7701 	mla	r7, r0, r1, r7
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 800ccf6:	9804      	ldr	r0, [sp, #16]
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 800ccf8:	9903      	ldr	r1, [sp, #12]
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 800ccfa:	1a84      	subs	r4, r0, r2
 800ccfc:	f641 40b6 	movw	r0, #7350	@ 0x1cb6
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 800cd00:	4461      	add	r1, ip
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 800cd02:	4344      	muls	r4, r0
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 800cd04:	f242 20fc 	movw	r0, #8956	@ 0x22fc
 800cd08:	fb00 4401 	mla	r4, r0, r1, r4
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 800cd0c:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 800cd10:	4401      	add	r1, r0
	    MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
 800cd12:	1b58      	subs	r0, r3, r5
 800cd14:	4370      	muls	r0, r6
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 800cd16:	f44f 668e 	mov.w	r6, #1136	@ 0x470
 800cd1a:	fb06 0b01 	mla	fp, r6, r1, r0
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 800cd1e:	9901      	ldr	r1, [sp, #4]
 800cd20:	9e03      	ldr	r6, [sp, #12]
	    MULTIPLY(tmp4 + tmp6, - FIX(1.247225013));        /* -c5 */
 800cd22:	4832      	ldr	r0, [pc, #200]	@ (800cdec <jpeg_fdct_16x16+0x284>)
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 800cd24:	198e      	adds	r6, r1, r6
	    MULTIPLY(tmp4 + tmp6, - FIX(1.247225013));        /* -c5 */
 800cd26:	9904      	ldr	r1, [sp, #16]
 800cd28:	4419      	add	r1, r3
 800cd2a:	4341      	muls	r1, r0
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 800cd2c:	4830      	ldr	r0, [pc, #192]	@ (800cdf0 <jpeg_fdct_16x16+0x288>)
 800cd2e:	fb00 1106 	mla	r1, r0, r6, r1
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 800cd32:	e9dd 0602 	ldrd	r0, r6, [sp, #8]
 800cd36:	eb00 0906 	add.w	r9, r0, r6
	    MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
 800cd3a:	9804      	ldr	r0, [sp, #16]
 800cd3c:	1a2e      	subs	r6, r5, r0
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 800cd3e:	482d      	ldr	r0, [pc, #180]	@ (800cdf4 <jpeg_fdct_16x16+0x28c>)
	    MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
 800cd40:	fb08 f606 	mul.w	r6, r8, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 800cd44:	eb0e 0807 	add.w	r8, lr, r7
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 800cd48:	fb00 6609 	mla	r6, r0, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 800cd4c:	44a0      	add	r8, r4
 800cd4e:	482a      	ldr	r0, [pc, #168]	@ (800cdf8 <jpeg_fdct_16x16+0x290>)
 800cd50:	fb00 8c0c 	mla	ip, r0, ip, r8
 800cd54:	f641 08f3 	movw	r8, #6387	@ 0x18f3
	    MULTIPLY(tmp0, FIX(2.286341144)) +                /* c7+c5+c3-c1 */
	    MULTIPLY(tmp7, FIX(0.779653625));                 /* c15+c13-c11+c9 */
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800cd58:	9801      	ldr	r0, [sp, #4]
    tmp10 = tmp11 + tmp12 + tmp13 -
 800cd5a:	fb08 c202 	mla	r2, r8, r2, ip
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800cd5e:	f240 2c4d 	movw	ip, #589	@ 0x24d
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
	     + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */

    dataptr[1] = (DCTELEM) DESCALE(tmp10, CONST_BITS-PASS1_BITS);
 800cd62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cd66:	12d2      	asrs	r2, r2, #11
 800cd68:	f8ca 2004 	str.w	r2, [sl, #4]
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800cd6c:	eb0b 0201 	add.w	r2, fp, r1
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800cd70:	4431      	add	r1, r6
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800cd72:	fb0c 2200 	mla	r2, ip, r0, r2
	     - MULTIPLY(tmp6, FIX(1.663905119));              /* c7+c13+c1-c5 */
 800cd76:	4821      	ldr	r0, [pc, #132]	@ (800cdfc <jpeg_fdct_16x16+0x294>)
 800cd78:	fb00 2203 	mla	r2, r0, r3, r2
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 800cd7c:	9b02      	ldr	r3, [sp, #8]
 800cd7e:	eb0b 0006 	add.w	r0, fp, r6
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800cd82:	4472      	add	r2, lr
    dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS-PASS1_BITS);
 800cd84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cd88:	12d2      	asrs	r2, r2, #11
 800cd8a:	f8ca 200c 	str.w	r2, [sl, #12]
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 800cd8e:	4a1c      	ldr	r2, [pc, #112]	@ (800ce00 <jpeg_fdct_16x16+0x298>)
 800cd90:	fb02 0003 	mla	r0, r2, r3, r0
	     + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
 800cd94:	f242 7347 	movw	r3, #10055	@ 0x2747
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800cd98:	9a03      	ldr	r2, [sp, #12]
	     + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
 800cd9a:	fb03 0005 	mla	r0, r3, r5, r0
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800cd9e:	f242 2318 	movw	r3, #8728	@ 0x2218
 800cda2:	fb03 1102 	mla	r1, r3, r2, r1
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
 800cda6:	f244 5360 	movw	r3, #17760	@ 0x4560
 800cdaa:	9a04      	ldr	r2, [sp, #16]
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 800cdac:	4438      	add	r0, r7
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
 800cdae:	fb03 1102 	mla	r1, r3, r2, r1
    dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS-PASS1_BITS);
    dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS-PASS1_BITS);

    ctr++;
 800cdb2:	9b00      	ldr	r3, [sp, #0]
    dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS-PASS1_BITS);
 800cdb4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800cdb8:	4421      	add	r1, r4
    ctr++;
 800cdba:	3301      	adds	r3, #1
    dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS-PASS1_BITS);
 800cdbc:	12c0      	asrs	r0, r0, #11
    dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS-PASS1_BITS);
 800cdbe:	f501 6180 	add.w	r1, r1, #1024	@ 0x400

    if (ctr != DCTSIZE) {
 800cdc2:	2b08      	cmp	r3, #8
    dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS-PASS1_BITS);
 800cdc4:	f8ca 0014 	str.w	r0, [sl, #20]
    dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS-PASS1_BITS);
 800cdc8:	ea4f 21e1 	mov.w	r1, r1, asr #11
    ctr++;
 800cdcc:	9300      	str	r3, [sp, #0]
    dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS-PASS1_BITS);
 800cdce:	f8ca 101c 	str.w	r1, [sl, #28]
    if (ctr != DCTSIZE) {
 800cdd2:	d004      	beq.n	800cdde <jpeg_fdct_16x16+0x276>
      if (ctr == DCTSIZE * 2)
 800cdd4:	2b10      	cmp	r3, #16
 800cdd6:	d015      	beq.n	800ce04 <jpeg_fdct_16x16+0x29c>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 800cdd8:	f10a 0a20 	add.w	sl, sl, #32
 800cddc:	e6cd      	b.n	800cb7a <jpeg_fdct_16x16+0x12>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 800cdde:	f10d 0a48 	add.w	sl, sp, #72	@ 0x48
 800cde2:	e6ca      	b.n	800cb7a <jpeg_fdct_16x16+0x12>
 800cde4:	fffff93e 	.word	0xfffff93e
 800cde8:	ffffde07 	.word	0xffffde07
 800cdec:	ffffd817 	.word	0xffffd817
 800cdf0:	ffffeaab 	.word	0xffffeaab
 800cdf4:	ffffd4b2 	.word	0xffffd4b2
 800cdf8:	ffffb6d6 	.word	0xffffb6d6
 800cdfc:	ffffcac1 	.word	0xffffcac1
 800ce00:	ffffdbfa 	.word	0xffffdbfa
 800ce04:	9a05      	ldr	r2, [sp, #20]
 800ce06:	9b05      	ldr	r3, [sp, #20]
 800ce08:	321c      	adds	r2, #28
 800ce0a:	3b04      	subs	r3, #4
 800ce0c:	9209      	str	r2, [sp, #36]	@ 0x24
   * by an overall factor of 8.
   * We must also scale the output by (8/16)**2 = 1/2**2.
   */

  dataptr = data;
  wsptr = workspace;
 800ce0e:	aa12      	add	r2, sp, #72	@ 0x48
 800ce10:	9200      	str	r2, [sp, #0]
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*7];
 800ce12:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800ce16:	9201      	str	r2, [sp, #4]
 800ce18:	9a00      	ldr	r2, [sp, #0]
 800ce1a:	f8d2 70e0 	ldr.w	r7, [r2, #224]	@ 0xe0
 800ce1e:	9a01      	ldr	r2, [sp, #4]
 800ce20:	eb02 0b07 	add.w	fp, r2, r7
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*6];
 800ce24:	9a00      	ldr	r2, [sp, #0]
 800ce26:	f8d2 20c0 	ldr.w	r2, [r2, #192]	@ 0xc0
 800ce2a:	9202      	str	r2, [sp, #8]
 800ce2c:	9902      	ldr	r1, [sp, #8]
 800ce2e:	6a1a      	ldr	r2, [r3, #32]
 800ce30:	eb02 0901 	add.w	r9, r2, r1
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*5];
 800ce34:	9a00      	ldr	r2, [sp, #0]
 800ce36:	f8d2 20a0 	ldr.w	r2, [r2, #160]	@ 0xa0
 800ce3a:	9203      	str	r2, [sp, #12]
 800ce3c:	9903      	ldr	r1, [sp, #12]
 800ce3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ce40:	eb02 0e01 	add.w	lr, r2, r1
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*4];
 800ce44:	9a00      	ldr	r2, [sp, #0]
 800ce46:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ce4a:	9204      	str	r2, [sp, #16]
 800ce4c:	9904      	ldr	r1, [sp, #16]
 800ce4e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ce50:	440a      	add	r2, r1
 800ce52:	9207      	str	r2, [sp, #28]
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*3];
 800ce54:	9a00      	ldr	r2, [sp, #0]
 800ce56:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800ce58:	9205      	str	r2, [sp, #20]
 800ce5a:	9905      	ldr	r1, [sp, #20]
 800ce5c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800ce60:	1856      	adds	r6, r2, r1
    tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*2];
 800ce62:	9a00      	ldr	r2, [sp, #0]
 800ce64:	6c14      	ldr	r4, [r2, #64]	@ 0x40
 800ce66:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ce6a:	eb02 0c04 	add.w	ip, r2, r4
    tmp6 = dataptr[DCTSIZE*6] + wsptr[DCTSIZE*1];
 800ce6e:	9a00      	ldr	r2, [sp, #0]
 800ce70:	6a12      	ldr	r2, [r2, #32]
 800ce72:	9206      	str	r2, [sp, #24]
 800ce74:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
    tmp7 = dataptr[DCTSIZE*7] + wsptr[DCTSIZE*0];
 800ce78:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
    tmp6 = dataptr[DCTSIZE*6] + wsptr[DCTSIZE*1];
 800ce7c:	eb01 0802 	add.w	r8, r1, r2
    tmp7 = dataptr[DCTSIZE*7] + wsptr[DCTSIZE*0];
 800ce80:	9a00      	ldr	r2, [sp, #0]
 800ce82:	f852 1b04 	ldr.w	r1, [r2], #4
 800ce86:	eb00 0a01 	add.w	sl, r0, r1
 800ce8a:	9200      	str	r2, [sp, #0]
    tmp16 = tmp2 - tmp5;
    tmp13 = tmp3 + tmp4;
    tmp17 = tmp3 - tmp4;

    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*7];
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*6];
 800ce8c:	9a02      	ldr	r2, [sp, #8]
    tmp14 = tmp0 - tmp7;
 800ce8e:	ebab 050a 	sub.w	r5, fp, sl
    tmp10 = tmp0 + tmp7;
 800ce92:	eb0b 000a 	add.w	r0, fp, sl
    tmp11 = tmp1 + tmp6;
 800ce96:	eb09 0a08 	add.w	sl, r9, r8
    tmp15 = tmp1 - tmp6;
 800ce9a:	eba9 0908 	sub.w	r9, r9, r8
    tmp14 = tmp0 - tmp7;
 800ce9e:	9508      	str	r5, [sp, #32]
    tmp12 = tmp2 + tmp5;
 800cea0:	eb0e 080c 	add.w	r8, lr, ip
    tmp13 = tmp3 + tmp4;
 800cea4:	9d07      	ldr	r5, [sp, #28]
    tmp16 = tmp2 - tmp5;
 800cea6:	ebae 0e0c 	sub.w	lr, lr, ip
    tmp13 = tmp3 + tmp4;
 800ceaa:	eb05 0c06 	add.w	ip, r5, r6
    tmp17 = tmp3 - tmp4;
 800ceae:	1bae      	subs	r6, r5, r6
    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*7];
 800ceb0:	9d01      	ldr	r5, [sp, #4]
 800ceb2:	1bef      	subs	r7, r5, r7
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*6];
 800ceb4:	6a1d      	ldr	r5, [r3, #32]
 800ceb6:	1aad      	subs	r5, r5, r2
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*5];
 800ceb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*6];
 800ceba:	9501      	str	r5, [sp, #4]
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*5];
 800cebc:	9d03      	ldr	r5, [sp, #12]
 800cebe:	1b52      	subs	r2, r2, r5
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*4];
 800cec0:	9d04      	ldr	r5, [sp, #16]
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*5];
 800cec2:	9202      	str	r2, [sp, #8]
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*4];
 800cec4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800cec6:	1b52      	subs	r2, r2, r5
    tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*3];
 800cec8:	9d05      	ldr	r5, [sp, #20]
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*4];
 800ceca:	9203      	str	r2, [sp, #12]
    tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*3];
 800cecc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800ced0:	eba2 0b05 	sub.w	fp, r2, r5
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*2];
 800ced4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
	      + MULTIPLY(tmp16, FIX(2.172734804)),        /* c2+10 */
	      CONST_BITS+PASS1_BITS+2);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 800ced8:	4d69      	ldr	r5, [pc, #420]	@ (800d080 <jpeg_fdct_16x16+0x518>)
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*2];
 800ceda:	1b12      	subs	r2, r2, r4
    tmp6 = dataptr[DCTSIZE*6] - wsptr[DCTSIZE*1];
 800cedc:	9c06      	ldr	r4, [sp, #24]
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*2];
 800cede:	9204      	str	r2, [sp, #16]
    tmp6 = dataptr[DCTSIZE*6] - wsptr[DCTSIZE*1];
 800cee0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800cee4:	1b12      	subs	r2, r2, r4
    tmp7 = dataptr[DCTSIZE*7] - wsptr[DCTSIZE*0];
 800cee6:	f8d3 40e0 	ldr.w	r4, [r3, #224]	@ 0xe0
 800ceea:	1a61      	subs	r1, r4, r1
      DESCALE(tmp10 + tmp11 + tmp12 + tmp13, PASS1_BITS+2);
 800ceec:	eb00 040a 	add.w	r4, r0, sl
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800cef0:	ebaa 0a08 	sub.w	sl, sl, r8
      DESCALE(tmp10 + tmp11 + tmp12 + tmp13, PASS1_BITS+2);
 800cef4:	4444      	add	r4, r8
	      CONST_BITS+PASS1_BITS+2);

    /* Odd part */

    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 800cef6:	eba2 0801 	sub.w	r8, r2, r1
      DESCALE(tmp10 + tmp11 + tmp12 + tmp13, PASS1_BITS+2);
 800cefa:	4464      	add	r4, ip
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800cefc:	eba0 0c0c 	sub.w	ip, r0, ip
 800cf00:	f241 1051 	movw	r0, #4433	@ 0x1151
      DESCALE(tmp10 + tmp11 + tmp12 + tmp13, PASS1_BITS+2);
 800cf04:	3408      	adds	r4, #8
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800cf06:	fb00 fa0a 	mul.w	sl, r0, sl
 800cf0a:	f642 10cf 	movw	r0, #10703	@ 0x29cf
      DESCALE(tmp10 + tmp11 + tmp12 + tmp13, PASS1_BITS+2);
 800cf0e:	1124      	asrs	r4, r4, #4
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800cf10:	fb00 aa0c 	mla	sl, r0, ip, sl
	    MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
 800cf14:	f642 4c63 	movw	ip, #11363	@ 0x2c63
    dataptr[DCTSIZE*0] = (DCTELEM)
 800cf18:	601c      	str	r4, [r3, #0]
    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 800cf1a:	eba6 0409 	sub.w	r4, r6, r9
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800cf1e:	f50a 3080 	add.w	r0, sl, #65536	@ 0x10000
 800cf22:	1440      	asrs	r0, r0, #17
    dataptr[DCTSIZE*4] = (DCTELEM)
 800cf24:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
	    MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
 800cf28:	9808      	ldr	r0, [sp, #32]
 800cf2a:	eba0 000e 	sub.w	r0, r0, lr
 800cf2e:	fb0c f000 	mul.w	r0, ip, r0
    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 800cf32:	f640 0cd4 	movw	ip, #2260	@ 0x8d4
 800cf36:	fb0c 0004 	mla	r0, ip, r4, r0
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 800cf3a:	f642 6475 	movw	r4, #11893	@ 0x2e75
 800cf3e:	f244 5c87 	movw	ip, #17799	@ 0x4587
 800cf42:	fb04 0409 	mla	r4, r4, r9, r0
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 800cf46:	f640 5923 	movw	r9, #3363	@ 0xd23
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 800cf4a:	fb0c 440e 	mla	r4, ip, lr, r4
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
	    MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
 800cf4e:	f642 5c09 	movw	ip, #11529	@ 0x2d09
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 800cf52:	fb09 f808 	mul.w	r8, r9, r8
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 800cf56:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 800cf5a:	1464      	asrs	r4, r4, #17
    dataptr[DCTSIZE*2] = (DCTELEM)
 800cf5c:	641c      	str	r4, [r3, #64]	@ 0x40
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 800cf5e:	9c08      	ldr	r4, [sp, #32]
 800cf60:	fb05 0004 	mla	r0, r5, r4, r0
 800cf64:	4c47      	ldr	r4, [pc, #284]	@ (800d084 <jpeg_fdct_16x16+0x51c>)
 800cf66:	fb04 0006 	mla	r0, r4, r6, r0
    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 800cf6a:	f642 344e 	movw	r4, #11086	@ 0x2b4e
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 800cf6e:	ebab 0601 	sub.w	r6, fp, r1
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 800cf72:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 800cf76:	1440      	asrs	r0, r0, #17
    dataptr[DCTSIZE*6] = (DCTELEM)
 800cf78:	f8c3 00c0 	str.w	r0, [r3, #192]	@ 0xc0
    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 800cf7c:	9801      	ldr	r0, [sp, #4]
 800cf7e:	1838      	adds	r0, r7, r0
 800cf80:	fb04 8800 	mla	r8, r4, r0, r8
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 800cf84:	9802      	ldr	r0, [sp, #8]
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
 800cf86:	9c04      	ldr	r4, [sp, #16]
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 800cf88:	1838      	adds	r0, r7, r0
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 800cf8a:	9d03      	ldr	r5, [sp, #12]
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
 800cf8c:	eb04 0e01 	add.w	lr, r4, r1
 800cf90:	f241 5455 	movw	r4, #5461	@ 0x1555
 800cf94:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 800cf98:	f242 74e9 	movw	r4, #10217	@ 0x27e9
 800cf9c:	fb04 ee00 	mla	lr, r4, r0, lr
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 800cfa0:	f641 44b6 	movw	r4, #7350	@ 0x1cb6
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 800cfa4:	9803      	ldr	r0, [sp, #12]
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 800cfa6:	4366      	muls	r6, r4
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 800cfa8:	f242 24fc 	movw	r4, #8956	@ 0x22fc
 800cfac:	1838      	adds	r0, r7, r0
 800cfae:	fb04 6600 	mla	r6, r4, r0, r6
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 800cfb2:	e9dd 0401 	ldrd	r0, r4, [sp, #4]
 800cfb6:	4420      	add	r0, r4
	    MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
 800cfb8:	9c04      	ldr	r4, [sp, #16]
 800cfba:	1b14      	subs	r4, r2, r4
 800cfbc:	fb0c f404 	mul.w	r4, ip, r4
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 800cfc0:	f44f 6c8e 	mov.w	ip, #1136	@ 0x470
 800cfc4:	fb0c 4400 	mla	r4, ip, r0, r4
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 800cfc8:	9801      	ldr	r0, [sp, #4]
 800cfca:	eb00 0c05 	add.w	ip, r0, r5
	    MULTIPLY(tmp4 + tmp6, - FIX(1.247225013));        /* -c5 */
 800cfce:	eb0b 0002 	add.w	r0, fp, r2
 800cfd2:	4d2d      	ldr	r5, [pc, #180]	@ (800d088 <jpeg_fdct_16x16+0x520>)
 800cfd4:	4368      	muls	r0, r5
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 800cfd6:	4d2d      	ldr	r5, [pc, #180]	@ (800d08c <jpeg_fdct_16x16+0x524>)
 800cfd8:	fb05 000c 	mla	r0, r5, ip, r0
 800cfdc:	9005      	str	r0, [sp, #20]
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 800cfde:	e9dd 5002 	ldrd	r5, r0, [sp, #8]
 800cfe2:	eb05 0a00 	add.w	sl, r5, r0
	    MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
 800cfe6:	9804      	ldr	r0, [sp, #16]
 800cfe8:	eba0 0c0b 	sub.w	ip, r0, fp
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 800cfec:	4828      	ldr	r0, [pc, #160]	@ (800d090 <jpeg_fdct_16x16+0x528>)
	    MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
 800cfee:	fb09 fc0c 	mul.w	ip, r9, ip
    tmp10 = tmp11 + tmp12 + tmp13 -
 800cff2:	eb08 090e 	add.w	r9, r8, lr
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 800cff6:	fb00 cc0a 	mla	ip, r0, sl, ip
    tmp10 = tmp11 + tmp12 + tmp13 -
 800cffa:	44b1      	add	r9, r6
 800cffc:	4825      	ldr	r0, [pc, #148]	@ (800d094 <jpeg_fdct_16x16+0x52c>)
 800cffe:	fb00 9707 	mla	r7, r0, r7, r9
 800d002:	f641 09f3 	movw	r9, #6387	@ 0x18f3
	    MULTIPLY(tmp0, FIX(2.286341144)) +                /* c7+c5+c3-c1 */
	    MULTIPLY(tmp7, FIX(0.779653625));                 /* c15+c13-c11+c9 */
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800d006:	9801      	ldr	r0, [sp, #4]
    tmp10 = tmp11 + tmp12 + tmp13 -
 800d008:	fb09 7701 	mla	r7, r9, r1, r7
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800d00c:	9905      	ldr	r1, [sp, #20]
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
	     + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp10, CONST_BITS+PASS1_BITS+2);
 800d00e:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800d012:	1861      	adds	r1, r4, r1
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 800d014:	4464      	add	r4, ip
    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp10, CONST_BITS+PASS1_BITS+2);
 800d016:	147f      	asrs	r7, r7, #17
 800d018:	621f      	str	r7, [r3, #32]
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800d01a:	f240 274d 	movw	r7, #589	@ 0x24d
 800d01e:	fb07 1100 	mla	r1, r7, r0, r1
	     - MULTIPLY(tmp6, FIX(1.663905119));              /* c7+c13+c1-c5 */
 800d022:	481d      	ldr	r0, [pc, #116]	@ (800d098 <jpeg_fdct_16x16+0x530>)
 800d024:	fb00 1102 	mla	r1, r0, r2, r1
	     + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
 800d028:	f242 7247 	movw	r2, #10055	@ 0x2747
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800d02c:	9805      	ldr	r0, [sp, #20]
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800d02e:	4441      	add	r1, r8
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800d030:	4460      	add	r0, ip
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp11, CONST_BITS+PASS1_BITS+2);
 800d032:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800d036:	1449      	asrs	r1, r1, #17
 800d038:	6619      	str	r1, [r3, #96]	@ 0x60
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 800d03a:	4918      	ldr	r1, [pc, #96]	@ (800d09c <jpeg_fdct_16x16+0x534>)
 800d03c:	fb01 4405 	mla	r4, r1, r5, r4
	     + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
 800d040:	9904      	ldr	r1, [sp, #16]
 800d042:	fb02 4401 	mla	r4, r2, r1, r4
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800d046:	f242 2218 	movw	r2, #8728	@ 0x2218
 800d04a:	9903      	ldr	r1, [sp, #12]
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 800d04c:	4474      	add	r4, lr
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800d04e:	fb02 0001 	mla	r0, r2, r1, r0
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
 800d052:	f244 5260 	movw	r2, #17760	@ 0x4560
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+PASS1_BITS+2);
 800d056:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
 800d05a:	fb02 000b 	mla	r0, r2, fp, r0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800d05e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+PASS1_BITS+2);
 800d060:	1464      	asrs	r4, r4, #17
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800d062:	4430      	add	r0, r6
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800d064:	429a      	cmp	r2, r3
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+PASS1_BITS+2);
 800d066:	f8c3 40a0 	str.w	r4, [r3, #160]	@ 0xa0
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+PASS1_BITS+2);
 800d06a:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 800d06e:	ea4f 4060 	mov.w	r0, r0, asr #17
 800d072:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800d076:	f47f aecc 	bne.w	800ce12 <jpeg_fdct_16x16+0x2aa>

    dataptr++;			/* advance pointer to next column */
    wsptr++;			/* advance pointer to next column */
  }
}
 800d07a:	b053      	add	sp, #332	@ 0x14c
 800d07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d080:	fffff93e 	.word	0xfffff93e
 800d084:	ffffde07 	.word	0xffffde07
 800d088:	ffffd817 	.word	0xffffd817
 800d08c:	ffffeaab 	.word	0xffffeaab
 800d090:	ffffd4b2 	.word	0xffffd4b2
 800d094:	ffffb6d6 	.word	0xffffb6d6
 800d098:	ffffcac1 	.word	0xffffcac1
 800d09c:	ffffdbfa 	.word	0xffffdbfa

0800d0a0 <jpeg_fdct_16x8>:
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* 16-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/32). */

  dataptr = data;
 800d0a0:	4603      	mov	r3, r0
{
 800d0a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a6:	3320      	adds	r3, #32
 800d0a8:	b095      	sub	sp, #84	@ 0x54
  ctr = 0;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800d0aa:	469a      	mov	sl, r3
 800d0ac:	9311      	str	r3, [sp, #68]	@ 0x44
 800d0ae:	1f0b      	subs	r3, r1, #4
{
 800d0b0:	9001      	str	r0, [sp, #4]
 800d0b2:	9212      	str	r2, [sp, #72]	@ 0x48
 800d0b4:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0b6:	f500 7390 	add.w	r3, r0, #288	@ 0x120
 800d0ba:	9313      	str	r3, [sp, #76]	@ 0x4c
    elemptr = sample_data[ctr] + start_col;
 800d0bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800d0be:	f10a 0a20 	add.w	sl, sl, #32

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[15]);
 800d0c2:	9912      	ldr	r1, [sp, #72]	@ 0x48
    elemptr = sample_data[ctr] + start_col;
 800d0c4:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800d0c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d0cc:	18d3      	adds	r3, r2, r3
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[15]);
 800d0ce:	5c52      	ldrb	r2, [r2, r1]
 800d0d0:	f893 e00f 	ldrb.w	lr, [r3, #15]
 800d0d4:	9202      	str	r2, [sp, #8]
 800d0d6:	4472      	add	r2, lr
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[14]);
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[13]);
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[12]);
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[11]);
 800d0d8:	f893 b00b 	ldrb.w	fp, [r3, #11]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[15]);
 800d0dc:	920a      	str	r2, [sp, #40]	@ 0x28
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[14]);
 800d0de:	785a      	ldrb	r2, [r3, #1]
 800d0e0:	9203      	str	r2, [sp, #12]
 800d0e2:	7b9a      	ldrb	r2, [r3, #14]
 800d0e4:	9204      	str	r2, [sp, #16]
 800d0e6:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800d0ea:	440a      	add	r2, r1
 800d0ec:	920b      	str	r2, [sp, #44]	@ 0x2c
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[13]);
 800d0ee:	789a      	ldrb	r2, [r3, #2]
 800d0f0:	9205      	str	r2, [sp, #20]
 800d0f2:	7b5a      	ldrb	r2, [r3, #13]
 800d0f4:	9206      	str	r2, [sp, #24]
 800d0f6:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 800d0fa:	eb02 0901 	add.w	r9, r2, r1
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[12]);
 800d0fe:	78da      	ldrb	r2, [r3, #3]
 800d100:	9207      	str	r2, [sp, #28]
 800d102:	7b1a      	ldrb	r2, [r3, #12]
 800d104:	9208      	str	r2, [sp, #32]
 800d106:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
 800d10a:	440a      	add	r2, r1
 800d10c:	920c      	str	r2, [sp, #48]	@ 0x30
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[11]);
 800d10e:	791a      	ldrb	r2, [r3, #4]
 800d110:	9209      	str	r2, [sp, #36]	@ 0x24
 800d112:	eb02 0c0b 	add.w	ip, r2, fp
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[10]);
 800d116:	795f      	ldrb	r7, [r3, #5]
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[9]);
    tmp7 = GETJSAMPLE(elemptr[7]) + GETJSAMPLE(elemptr[8]);
 800d118:	79dc      	ldrb	r4, [r3, #7]
 800d11a:	7a19      	ldrb	r1, [r3, #8]
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[9]);
 800d11c:	799d      	ldrb	r5, [r3, #6]
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[10]);
 800d11e:	7a9e      	ldrb	r6, [r3, #10]
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[9]);
 800d120:	7a5a      	ldrb	r2, [r3, #9]
    tmp7 = GETJSAMPLE(elemptr[7]) + GETJSAMPLE(elemptr[8]);
 800d122:	1863      	adds	r3, r4, r1

    tmp10 = tmp0 + tmp7;
 800d124:	980a      	ldr	r0, [sp, #40]	@ 0x28
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[10]);
 800d126:	eb07 0806 	add.w	r8, r7, r6
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[13]);
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[12]);
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[11]);
    tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[10]);
    tmp6 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[9]);
    tmp7 = GETJSAMPLE(elemptr[7]) - GETJSAMPLE(elemptr[8]);
 800d12a:	1a61      	subs	r1, r4, r1
    tmp10 = tmp0 + tmp7;
 800d12c:	4418      	add	r0, r3
 800d12e:	900d      	str	r0, [sp, #52]	@ 0x34
    tmp14 = tmp0 - tmp7;
 800d130:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d132:	1ac3      	subs	r3, r0, r3
    tmp11 = tmp1 + tmp6;
 800d134:	18a8      	adds	r0, r5, r2
    tmp14 = tmp0 - tmp7;
 800d136:	930a      	str	r3, [sp, #40]	@ 0x28
    tmp11 = tmp1 + tmp6;
 800d138:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d13a:	4403      	add	r3, r0
    tmp15 = tmp1 - tmp6;
 800d13c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    tmp11 = tmp1 + tmp6;
 800d13e:	930e      	str	r3, [sp, #56]	@ 0x38
    tmp15 = tmp1 - tmp6;
 800d140:	18ab      	adds	r3, r5, r2
    tmp6 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[9]);
 800d142:	1aaa      	subs	r2, r5, r2
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
	      MULTIPLY(tmp11 - tmp12, FIX_0_541196100),   /* c12[16] = c6[8] */
	      CONST_BITS-PASS1_BITS);

    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
	    MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
 800d144:	f642 4563 	movw	r5, #11363	@ 0x2c63
    tmp15 = tmp1 - tmp6;
 800d148:	1ac0      	subs	r0, r0, r3
    tmp12 = tmp2 + tmp5;
 800d14a:	eb09 0308 	add.w	r3, r9, r8
    tmp16 = tmp2 - tmp5;
 800d14e:	eba9 0908 	sub.w	r9, r9, r8
    tmp12 = tmp2 + tmp5;
 800d152:	930f      	str	r3, [sp, #60]	@ 0x3c
    tmp13 = tmp3 + tmp4;
 800d154:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    tmp15 = tmp1 - tmp6;
 800d156:	900b      	str	r0, [sp, #44]	@ 0x2c
    tmp13 = tmp3 + tmp4;
 800d158:	eb03 080c 	add.w	r8, r3, ip
    tmp17 = tmp3 - tmp4;
 800d15c:	eba3 0c0c 	sub.w	ip, r3, ip
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[15]);
 800d160:	9b02      	ldr	r3, [sp, #8]
 800d162:	eba3 0e0e 	sub.w	lr, r3, lr
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[14]);
 800d166:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 800d16a:	1a1b      	subs	r3, r3, r0
 800d16c:	9302      	str	r3, [sp, #8]
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[13]);
 800d16e:	e9dd 3005 	ldrd	r3, r0, [sp, #20]
 800d172:	1a1b      	subs	r3, r3, r0
 800d174:	9303      	str	r3, [sp, #12]
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[12]);
 800d176:	e9dd 3007 	ldrd	r3, r0, [sp, #28]
 800d17a:	1a1b      	subs	r3, r3, r0
 800d17c:	9304      	str	r3, [sp, #16]
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[11]);
 800d17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d180:	eba3 0b0b 	sub.w	fp, r3, fp
    tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[10]);
 800d184:	1bbb      	subs	r3, r7, r6
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
	    MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
 800d186:	f642 5609 	movw	r6, #11529	@ 0x2d09
    tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[10]);
 800d18a:	9305      	str	r3, [sp, #20]
      ((tmp10 + tmp11 + tmp12 + tmp13 - 16 * CENTERJSAMPLE) << PASS1_BITS);
 800d18c:	e9dd 300d 	ldrd	r3, r0, [sp, #52]	@ 0x34
 800d190:	181c      	adds	r4, r3, r0
 800d192:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d194:	441c      	add	r4, r3
 800d196:	4444      	add	r4, r8
 800d198:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
    dataptr[0] = (DCTELEM)
 800d19c:	00a4      	lsls	r4, r4, #2
 800d19e:	f84a 4c40 	str.w	r4, [sl, #-64]
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800d1a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1a4:	eba3 0408 	sub.w	r4, r3, r8
 800d1a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 800d1aa:	f640 5823 	movw	r8, #3363	@ 0xd23
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800d1ae:	1ac3      	subs	r3, r0, r3
 800d1b0:	f241 1051 	movw	r0, #4433	@ 0x1151
 800d1b4:	4343      	muls	r3, r0
 800d1b6:	f642 10cf 	movw	r0, #10703	@ 0x29cf
 800d1ba:	fb00 3304 	mla	r3, r0, r4, r3
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 800d1be:	980b      	ldr	r0, [sp, #44]	@ 0x2c
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800d1c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d1c4:	12db      	asrs	r3, r3, #11
    dataptr[4] = (DCTELEM)
 800d1c6:	f84a 3c30 	str.w	r3, [sl, #-48]
    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 800d1ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1cc:	ebac 0403 	sub.w	r4, ip, r3
	    MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
 800d1d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1d2:	eba3 0309 	sub.w	r3, r3, r9
 800d1d6:	436b      	muls	r3, r5
    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 800d1d8:	f640 05d4 	movw	r5, #2260	@ 0x8d4
 800d1dc:	fb05 3304 	mla	r3, r5, r4, r3
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 800d1e0:	f642 6475 	movw	r4, #11893	@ 0x2e75
 800d1e4:	f244 5587 	movw	r5, #17799	@ 0x4587
 800d1e8:	fb04 3400 	mla	r4, r4, r0, r3
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 800d1ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 800d1ee:	fb05 4409 	mla	r4, r5, r9, r4
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 800d1f2:	ebab 0501 	sub.w	r5, fp, r1
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 800d1f6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800d1fa:	12e4      	asrs	r4, r4, #11
    dataptr[2] = (DCTELEM)
 800d1fc:	f84a 4c38 	str.w	r4, [sl, #-56]
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 800d200:	4c91      	ldr	r4, [pc, #580]	@ (800d448 <jpeg_fdct_16x8+0x3a8>)
 800d202:	fb04 3300 	mla	r3, r4, r0, r3
 800d206:	4891      	ldr	r0, [pc, #580]	@ (800d44c <jpeg_fdct_16x8+0x3ac>)
    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 800d208:	f642 344e 	movw	r4, #11086	@ 0x2b4e
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 800d20c:	fb00 330c 	mla	r3, r0, ip, r3
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 800d210:	eba2 0c01 	sub.w	ip, r2, r1
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
 800d214:	9805      	ldr	r0, [sp, #20]
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 800d216:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 800d21a:	fb08 fc0c 	mul.w	ip, r8, ip
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
 800d21e:	1847      	adds	r7, r0, r1
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 800d220:	12db      	asrs	r3, r3, #11
    dataptr[6] = (DCTELEM)
 800d222:	f84a 3c28 	str.w	r3, [sl, #-40]
    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 800d226:	9b02      	ldr	r3, [sp, #8]
 800d228:	4473      	add	r3, lr
 800d22a:	fb04 cc03 	mla	ip, r4, r3, ip
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
 800d22e:	f241 5455 	movw	r4, #5461	@ 0x1555
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 800d232:	9b03      	ldr	r3, [sp, #12]
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
 800d234:	4367      	muls	r7, r4
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 800d236:	f242 74e9 	movw	r4, #10217	@ 0x27e9
 800d23a:	4473      	add	r3, lr
 800d23c:	fb04 7703 	mla	r7, r4, r3, r7
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 800d240:	f641 44b6 	movw	r4, #7350	@ 0x1cb6
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 800d244:	9b04      	ldr	r3, [sp, #16]
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 800d246:	4365      	muls	r5, r4
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 800d248:	f242 24fc 	movw	r4, #8956	@ 0x22fc
 800d24c:	4473      	add	r3, lr
 800d24e:	fb04 5503 	mla	r5, r4, r3, r5
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 800d252:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 800d256:	4403      	add	r3, r0
	    MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
 800d258:	9805      	ldr	r0, [sp, #20]
 800d25a:	1a14      	subs	r4, r2, r0
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 800d25c:	9804      	ldr	r0, [sp, #16]
	    MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
 800d25e:	4374      	muls	r4, r6
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 800d260:	f44f 668e 	mov.w	r6, #1136	@ 0x470
 800d264:	fb06 4403 	mla	r4, r6, r3, r4
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 800d268:	9b02      	ldr	r3, [sp, #8]
 800d26a:	181e      	adds	r6, r3, r0
	    MULTIPLY(tmp4 + tmp6, - FIX(1.247225013));        /* -c5 */
 800d26c:	eb0b 0302 	add.w	r3, fp, r2
 800d270:	4877      	ldr	r0, [pc, #476]	@ (800d450 <jpeg_fdct_16x8+0x3b0>)
 800d272:	4343      	muls	r3, r0
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 800d274:	4877      	ldr	r0, [pc, #476]	@ (800d454 <jpeg_fdct_16x8+0x3b4>)
 800d276:	fb00 3306 	mla	r3, r0, r6, r3
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 800d27a:	e9dd 0603 	ldrd	r0, r6, [sp, #12]
 800d27e:	eb00 0906 	add.w	r9, r0, r6
	    MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
 800d282:	9805      	ldr	r0, [sp, #20]
 800d284:	eba0 060b 	sub.w	r6, r0, fp
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 800d288:	4873      	ldr	r0, [pc, #460]	@ (800d458 <jpeg_fdct_16x8+0x3b8>)
	    MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
 800d28a:	fb08 f606 	mul.w	r6, r8, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 800d28e:	eb0c 0807 	add.w	r8, ip, r7
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 800d292:	fb00 6609 	mla	r6, r0, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 800d296:	44a8      	add	r8, r5
 800d298:	4870      	ldr	r0, [pc, #448]	@ (800d45c <jpeg_fdct_16x8+0x3bc>)
 800d29a:	fb00 8e0e 	mla	lr, r0, lr, r8
 800d29e:	f641 08f3 	movw	r8, #6387	@ 0x18f3
	    MULTIPLY(tmp0, FIX(2.286341144)) +                /* c7+c5+c3-c1 */
	    MULTIPLY(tmp7, FIX(0.779653625));                 /* c15+c13-c11+c9 */
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800d2a2:	9802      	ldr	r0, [sp, #8]
    tmp10 = tmp11 + tmp12 + tmp13 -
 800d2a4:	fb08 e101 	mla	r1, r8, r1, lr
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800d2a8:	f240 2e4d 	movw	lr, #589	@ 0x24d
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
	     + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */

    dataptr[1] = (DCTELEM) DESCALE(tmp10, CONST_BITS-PASS1_BITS);
 800d2ac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d2b0:	12c9      	asrs	r1, r1, #11
 800d2b2:	f84a 1c3c 	str.w	r1, [sl, #-60]
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800d2b6:	18e1      	adds	r1, r4, r3
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 800d2b8:	4434      	add	r4, r6
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800d2ba:	4433      	add	r3, r6
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800d2bc:	fb0e 1100 	mla	r1, lr, r0, r1
	     - MULTIPLY(tmp6, FIX(1.663905119));              /* c7+c13+c1-c5 */
 800d2c0:	4867      	ldr	r0, [pc, #412]	@ (800d460 <jpeg_fdct_16x8+0x3c0>)
 800d2c2:	fb00 1102 	mla	r1, r0, r2, r1
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 800d2c6:	9a03      	ldr	r2, [sp, #12]
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800d2c8:	4461      	add	r1, ip
    dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS-PASS1_BITS);
 800d2ca:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d2ce:	12c9      	asrs	r1, r1, #11
 800d2d0:	f84a 1c34 	str.w	r1, [sl, #-52]
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 800d2d4:	4963      	ldr	r1, [pc, #396]	@ (800d464 <jpeg_fdct_16x8+0x3c4>)
 800d2d6:	fb01 4402 	mla	r4, r1, r2, r4
	     + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
 800d2da:	f242 7247 	movw	r2, #10055	@ 0x2747
 800d2de:	9905      	ldr	r1, [sp, #20]
 800d2e0:	fb02 4401 	mla	r4, r2, r1, r4
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800d2e4:	f242 2218 	movw	r2, #8728	@ 0x2218
 800d2e8:	9904      	ldr	r1, [sp, #16]
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 800d2ea:	443c      	add	r4, r7
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800d2ec:	fb02 3301 	mla	r3, r2, r1, r3
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
 800d2f0:	f244 5260 	movw	r2, #17760	@ 0x4560
    dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS-PASS1_BITS);
 800d2f4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
 800d2f8:	fb02 330b 	mla	r3, r2, fp, r3
    dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS-PASS1_BITS);
 800d2fc:	12e4      	asrs	r4, r4, #11
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800d2fe:	442b      	add	r3, r5
    dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS-PASS1_BITS);
 800d300:	f84a 4c2c 	str.w	r4, [sl, #-44]
    dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS-PASS1_BITS);
 800d304:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d308:	12db      	asrs	r3, r3, #11
 800d30a:	f84a 3c24 	str.w	r3, [sl, #-36]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800d30e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d310:	4553      	cmp	r3, sl
 800d312:	f47f aed3 	bne.w	800d0bc <jpeg_fdct_16x8+0x1c>

    tmp10 = tmp0 + tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp1 + tmp3;
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800d316:	f242 59a1 	movw	r9, #9633	@ 0x25a1

    tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
 800d31a:	f243 080b 	movw	r8, #12299	@ 0x300b
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800d31e:	9b01      	ldr	r3, [sp, #4]
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800d320:	9901      	ldr	r1, [sp, #4]
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800d328:	f8d1 10c0 	ldr.w	r1, [r1, #192]	@ 0xc0
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800d32c:	eb02 0b03 	add.w	fp, r2, r3
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800d330:	9b01      	ldr	r3, [sp, #4]
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 800d332:	9801      	ldr	r0, [sp, #4]
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800d334:	6a1b      	ldr	r3, [r3, #32]
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 800d336:	f8d0 00e0 	ldr.w	r0, [r0, #224]	@ 0xe0
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800d33a:	185f      	adds	r7, r3, r1
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800d33c:	9901      	ldr	r1, [sp, #4]
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 800d33e:	1a12      	subs	r2, r2, r0
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 800d340:	9801      	ldr	r0, [sp, #4]
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800d342:	f8d1 e040 	ldr.w	lr, [r1, #64]	@ 0x40
 800d346:	f8d1 60a0 	ldr.w	r6, [r1, #160]	@ 0xa0
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 800d34a:	f8d1 c060 	ldr.w	ip, [r1, #96]	@ 0x60
 800d34e:	f8d1 5080 	ldr.w	r5, [r1, #128]	@ 0x80
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800d352:	eb0e 0a06 	add.w	sl, lr, r6
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 800d356:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
 800d35a:	ebae 0606 	sub.w	r6, lr, r6
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 800d35e:	eb0c 0105 	add.w	r1, ip, r5
    tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
 800d362:	ebac 0505 	sub.w	r5, ip, r5
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 800d366:	1a1b      	subs	r3, r3, r0
    dataptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS+1);
 800d368:	9801      	ldr	r0, [sp, #4]
    tmp10 = tmp0 + tmp3;
 800d36a:	eb0b 0401 	add.w	r4, fp, r1
    tmp12 = tmp0 - tmp3;
 800d36e:	ebab 0101 	sub.w	r1, fp, r1
    tmp11 = tmp1 + tmp2;
 800d372:	eb07 0b0a 	add.w	fp, r7, sl
    tmp13 = tmp1 - tmp2;
 800d376:	eba7 070a 	sub.w	r7, r7, sl
    tmp13 = tmp1 + tmp3;
 800d37a:	eb03 0e05 	add.w	lr, r3, r5
    dataptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS+1);
 800d37e:	eb04 0c0b 	add.w	ip, r4, fp
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS+1);
 800d382:	eba4 040b 	sub.w	r4, r4, fp
    dataptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS+1);
 800d386:	f10c 0c04 	add.w	ip, ip, #4
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS+1);
 800d38a:	3404      	adds	r4, #4
    dataptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS+1);
 800d38c:	ea4f 0cec 	mov.w	ip, ip, asr #3
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS+1);
 800d390:	10e4      	asrs	r4, r4, #3
    dataptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS+1);
 800d392:	f8c0 c000 	str.w	ip, [r0]
    tmp12 = tmp0 + tmp2;
 800d396:	eb02 0c06 	add.w	ip, r2, r6
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS+1);
 800d39a:	f8c0 4080 	str.w	r4, [r0, #128]	@ 0x80
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800d39e:	19cc      	adds	r4, r1, r7
 800d3a0:	f241 1051 	movw	r0, #4433	@ 0x1151
 800d3a4:	4344      	muls	r4, r0
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, FIX_0_765366865),
 800d3a6:	f641 007e 	movw	r0, #6270	@ 0x187e
 800d3aa:	fb00 4101 	mla	r1, r0, r1, r4
 800d3ae:	9801      	ldr	r0, [sp, #4]
 800d3b0:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 800d3b4:	1409      	asrs	r1, r1, #16
 800d3b6:	6401      	str	r1, [r0, #64]	@ 0x40
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 800d3b8:	492b      	ldr	r1, [pc, #172]	@ (800d468 <jpeg_fdct_16x8+0x3c8>)
 800d3ba:	fb01 4407 	mla	r4, r1, r7, r4
    tmp10 = tmp0 + tmp3;
 800d3be:	1951      	adds	r1, r2, r5
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800d3c0:	eb0c 070e 	add.w	r7, ip, lr
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 800d3c4:	f504 4400 	add.w	r4, r4, #32768	@ 0x8000
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800d3c8:	fb09 f707 	mul.w	r7, r9, r7
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 800d3cc:	1424      	asrs	r4, r4, #16
 800d3ce:	f8c0 40c0 	str.w	r4, [r0, #192]	@ 0xc0
    tmp11 = tmp1 + tmp2;
 800d3d2:	199c      	adds	r4, r3, r6
    tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
    tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
    tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 800d3d4:	4825      	ldr	r0, [pc, #148]	@ (800d46c <jpeg_fdct_16x8+0x3cc>)
 800d3d6:	4341      	muls	r1, r0
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 800d3d8:	4825      	ldr	r0, [pc, #148]	@ (800d470 <jpeg_fdct_16x8+0x3d0>)
 800d3da:	4344      	muls	r4, r0
    tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
    tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */

    tmp12 += z1;
 800d3dc:	4825      	ldr	r0, [pc, #148]	@ (800d474 <jpeg_fdct_16x8+0x3d4>)
    tmp13 += z1;

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0 + tmp10 + tmp12,
 800d3de:	fb08 1202 	mla	r2, r8, r2, r1
    tmp12 += z1;
 800d3e2:	fb00 7c0c 	mla	ip, r0, ip, r7
    tmp13 += z1;
 800d3e6:	4824      	ldr	r0, [pc, #144]	@ (800d478 <jpeg_fdct_16x8+0x3d8>)
    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0 + tmp10 + tmp12,
 800d3e8:	4462      	add	r2, ip
    tmp13 += z1;
 800d3ea:	fb00 770e 	mla	r7, r0, lr, r7
    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0 + tmp10 + tmp12,
 800d3ee:	9801      	ldr	r0, [sp, #4]
 800d3f0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800d3f4:	1412      	asrs	r2, r2, #16
 800d3f6:	6202      	str	r2, [r0, #32]
					   CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1 + tmp11 + tmp13,
 800d3f8:	f246 2254 	movw	r2, #25172	@ 0x6254
 800d3fc:	fb02 4303 	mla	r3, r2, r3, r4
 800d400:	443b      	add	r3, r7
 800d402:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d406:	141b      	asrs	r3, r3, #16
 800d408:	6603      	str	r3, [r0, #96]	@ 0x60
					   CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2 + tmp11 + tmp12,
 800d40a:	f244 13b3 	movw	r3, #16819	@ 0x41b3
 800d40e:	fb03 4406 	mla	r4, r3, r6, r4
					   CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3 + tmp10 + tmp13,
 800d412:	f640 138e 	movw	r3, #2446	@ 0x98e
 800d416:	fb03 1105 	mla	r1, r3, r5, r1
 800d41a:	4603      	mov	r3, r0
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2 + tmp11 + tmp12,
 800d41c:	4464      	add	r4, ip
					   CONST_BITS+PASS1_BITS+1);

    dataptr++;			/* advance pointer to next column */
 800d41e:	3304      	adds	r3, #4
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3 + tmp10 + tmp13,
 800d420:	4439      	add	r1, r7
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2 + tmp11 + tmp12,
 800d422:	f504 4400 	add.w	r4, r4, #32768	@ 0x8000
    dataptr++;			/* advance pointer to next column */
 800d426:	9301      	str	r3, [sp, #4]
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3 + tmp10 + tmp13,
 800d428:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800d42c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2 + tmp11 + tmp12,
 800d42e:	1424      	asrs	r4, r4, #16
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800d430:	9a01      	ldr	r2, [sp, #4]
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3 + tmp10 + tmp13,
 800d432:	1409      	asrs	r1, r1, #16
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2 + tmp11 + tmp12,
 800d434:	f8c0 40a0 	str.w	r4, [r0, #160]	@ 0xa0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800d438:	429a      	cmp	r2, r3
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp3 + tmp10 + tmp13,
 800d43a:	f8c0 10e0 	str.w	r1, [r0, #224]	@ 0xe0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800d43e:	f47f af6e 	bne.w	800d31e <jpeg_fdct_16x8+0x27e>
  }
}
 800d442:	b015      	add	sp, #84	@ 0x54
 800d444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d448:	fffff93e 	.word	0xfffff93e
 800d44c:	ffffde07 	.word	0xffffde07
 800d450:	ffffd817 	.word	0xffffd817
 800d454:	ffffeaab 	.word	0xffffeaab
 800d458:	ffffd4b2 	.word	0xffffd4b2
 800d45c:	ffffb6d6 	.word	0xffffb6d6
 800d460:	ffffcac1 	.word	0xffffcac1
 800d464:	ffffdbfa 	.word	0xffffdbfa
 800d468:	ffffc4df 	.word	0xffffc4df
 800d46c:	ffffe333 	.word	0xffffe333
 800d470:	ffffadfd 	.word	0xffffadfd
 800d474:	fffff384 	.word	0xfffff384
 800d478:	ffffc13b 	.word	0xffffc13b

0800d47c <jpeg_fdct_14x7>:
 * 14-point FDCT in pass 1 (rows), 7-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_14x7 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800d47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d480:	b091      	sub	sp, #68	@ 0x44
 800d482:	4604      	mov	r4, r0
 800d484:	460d      	mov	r5, r1
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Zero bottom row of output coefficient block. */
  MEMZERO(&data[DCTSIZE*7], SIZEOF(DCTELEM) * DCTSIZE);
 800d486:	30e0      	adds	r0, #224	@ 0xe0
{
 800d488:	920e      	str	r2, [sp, #56]	@ 0x38
  MEMZERO(&data[DCTSIZE*7], SIZEOF(DCTELEM) * DCTSIZE);
 800d48a:	2100      	movs	r1, #0
 800d48c:	2220      	movs	r2, #32
 800d48e:	f002 fb0f 	bl	800fab0 <memset>
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* 14-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/28). */

  dataptr = data;
  for (ctr = 0; ctr < 7; ctr++) {
 800d492:	f104 0320 	add.w	r3, r4, #32
 800d496:	469c      	mov	ip, r3
 800d498:	930d      	str	r3, [sp, #52]	@ 0x34
 800d49a:	1f2b      	subs	r3, r5, #4
 800d49c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d49e:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 800d4a2:	930f      	str	r3, [sp, #60]	@ 0x3c
    elemptr = sample_data[ctr] + start_col;
 800d4a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  for (ctr = 0; ctr < 7; ctr++) {
 800d4a6:	f10c 0c20 	add.w	ip, ip, #32

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[13]);
 800d4aa:	990e      	ldr	r1, [sp, #56]	@ 0x38
    elemptr = sample_data[ctr] + start_col;
 800d4ac:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800d4b0:	930c      	str	r3, [sp, #48]	@ 0x30
 800d4b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4b4:	18d3      	adds	r3, r2, r3
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[13]);
 800d4b6:	5c52      	ldrb	r2, [r2, r1]
 800d4b8:	f893 e00d 	ldrb.w	lr, [r3, #13]
 800d4bc:	9200      	str	r2, [sp, #0]
 800d4be:	4472      	add	r2, lr
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[12]);
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[11]);
 800d4c0:	f893 800b 	ldrb.w	r8, [r3, #11]
    tmp13 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[10]);
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[9]);
 800d4c4:	7a5f      	ldrb	r7, [r3, #9]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[13]);
 800d4c6:	9207      	str	r2, [sp, #28]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[12]);
 800d4c8:	785a      	ldrb	r2, [r3, #1]
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[8]);
 800d4ca:	795e      	ldrb	r6, [r3, #5]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[12]);
 800d4cc:	9201      	str	r2, [sp, #4]
 800d4ce:	7b1a      	ldrb	r2, [r3, #12]
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[7]);
 800d4d0:	7998      	ldrb	r0, [r3, #6]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[12]);
 800d4d2:	9202      	str	r2, [sp, #8]
    tmp13 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[10]);
 800d4d4:	f893 a00a 	ldrb.w	sl, [r3, #10]
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[8]);
 800d4d8:	7a1d      	ldrb	r5, [r3, #8]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[12]);
 800d4da:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[8]);
 800d4de:	eb06 0905 	add.w	r9, r6, r5
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[13]);
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[12]);
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[11]);
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[10]);
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[9]);
    tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[8]);
 800d4e2:	1b75      	subs	r5, r6, r5
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[12]);
 800d4e4:	440a      	add	r2, r1
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[9]);
 800d4e6:	7919      	ldrb	r1, [r3, #4]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[12]);
 800d4e8:	9208      	str	r2, [sp, #32]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[11]);
 800d4ea:	789a      	ldrb	r2, [r3, #2]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[9]);
 800d4ec:	9105      	str	r1, [sp, #20]
 800d4ee:	4439      	add	r1, r7
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[11]);
 800d4f0:	9203      	str	r2, [sp, #12]
 800d4f2:	4442      	add	r2, r8
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[9]);
 800d4f4:	910a      	str	r1, [sp, #40]	@ 0x28
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[11]);
 800d4f6:	9209      	str	r2, [sp, #36]	@ 0x24
    tmp13 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[10]);
 800d4f8:	78da      	ldrb	r2, [r3, #3]
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[7]);
 800d4fa:	79db      	ldrb	r3, [r3, #7]
    tmp13 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[10]);
 800d4fc:	9204      	str	r2, [sp, #16]
 800d4fe:	4452      	add	r2, sl
    tmp6 = GETJSAMPLE(elemptr[6]) + GETJSAMPLE(elemptr[7]);
 800d500:	eb00 0b03 	add.w	fp, r0, r3
 800d504:	9306      	str	r3, [sp, #24]
    tmp10 = tmp0 + tmp6;
 800d506:	9907      	ldr	r1, [sp, #28]
 800d508:	eb01 030b 	add.w	r3, r1, fp
 800d50c:	930b      	str	r3, [sp, #44]	@ 0x2c
    tmp14 = tmp0 - tmp6;
 800d50e:	eba1 030b 	sub.w	r3, r1, fp
 800d512:	9307      	str	r3, [sp, #28]
    tmp11 = tmp1 + tmp5;
 800d514:	9b08      	ldr	r3, [sp, #32]
 800d516:	eb03 0b09 	add.w	fp, r3, r9
    tmp15 = tmp1 - tmp5;
 800d51a:	eba3 0309 	sub.w	r3, r3, r9
 800d51e:	9308      	str	r3, [sp, #32]
    tmp12 = tmp2 + tmp4;
 800d520:	e9dd 3109 	ldrd	r3, r1, [sp, #36]	@ 0x24
 800d524:	eb03 0901 	add.w	r9, r3, r1
    tmp16 = tmp2 - tmp4;
 800d528:	1a5b      	subs	r3, r3, r1
 800d52a:	9309      	str	r3, [sp, #36]	@ 0x24
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[13]);
 800d52c:	9b00      	ldr	r3, [sp, #0]
	      CONST_BITS-PASS1_BITS);

    tmp10 = MULTIPLY(tmp14 + tmp15, FIX(1.105676686));    /* c6 */

    dataptr[2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.273079590))   /* c2-c6 */
 800d52e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[13]);
 800d530:	eba3 0e0e 	sub.w	lr, r3, lr
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[12]);
 800d534:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 800d538:	1a5b      	subs	r3, r3, r1
      ((tmp10 + tmp11 + tmp12 + tmp13 - 14 * CENTERJSAMPLE) << PASS1_BITS);
 800d53a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[12]);
 800d53c:	9300      	str	r3, [sp, #0]
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[11]);
 800d53e:	9b03      	ldr	r3, [sp, #12]
 800d540:	eba3 0808 	sub.w	r8, r3, r8
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[10]);
 800d544:	9b04      	ldr	r3, [sp, #16]
 800d546:	eba3 0a0a 	sub.w	sl, r3, sl
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[9]);
 800d54a:	9b05      	ldr	r3, [sp, #20]
 800d54c:	1bdf      	subs	r7, r3, r7
    tmp6 = GETJSAMPLE(elemptr[6]) - GETJSAMPLE(elemptr[7]);
 800d54e:	9b06      	ldr	r3, [sp, #24]
 800d550:	1ac3      	subs	r3, r0, r3
      ((tmp10 + tmp11 + tmp12 + tmp13 - 14 * CENTERJSAMPLE) << PASS1_BITS);
 800d552:	eb01 000b 	add.w	r0, r1, fp
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
 800d556:	ebab 0b42 	sub.w	fp, fp, r2, lsl #1
      ((tmp10 + tmp11 + tmp12 + tmp13 - 14 * CENTERJSAMPLE) << PASS1_BITS);
 800d55a:	4448      	add	r0, r9
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
 800d55c:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
 800d560:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
      ((tmp10 + tmp11 + tmp12 + tmp13 - 14 * CENTERJSAMPLE) << PASS1_BITS);
 800d564:	4410      	add	r0, r2
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
 800d566:	4a83      	ldr	r2, [pc, #524]	@ (800d774 <jpeg_fdct_14x7+0x2f8>)
      ((tmp10 + tmp11 + tmp12 + tmp13 - 14 * CENTERJSAMPLE) << PASS1_BITS);
 800d568:	f5a0 60e0 	sub.w	r0, r0, #1792	@ 0x700
    dataptr[0] = (DCTELEM)
 800d56c:	0080      	lsls	r0, r0, #2
 800d56e:	f84c 0c40 	str.w	r0, [ip, #-64]
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
 800d572:	f640 2012 	movw	r0, #2578	@ 0xa12
 800d576:	fb00 fb0b 	mul.w	fp, r0, fp
 800d57a:	f642 00c6 	movw	r0, #10438	@ 0x28c6
 800d57e:	fb00 bb01 	mla	fp, r0, r1, fp
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.273079590))   /* c2-c6 */
 800d582:	9807      	ldr	r0, [sp, #28]
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.274162392)) + /* c4 */
 800d584:	fb02 bb09 	mla	fp, r2, r9, fp
 800d588:	f50b 6280 	add.w	r2, fp, #1024	@ 0x400
 800d58c:	12d2      	asrs	r2, r2, #11
    dataptr[4] = (DCTELEM)
 800d58e:	f84c 2c30 	str.w	r2, [ip, #-48]
    tmp10 = MULTIPLY(tmp14 + tmp15, FIX(1.105676686));    /* c6 */
 800d592:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
 800d596:	440a      	add	r2, r1
 800d598:	f242 3162 	movw	r1, #9058	@ 0x2362
 800d59c:	434a      	muls	r2, r1
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.273079590))   /* c2-c6 */
 800d59e:	f640 01bd 	movw	r1, #2237	@ 0x8bd
 800d5a2:	fb01 2100 	mla	r1, r1, r0, r2
 800d5a6:	f241 30a3 	movw	r0, #5027	@ 0x13a3
 800d5aa:	fb00 1106 	mla	r1, r0, r6, r1
	      + MULTIPLY(tmp16, FIX(0.613604268)),        /* c10 */
	      CONST_BITS-PASS1_BITS);
    dataptr[6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.719280954))   /* c6+c10 */
 800d5ae:	4872      	ldr	r0, [pc, #456]	@ (800d778 <jpeg_fdct_14x7+0x2fc>)
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.273079590))   /* c2-c6 */
 800d5b0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d5b4:	12c9      	asrs	r1, r1, #11
    dataptr[2] = (DCTELEM)
 800d5b6:	f84c 1c38 	str.w	r1, [ip, #-56]
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.719280954))   /* c6+c10 */
 800d5ba:	9908      	ldr	r1, [sp, #32]
 800d5bc:	fb00 2201 	mla	r2, r0, r1, r2
 800d5c0:	f600 20e5 	addw	r0, r0, #2789	@ 0xae5
 800d5c4:	fb00 2206 	mla	r2, r0, r6, r2
    tmp3 <<= CONST_BITS;
    tmp10 = MULTIPLY(tmp10, - FIX(0.158341681));          /* -c13 */
    tmp11 = MULTIPLY(tmp11, FIX(1.405321284));            /* c1 */
    tmp10 += tmp11 - tmp3;
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(1.197448846)) +     /* c5 */
	    MULTIPLY(tmp4 + tmp6, FIX(0.752406978));      /* c9 */
 800d5c8:	f641 0614 	movw	r6, #6164	@ 0x1814
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.719280954))   /* c6+c10 */
 800d5cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d5d0:	12d2      	asrs	r2, r2, #11
    dataptr[6] = (DCTELEM)
 800d5d2:	f84c 2c28 	str.w	r2, [ip, #-40]
    tmp10 = tmp1 + tmp2;
 800d5d6:	9a00      	ldr	r2, [sp, #0]
 800d5d8:	eb02 0008 	add.w	r0, r2, r8
    tmp11 = tmp5 - tmp4;
 800d5dc:	1bea      	subs	r2, r5, r7
    dataptr[7] = (DCTELEM) ((tmp0 - tmp10 + tmp3 - tmp11 - tmp6) << PASS1_BITS);
 800d5de:	ebae 0100 	sub.w	r1, lr, r0
 800d5e2:	4451      	add	r1, sl
 800d5e4:	1a89      	subs	r1, r1, r2
 800d5e6:	1ac9      	subs	r1, r1, r3
 800d5e8:	0089      	lsls	r1, r1, #2
 800d5ea:	f84c 1c24 	str.w	r1, [ip, #-36]
    tmp11 = MULTIPLY(tmp11, FIX(1.405321284));            /* c1 */
 800d5ee:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 800d5f2:	434a      	muls	r2, r1
    tmp10 += tmp11 - tmp3;
 800d5f4:	f46f 61a2 	mvn.w	r1, #1296	@ 0x510
 800d5f8:	eba2 324a 	sub.w	r2, r2, sl, lsl #13
 800d5fc:	fb01 2200 	mla	r2, r1, r0, r2
	    MULTIPLY(tmp4 + tmp6, FIX(0.752406978));      /* c9 */
 800d600:	18f9      	adds	r1, r7, r3
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(1.197448846)) +     /* c5 */
 800d602:	eb0e 0008 	add.w	r0, lr, r8
	    MULTIPLY(tmp4 + tmp6, FIX(0.752406978));      /* c9 */
 800d606:	4371      	muls	r1, r6
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(1.197448846)) +     /* c5 */
 800d608:	f242 6652 	movw	r6, #9810	@ 0x2652
 800d60c:	fb06 1100 	mla	r1, r6, r0, r1
    dataptr[5] = (DCTELEM)
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(2.373959773)) /* c3+c5-c13 */
 800d610:	4e5a      	ldr	r6, [pc, #360]	@ (800d77c <jpeg_fdct_14x7+0x300>)
 800d612:	1850      	adds	r0, r2, r1
 800d614:	fb06 0008 	mla	r0, r6, r8, r0
 800d618:	f242 36d7 	movw	r6, #9175	@ 0x23d7
 800d61c:	fb06 0007 	mla	r0, r6, r7, r0
	      + MULTIPLY(tmp4, FIX(1.119999435)),         /* c1+c11-c9 */
	      CONST_BITS-PASS1_BITS);
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(1.334852607)) +     /* c3 */
	    MULTIPLY(tmp5 - tmp6, FIX(0.467085129));      /* c11 */
 800d620:	f640 67f2 	movw	r7, #3826	@ 0xef2
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(2.373959773)) /* c3+c5-c13 */
 800d624:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800d628:	12c0      	asrs	r0, r0, #11
    dataptr[5] = (DCTELEM)
 800d62a:	f84c 0c2c 	str.w	r0, [ip, #-44]
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(1.334852607)) +     /* c3 */
 800d62e:	9800      	ldr	r0, [sp, #0]
 800d630:	eb0e 0600 	add.w	r6, lr, r0
	    MULTIPLY(tmp5 - tmp6, FIX(0.467085129));      /* c11 */
 800d634:	1ae8      	subs	r0, r5, r3
 800d636:	4378      	muls	r0, r7
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(1.334852607)) +     /* c3 */
 800d638:	f642 27b7 	movw	r7, #10935	@ 0x2ab7
 800d63c:	fb07 0006 	mla	r0, r7, r6, r0
    dataptr[3] = (DCTELEM)
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
 800d640:	9e00      	ldr	r6, [sp, #0]
 800d642:	4f4f      	ldr	r7, [pc, #316]	@ (800d780 <jpeg_fdct_14x7+0x304>)
 800d644:	4402      	add	r2, r0
	      - MULTIPLY(tmp5, FIX(3.069855259)),         /* c1+c5+c11 */
	      CONST_BITS-PASS1_BITS);
    dataptr[1] = (DCTELEM)
      DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
 800d646:	4401      	add	r1, r0
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
 800d648:	fb07 2206 	mla	r2, r7, r6, r2
 800d64c:	4e4d      	ldr	r6, [pc, #308]	@ (800d784 <jpeg_fdct_14x7+0x308>)
      DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
 800d64e:	eb01 314a 	add.w	r1, r1, sl, lsl #13
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
 800d652:	fb06 2205 	mla	r2, r6, r5, r2
      DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
 800d656:	4419      	add	r1, r3
 800d658:	4473      	add	r3, lr
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.424103948)) /* c3-c9-c13 */
 800d65a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d65e:	12d2      	asrs	r2, r2, #11
    dataptr[3] = (DCTELEM)
 800d660:	f84c 2c34 	str.w	r2, [ip, #-52]
      DESCALE(tmp11 + tmp12 + tmp3 + tmp6 -
 800d664:	4a48      	ldr	r2, [pc, #288]	@ (800d788 <jpeg_fdct_14x7+0x30c>)
 800d666:	fb02 1103 	mla	r1, r2, r3, r1
 800d66a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d66e:	12c9      	asrs	r1, r1, #11
    dataptr[1] = (DCTELEM)
 800d670:	f84c 1c3c 	str.w	r1, [ip, #-60]
  for (ctr = 0; ctr < 7; ctr++) {
 800d674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d676:	4563      	cmp	r3, ip
 800d678:	f47f af14 	bne.w	800d4a4 <jpeg_fdct_14x7+0x28>
    tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*5];
    tmp12 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*4];

    z1 = tmp0 + tmp2;
    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(z1 + tmp1 + tmp3, FIX(1.306122449)), /* 64/49 */
 800d67c:	f642 1bcc 	movw	fp, #10700	@ 0x29cc
	      CONST_BITS+PASS1_BITS+1);
    tmp3 += tmp3;
    z1 -= tmp3;
    z1 -= tmp3;
    z1 = MULTIPLY(z1, FIX(0.461784020));                /* (c2+c6-c4)/2 */
 800d680:	f640 6ac7 	movw	sl, #3783	@ 0xec7
    z2 = MULTIPLY(tmp0 - tmp2, FIX(1.202428084));       /* (c2+c4-c6)/2 */
 800d684:	f242 697a 	movw	r9, #9850	@ 0x267a
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*6];
 800d688:	f8d4 e000 	ldr.w	lr, [r4]

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+PASS1_BITS+1);

    dataptr++;			/* advance pointer to next column */
 800d68c:	3404      	adds	r4, #4
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*4];
 800d68e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*6];
 800d690:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*4];
 800d694:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*5];
 800d696:	f8d4 609c 	ldr.w	r6, [r4, #156]	@ 0x9c
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*6];
 800d69a:	eb0e 0503 	add.w	r5, lr, r3
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*5];
 800d69e:	69e0      	ldr	r0, [r4, #28]
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*4];
 800d6a0:	187a      	adds	r2, r7, r1
    tmp12 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*4];
 800d6a2:	1a7f      	subs	r7, r7, r1
    tmp3 = dataptr[DCTSIZE*3];
 800d6a4:	f8d4 c05c 	ldr.w	ip, [r4, #92]	@ 0x5c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*5];
 800d6a8:	eb00 0806 	add.w	r8, r0, r6
    z1 = tmp0 + tmp2;
 800d6ac:	18a9      	adds	r1, r5, r2
    tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*5];
 800d6ae:	1b80      	subs	r0, r0, r6
    tmp10 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*6];
 800d6b0:	ebae 0303 	sub.w	r3, lr, r3
      DESCALE(MULTIPLY(z1 + tmp1 + tmp3, FIX(1.306122449)), /* 64/49 */
 800d6b4:	eb08 0601 	add.w	r6, r8, r1
    z2 = MULTIPLY(tmp0 - tmp2, FIX(1.202428084));       /* (c2+c4-c6)/2 */
 800d6b8:	eba5 0e02 	sub.w	lr, r5, r2
    z1 -= tmp3;
 800d6bc:	eba1 018c 	sub.w	r1, r1, ip, lsl #2
    z3 = MULTIPLY(tmp1 - tmp2, FIX(0.411026446));       /* c6 */
 800d6c0:	eba8 0202 	sub.w	r2, r8, r2
      DESCALE(MULTIPLY(z1 + tmp1 + tmp3, FIX(1.306122449)), /* 64/49 */
 800d6c4:	4466      	add	r6, ip
    z2 = MULTIPLY(tmp0 - tmp2, FIX(1.202428084));       /* (c2+c4-c6)/2 */
 800d6c6:	fb09 fe0e 	mul.w	lr, r9, lr
    z1 = MULTIPLY(z1, FIX(0.461784020));                /* (c2+c6-c4)/2 */
 800d6ca:	fb0a f101 	mul.w	r1, sl, r1
    z2 = MULTIPLY(tmp0 - tmp1, FIX(1.151670509));       /* c4 */
 800d6ce:	eba5 0508 	sub.w	r5, r5, r8
      DESCALE(MULTIPLY(z1 + tmp1 + tmp3, FIX(1.306122449)), /* 64/49 */
 800d6d2:	fb0b f606 	mul.w	r6, fp, r6
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
 800d6d6:	eba8 0c4c 	sub.w	ip, r8, ip, lsl #1
      DESCALE(MULTIPLY(z1 + tmp1 + tmp3, FIX(1.306122449)), /* 64/49 */
 800d6da:	f506 4600 	add.w	r6, r6, #32768	@ 0x8000
 800d6de:	1436      	asrs	r6, r6, #16
    dataptr[DCTSIZE*0] = (DCTELEM)
 800d6e0:	f844 6c04 	str.w	r6, [r4, #-4]
    z3 = MULTIPLY(tmp1 - tmp2, FIX(0.411026446));       /* c6 */
 800d6e4:	f640 5627 	movw	r6, #3367	@ 0xd27
 800d6e8:	4372      	muls	r2, r6
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS+PASS1_BITS+1);
 800d6ea:	eb01 060e 	add.w	r6, r1, lr
    z1 -= z2;
 800d6ee:	eba1 010e 	sub.w	r1, r1, lr
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS+PASS1_BITS+1);
 800d6f2:	4416      	add	r6, r2
 800d6f4:	f506 4600 	add.w	r6, r6, #32768	@ 0x8000
 800d6f8:	1436      	asrs	r6, r6, #16
 800d6fa:	63e6      	str	r6, [r4, #60]	@ 0x3c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(1.151670509));       /* c4 */
 800d6fc:	f242 46da 	movw	r6, #9434	@ 0x24da
 800d700:	4375      	muls	r5, r6
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
 800d702:	4e22      	ldr	r6, [pc, #136]	@ (800d78c <jpeg_fdct_14x7+0x310>)
 800d704:	442a      	add	r2, r5
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+PASS1_BITS+1);
 800d706:	4429      	add	r1, r5
    tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.222383464));   /* (c3+c5-c1)/2 */
 800d708:	1a1d      	subs	r5, r3, r0
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
 800d70a:	fb06 220c 	mla	r2, r6, ip, r2
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+PASS1_BITS+1);
 800d70e:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
 800d712:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+PASS1_BITS+1);
 800d716:	1409      	asrs	r1, r1, #16
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.923568041)), /* c2+c6-c4 */
 800d718:	1412      	asrs	r2, r2, #16
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS+PASS1_BITS+1);
 800d71a:	f8c4 10bc 	str.w	r1, [r4, #188]	@ 0xbc
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.221765677));   /* (c3+c1-c5)/2 */
 800d71e:	f242 7119 	movw	r1, #10009	@ 0x2719
    dataptr[DCTSIZE*4] = (DCTELEM)
 800d722:	67e2      	str	r2, [r4, #124]	@ 0x7c
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.221765677));   /* (c3+c1-c5)/2 */
 800d724:	181a      	adds	r2, r3, r0
    tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.800824523)); /* -c1 */
 800d726:	4438      	add	r0, r7
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.801442310));   /* c5 */
 800d728:	443b      	add	r3, r7
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(1.221765677));   /* (c3+c1-c5)/2 */
 800d72a:	434a      	muls	r2, r1
    tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.222383464));   /* (c3+c5-c1)/2 */
 800d72c:	f240 711e 	movw	r1, #1822	@ 0x71e
 800d730:	434d      	muls	r5, r1
    tmp0 = tmp1 - tmp2;
 800d732:	1b51      	subs	r1, r2, r5
    tmp1 += tmp2;
 800d734:	442a      	add	r2, r5
    tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.800824523)); /* -c1 */
 800d736:	4d16      	ldr	r5, [pc, #88]	@ (800d790 <jpeg_fdct_14x7+0x314>)
 800d738:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.801442310));   /* c5 */
 800d73a:	f641 15a5 	movw	r5, #6565	@ 0x19a5
    tmp1 += tmp2;
 800d73e:	4402      	add	r2, r0
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.801442310));   /* c5 */
 800d740:	436b      	muls	r3, r5
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+PASS1_BITS+1);
 800d742:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
    tmp0 += tmp3;
 800d746:	4419      	add	r1, r3
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+PASS1_BITS+1);
 800d748:	1412      	asrs	r2, r2, #16
    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+PASS1_BITS+1);
 800d74a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp1, CONST_BITS+PASS1_BITS+1);
 800d74e:	65e2      	str	r2, [r4, #92]	@ 0x5c
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(2.443531355));   /* c3+c1-c5 */
 800d750:	f644 6231 	movw	r2, #20017	@ 0x4e31
    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+PASS1_BITS+1);
 800d754:	1409      	asrs	r1, r1, #16
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(2.443531355));   /* c3+c1-c5 */
 800d756:	fb02 3307 	mla	r3, r2, r7, r3
    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp0, CONST_BITS+PASS1_BITS+1);
 800d75a:	61e1      	str	r1, [r4, #28]
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(2.443531355));   /* c3+c1-c5 */
 800d75c:	4403      	add	r3, r0
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp2, CONST_BITS+PASS1_BITS+1);
 800d75e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d762:	141b      	asrs	r3, r3, #16
 800d764:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800d768:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d76a:	429c      	cmp	r4, r3
 800d76c:	d18c      	bne.n	800d688 <jpeg_fdct_14x7+0x20c>
  }
}
 800d76e:	b011      	add	sp, #68	@ 0x44
 800d770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d774:	ffffe3c9 	.word	0xffffe3c9
 800d778:	ffffc8fc 	.word	0xffffc8fc
 800d77c:	ffffb409 	.word	0xffffb409
 800d780:	fffff26e 	.word	0xfffff26e
 800d784:	ffff9dc4 	.word	0xffff9dc4
 800d788:	ffffdbf0 	.word	0xffffdbf0
 800d78c:	ffffe272 	.word	0xffffe272
 800d790:	ffffc660 	.word	0xffffc660

0800d794 <jpeg_fdct_12x6>:
 * 12-point FDCT in pass 1 (rows), 6-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_12x6 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800d794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d798:	b08d      	sub	sp, #52	@ 0x34
 800d79a:	4683      	mov	fp, r0
 800d79c:	460c      	mov	r4, r1
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Zero 2 bottom rows of output coefficient block. */
  MEMZERO(&data[DCTSIZE*6], SIZEOF(DCTELEM) * DCTSIZE * 2);
 800d79e:	30c0      	adds	r0, #192	@ 0xc0
{
 800d7a0:	920a      	str	r2, [sp, #40]	@ 0x28
  MEMZERO(&data[DCTSIZE*6], SIZEOF(DCTELEM) * DCTSIZE * 2);
 800d7a2:	2100      	movs	r1, #0
 800d7a4:	2240      	movs	r2, #64	@ 0x40
 800d7a6:	f002 f983 	bl	800fab0 <memset>
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* 12-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/24). */

  dataptr = data;
  for (ctr = 0; ctr < 6; ctr++) {
 800d7aa:	f10b 0320 	add.w	r3, fp, #32
 800d7ae:	469e      	mov	lr, r3
 800d7b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7b2:	1f23      	subs	r3, r4, #4
 800d7b4:	9308      	str	r3, [sp, #32]
 800d7b6:	f10b 03e0 	add.w	r3, fp, #224	@ 0xe0
 800d7ba:	930b      	str	r3, [sp, #44]	@ 0x2c
    elemptr = sample_data[ctr] + start_col;
 800d7bc:	9a08      	ldr	r2, [sp, #32]
  for (ctr = 0; ctr < 6; ctr++) {
 800d7be:	f10e 0e20 	add.w	lr, lr, #32
    elemptr = sample_data[ctr] + start_col;
 800d7c2:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800d7c6:	9208      	str	r2, [sp, #32]
 800d7c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d7ca:	189c      	adds	r4, r3, r2

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[11]);
 800d7cc:	5c9b      	ldrb	r3, [r3, r2]
 800d7ce:	f894 800b 	ldrb.w	r8, [r4, #11]
 800d7d2:	4619      	mov	r1, r3
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[10]);
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[9]);
 800d7d4:	f894 c009 	ldrb.w	ip, [r4, #9]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[11]);
 800d7d8:	eb03 0a08 	add.w	sl, r3, r8
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[10]);
 800d7dc:	7863      	ldrb	r3, [r4, #1]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[8]);
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[7]);
 800d7de:	79e5      	ldrb	r5, [r4, #7]
    tmp11 = tmp1 + tmp4;
    tmp14 = tmp1 - tmp4;
    tmp12 = tmp2 + tmp3;
    tmp15 = tmp2 - tmp3;

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[11]);
 800d7e0:	eba1 0808 	sub.w	r8, r1, r8
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[10]);
 800d7e4:	9300      	str	r3, [sp, #0]
 800d7e6:	7aa3      	ldrb	r3, [r4, #10]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[8]);
 800d7e8:	78e7      	ldrb	r7, [r4, #3]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[10]);
 800d7ea:	9301      	str	r3, [sp, #4]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[8]);
 800d7ec:	7a26      	ldrb	r6, [r4, #8]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[10]);
 800d7ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	9305      	str	r3, [sp, #20]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[9]);
 800d7f6:	78a3      	ldrb	r3, [r4, #2]
 800d7f8:	eb03 020c 	add.w	r2, r3, ip
 800d7fc:	9302      	str	r3, [sp, #8]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[7]);
 800d7fe:	7923      	ldrb	r3, [r4, #4]
 800d800:	1958      	adds	r0, r3, r5
 800d802:	9303      	str	r3, [sp, #12]
    tmp5 = GETJSAMPLE(elemptr[5]) + GETJSAMPLE(elemptr[6]);
 800d804:	7963      	ldrb	r3, [r4, #5]
 800d806:	79a4      	ldrb	r4, [r4, #6]
 800d808:	9304      	str	r3, [sp, #16]
 800d80a:	eb03 0904 	add.w	r9, r3, r4
    tmp10 = tmp0 + tmp5;
 800d80e:	eb0a 0309 	add.w	r3, sl, r9
    tmp13 = tmp0 - tmp5;
 800d812:	ebaa 0a09 	sub.w	sl, sl, r9
    tmp10 = tmp0 + tmp5;
 800d816:	9306      	str	r3, [sp, #24]
    tmp14 = tmp1 - tmp4;
 800d818:	9b05      	ldr	r3, [sp, #20]
 800d81a:	1a1b      	subs	r3, r3, r0
 800d81c:	9307      	str	r3, [sp, #28]
    tmp12 = tmp2 + tmp3;
 800d81e:	19bb      	adds	r3, r7, r6
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[10]);
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[9]);
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[8]);
 800d820:	1bbe      	subs	r6, r7, r6
    tmp12 = tmp2 + tmp3;
 800d822:	eb02 0903 	add.w	r9, r2, r3
    tmp15 = tmp2 - tmp3;
 800d826:	1ad2      	subs	r2, r2, r3
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[10]);
 800d828:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d82c:	1a5b      	subs	r3, r3, r1
 800d82e:	9300      	str	r3, [sp, #0]
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[9]);
 800d830:	9b02      	ldr	r3, [sp, #8]
 800d832:	eba3 0c0c 	sub.w	ip, r3, ip
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[7]);
 800d836:	9b03      	ldr	r3, [sp, #12]
 800d838:	1b59      	subs	r1, r3, r5
    tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[6]);
 800d83a:	9b04      	ldr	r3, [sp, #16]
	      CONST_BITS-PASS1_BITS);

    /* Odd part */

    tmp10 = MULTIPLY(tmp1 + tmp4, FIX_0_541196100);    /* c9 */
    tmp14 = tmp10 + MULTIPLY(tmp1, FIX_0_765366865);   /* c3-c9 */
 800d83c:	f641 057e 	movw	r5, #6270	@ 0x187e
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX_1_847759065);   /* c3+c9 */
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.121971054));   /* c5 */
 800d840:	eb08 070c 	add.w	r7, r8, ip
    tmp5 = GETJSAMPLE(elemptr[5]) - GETJSAMPLE(elemptr[6]);
 800d844:	1b1b      	subs	r3, r3, r4
    tmp11 = tmp1 + tmp4;
 800d846:	9c05      	ldr	r4, [sp, #20]
 800d848:	4420      	add	r0, r4
      ((tmp10 + tmp11 + tmp12 - 12 * CENTERJSAMPLE) << PASS1_BITS);
 800d84a:	9c06      	ldr	r4, [sp, #24]
 800d84c:	4420      	add	r0, r4
 800d84e:	4448      	add	r0, r9
 800d850:	f5a0 60c0 	sub.w	r0, r0, #1536	@ 0x600
    dataptr[0] = (DCTELEM)
 800d854:	0080      	lsls	r0, r0, #2
 800d856:	f84e 0c40 	str.w	r0, [lr, #-64]
    dataptr[6] = (DCTELEM) ((tmp13 - tmp14 - tmp15) << PASS1_BITS);
 800d85a:	9807      	ldr	r0, [sp, #28]
 800d85c:	ebaa 0000 	sub.w	r0, sl, r0
      DESCALE(tmp14 - tmp15 + MULTIPLY(tmp13 + tmp15, FIX(1.366025404)), /* c2 */
 800d860:	4492      	add	sl, r2
    dataptr[6] = (DCTELEM) ((tmp13 - tmp14 - tmp15) << PASS1_BITS);
 800d862:	1a80      	subs	r0, r0, r2
 800d864:	0080      	lsls	r0, r0, #2
 800d866:	f84e 0c28 	str.w	r0, [lr, #-40]
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.224744871)), /* c4 */
 800d86a:	eba4 0009 	sub.w	r0, r4, r9
 800d86e:	f242 7431 	movw	r4, #10033	@ 0x2731
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.860918669));   /* c7 */
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.580774953)) /* c5+c7-c1 */
 800d872:	f44f 69bd 	mov.w	r9, #1512	@ 0x5e8
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.224744871)), /* c4 */
 800d876:	4360      	muls	r0, r4
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.860918669));   /* c7 */
 800d878:	eb08 0406 	add.w	r4, r8, r6
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.224744871)), /* c4 */
 800d87c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800d880:	12c0      	asrs	r0, r0, #11
    dataptr[4] = (DCTELEM)
 800d882:	f84e 0c30 	str.w	r0, [lr, #-48]
      DESCALE(tmp14 - tmp15 + MULTIPLY(tmp13 + tmp15, FIX(1.366025404)), /* c2 */
 800d886:	9807      	ldr	r0, [sp, #28]
 800d888:	1a82      	subs	r2, r0, r2
 800d88a:	f642 30b6 	movw	r0, #11190	@ 0x2bb6
 800d88e:	fb00 220a 	mla	r2, r0, sl, r2
    tmp10 = MULTIPLY(tmp1 + tmp4, FIX_0_541196100);    /* c9 */
 800d892:	f241 1051 	movw	r0, #4433	@ 0x1151
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.860918669));   /* c7 */
 800d896:	f641 3a8d 	movw	sl, #7053	@ 0x1b8d
      DESCALE(tmp14 - tmp15 + MULTIPLY(tmp13 + tmp15, FIX(1.366025404)), /* c2 */
 800d89a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.860918669));   /* c7 */
 800d89e:	fb0a f404 	mul.w	r4, sl, r4
      DESCALE(tmp14 - tmp15 + MULTIPLY(tmp13 + tmp15, FIX(1.366025404)), /* c2 */
 800d8a2:	12d2      	asrs	r2, r2, #11
    dataptr[2] = (DCTELEM)
 800d8a4:	f84e 2c38 	str.w	r2, [lr, #-56]
    tmp10 = MULTIPLY(tmp1 + tmp4, FIX_0_541196100);    /* c9 */
 800d8a8:	9a00      	ldr	r2, [sp, #0]
 800d8aa:	440a      	add	r2, r1
 800d8ac:	4342      	muls	r2, r0
    tmp14 = tmp10 + MULTIPLY(tmp1, FIX_0_765366865);   /* c3-c9 */
 800d8ae:	9800      	ldr	r0, [sp, #0]
 800d8b0:	fb05 2500 	mla	r5, r5, r0, r2
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX_1_847759065);   /* c3+c9 */
 800d8b4:	4853      	ldr	r0, [pc, #332]	@ (800da04 <jpeg_fdct_12x6+0x270>)
 800d8b6:	fb00 2201 	mla	r2, r0, r1, r2
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.121971054));   /* c5 */
 800d8ba:	f242 31e7 	movw	r1, #9191	@ 0x23e7
	    + MULTIPLY(tmp5, FIX(0.184591911));        /* c11 */
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.184591911)); /* -c11 */
 800d8be:	4852      	ldr	r0, [pc, #328]	@ (800da08 <jpeg_fdct_12x6+0x274>)
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.121971054));   /* c5 */
 800d8c0:	434f      	muls	r7, r1
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.184591911)); /* -c11 */
 800d8c2:	eb0c 0106 	add.w	r1, ip, r6
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX_1_847759065);   /* c3+c9 */
 800d8c6:	9200      	str	r2, [sp, #0]
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.184591911)); /* -c11 */
 800d8c8:	4341      	muls	r1, r0
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.580774953)) /* c5+c7-c1 */
 800d8ca:	1938      	adds	r0, r7, r4
 800d8cc:	4a4f      	ldr	r2, [pc, #316]	@ (800da0c <jpeg_fdct_12x6+0x278>)
 800d8ce:	4428      	add	r0, r5
 800d8d0:	fb02 0008 	mla	r0, r2, r8, r0
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.339493912)) /* c1+c5-c11 */
	    + MULTIPLY(tmp5, FIX(0.860918669));        /* c7 */
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.725788011)) /* c1+c11-c7 */
	    - MULTIPLY(tmp5, FIX(1.121971054));        /* c5 */
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.306562965)) /* c3 */
 800d8d4:	9a00      	ldr	r2, [sp, #0]
 800d8d6:	eba8 0806 	sub.w	r8, r8, r6
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.580774953)) /* c5+c7-c1 */
 800d8da:	fb09 0003 	mla	r0, r9, r3, r0
	    - MULTIPLY(tmp2 + tmp5, FIX_0_541196100);  /* c9 */

    dataptr[1] = (DCTELEM) DESCALE(tmp10, CONST_BITS-PASS1_BITS);
 800d8de:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800d8e2:	12c0      	asrs	r0, r0, #11
 800d8e4:	f84e 0c3c 	str.w	r0, [lr, #-60]
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.306562965)) /* c3 */
 800d8e8:	f642 10cf 	movw	r0, #10703	@ 0x29cf
 800d8ec:	fb00 2808 	mla	r8, r0, r8, r2
	    - MULTIPLY(tmp2 + tmp5, FIX_0_541196100);  /* c9 */
 800d8f0:	eb0c 0003 	add.w	r0, ip, r3
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.306562965)) /* c3 */
 800d8f4:	4a46      	ldr	r2, [pc, #280]	@ (800da10 <jpeg_fdct_12x6+0x27c>)
 800d8f6:	fb02 8000 	mla	r0, r2, r0, r8
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.339493912)) /* c1+c5-c11 */
 800d8fa:	9a00      	ldr	r2, [sp, #0]
    dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS-PASS1_BITS);
 800d8fc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.339493912)) /* c1+c5-c11 */
 800d900:	1a8a      	subs	r2, r1, r2
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.725788011)) /* c1+c11-c7 */
 800d902:	1b49      	subs	r1, r1, r5
    dataptr[3] = (DCTELEM) DESCALE(tmp11, CONST_BITS-PASS1_BITS);
 800d904:	12c0      	asrs	r0, r0, #11
 800d906:	f84e 0c34 	str.w	r0, [lr, #-52]
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.339493912)) /* c1+c5-c11 */
 800d90a:	4842      	ldr	r0, [pc, #264]	@ (800da14 <jpeg_fdct_12x6+0x280>)
 800d90c:	fb00 220c 	mla	r2, r0, ip, r2
	    + MULTIPLY(tmp5, FIX(0.860918669));        /* c7 */
 800d910:	fb0a 2203 	mla	r2, sl, r3, r2
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.339493912)) /* c1+c5-c11 */
 800d914:	443a      	add	r2, r7
    dataptr[5] = (DCTELEM) DESCALE(tmp12, CONST_BITS-PASS1_BITS);
 800d916:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d91a:	12d2      	asrs	r2, r2, #11
 800d91c:	f84e 2c2c 	str.w	r2, [lr, #-44]
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.725788011)) /* c1+c11-c7 */
 800d920:	f241 723a 	movw	r2, #5946	@ 0x173a
 800d924:	fb02 1106 	mla	r1, r2, r6, r1
	    - MULTIPLY(tmp5, FIX(1.121971054));        /* c5 */
 800d928:	4a3b      	ldr	r2, [pc, #236]	@ (800da18 <jpeg_fdct_12x6+0x284>)
 800d92a:	fb02 1103 	mla	r1, r2, r3, r1
  for (ctr = 0; ctr < 6; ctr++) {
 800d92e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.725788011)) /* c1+c11-c7 */
 800d930:	4421      	add	r1, r4
    dataptr[7] = (DCTELEM) DESCALE(tmp13, CONST_BITS-PASS1_BITS);
 800d932:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d936:	12c9      	asrs	r1, r1, #11
 800d938:	f84e 1c24 	str.w	r1, [lr, #-36]
  for (ctr = 0; ctr < 6; ctr++) {
 800d93c:	4573      	cmp	r3, lr
 800d93e:	f47f af3d 	bne.w	800d7bc <jpeg_fdct_12x6+0x28>
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*5];
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*4];
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*3];

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800d942:	f643 05e4 	movw	r5, #14564	@ 0x38e4
	      CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 800d946:	f244 5ead 	movw	lr, #17837	@ 0x45ad
	      CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 800d94a:	f642 0a3a 	movw	sl, #10298	@ 0x283a
	      CONST_BITS+PASS1_BITS+1);

    /* Odd part */

    tmp10 = MULTIPLY(tmp0 + tmp2, FIX(0.650711829));             /* c5 */
 800d94e:	f241 49d3 	movw	r9, #5331	@ 0x14d3
    tmp11 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*4];
 800d952:	f8db 4080 	ldr.w	r4, [fp, #128]	@ 0x80
	      CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
	      CONST_BITS+PASS1_BITS+1);

    dataptr++;			/* advance pointer to next column */
 800d956:	f10b 0b04 	add.w	fp, fp, #4
    tmp11 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*4];
 800d95a:	f8db 201c 	ldr.w	r2, [fp, #28]
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*3];
 800d95e:	f8db c03c 	ldr.w	ip, [fp, #60]	@ 0x3c
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*5];
 800d962:	f85b 3c04 	ldr.w	r3, [fp, #-4]
    tmp11 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*4];
 800d966:	1916      	adds	r6, r2, r4
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*5];
 800d968:	f8db 809c 	ldr.w	r8, [fp, #156]	@ 0x9c
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*3];
 800d96c:	f8db 205c 	ldr.w	r2, [fp, #92]	@ 0x5c
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*4];
 800d970:	f8db 001c 	ldr.w	r0, [fp, #28]
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*5];
 800d974:	eb03 0108 	add.w	r1, r3, r8
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*3];
 800d978:	eb0c 0702 	add.w	r7, ip, r2
 800d97c:	9200      	str	r2, [sp, #0]
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*4];
 800d97e:	1b04      	subs	r4, r0, r4
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*3];
 800d980:	9800      	ldr	r0, [sp, #0]
    tmp10 = tmp0 + tmp2;
 800d982:	19ca      	adds	r2, r1, r7
    tmp12 = tmp0 - tmp2;
 800d984:	1bc9      	subs	r1, r1, r7
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*3];
 800d986:	ebac 0000 	sub.w	r0, ip, r0
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*5];
 800d98a:	eba3 0308 	sub.w	r3, r3, r8
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800d98e:	eb06 0c02 	add.w	ip, r6, r2
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 800d992:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 800d996:	fb0e f101 	mul.w	r1, lr, r1
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 800d99a:	fb0a f202 	mul.w	r2, sl, r2
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 800d99e:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800d9a2:	fb05 fc0c 	mul.w	ip, r5, ip
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 800d9a6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 800d9aa:	1409      	asrs	r1, r1, #16
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800d9ac:	f50c 4c00 	add.w	ip, ip, #32768	@ 0x8000
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 800d9b0:	1412      	asrs	r2, r2, #16
    dataptr[DCTSIZE*2] = (DCTELEM)
 800d9b2:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 800d9b6:	1919      	adds	r1, r3, r4
    dataptr[DCTSIZE*4] = (DCTELEM)
 800d9b8:	f8cb 207c 	str.w	r2, [fp, #124]	@ 0x7c
    tmp10 = MULTIPLY(tmp0 + tmp2, FIX(0.650711829));             /* c5 */
 800d9bc:	181a      	adds	r2, r3, r0
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 800d9be:	1b1b      	subs	r3, r3, r4
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800d9c0:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    tmp10 = MULTIPLY(tmp0 + tmp2, FIX(0.650711829));             /* c5 */
 800d9c4:	fb09 f202 	mul.w	r2, r9, r2
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 800d9c8:	1a1b      	subs	r3, r3, r0
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 800d9ca:	1b00      	subs	r0, r0, r4
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 800d9cc:	fb05 2101 	mla	r1, r5, r1, r2
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 800d9d0:	436b      	muls	r3, r5
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 800d9d2:	fb05 2200 	mla	r2, r5, r0, r2
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 800d9d6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 800d9da:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
    dataptr[DCTSIZE*0] = (DCTELEM)
 800d9de:	f84b cc04 	str.w	ip, [fp, #-4]
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 800d9e2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 800d9e6:	1409      	asrs	r1, r1, #16
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 800d9e8:	141b      	asrs	r3, r3, #16
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 800d9ea:	1412      	asrs	r2, r2, #16
    dataptr[DCTSIZE*1] = (DCTELEM)
 800d9ec:	f8cb 101c 	str.w	r1, [fp, #28]
    dataptr[DCTSIZE*3] = (DCTELEM)
 800d9f0:	f8cb 305c 	str.w	r3, [fp, #92]	@ 0x5c
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800d9f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    dataptr[DCTSIZE*5] = (DCTELEM)
 800d9f6:	f8cb 209c 	str.w	r2, [fp, #156]	@ 0x9c
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800d9fa:	459b      	cmp	fp, r3
 800d9fc:	d1a9      	bne.n	800d952 <jpeg_fdct_12x6+0x1be>
  }
}
 800d9fe:	b00d      	add	sp, #52	@ 0x34
 800da00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da04:	ffffc4df 	.word	0xffffc4df
 800da08:	fffffa18 	.word	0xfffffa18
 800da0c:	ffffed6a 	.word	0xffffed6a
 800da10:	ffffeeaf 	.word	0xffffeeaf
 800da14:	ffffb523 	.word	0xffffb523
 800da18:	ffffdc19 	.word	0xffffdc19

0800da1c <jpeg_fdct_10x5>:
 * 10-point FDCT in pass 1 (rows), 5-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_10x5 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800da1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da20:	b08b      	sub	sp, #44	@ 0x2c
 800da22:	4683      	mov	fp, r0
 800da24:	460c      	mov	r4, r1
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Zero 3 bottom rows of output coefficient block. */
  MEMZERO(&data[DCTSIZE*5], SIZEOF(DCTELEM) * DCTSIZE * 3);
 800da26:	30a0      	adds	r0, #160	@ 0xa0
{
 800da28:	9208      	str	r2, [sp, #32]
  MEMZERO(&data[DCTSIZE*5], SIZEOF(DCTELEM) * DCTSIZE * 3);
 800da2a:	2100      	movs	r1, #0
 800da2c:	2260      	movs	r2, #96	@ 0x60
 800da2e:	f002 f83f 	bl	800fab0 <memset>
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* 10-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/20). */

  dataptr = data;
  for (ctr = 0; ctr < 5; ctr++) {
 800da32:	f10b 0320 	add.w	r3, fp, #32
 800da36:	461f      	mov	r7, r3
 800da38:	9307      	str	r3, [sp, #28]
 800da3a:	1f23      	subs	r3, r4, #4
 800da3c:	9306      	str	r3, [sp, #24]
 800da3e:	f10b 03c0 	add.w	r3, fp, #192	@ 0xc0
 800da42:	9309      	str	r3, [sp, #36]	@ 0x24
    elemptr = sample_data[ctr] + start_col;
 800da44:	9b06      	ldr	r3, [sp, #24]
  for (ctr = 0; ctr < 5; ctr++) {
 800da46:	3720      	adds	r7, #32

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[9]);
 800da48:	9908      	ldr	r1, [sp, #32]
    elemptr = sample_data[ctr] + start_col;
 800da4a:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800da4e:	9306      	str	r3, [sp, #24]
 800da50:	9b08      	ldr	r3, [sp, #32]
 800da52:	18d3      	adds	r3, r2, r3
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[9]);
 800da54:	5c52      	ldrb	r2, [r2, r1]
 800da56:	f893 8009 	ldrb.w	r8, [r3, #9]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[8]);
 800da5a:	f893 c008 	ldrb.w	ip, [r3, #8]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[9]);
 800da5e:	eb02 0a08 	add.w	sl, r2, r8
 800da62:	9201      	str	r2, [sp, #4]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[8]);
 800da64:	785a      	ldrb	r2, [r3, #1]
    tmp12 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[7]);
 800da66:	79d9      	ldrb	r1, [r3, #7]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[8]);
 800da68:	9202      	str	r2, [sp, #8]
 800da6a:	4462      	add	r2, ip
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[6]);
 800da6c:	78de      	ldrb	r6, [r3, #3]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[8]);
 800da6e:	9205      	str	r2, [sp, #20]
    tmp12 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[7]);
 800da70:	789a      	ldrb	r2, [r3, #2]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[5]);
 800da72:	791d      	ldrb	r5, [r3, #4]
    tmp12 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[7]);
 800da74:	1854      	adds	r4, r2, r1
 800da76:	9103      	str	r1, [sp, #12]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[6]);
 800da78:	7999      	ldrb	r1, [r3, #6]
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[5]);
 800da7a:	795b      	ldrb	r3, [r3, #5]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[6]);
 800da7c:	eb06 0e01 	add.w	lr, r6, r1
    tmp14 = tmp1 - tmp3;

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[9]);
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[8]);
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[7]);
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[6]);
 800da80:	1a71      	subs	r1, r6, r1
    tmp4 = GETJSAMPLE(elemptr[4]) + GETJSAMPLE(elemptr[5]);
 800da82:	eb05 0903 	add.w	r9, r5, r3
 800da86:	9304      	str	r3, [sp, #16]
    tmp11 = tmp1 + tmp3;
 800da88:	9b05      	ldr	r3, [sp, #20]
    tmp10 = tmp0 + tmp4;
    tmp11 = tmp1 - tmp3;
    dataptr[5] = (DCTELEM) ((tmp10 - tmp11 - tmp2) << PASS1_BITS);
    tmp2 <<= CONST_BITS;
    dataptr[1] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 800da8a:	f642 46b3 	movw	r6, #11443	@ 0x2cb3
    tmp10 = tmp0 + tmp4;
 800da8e:	eb0a 0009 	add.w	r0, sl, r9
    tmp13 = tmp0 - tmp4;
 800da92:	ebaa 0a09 	sub.w	sl, sl, r9
    tmp11 = tmp1 + tmp3;
 800da96:	eb03 090e 	add.w	r9, r3, lr
    tmp14 = tmp1 - tmp3;
 800da9a:	eba3 0e0e 	sub.w	lr, r3, lr
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[9]);
 800da9e:	9b01      	ldr	r3, [sp, #4]
 800daa0:	eba3 0808 	sub.w	r8, r3, r8
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[8]);
 800daa4:	9b02      	ldr	r3, [sp, #8]
 800daa6:	eba3 0c0c 	sub.w	ip, r3, ip
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[7]);
 800daaa:	9b03      	ldr	r3, [sp, #12]
 800daac:	1ad2      	subs	r2, r2, r3
    tmp4 = GETJSAMPLE(elemptr[4]) - GETJSAMPLE(elemptr[5]);
 800daae:	9b04      	ldr	r3, [sp, #16]
 800dab0:	1aeb      	subs	r3, r5, r3
      ((tmp10 + tmp11 + tmp12 - 10 * CENTERJSAMPLE) << PASS1_BITS);
 800dab2:	eb00 0509 	add.w	r5, r0, r9
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
 800dab6:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
      ((tmp10 + tmp11 + tmp12 - 10 * CENTERJSAMPLE) << PASS1_BITS);
 800daba:	4425      	add	r5, r4
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
 800dabc:	eba9 0944 	sub.w	r9, r9, r4, lsl #1
 800dac0:	4c5c      	ldr	r4, [pc, #368]	@ (800dc34 <jpeg_fdct_10x5+0x218>)
      ((tmp10 + tmp11 + tmp12 - 10 * CENTERJSAMPLE) << PASS1_BITS);
 800dac2:	f5a5 65a0 	sub.w	r5, r5, #1280	@ 0x500
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
 800dac6:	fb04 f909 	mul.w	r9, r4, r9
 800daca:	f242 449d 	movw	r4, #9373	@ 0x249d
    dataptr[0] = (DCTELEM)
 800dace:	00ad      	lsls	r5, r5, #2
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
 800dad0:	fb04 9000 	mla	r0, r4, r0, r9
    tmp10 = MULTIPLY(tmp13 + tmp14, FIX(0.831253876));    /* c6 */
 800dad4:	f641 249a 	movw	r4, #6810	@ 0x1a9a
    dataptr[0] = (DCTELEM)
 800dad8:	f847 5c40 	str.w	r5, [r7, #-64]
    tmp10 = tmp0 + tmp4;
 800dadc:	eb08 0503 	add.w	r5, r8, r3
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.144122806)) - /* c4 */
 800dae0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800dae4:	12c0      	asrs	r0, r0, #11
    dataptr[4] = (DCTELEM)
 800dae6:	f847 0c30 	str.w	r0, [r7, #-48]
    tmp10 = MULTIPLY(tmp13 + tmp14, FIX(0.831253876));    /* c6 */
 800daea:	eb0a 000e 	add.w	r0, sl, lr
 800daee:	4360      	muls	r0, r4
      DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.513743148)),  /* c2-c6 */
 800daf0:	f241 0471 	movw	r4, #4209	@ 0x1071
 800daf4:	fb04 040a 	mla	r4, r4, sl, r0
 800daf8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800dafc:	12e4      	asrs	r4, r4, #11
    dataptr[2] = (DCTELEM)
 800dafe:	f847 4c38 	str.w	r4, [r7, #-56]
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.176250899)),  /* c2+c6 */
 800db02:	4c4d      	ldr	r4, [pc, #308]	@ (800dc38 <jpeg_fdct_10x5+0x21c>)
 800db04:	fb04 000e 	mla	r0, r4, lr, r0
    tmp11 = tmp1 - tmp3;
 800db08:	ebac 0401 	sub.w	r4, ip, r1
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.176250899)),  /* c2+c6 */
 800db0c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800db10:	12c0      	asrs	r0, r0, #11
    dataptr[6] = (DCTELEM)
 800db12:	f847 0c28 	str.w	r0, [r7, #-40]
    dataptr[5] = (DCTELEM) ((tmp10 - tmp11 - tmp2) << PASS1_BITS);
 800db16:	1b28      	subs	r0, r5, r4
	      MULTIPLY(tmp3, FIX(0.642039522)) +          /* c7 */
	      MULTIPLY(tmp4, FIX(0.221231742)),           /* c9 */
	      CONST_BITS-PASS1_BITS);
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(0.951056516)) -     /* (c3+c7)/2 */
	    MULTIPLY(tmp1 + tmp3, FIX(0.587785252));      /* (c1-c9)/2 */
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.309016994)) +   /* (c3-c7)/2 */
 800db18:	4425      	add	r5, r4
	    (tmp11 << (CONST_BITS - 1)) - tmp2;
 800db1a:	0324      	lsls	r4, r4, #12
    dataptr[5] = (DCTELEM) ((tmp10 - tmp11 - tmp2) << PASS1_BITS);
 800db1c:	1a80      	subs	r0, r0, r2
 800db1e:	0080      	lsls	r0, r0, #2
 800db20:	f847 0c2c 	str.w	r0, [r7, #-44]
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 800db24:	f642 0053 	movw	r0, #10323	@ 0x2853
 800db28:	fb00 f00c 	mul.w	r0, r0, ip
	    MULTIPLY(tmp1 + tmp3, FIX(0.587785252));      /* (c1-c9)/2 */
 800db2c:	448c      	add	ip, r1
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 800db2e:	fb06 0008 	mla	r0, r6, r8, r0
 800db32:	f241 468c 	movw	r6, #5260	@ 0x148c
 800db36:	eb00 3042 	add.w	r0, r0, r2, lsl #13
 800db3a:	fb06 0001 	mla	r0, r6, r1, r0
	    MULTIPLY(tmp1 + tmp3, FIX(0.587785252));      /* (c1-c9)/2 */
 800db3e:	493f      	ldr	r1, [pc, #252]	@ (800dc3c <jpeg_fdct_10x5+0x220>)
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 800db40:	f240 7614 	movw	r6, #1812	@ 0x714
	    MULTIPLY(tmp1 + tmp3, FIX(0.587785252));      /* (c1-c9)/2 */
 800db44:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(0.951056516)) -     /* (c3+c7)/2 */
 800db48:	f641 616f 	movw	r1, #7791	@ 0x1e6f
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 800db4c:	fb06 0003 	mla	r0, r6, r3, r0
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(0.951056516)) -     /* (c3+c7)/2 */
 800db50:	eba8 0303 	sub.w	r3, r8, r3
 800db54:	fb01 cc03 	mla	ip, r1, r3, ip
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.309016994)) +   /* (c3-c7)/2 */
 800db58:	f640 13e3 	movw	r3, #2531	@ 0x9e3
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 800db5c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.309016994)) +   /* (c3-c7)/2 */
 800db60:	fb03 4405 	mla	r4, r3, r5, r4
      DESCALE(MULTIPLY(tmp0, FIX(1.396802247)) +          /* c1 */
 800db64:	12c0      	asrs	r0, r0, #11
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.309016994)) +   /* (c3-c7)/2 */
 800db66:	eba4 3442 	sub.w	r4, r4, r2, lsl #13
    dataptr[1] = (DCTELEM)
 800db6a:	f847 0c3c 	str.w	r0, [r7, #-60]
    dataptr[3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS-PASS1_BITS);
 800db6e:	eb0c 0304 	add.w	r3, ip, r4
    dataptr[7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS-PASS1_BITS);
 800db72:	ebac 0c04 	sub.w	ip, ip, r4
    dataptr[3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS-PASS1_BITS);
 800db76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800db7a:	12db      	asrs	r3, r3, #11
 800db7c:	f847 3c34 	str.w	r3, [r7, #-52]
    dataptr[7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS-PASS1_BITS);
 800db80:	f50c 6380 	add.w	r3, ip, #1024	@ 0x400
 800db84:	12db      	asrs	r3, r3, #11
 800db86:	f847 3c24 	str.w	r3, [r7, #-36]
  for (ctr = 0; ctr < 5; ctr++) {
 800db8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db8c:	42bb      	cmp	r3, r7
 800db8e:	f47f af59 	bne.w	800da44 <jpeg_fdct_10x5+0x28>

    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*4];
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*3];

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp2, FIX(1.28)),        /* 32/25 */
 800db92:	f642 06f6 	movw	r6, #10486	@ 0x28f6
	      CONST_BITS+PASS1_BITS);
    tmp11 = MULTIPLY(tmp11, FIX(1.011928851));          /* (c2+c4)/2 */
 800db96:	f242 0a62 	movw	sl, #8290	@ 0x2062
    tmp10 -= tmp2 << 2;
    tmp10 = MULTIPLY(tmp10, FIX(0.452548340));          /* (c2-c4)/2 */
 800db9a:	f640 697b 	movw	r9, #3707	@ 0xe7b
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS+PASS1_BITS);

    /* Odd part */

    tmp10 = MULTIPLY(tmp0 + tmp1, FIX(1.064004961));    /* c3 */
 800db9e:	f242 280c 	movw	r8, #8716	@ 0x220c

    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.657591230)), /* c1-c3 */
 800dba2:	f241 5e0b 	movw	lr, #5387	@ 0x150b
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.785601151)), /* c1+c3 */
 800dba6:	f8df c098 	ldr.w	ip, [pc, #152]	@ 800dc40 <jpeg_fdct_10x5+0x224>
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*3];
 800dbaa:	f8db 5020 	ldr.w	r5, [fp, #32]
	      CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 800dbae:	f10b 0b04 	add.w	fp, fp, #4
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*4];
 800dbb2:	f8db 207c 	ldr.w	r2, [fp, #124]	@ 0x7c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*3];
 800dbb6:	f8db 005c 	ldr.w	r0, [fp, #92]	@ 0x5c
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*4];
 800dbba:	f85b 3c04 	ldr.w	r3, [fp, #-4]
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*3];
 800dbbe:	182f      	adds	r7, r5, r0
    tmp2 = dataptr[DCTSIZE*2];
 800dbc0:	f8db 403c 	ldr.w	r4, [fp, #60]	@ 0x3c
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*4];
 800dbc4:	4413      	add	r3, r2
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*3];
 800dbc6:	1a28      	subs	r0, r5, r0
    tmp10 = tmp0 + tmp1;
 800dbc8:	19d9      	adds	r1, r3, r7
    tmp11 = tmp0 - tmp1;
 800dbca:	1bdb      	subs	r3, r3, r7
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*4];
 800dbcc:	f85b 7c04 	ldr.w	r7, [fp, #-4]
      DESCALE(MULTIPLY(tmp10 + tmp2, FIX(1.28)),        /* 32/25 */
 800dbd0:	1865      	adds	r5, r4, r1
    tmp10 -= tmp2 << 2;
 800dbd2:	eba1 0184 	sub.w	r1, r1, r4, lsl #2
    tmp11 = MULTIPLY(tmp11, FIX(1.011928851));          /* (c2+c4)/2 */
 800dbd6:	fb0a f303 	mul.w	r3, sl, r3
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*4];
 800dbda:	1aba      	subs	r2, r7, r2
    tmp10 = MULTIPLY(tmp10, FIX(0.452548340));          /* (c2-c4)/2 */
 800dbdc:	fb09 f101 	mul.w	r1, r9, r1
      DESCALE(MULTIPLY(tmp10 + tmp2, FIX(1.28)),        /* 32/25 */
 800dbe0:	4375      	muls	r5, r6
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS+PASS1_BITS);
 800dbe2:	185c      	adds	r4, r3, r1
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS+PASS1_BITS);
 800dbe4:	1a5b      	subs	r3, r3, r1
      DESCALE(MULTIPLY(tmp10 + tmp2, FIX(1.28)),        /* 32/25 */
 800dbe6:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS+PASS1_BITS);
 800dbea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS+PASS1_BITS);
 800dbee:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp10 + tmp2, FIX(1.28)),        /* 32/25 */
 800dbf2:	13ed      	asrs	r5, r5, #15
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS+PASS1_BITS);
 800dbf4:	13db      	asrs	r3, r3, #15
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS+PASS1_BITS);
 800dbf6:	13e4      	asrs	r4, r4, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 800dbf8:	f84b 5c04 	str.w	r5, [fp, #-4]
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS+PASS1_BITS);
 800dbfc:	f8cb 307c 	str.w	r3, [fp, #124]	@ 0x7c
    tmp10 = MULTIPLY(tmp0 + tmp1, FIX(1.064004961));    /* c3 */
 800dc00:	1813      	adds	r3, r2, r0
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS+PASS1_BITS);
 800dc02:	f8cb 403c 	str.w	r4, [fp, #60]	@ 0x3c
    tmp10 = MULTIPLY(tmp0 + tmp1, FIX(1.064004961));    /* c3 */
 800dc06:	fb08 f303 	mul.w	r3, r8, r3
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.657591230)), /* c1-c3 */
 800dc0a:	fb0e 3202 	mla	r2, lr, r2, r3
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.785601151)), /* c1+c3 */
 800dc0e:	fb0c 3300 	mla	r3, ip, r0, r3
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.657591230)), /* c1-c3 */
 800dc12:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.785601151)), /* c1+c3 */
 800dc16:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.657591230)), /* c1-c3 */
 800dc1a:	13d2      	asrs	r2, r2, #15
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.785601151)), /* c1+c3 */
 800dc1c:	13db      	asrs	r3, r3, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 800dc1e:	f8cb 201c 	str.w	r2, [fp, #28]
    dataptr[DCTSIZE*3] = (DCTELEM)
 800dc22:	f8cb 305c 	str.w	r3, [fp, #92]	@ 0x5c
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800dc26:	9b07      	ldr	r3, [sp, #28]
 800dc28:	459b      	cmp	fp, r3
 800dc2a:	d1be      	bne.n	800dbaa <jpeg_fdct_10x5+0x18e>
  }
}
 800dc2c:	b00b      	add	sp, #44	@ 0x2c
 800dc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc32:	bf00      	nop
 800dc34:	fffff204 	.word	0xfffff204
 800dc38:	ffffba5c 	.word	0xffffba5c
 800dc3c:	ffffed31 	.word	0xffffed31
 800dc40:	ffffa6dc 	.word	0xffffa6dc

0800dc44 <jpeg_fdct_8x4>:
 * 8-point FDCT in pass 1 (rows), 4-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_8x4 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800dc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc48:	b087      	sub	sp, #28
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	460d      	mov	r5, r1
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Zero 4 bottom rows of output coefficient block. */
  MEMZERO(&data[DCTSIZE*4], SIZEOF(DCTELEM) * DCTSIZE * 4);
 800dc4e:	2100      	movs	r1, #0
{
 800dc50:	9204      	str	r2, [sp, #16]
  MEMZERO(&data[DCTSIZE*4], SIZEOF(DCTELEM) * DCTSIZE * 4);
 800dc52:	2280      	movs	r2, #128	@ 0x80
 800dc54:	4410      	add	r0, r2
 800dc56:	f001 ff2b 	bl	800fab0 <memset>
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* We must also scale the output by 8/4 = 2, which we add here. */

  dataptr = data;
  for (ctr = 0; ctr < 4; ctr++) {
 800dc5a:	f104 0320 	add.w	r3, r4, #32
 800dc5e:	4698      	mov	r8, r3
 800dc60:	9303      	str	r3, [sp, #12]
 800dc62:	1f2b      	subs	r3, r5, #4
 800dc64:	9302      	str	r3, [sp, #8]
 800dc66:	f104 03a0 	add.w	r3, r4, #160	@ 0xa0
 800dc6a:	9305      	str	r3, [sp, #20]
    elemptr = sample_data[ctr] + start_col;
 800dc6c:	9a02      	ldr	r2, [sp, #8]
  for (ctr = 0; ctr < 4; ctr++) {
 800dc6e:	f108 0820 	add.w	r8, r8, #32
    elemptr = sample_data[ctr] + start_col;
 800dc72:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800dc76:	9202      	str	r2, [sp, #8]
 800dc78:	9a04      	ldr	r2, [sp, #16]
 800dc7a:	1899      	adds	r1, r3, r2

    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */

    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 800dc7c:	5c9a      	ldrb	r2, [r3, r2]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 800dc7e:	7988      	ldrb	r0, [r1, #6]
 800dc80:	784b      	ldrb	r3, [r1, #1]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 800dc82:	f891 e002 	ldrb.w	lr, [r1, #2]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 800dc86:	f891 9007 	ldrb.w	r9, [r1, #7]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 800dc8a:	181f      	adds	r7, r3, r0
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 800dc8c:	794d      	ldrb	r5, [r1, #5]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 800dc8e:	f891 c003 	ldrb.w	ip, [r1, #3]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 800dc92:	eb02 0b09 	add.w	fp, r2, r9
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 800dc96:	9001      	str	r0, [sp, #4]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 800dc98:	eb0e 0a05 	add.w	sl, lr, r5
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 800dc9c:	7908      	ldrb	r0, [r1, #4]
    tmp10 = tmp0 + tmp3;
    tmp12 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp13 = tmp1 - tmp2;

    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
 800dc9e:	eba2 0909 	sub.w	r9, r2, r9
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
 800dca2:	9a01      	ldr	r2, [sp, #4]
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
 800dca4:	ebae 0505 	sub.w	r5, lr, r5
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 800dca8:	eb0c 0100 	add.w	r1, ip, r0
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
 800dcac:	ebac 0000 	sub.w	r0, ip, r0
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
 800dcb0:	1a9b      	subs	r3, r3, r2
    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << (PASS1_BITS+1));
    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << (PASS1_BITS+1));

    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800dcb2:	f241 1251 	movw	r2, #4433	@ 0x1151
    tmp10 = tmp0 + tmp3;
 800dcb6:	eb0b 0601 	add.w	r6, fp, r1
    tmp12 = tmp0 - tmp3;
 800dcba:	ebab 0101 	sub.w	r1, fp, r1
    tmp11 = tmp1 + tmp2;
 800dcbe:	eb07 0b0a 	add.w	fp, r7, sl
    tmp13 = tmp1 - tmp2;
 800dcc2:	eba7 070a 	sub.w	r7, r7, sl
     */

    tmp10 = tmp0 + tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp1 + tmp3;
 800dcc6:	eb03 0e00 	add.w	lr, r3, r0
      ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << (PASS1_BITS+1));
 800dcca:	eb06 0c0b 	add.w	ip, r6, fp
    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << (PASS1_BITS+1));
 800dcce:	eba6 060b 	sub.w	r6, r6, fp
 800dcd2:	00f6      	lsls	r6, r6, #3
      ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << (PASS1_BITS+1));
 800dcd4:	f5ac 6c80 	sub.w	ip, ip, #1024	@ 0x400
    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << (PASS1_BITS+1));
 800dcd8:	f848 6c30 	str.w	r6, [r8, #-48]
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800dcdc:	19ce      	adds	r6, r1, r7
    dataptr[0] = (DCTELEM)
 800dcde:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800dce2:	4356      	muls	r6, r2
    dataptr[2] = (DCTELEM) RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865),
 800dce4:	f641 027e 	movw	r2, #6270	@ 0x187e
    dataptr[0] = (DCTELEM)
 800dce8:	f848 cc40 	str.w	ip, [r8, #-64]
    tmp12 = tmp0 + tmp2;
 800dcec:	eb09 0c05 	add.w	ip, r9, r5
    z1 += ONE << (CONST_BITS-PASS1_BITS-2);
 800dcf0:	f506 7600 	add.w	r6, r6, #512	@ 0x200
    dataptr[2] = (DCTELEM) RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865),
 800dcf4:	fb02 6101 	mla	r1, r2, r1, r6
    dataptr[6] = (DCTELEM) RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 800dcf8:	4a37      	ldr	r2, [pc, #220]	@ (800ddd8 <jpeg_fdct_8x4+0x194>)
    dataptr[2] = (DCTELEM) RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865),
 800dcfa:	1289      	asrs	r1, r1, #10
    dataptr[6] = (DCTELEM) RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 800dcfc:	fb02 6607 	mla	r6, r2, r7, r6
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800dd00:	eb0c 070e 	add.w	r7, ip, lr
 800dd04:	f242 52a1 	movw	r2, #9633	@ 0x25a1
    dataptr[2] = (DCTELEM) RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865),
 800dd08:	f848 1c38 	str.w	r1, [r8, #-56]
    dataptr[6] = (DCTELEM) RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 800dd0c:	12b6      	asrs	r6, r6, #10
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800dd0e:	4357      	muls	r7, r2
    tmp10 = tmp0 + tmp3;
 800dd10:	eb09 0100 	add.w	r1, r9, r0

    tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
    tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
    tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
    tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 800dd14:	4a31      	ldr	r2, [pc, #196]	@ (800dddc <jpeg_fdct_8x4+0x198>)
    dataptr[6] = (DCTELEM) RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 800dd16:	f848 6c28 	str.w	r6, [r8, #-40]
    tmp11 = tmp1 + tmp2;
 800dd1a:	195e      	adds	r6, r3, r5
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 800dd1c:	4351      	muls	r1, r2
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 800dd1e:	4a30      	ldr	r2, [pc, #192]	@ (800dde0 <jpeg_fdct_8x4+0x19c>)
    z1 += ONE << (CONST_BITS-PASS1_BITS-2);
 800dd20:	f507 7700 	add.w	r7, r7, #512	@ 0x200
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 800dd24:	4356      	muls	r6, r2
    tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
    tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */

    tmp12 += z1;
 800dd26:	4a2f      	ldr	r2, [pc, #188]	@ (800dde4 <jpeg_fdct_8x4+0x1a0>)
 800dd28:	fb02 7c0c 	mla	ip, r2, ip, r7
    tmp13 += z1;
 800dd2c:	4a2e      	ldr	r2, [pc, #184]	@ (800dde8 <jpeg_fdct_8x4+0x1a4>)
 800dd2e:	fb02 770e 	mla	r7, r2, lr, r7

    dataptr[1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS-1);
 800dd32:	f243 020b 	movw	r2, #12299	@ 0x300b
 800dd36:	fb02 1209 	mla	r2, r2, r9, r1
 800dd3a:	4462      	add	r2, ip
 800dd3c:	1292      	asrs	r2, r2, #10
    dataptr[1] = (DCTELEM)
 800dd3e:	f848 2c3c 	str.w	r2, [r8, #-60]
    dataptr[3] = (DCTELEM)
      RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS-1);
 800dd42:	f246 2254 	movw	r2, #25172	@ 0x6254
 800dd46:	fb02 6303 	mla	r3, r2, r3, r6
 800dd4a:	443b      	add	r3, r7
 800dd4c:	129b      	asrs	r3, r3, #10
    dataptr[3] = (DCTELEM)
 800dd4e:	f848 3c34 	str.w	r3, [r8, #-52]
    dataptr[5] = (DCTELEM)
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS-1);
 800dd52:	f244 13b3 	movw	r3, #16819	@ 0x41b3
 800dd56:	fb03 6605 	mla	r6, r3, r5, r6
    dataptr[7] = (DCTELEM)
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS-1);
 800dd5a:	f640 138e 	movw	r3, #2446	@ 0x98e
 800dd5e:	fb03 1100 	mla	r1, r3, r0, r1
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS-1);
 800dd62:	4466      	add	r6, ip
  for (ctr = 0; ctr < 4; ctr++) {
 800dd64:	9b05      	ldr	r3, [sp, #20]
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS-1);
 800dd66:	4439      	add	r1, r7
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS-1);
 800dd68:	12b6      	asrs	r6, r6, #10
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS-1);
 800dd6a:	1289      	asrs	r1, r1, #10
    dataptr[5] = (DCTELEM)
 800dd6c:	f848 6c2c 	str.w	r6, [r8, #-44]
    dataptr[7] = (DCTELEM)
 800dd70:	f848 1c24 	str.w	r1, [r8, #-36]
  for (ctr = 0; ctr < 4; ctr++) {
 800dd74:	4543      	cmp	r3, r8
 800dd76:	f47f af79 	bne.w	800dc6c <jpeg_fdct_8x4+0x28>
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
    dataptr[DCTSIZE*2] = (DCTELEM) RIGHT_SHIFT(tmp0 - tmp1, PASS1_BITS);

    /* Odd part */

    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);   /* c6 */
 800dd7a:	f241 1551 	movw	r5, #4433	@ 0x1151
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS+PASS1_BITS-1);

    dataptr[DCTSIZE*1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800dd7e:	f641 007e 	movw	r0, #6270	@ 0x187e
		  CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM)
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800dd82:	4915      	ldr	r1, [pc, #84]	@ (800ddd8 <jpeg_fdct_8x4+0x194>)
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3] + (ONE << (PASS1_BITS-1));
 800dd84:	f8d4 e000 	ldr.w	lr, [r4]
		  CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 800dd88:	3404      	adds	r4, #4
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3] + (ONE << (PASS1_BITS-1));
 800dd8a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*2];
 800dd8c:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
 800dd8e:	69e6      	ldr	r6, [r4, #28]
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3] + (ONE << (PASS1_BITS-1));
 800dd90:	eb0e 0302 	add.w	r3, lr, r2
    tmp10 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*3];
 800dd94:	ebae 0202 	sub.w	r2, lr, r2
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*2];
 800dd98:	eb06 0c07 	add.w	ip, r6, r7
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3] + (ONE << (PASS1_BITS-1));
 800dd9c:	3302      	adds	r3, #2
    tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*2];
 800dd9e:	1bf6      	subs	r6, r6, r7
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
 800dda0:	eb03 070c 	add.w	r7, r3, ip
    dataptr[DCTSIZE*2] = (DCTELEM) RIGHT_SHIFT(tmp0 - tmp1, PASS1_BITS);
 800dda4:	eba3 030c 	sub.w	r3, r3, ip
 800dda8:	109b      	asrs	r3, r3, #2
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
 800ddaa:	10bf      	asrs	r7, r7, #2
    dataptr[DCTSIZE*2] = (DCTELEM) RIGHT_SHIFT(tmp0 - tmp1, PASS1_BITS);
 800ddac:	63e3      	str	r3, [r4, #60]	@ 0x3c
    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);   /* c6 */
 800ddae:	1993      	adds	r3, r2, r6
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
 800ddb0:	f844 7c04 	str.w	r7, [r4, #-4]
    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);   /* c6 */
 800ddb4:	436b      	muls	r3, r5
    tmp0 += ONE << (CONST_BITS+PASS1_BITS-1);
 800ddb6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800ddba:	fb00 3202 	mla	r2, r0, r2, r3
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800ddbe:	fb01 3306 	mla	r3, r1, r6, r3
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800ddc2:	13d2      	asrs	r2, r2, #15
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800ddc4:	13db      	asrs	r3, r3, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 800ddc6:	61e2      	str	r2, [r4, #28]
    dataptr[DCTSIZE*3] = (DCTELEM)
 800ddc8:	65e3      	str	r3, [r4, #92]	@ 0x5c
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800ddca:	9b03      	ldr	r3, [sp, #12]
 800ddcc:	429c      	cmp	r4, r3
 800ddce:	d1d9      	bne.n	800dd84 <jpeg_fdct_8x4+0x140>
  }
}
 800ddd0:	b007      	add	sp, #28
 800ddd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd6:	bf00      	nop
 800ddd8:	ffffc4df 	.word	0xffffc4df
 800dddc:	ffffe333 	.word	0xffffe333
 800dde0:	ffffadfd 	.word	0xffffadfd
 800dde4:	fffff384 	.word	0xfffff384
 800dde8:	ffffc13b 	.word	0xffffc13b

0800ddec <jpeg_fdct_6x3>:
 * 6-point FDCT in pass 1 (rows), 3-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_6x3 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800ddec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf0:	460d      	mov	r5, r1
 800ddf2:	4690      	mov	r8, r2
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 800ddfa:	4604      	mov	r4, r0
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800ddfc:	f001 fe58 	bl	800fab0 <memset>
  /* We scale the results further by 2 as part of output adaption */
  /* scaling for different DCT size. */
  /* 6-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/12). */

  dataptr = data;
  for (ctr = 0; ctr < 3; ctr++) {
 800de00:	1f2b      	subs	r3, r5, #4
 800de02:	f104 0720 	add.w	r7, r4, #32
 800de06:	9300      	str	r3, [sp, #0]
 800de08:	f104 0380 	add.w	r3, r4, #128	@ 0x80
 800de0c:	9301      	str	r3, [sp, #4]
    elemptr = sample_data[ctr] + start_col;
 800de0e:	9b00      	ldr	r3, [sp, #0]

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp11 - 6 * CENTERJSAMPLE) << (PASS1_BITS+1));
    dataptr[2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 800de10:	f242 7131 	movw	r1, #10033	@ 0x2731
  for (ctr = 0; ctr < 3; ctr++) {
 800de14:	3720      	adds	r7, #32
    elemptr = sample_data[ctr] + start_col;
 800de16:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	eb02 0308 	add.w	r3, r2, r8
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[5]);
 800de20:	f812 0008 	ldrb.w	r0, [r2, r8]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[3]);
 800de24:	f893 9002 	ldrb.w	r9, [r3, #2]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[5]);
 800de28:	f893 b005 	ldrb.w	fp, [r3, #5]
    tmp11 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[4]);
 800de2c:	f893 a001 	ldrb.w	sl, [r3, #1]
 800de30:	f893 c004 	ldrb.w	ip, [r3, #4]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[5]);
 800de34:	eb00 060b 	add.w	r6, r0, fp
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[3]);
 800de38:	78db      	ldrb	r3, [r3, #3]
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[5]);
 800de3a:	eba0 000b 	sub.w	r0, r0, fp
    tmp11 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[4]);
 800de3e:	eb0a 020c 	add.w	r2, sl, ip
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[4]);
 800de42:	ebaa 0c0c 	sub.w	ip, sl, ip
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[3]);
 800de46:	eb09 0e03 	add.w	lr, r9, r3
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[3]);
 800de4a:	eba9 0303 	sub.w	r3, r9, r3
    tmp10 = tmp0 + tmp2;
 800de4e:	eb06 050e 	add.w	r5, r6, lr
    tmp12 = tmp0 - tmp2;
 800de52:	eba6 060e 	sub.w	r6, r6, lr
      ((tmp10 + tmp11 - 6 * CENTERJSAMPLE) << (PASS1_BITS+1));
 800de56:	eb02 0905 	add.w	r9, r2, r5
	      CONST_BITS-PASS1_BITS-1);
    dataptr[4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 800de5a:	eba5 0542 	sub.w	r5, r5, r2, lsl #1
 800de5e:	f241 62a1 	movw	r2, #5793	@ 0x16a1
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 800de62:	434e      	muls	r6, r1
	      CONST_BITS-PASS1_BITS-1);

    /* Odd part */

    tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
 800de64:	f640 31b6 	movw	r1, #2998	@ 0xbb6
      ((tmp10 + tmp11 - 6 * CENTERJSAMPLE) << (PASS1_BITS+1));
 800de68:	f5a9 7940 	sub.w	r9, r9, #768	@ 0x300
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 800de6c:	4355      	muls	r5, r2
    tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
 800de6e:	18c2      	adds	r2, r0, r3
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 800de70:	f506 7600 	add.w	r6, r6, #512	@ 0x200
    dataptr[0] = (DCTELEM)
 800de74:	ea4f 09c9 	mov.w	r9, r9, lsl #3
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 800de78:	f505 7500 	add.w	r5, r5, #512	@ 0x200
    tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
 800de7c:	434a      	muls	r2, r1
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 800de7e:	12b6      	asrs	r6, r6, #10
    dataptr[0] = (DCTELEM)
 800de80:	f847 9c40 	str.w	r9, [r7, #-64]
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 800de84:	12ad      	asrs	r5, r5, #10
    tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
 800de86:	f502 7200 	add.w	r2, r2, #512	@ 0x200
    dataptr[2] = (DCTELEM)
 800de8a:	f847 6c38 	str.w	r6, [r7, #-56]
    dataptr[4] = (DCTELEM)
 800de8e:	f847 5c30 	str.w	r5, [r7, #-48]
		    CONST_BITS-PASS1_BITS-1);

    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << (PASS1_BITS+1)));
 800de92:	eb00 050c 	add.w	r5, r0, ip
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << (PASS1_BITS+1));
 800de96:	eba0 000c 	sub.w	r0, r0, ip
    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << (PASS1_BITS+1)));
 800de9a:	00ed      	lsls	r5, r5, #3
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << (PASS1_BITS+1));
 800de9c:	1ac0      	subs	r0, r0, r3
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << (PASS1_BITS+1)));
 800de9e:	eba3 030c 	sub.w	r3, r3, ip
    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << (PASS1_BITS+1)));
 800dea2:	eb05 25a2 	add.w	r5, r5, r2, asr #10
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << (PASS1_BITS+1)));
 800dea6:	00db      	lsls	r3, r3, #3
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << (PASS1_BITS+1));
 800dea8:	00c0      	lsls	r0, r0, #3
    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << (PASS1_BITS+1)));
 800deaa:	f847 5c3c 	str.w	r5, [r7, #-60]
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << (PASS1_BITS+1)));
 800deae:	eb03 23a2 	add.w	r3, r3, r2, asr #10
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << (PASS1_BITS+1));
 800deb2:	f847 0c34 	str.w	r0, [r7, #-52]
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << (PASS1_BITS+1)));
 800deb6:	f847 3c2c 	str.w	r3, [r7, #-44]
  for (ctr = 0; ctr < 3; ctr++) {
 800deba:	9b01      	ldr	r3, [sp, #4]
 800debc:	42bb      	cmp	r3, r7
 800debe:	d1a6      	bne.n	800de0e <jpeg_fdct_6x3+0x22>
 800dec0:	f104 0118 	add.w	r1, r4, #24
    tmp1 = dataptr[DCTSIZE*1];

    tmp2 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*2];

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),        /* 16/9 */
 800dec4:	f643 06e4 	movw	r6, #14564	@ 0x38e4
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
 800dec8:	f642 053a 	movw	r5, #10298	@ 0x283a
	      CONST_BITS+PASS1_BITS);

    /* Odd part */

    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(MULTIPLY(tmp2, FIX(2.177324216)),               /* c1 */
 800decc:	f244 50ad 	movw	r0, #17837	@ 0x45ad
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*2];
 800ded0:	6823      	ldr	r3, [r4, #0]
	      CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 800ded2:	3404      	adds	r4, #4
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*2];
 800ded4:	f8d4 c03c 	ldr.w	ip, [r4, #60]	@ 0x3c
    tmp1 = dataptr[DCTSIZE*1];
 800ded8:	f8d4 e01c 	ldr.w	lr, [r4, #28]
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*2];
 800dedc:	eb03 020c 	add.w	r2, r3, ip
    tmp2 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*2];
 800dee0:	eba3 030c 	sub.w	r3, r3, ip
      DESCALE(MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),        /* 16/9 */
 800dee4:	eb02 070e 	add.w	r7, r2, lr
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
 800dee8:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
      DESCALE(MULTIPLY(tmp2, FIX(2.177324216)),               /* c1 */
 800deec:	4343      	muls	r3, r0
      DESCALE(MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),        /* 16/9 */
 800deee:	4377      	muls	r7, r6
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
 800def0:	436a      	muls	r2, r5
      DESCALE(MULTIPLY(tmp2, FIX(2.177324216)),               /* c1 */
 800def2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),        /* 16/9 */
 800def6:	f507 4780 	add.w	r7, r7, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
 800defa:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp2, FIX(2.177324216)),               /* c1 */
 800defe:	13db      	asrs	r3, r3, #15
      DESCALE(MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),        /* 16/9 */
 800df00:	13ff      	asrs	r7, r7, #15
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(1.257078722)), /* c2 */
 800df02:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 800df04:	61e3      	str	r3, [r4, #28]
    dataptr[DCTSIZE*0] = (DCTELEM)
 800df06:	f844 7c04 	str.w	r7, [r4, #-4]
    dataptr[DCTSIZE*2] = (DCTELEM)
 800df0a:	63e2      	str	r2, [r4, #60]	@ 0x3c
  for (ctr = 0; ctr < 6; ctr++) {
 800df0c:	428c      	cmp	r4, r1
 800df0e:	d1df      	bne.n	800ded0 <jpeg_fdct_6x3+0xe4>
  }
}
 800df10:	b003      	add	sp, #12
 800df12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800df18 <jpeg_fdct_4x2>:
 * 4-point FDCT in pass 1 (rows), 2-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_4x2 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800df18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df1c:	4605      	mov	r5, r0
 800df1e:	460c      	mov	r4, r1
 800df20:	4616      	mov	r6, r2
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800df22:	2100      	movs	r1, #0
 800df24:	f44f 7280 	mov.w	r2, #256	@ 0x100

    dataptr[1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
		  CONST_BITS-PASS1_BITS-3);
    dataptr[3] = (DCTELEM)
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800df28:	4f28      	ldr	r7, [pc, #160]	@ (800dfcc <jpeg_fdct_4x2+0xb4>)
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800df2a:	f001 fdc1 	bl	800fab0 <memset>
  for (ctr = 0; ctr < 2; ctr++) {
 800df2e:	f105 0020 	add.w	r0, r5, #32
 800df32:	1f21      	subs	r1, r4, #4
 800df34:	f105 0260 	add.w	r2, r5, #96	@ 0x60
    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 800df38:	f241 1e51 	movw	lr, #4433	@ 0x1151
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800df3c:	f641 0c7e 	movw	ip, #6270	@ 0x187e
    elemptr = sample_data[ctr] + start_col;
 800df40:	f851 3f04 	ldr.w	r3, [r1, #4]!
  for (ctr = 0; ctr < 2; ctr++) {
 800df44:	3020      	adds	r0, #32
    elemptr = sample_data[ctr] + start_col;
 800df46:	eb03 0906 	add.w	r9, r3, r6
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[3]);
 800df4a:	5d9c      	ldrb	r4, [r3, r6]
 800df4c:	f899 b003 	ldrb.w	fp, [r9, #3]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[2]);
 800df50:	f899 8001 	ldrb.w	r8, [r9, #1]
 800df54:	f899 9002 	ldrb.w	r9, [r9, #2]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[3]);
 800df58:	eb04 030b 	add.w	r3, r4, fp
    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[3]);
 800df5c:	eba4 040b 	sub.w	r4, r4, fp
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[2]);
 800df60:	eb08 0a09 	add.w	sl, r8, r9
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[2]);
 800df64:	eba8 0809 	sub.w	r8, r8, r9
      ((tmp0 + tmp1 - 4 * CENTERJSAMPLE) << (PASS1_BITS+3));
 800df68:	eb03 090a 	add.w	r9, r3, sl
    dataptr[2] = (DCTELEM) ((tmp0 - tmp1) << (PASS1_BITS+3));
 800df6c:	eba3 030a 	sub.w	r3, r3, sl
 800df70:	015b      	lsls	r3, r3, #5
      ((tmp0 + tmp1 - 4 * CENTERJSAMPLE) << (PASS1_BITS+3));
 800df72:	f5a9 7900 	sub.w	r9, r9, #512	@ 0x200
    dataptr[2] = (DCTELEM) ((tmp0 - tmp1) << (PASS1_BITS+3));
 800df76:	f840 3c38 	str.w	r3, [r0, #-56]
    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 800df7a:	eb04 0308 	add.w	r3, r4, r8
    dataptr[0] = (DCTELEM)
 800df7e:	ea4f 1949 	mov.w	r9, r9, lsl #5
    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 800df82:	fb0e f303 	mul.w	r3, lr, r3
    dataptr[0] = (DCTELEM)
 800df86:	f840 9c40 	str.w	r9, [r0, #-64]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-4);
 800df8a:	3380      	adds	r3, #128	@ 0x80
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800df8c:	fb0c 3404 	mla	r4, ip, r4, r3
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800df90:	fb07 3308 	mla	r3, r7, r8, r3
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800df94:	1224      	asrs	r4, r4, #8
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800df96:	121b      	asrs	r3, r3, #8
    dataptr[1] = (DCTELEM)
 800df98:	f840 4c3c 	str.w	r4, [r0, #-60]
    dataptr[3] = (DCTELEM)
 800df9c:	f840 3c34 	str.w	r3, [r0, #-52]
  for (ctr = 0; ctr < 2; ctr++) {
 800dfa0:	4282      	cmp	r2, r0
 800dfa2:	d1cd      	bne.n	800df40 <jpeg_fdct_4x2+0x28>
 800dfa4:	1f2a      	subs	r2, r5, #4
 800dfa6:	350c      	adds	r5, #12
  dataptr = data;
  for (ctr = 0; ctr < 4; ctr++) {
    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = dataptr[DCTSIZE*0] + (ONE << (PASS1_BITS-1));
 800dfa8:	f852 3f04 	ldr.w	r3, [r2, #4]!
    tmp1 = dataptr[DCTSIZE*1];
 800dfac:	6a10      	ldr	r0, [r2, #32]
    tmp0 = dataptr[DCTSIZE*0] + (ONE << (PASS1_BITS-1));
 800dfae:	3302      	adds	r3, #2
  for (ctr = 0; ctr < 4; ctr++) {
 800dfb0:	4295      	cmp	r5, r2

    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
 800dfb2:	eb03 0100 	add.w	r1, r3, r0

    /* Odd part */

    dataptr[DCTSIZE*1] = (DCTELEM) RIGHT_SHIFT(tmp0 - tmp1, PASS1_BITS);
 800dfb6:	eba3 0300 	sub.w	r3, r3, r0
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
 800dfba:	ea4f 01a1 	mov.w	r1, r1, asr #2
    dataptr[DCTSIZE*1] = (DCTELEM) RIGHT_SHIFT(tmp0 - tmp1, PASS1_BITS);
 800dfbe:	ea4f 03a3 	mov.w	r3, r3, asr #2
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp0 + tmp1, PASS1_BITS);
 800dfc2:	6011      	str	r1, [r2, #0]
    dataptr[DCTSIZE*1] = (DCTELEM) RIGHT_SHIFT(tmp0 - tmp1, PASS1_BITS);
 800dfc4:	6213      	str	r3, [r2, #32]
  for (ctr = 0; ctr < 4; ctr++) {
 800dfc6:	d1ef      	bne.n	800dfa8 <jpeg_fdct_4x2+0x90>

    dataptr++;			/* advance pointer to next column */
  }
}
 800dfc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfcc:	ffffc4df 	.word	0xffffc4df

0800dfd0 <jpeg_fdct_2x1>:
 * 2-point FDCT in pass 1 (rows), 1-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_2x1 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800dfd0:	b570      	push	{r4, r5, r6, lr}
 800dfd2:	460e      	mov	r6, r1
 800dfd4:	4615      	mov	r5, r2
  INT32 tmp0, tmp1;
  JSAMPROW elemptr;

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800dfd6:	2100      	movs	r1, #0
 800dfd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 800dfdc:	4604      	mov	r4, r0
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800dfde:	f001 fd67 	bl	800fab0 <memset>

  elemptr = sample_data[0] + start_col;
 800dfe2:	6833      	ldr	r3, [r6, #0]
 800dfe4:	195a      	adds	r2, r3, r5

  tmp0 = GETJSAMPLE(elemptr[0]);
 800dfe6:	5d5b      	ldrb	r3, [r3, r5]
  tmp1 = GETJSAMPLE(elemptr[1]);
 800dfe8:	7851      	ldrb	r1, [r2, #1]
   * We must also scale the output by (8/2)*(8/1) = 2**5.
   */

  /* Even part */
  /* Apply unsigned->signed conversion */
  data[0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 5);
 800dfea:	185a      	adds	r2, r3, r1

  /* Odd part */
  data[1] = (DCTELEM) ((tmp0 - tmp1) << 5);
 800dfec:	1a5b      	subs	r3, r3, r1
  data[0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 5);
 800dfee:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
  data[1] = (DCTELEM) ((tmp0 - tmp1) << 5);
 800dff2:	015b      	lsls	r3, r3, #5
  data[0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 5);
 800dff4:	0152      	lsls	r2, r2, #5
  data[1] = (DCTELEM) ((tmp0 - tmp1) << 5);
 800dff6:	6063      	str	r3, [r4, #4]
  data[0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 5);
 800dff8:	6022      	str	r2, [r4, #0]
}
 800dffa:	bd70      	pop	{r4, r5, r6, pc}

0800dffc <jpeg_fdct_8x16>:
 * 8-point FDCT in pass 1 (rows), 16-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_8x16 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800dffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e000:	4680      	mov	r8, r0
 800e002:	b0cb      	sub	sp, #300	@ 0x12c
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  dataptr = data;
  ctr = 0;
 800e004:	f04f 0900 	mov.w	r9, #0
  dataptr = data;
 800e008:	9000      	str	r0, [sp, #0]
{
 800e00a:	e9cd 2102 	strd	r2, r1, [sp, #8]
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 800e00e:	9b03      	ldr	r3, [sp, #12]
 800e010:	9a02      	ldr	r2, [sp, #8]
 800e012:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
    dataptr[1] = (DCTELEM) DESCALE(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
    dataptr[3] = (DCTELEM) DESCALE(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
    dataptr[5] = (DCTELEM) DESCALE(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
    dataptr[7] = (DCTELEM) DESCALE(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);

    ctr++;
 800e016:	f109 0901 	add.w	r9, r9, #1
    elemptr = sample_data[ctr] + start_col;
 800e01a:	1898      	adds	r0, r3, r2
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 800e01c:	5c9a      	ldrb	r2, [r3, r2]

    if (ctr != DCTSIZE) {
 800e01e:	f1b9 0f08 	cmp.w	r9, #8
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 800e022:	79c3      	ldrb	r3, [r0, #7]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 800e024:	7984      	ldrb	r4, [r0, #6]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 800e026:	eb02 0b03 	add.w	fp, r2, r3
 800e02a:	4619      	mov	r1, r3
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 800e02c:	7843      	ldrb	r3, [r0, #1]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 800e02e:	f890 e002 	ldrb.w	lr, [r0, #2]
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
 800e032:	eba2 0201 	sub.w	r2, r2, r1
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 800e036:	7945      	ldrb	r5, [r0, #5]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 800e038:	eb03 0704 	add.w	r7, r3, r4
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 800e03c:	f890 c003 	ldrb.w	ip, [r0, #3]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 800e040:	9401      	str	r4, [sp, #4]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 800e042:	eb0e 0a05 	add.w	sl, lr, r5
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 800e046:	7904      	ldrb	r4, [r0, #4]
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
 800e048:	ebae 0505 	sub.w	r5, lr, r5
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
 800e04c:	9901      	ldr	r1, [sp, #4]
    tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 800e04e:	eb0c 0004 	add.w	r0, ip, r4
    tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
 800e052:	ebac 0404 	sub.w	r4, ip, r4
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
 800e056:	eba3 0301 	sub.w	r3, r3, r1
    dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
 800e05a:	9900      	ldr	r1, [sp, #0]
    tmp10 = tmp0 + tmp3;
 800e05c:	eb0b 0600 	add.w	r6, fp, r0
    tmp12 = tmp0 - tmp3;
 800e060:	ebab 0000 	sub.w	r0, fp, r0
    tmp11 = tmp1 + tmp2;
 800e064:	eb07 0b0a 	add.w	fp, r7, sl
    tmp13 = tmp1 - tmp2;
 800e068:	eba7 070a 	sub.w	r7, r7, sl
    tmp13 = tmp1 + tmp3;
 800e06c:	eb03 0e04 	add.w	lr, r3, r4
    dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
 800e070:	eb06 0c0b 	add.w	ip, r6, fp
    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
 800e074:	eba6 060b 	sub.w	r6, r6, fp
    dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
 800e078:	f5ac 6c80 	sub.w	ip, ip, #1024	@ 0x400
    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
 800e07c:	ea4f 0686 	mov.w	r6, r6, lsl #2
    dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
 800e080:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
 800e084:	610e      	str	r6, [r1, #16]
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800e086:	eb00 0607 	add.w	r6, r0, r7
    dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
 800e08a:	f8c1 c000 	str.w	ip, [r1]
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800e08e:	f241 1151 	movw	r1, #4433	@ 0x1151
    tmp12 = tmp0 + tmp2;
 800e092:	eb02 0c05 	add.w	ip, r2, r5
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800e096:	fb01 f606 	mul.w	r6, r1, r6
    dataptr[2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, FIX_0_765366865),
 800e09a:	f641 017e 	movw	r1, #6270	@ 0x187e
 800e09e:	fb01 6000 	mla	r0, r1, r0, r6
 800e0a2:	9900      	ldr	r1, [sp, #0]
 800e0a4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800e0a8:	ea4f 20e0 	mov.w	r0, r0, asr #11
 800e0ac:	6088      	str	r0, [r1, #8]
    tmp10 = tmp0 + tmp3;
 800e0ae:	eb02 0004 	add.w	r0, r2, r4
    dataptr[6] = (DCTELEM) DESCALE(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 800e0b2:	49c7      	ldr	r1, [pc, #796]	@ (800e3d0 <jpeg_fdct_8x16+0x3d4>)
 800e0b4:	fb01 6607 	mla	r6, r1, r7, r6
 800e0b8:	9900      	ldr	r1, [sp, #0]
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800e0ba:	eb0c 070e 	add.w	r7, ip, lr
    dataptr[6] = (DCTELEM) DESCALE(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 800e0be:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800e0c2:	ea4f 26e6 	mov.w	r6, r6, asr #11
 800e0c6:	618e      	str	r6, [r1, #24]
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800e0c8:	f242 51a1 	movw	r1, #9633	@ 0x25a1
    tmp11 = tmp1 + tmp2;
 800e0cc:	eb03 0605 	add.w	r6, r3, r5
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800e0d0:	fb01 f707 	mul.w	r7, r1, r7
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 800e0d4:	49bf      	ldr	r1, [pc, #764]	@ (800e3d4 <jpeg_fdct_8x16+0x3d8>)
 800e0d6:	fb01 f000 	mul.w	r0, r1, r0
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 800e0da:	49bf      	ldr	r1, [pc, #764]	@ (800e3d8 <jpeg_fdct_8x16+0x3dc>)
 800e0dc:	fb01 f606 	mul.w	r6, r1, r6
    tmp12 += z1;
 800e0e0:	49be      	ldr	r1, [pc, #760]	@ (800e3dc <jpeg_fdct_8x16+0x3e0>)
 800e0e2:	fb01 7c0c 	mla	ip, r1, ip, r7
    tmp13 += z1;
 800e0e6:	49be      	ldr	r1, [pc, #760]	@ (800e3e0 <jpeg_fdct_8x16+0x3e4>)
 800e0e8:	fb01 770e 	mla	r7, r1, lr, r7
    dataptr[1] = (DCTELEM) DESCALE(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
 800e0ec:	f243 010b 	movw	r1, #12299	@ 0x300b
 800e0f0:	fb01 0202 	mla	r2, r1, r2, r0
 800e0f4:	9900      	ldr	r1, [sp, #0]
 800e0f6:	4462      	add	r2, ip
 800e0f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e0fc:	ea4f 22e2 	mov.w	r2, r2, asr #11
 800e100:	604a      	str	r2, [r1, #4]
    dataptr[3] = (DCTELEM) DESCALE(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
 800e102:	f246 2254 	movw	r2, #25172	@ 0x6254
 800e106:	fb02 6303 	mla	r3, r2, r3, r6
 800e10a:	443b      	add	r3, r7
 800e10c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e110:	ea4f 23e3 	mov.w	r3, r3, asr #11
 800e114:	60cb      	str	r3, [r1, #12]
    dataptr[5] = (DCTELEM) DESCALE(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
 800e116:	f244 13b3 	movw	r3, #16819	@ 0x41b3
 800e11a:	fb03 6605 	mla	r6, r3, r5, r6
    dataptr[7] = (DCTELEM) DESCALE(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 800e11e:	f640 138e 	movw	r3, #2446	@ 0x98e
 800e122:	fb03 0004 	mla	r0, r3, r4, r0
    dataptr[5] = (DCTELEM) DESCALE(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
 800e126:	4466      	add	r6, ip
    dataptr[7] = (DCTELEM) DESCALE(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 800e128:	460b      	mov	r3, r1
 800e12a:	4438      	add	r0, r7
    dataptr[5] = (DCTELEM) DESCALE(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
 800e12c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
    dataptr[7] = (DCTELEM) DESCALE(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 800e130:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
    dataptr[5] = (DCTELEM) DESCALE(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
 800e134:	ea4f 26e6 	mov.w	r6, r6, asr #11
    dataptr[7] = (DCTELEM) DESCALE(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 800e138:	ea4f 20e0 	mov.w	r0, r0, asr #11
    dataptr[5] = (DCTELEM) DESCALE(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
 800e13c:	614e      	str	r6, [r1, #20]
    dataptr[7] = (DCTELEM) DESCALE(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 800e13e:	61c8      	str	r0, [r1, #28]
    if (ctr != DCTSIZE) {
 800e140:	d004      	beq.n	800e14c <jpeg_fdct_8x16+0x150>
      if (ctr == DCTSIZE * 2)
 800e142:	f1b9 0f10 	cmp.w	r9, #16
 800e146:	d004      	beq.n	800e152 <jpeg_fdct_8x16+0x156>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 800e148:	3320      	adds	r3, #32
 800e14a:	e000      	b.n	800e14e <jpeg_fdct_8x16+0x152>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 800e14c:	ab0a      	add	r3, sp, #40	@ 0x28
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	e75d      	b.n	800e00e <jpeg_fdct_8x16+0x12>
 800e152:	f108 021c 	add.w	r2, r8, #28
 800e156:	f1a8 0304 	sub.w	r3, r8, #4
 800e15a:	9209      	str	r2, [sp, #36]	@ 0x24
   * We must also scale the output by 8/16 = 1/2.
   * 16-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */

  dataptr = data;
  wsptr = workspace;
 800e15c:	aa0a      	add	r2, sp, #40	@ 0x28
 800e15e:	9200      	str	r2, [sp, #0]
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*7];
 800e160:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800e164:	9201      	str	r2, [sp, #4]
 800e166:	9a00      	ldr	r2, [sp, #0]
 800e168:	f8d2 70e0 	ldr.w	r7, [r2, #224]	@ 0xe0
 800e16c:	9a01      	ldr	r2, [sp, #4]
 800e16e:	eb02 0b07 	add.w	fp, r2, r7
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*6];
 800e172:	9a00      	ldr	r2, [sp, #0]
 800e174:	f8d2 20c0 	ldr.w	r2, [r2, #192]	@ 0xc0
 800e178:	9202      	str	r2, [sp, #8]
 800e17a:	9902      	ldr	r1, [sp, #8]
 800e17c:	6a1a      	ldr	r2, [r3, #32]
 800e17e:	eb02 0901 	add.w	r9, r2, r1
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*5];
 800e182:	9a00      	ldr	r2, [sp, #0]
 800e184:	f8d2 20a0 	ldr.w	r2, [r2, #160]	@ 0xa0
 800e188:	9203      	str	r2, [sp, #12]
 800e18a:	9903      	ldr	r1, [sp, #12]
 800e18c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e18e:	eb02 0e01 	add.w	lr, r2, r1
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*4];
 800e192:	9a00      	ldr	r2, [sp, #0]
 800e194:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e198:	9204      	str	r2, [sp, #16]
 800e19a:	9904      	ldr	r1, [sp, #16]
 800e19c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e19e:	440a      	add	r2, r1
 800e1a0:	9207      	str	r2, [sp, #28]
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*3];
 800e1a2:	9a00      	ldr	r2, [sp, #0]
 800e1a4:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800e1a6:	9205      	str	r2, [sp, #20]
 800e1a8:	9905      	ldr	r1, [sp, #20]
 800e1aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800e1ae:	1856      	adds	r6, r2, r1
    tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*2];
 800e1b0:	9a00      	ldr	r2, [sp, #0]
 800e1b2:	6c14      	ldr	r4, [r2, #64]	@ 0x40
 800e1b4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800e1b8:	eb02 0c04 	add.w	ip, r2, r4
    tmp6 = dataptr[DCTSIZE*6] + wsptr[DCTSIZE*1];
 800e1bc:	9a00      	ldr	r2, [sp, #0]
 800e1be:	6a12      	ldr	r2, [r2, #32]
 800e1c0:	9206      	str	r2, [sp, #24]
 800e1c2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
    tmp7 = dataptr[DCTSIZE*7] + wsptr[DCTSIZE*0];
 800e1c6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
    tmp6 = dataptr[DCTSIZE*6] + wsptr[DCTSIZE*1];
 800e1ca:	eb01 0802 	add.w	r8, r1, r2
    tmp7 = dataptr[DCTSIZE*7] + wsptr[DCTSIZE*0];
 800e1ce:	9a00      	ldr	r2, [sp, #0]
 800e1d0:	f852 1b04 	ldr.w	r1, [r2], #4
 800e1d4:	eb00 0a01 	add.w	sl, r0, r1
 800e1d8:	9200      	str	r2, [sp, #0]
    tmp16 = tmp2 - tmp5;
    tmp13 = tmp3 + tmp4;
    tmp17 = tmp3 - tmp4;

    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*7];
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*6];
 800e1da:	9a02      	ldr	r2, [sp, #8]
    tmp14 = tmp0 - tmp7;
 800e1dc:	ebab 050a 	sub.w	r5, fp, sl
    tmp10 = tmp0 + tmp7;
 800e1e0:	eb0b 000a 	add.w	r0, fp, sl
    tmp11 = tmp1 + tmp6;
 800e1e4:	eb09 0a08 	add.w	sl, r9, r8
    tmp15 = tmp1 - tmp6;
 800e1e8:	eba9 0908 	sub.w	r9, r9, r8
    tmp14 = tmp0 - tmp7;
 800e1ec:	9508      	str	r5, [sp, #32]
    tmp12 = tmp2 + tmp5;
 800e1ee:	eb0e 080c 	add.w	r8, lr, ip
    tmp13 = tmp3 + tmp4;
 800e1f2:	9d07      	ldr	r5, [sp, #28]
    tmp16 = tmp2 - tmp5;
 800e1f4:	ebae 0e0c 	sub.w	lr, lr, ip
    tmp13 = tmp3 + tmp4;
 800e1f8:	eb05 0c06 	add.w	ip, r5, r6
    tmp17 = tmp3 - tmp4;
 800e1fc:	1bae      	subs	r6, r5, r6
    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*7];
 800e1fe:	9d01      	ldr	r5, [sp, #4]
 800e200:	1bef      	subs	r7, r5, r7
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*6];
 800e202:	6a1d      	ldr	r5, [r3, #32]
 800e204:	1aad      	subs	r5, r5, r2
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*5];
 800e206:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*6];
 800e208:	9501      	str	r5, [sp, #4]
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*5];
 800e20a:	9d03      	ldr	r5, [sp, #12]
 800e20c:	1b52      	subs	r2, r2, r5
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*4];
 800e20e:	9d04      	ldr	r5, [sp, #16]
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*5];
 800e210:	9202      	str	r2, [sp, #8]
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*4];
 800e212:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e214:	1b52      	subs	r2, r2, r5
    tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*3];
 800e216:	9d05      	ldr	r5, [sp, #20]
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*4];
 800e218:	9203      	str	r2, [sp, #12]
    tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*3];
 800e21a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800e21e:	eba2 0b05 	sub.w	fp, r2, r5
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*2];
 800e222:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
	      + MULTIPLY(tmp16, FIX(2.172734804)),        /* c2+c10 */
	      CONST_BITS+PASS1_BITS+1);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 800e226:	4d6f      	ldr	r5, [pc, #444]	@ (800e3e4 <jpeg_fdct_8x16+0x3e8>)
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*2];
 800e228:	1b12      	subs	r2, r2, r4
    tmp6 = dataptr[DCTSIZE*6] - wsptr[DCTSIZE*1];
 800e22a:	9c06      	ldr	r4, [sp, #24]
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*2];
 800e22c:	9204      	str	r2, [sp, #16]
    tmp6 = dataptr[DCTSIZE*6] - wsptr[DCTSIZE*1];
 800e22e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800e232:	1b12      	subs	r2, r2, r4
    tmp7 = dataptr[DCTSIZE*7] - wsptr[DCTSIZE*0];
 800e234:	f8d3 40e0 	ldr.w	r4, [r3, #224]	@ 0xe0
 800e238:	1a61      	subs	r1, r4, r1
      DESCALE(tmp10 + tmp11 + tmp12 + tmp13, PASS1_BITS+1);
 800e23a:	eb00 040a 	add.w	r4, r0, sl
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800e23e:	ebaa 0a08 	sub.w	sl, sl, r8
      DESCALE(tmp10 + tmp11 + tmp12 + tmp13, PASS1_BITS+1);
 800e242:	4444      	add	r4, r8
	      CONST_BITS+PASS1_BITS+1);

    /* Odd part */

    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 800e244:	eba2 0801 	sub.w	r8, r2, r1
      DESCALE(tmp10 + tmp11 + tmp12 + tmp13, PASS1_BITS+1);
 800e248:	4464      	add	r4, ip
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800e24a:	eba0 0c0c 	sub.w	ip, r0, ip
 800e24e:	f241 1051 	movw	r0, #4433	@ 0x1151
      DESCALE(tmp10 + tmp11 + tmp12 + tmp13, PASS1_BITS+1);
 800e252:	3404      	adds	r4, #4
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800e254:	fb00 fa0a 	mul.w	sl, r0, sl
 800e258:	f642 10cf 	movw	r0, #10703	@ 0x29cf
      DESCALE(tmp10 + tmp11 + tmp12 + tmp13, PASS1_BITS+1);
 800e25c:	10e4      	asrs	r4, r4, #3
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800e25e:	fb00 aa0c 	mla	sl, r0, ip, sl
	    MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
 800e262:	f642 4c63 	movw	ip, #11363	@ 0x2c63
    dataptr[DCTSIZE*0] = (DCTELEM)
 800e266:	601c      	str	r4, [r3, #0]
    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 800e268:	eba6 0409 	sub.w	r4, r6, r9
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(1.306562965)) + /* c4[16] = c2[8] */
 800e26c:	f50a 4000 	add.w	r0, sl, #32768	@ 0x8000
 800e270:	1400      	asrs	r0, r0, #16
    dataptr[DCTSIZE*4] = (DCTELEM)
 800e272:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
	    MULTIPLY(tmp14 - tmp16, FIX(1.387039845));    /* c2[16] = c1[8] */
 800e276:	9808      	ldr	r0, [sp, #32]
 800e278:	eba0 000e 	sub.w	r0, r0, lr
 800e27c:	fb0c f000 	mul.w	r0, ip, r0
    tmp10 = MULTIPLY(tmp17 - tmp15, FIX(0.275899379)) +   /* c14[16] = c7[8] */
 800e280:	f640 0cd4 	movw	ip, #2260	@ 0x8d4
 800e284:	fb0c 0004 	mla	r0, ip, r4, r0
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 800e288:	f642 6475 	movw	r4, #11893	@ 0x2e75
 800e28c:	f244 5c87 	movw	ip, #17799	@ 0x4587
 800e290:	fb04 0409 	mla	r4, r4, r9, r0
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 800e294:	f640 5923 	movw	r9, #3363	@ 0xd23
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 800e298:	fb0c 440e 	mla	r4, ip, lr, r4
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
	    MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
 800e29c:	f642 5c09 	movw	ip, #11529	@ 0x2d09
	    MULTIPLY(tmp6 - tmp7, FIX(0.410524528));          /* c13 */
 800e2a0:	fb09 f808 	mul.w	r8, r9, r8
      DESCALE(tmp10 + MULTIPLY(tmp15, FIX(1.451774982))   /* c6+c14 */
 800e2a4:	f504 4400 	add.w	r4, r4, #32768	@ 0x8000
 800e2a8:	1424      	asrs	r4, r4, #16
    dataptr[DCTSIZE*2] = (DCTELEM)
 800e2aa:	641c      	str	r4, [r3, #64]	@ 0x40
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 800e2ac:	9c08      	ldr	r4, [sp, #32]
 800e2ae:	fb05 0004 	mla	r0, r5, r4, r0
 800e2b2:	4c4d      	ldr	r4, [pc, #308]	@ (800e3e8 <jpeg_fdct_8x16+0x3ec>)
 800e2b4:	fb04 0006 	mla	r0, r4, r6, r0
    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 800e2b8:	f642 344e 	movw	r4, #11086	@ 0x2b4e
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 800e2bc:	ebab 0601 	sub.w	r6, fp, r1
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(0.211164243))   /* c2-c6 */
 800e2c0:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
 800e2c4:	1400      	asrs	r0, r0, #16
    dataptr[DCTSIZE*6] = (DCTELEM)
 800e2c6:	f8c3 00c0 	str.w	r0, [r3, #192]	@ 0xc0
    tmp11 = MULTIPLY(tmp0 + tmp1, FIX(1.353318001)) +         /* c3 */
 800e2ca:	9801      	ldr	r0, [sp, #4]
 800e2cc:	1838      	adds	r0, r7, r0
 800e2ce:	fb04 8800 	mla	r8, r4, r0, r8
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 800e2d2:	9802      	ldr	r0, [sp, #8]
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
 800e2d4:	9c04      	ldr	r4, [sp, #16]
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 800e2d6:	1838      	adds	r0, r7, r0
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 800e2d8:	9d03      	ldr	r5, [sp, #12]
	    MULTIPLY(tmp5 + tmp7, FIX(0.666655658));          /* c11 */
 800e2da:	eb04 0e01 	add.w	lr, r4, r1
 800e2de:	f241 5455 	movw	r4, #5461	@ 0x1555
 800e2e2:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(1.247225013)) +         /* c5 */
 800e2e6:	f242 74e9 	movw	r4, #10217	@ 0x27e9
 800e2ea:	fb04 ee00 	mla	lr, r4, r0, lr
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 800e2ee:	f641 44b6 	movw	r4, #7350	@ 0x1cb6
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 800e2f2:	9803      	ldr	r0, [sp, #12]
	    MULTIPLY(tmp4 - tmp7, FIX(0.897167586));          /* c9 */
 800e2f4:	4366      	muls	r6, r4
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(1.093201867)) +         /* c7 */
 800e2f6:	f242 24fc 	movw	r4, #8956	@ 0x22fc
 800e2fa:	1838      	adds	r0, r7, r0
 800e2fc:	fb04 6600 	mla	r6, r4, r0, r6
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 800e300:	e9dd 0401 	ldrd	r0, r4, [sp, #4]
 800e304:	4420      	add	r0, r4
	    MULTIPLY(tmp6 - tmp5, FIX(1.407403738));          /* c1 */
 800e306:	9c04      	ldr	r4, [sp, #16]
 800e308:	1b14      	subs	r4, r2, r4
 800e30a:	fb0c f404 	mul.w	r4, ip, r4
    tmp14 = MULTIPLY(tmp1 + tmp2, FIX(0.138617169)) +         /* c15 */
 800e30e:	f44f 6c8e 	mov.w	ip, #1136	@ 0x470
 800e312:	fb0c 4400 	mla	r4, ip, r0, r4
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 800e316:	9801      	ldr	r0, [sp, #4]
 800e318:	eb00 0c05 	add.w	ip, r0, r5
	    MULTIPLY(tmp4 + tmp6, - FIX(1.247225013));        /* -c5 */
 800e31c:	eb0b 0002 	add.w	r0, fp, r2
 800e320:	4d32      	ldr	r5, [pc, #200]	@ (800e3ec <jpeg_fdct_8x16+0x3f0>)
 800e322:	4368      	muls	r0, r5
    tmp15 = MULTIPLY(tmp1 + tmp3, - FIX(0.666655658)) +       /* -c11 */
 800e324:	4d32      	ldr	r5, [pc, #200]	@ (800e3f0 <jpeg_fdct_8x16+0x3f4>)
 800e326:	fb05 000c 	mla	r0, r5, ip, r0
 800e32a:	9005      	str	r0, [sp, #20]
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 800e32c:	e9dd 5002 	ldrd	r5, r0, [sp, #8]
 800e330:	eb05 0a00 	add.w	sl, r5, r0
	    MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
 800e334:	9804      	ldr	r0, [sp, #16]
 800e336:	eba0 0c0b 	sub.w	ip, r0, fp
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 800e33a:	482e      	ldr	r0, [pc, #184]	@ (800e3f4 <jpeg_fdct_8x16+0x3f8>)
	    MULTIPLY(tmp5 - tmp4, FIX(0.410524528));          /* c13 */
 800e33c:	fb09 fc0c 	mul.w	ip, r9, ip
    tmp10 = tmp11 + tmp12 + tmp13 -
 800e340:	eb08 090e 	add.w	r9, r8, lr
    tmp16 = MULTIPLY(tmp2 + tmp3, - FIX(1.353318001)) +       /* -c3 */
 800e344:	fb00 cc0a 	mla	ip, r0, sl, ip
    tmp10 = tmp11 + tmp12 + tmp13 -
 800e348:	44b1      	add	r9, r6
 800e34a:	482b      	ldr	r0, [pc, #172]	@ (800e3f8 <jpeg_fdct_8x16+0x3fc>)
 800e34c:	fb00 9707 	mla	r7, r0, r7, r9
 800e350:	f641 09f3 	movw	r9, #6387	@ 0x18f3
	    MULTIPLY(tmp0, FIX(2.286341144)) +                /* c7+c5+c3-c1 */
	    MULTIPLY(tmp7, FIX(0.779653625));                 /* c15+c13-c11+c9 */
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800e354:	9801      	ldr	r0, [sp, #4]
    tmp10 = tmp11 + tmp12 + tmp13 -
 800e356:	fb09 7701 	mla	r7, r9, r1, r7
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800e35a:	9905      	ldr	r1, [sp, #20]
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
	     + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp10, CONST_BITS+PASS1_BITS+1);
 800e35c:	f507 4700 	add.w	r7, r7, #32768	@ 0x8000
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800e360:	1861      	adds	r1, r4, r1
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 800e362:	4464      	add	r4, ip
    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp10, CONST_BITS+PASS1_BITS+1);
 800e364:	143f      	asrs	r7, r7, #16
 800e366:	621f      	str	r7, [r3, #32]
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800e368:	f240 274d 	movw	r7, #589	@ 0x24d
 800e36c:	fb07 1100 	mla	r1, r7, r0, r1
	     - MULTIPLY(tmp6, FIX(1.663905119));              /* c7+c13+c1-c5 */
 800e370:	4822      	ldr	r0, [pc, #136]	@ (800e3fc <jpeg_fdct_8x16+0x400>)
 800e372:	fb00 1102 	mla	r1, r0, r2, r1
	     + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
 800e376:	f242 7247 	movw	r2, #10055	@ 0x2747
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800e37a:	9805      	ldr	r0, [sp, #20]
    tmp11 += tmp14 + tmp15 + MULTIPLY(tmp1, FIX(0.071888074)) /* c9-c3-c15+c11 */
 800e37c:	4441      	add	r1, r8
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800e37e:	4460      	add	r0, ip
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp11, CONST_BITS+PASS1_BITS+1);
 800e380:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 800e384:	1409      	asrs	r1, r1, #16
 800e386:	6619      	str	r1, [r3, #96]	@ 0x60
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 800e388:	491d      	ldr	r1, [pc, #116]	@ (800e400 <jpeg_fdct_8x16+0x404>)
 800e38a:	fb01 4405 	mla	r4, r1, r5, r4
	     + MULTIPLY(tmp5, FIX(1.227391138));              /* c9-c11+c1-c13 */
 800e38e:	9904      	ldr	r1, [sp, #16]
 800e390:	fb02 4401 	mla	r4, r2, r1, r4
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800e394:	f242 2218 	movw	r2, #8728	@ 0x2218
 800e398:	9903      	ldr	r1, [sp, #12]
    tmp12 += tmp14 + tmp16 - MULTIPLY(tmp2, FIX(1.125726048)) /* c7+c5+c15-c3 */
 800e39a:	4474      	add	r4, lr
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800e39c:	fb02 0001 	mla	r0, r2, r1, r0
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
 800e3a0:	f244 5260 	movw	r2, #17760	@ 0x4560
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+PASS1_BITS+1);
 800e3a4:	f504 4400 	add.w	r4, r4, #32768	@ 0x8000
	     + MULTIPLY(tmp4, FIX(2.167985692));              /* c1+c13+c5-c9 */
 800e3a8:	fb02 000b 	mla	r0, r2, fp, r0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800e3ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+PASS1_BITS+1);
 800e3ae:	1424      	asrs	r4, r4, #16
    tmp13 += tmp15 + tmp16 + MULTIPLY(tmp3, FIX(1.065388962)) /* c15+c3+c11-c7 */
 800e3b0:	4430      	add	r0, r6
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800e3b2:	429a      	cmp	r2, r3
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+PASS1_BITS+1);
 800e3b4:	f8c3 40a0 	str.w	r4, [r3, #160]	@ 0xa0
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+PASS1_BITS+1);
 800e3b8:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
 800e3bc:	ea4f 4020 	mov.w	r0, r0, asr #16
 800e3c0:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 800e3c4:	f47f aecc 	bne.w	800e160 <jpeg_fdct_8x16+0x164>

    dataptr++;			/* advance pointer to next column */
    wsptr++;			/* advance pointer to next column */
  }
}
 800e3c8:	b04b      	add	sp, #300	@ 0x12c
 800e3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ce:	bf00      	nop
 800e3d0:	ffffc4df 	.word	0xffffc4df
 800e3d4:	ffffe333 	.word	0xffffe333
 800e3d8:	ffffadfd 	.word	0xffffadfd
 800e3dc:	fffff384 	.word	0xfffff384
 800e3e0:	ffffc13b 	.word	0xffffc13b
 800e3e4:	fffff93e 	.word	0xfffff93e
 800e3e8:	ffffde07 	.word	0xffffde07
 800e3ec:	ffffd817 	.word	0xffffd817
 800e3f0:	ffffeaab 	.word	0xffffeaab
 800e3f4:	ffffd4b2 	.word	0xffffd4b2
 800e3f8:	ffffb6d6 	.word	0xffffb6d6
 800e3fc:	ffffcac1 	.word	0xffffcac1
 800e400:	ffffdbfa 	.word	0xffffdbfa

0800e404 <jpeg_fdct_7x14>:
 * 7-point FDCT in pass 1 (rows), 14-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_7x14 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800e404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e408:	b0b9      	sub	sp, #228	@ 0xe4
 800e40a:	4680      	mov	r8, r0
 800e40c:	4691      	mov	r9, r2
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800e40e:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 800e412:	9101      	str	r1, [sp, #4]
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800e414:	2100      	movs	r1, #0
 800e416:	f001 fb4b 	bl	800fab0 <memset>
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* 7-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/14). */

  dataptr = data;
 800e41a:	4646      	mov	r6, r8
  ctr = 0;
 800e41c:	f04f 0c00 	mov.w	ip, #0
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 800e420:	9b01      	ldr	r3, [sp, #4]
 800e422:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]

    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS-PASS1_BITS);
    dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS-PASS1_BITS);
    dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS-PASS1_BITS);

    ctr++;
 800e426:	f10c 0c01 	add.w	ip, ip, #1
    elemptr = sample_data[ctr] + start_col;
 800e42a:	eb03 0e09 	add.w	lr, r3, r9
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[6]);
 800e42e:	f813 3009 	ldrb.w	r3, [r3, r9]

    if (ctr != DCTSIZE) {
 800e432:	f1bc 0f08 	cmp.w	ip, #8
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[6]);
 800e436:	f89e a006 	ldrb.w	sl, [lr, #6]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[4]);
 800e43a:	f89e 0004 	ldrb.w	r0, [lr, #4]
 800e43e:	f89e 2002 	ldrb.w	r2, [lr, #2]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[6]);
 800e442:	eb03 070a 	add.w	r7, r3, sl
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[5]);
 800e446:	f89e 4005 	ldrb.w	r4, [lr, #5]
    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[6]);
 800e44a:	eba3 030a 	sub.w	r3, r3, sl
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[5]);
 800e44e:	f89e 5001 	ldrb.w	r5, [lr, #1]
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[4]);
 800e452:	eb02 0100 	add.w	r1, r2, r0
    tmp3 = GETJSAMPLE(elemptr[3]);
 800e456:	f89e e003 	ldrb.w	lr, [lr, #3]
    tmp12 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[4]);
 800e45a:	eba2 0200 	sub.w	r2, r2, r0
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[5]);
 800e45e:	eb05 0b04 	add.w	fp, r5, r4
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[5]);
 800e462:	eba5 0504 	sub.w	r5, r5, r4
    z1 = tmp0 + tmp2;
 800e466:	eb07 0401 	add.w	r4, r7, r1
    z2 = MULTIPLY(tmp0 - tmp2, FIX(0.920609002));       /* (c2+c4-c6)/2 */
 800e46a:	eba7 0a01 	sub.w	sl, r7, r1
    z3 = MULTIPLY(tmp1 - tmp2, FIX(0.314692123));       /* c6 */
 800e46e:	ebab 0101 	sub.w	r1, fp, r1
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.881747734));       /* c4 */
 800e472:	eba7 070b 	sub.w	r7, r7, fp
      ((z1 + tmp1 + tmp3 - 7 * CENTERJSAMPLE) << PASS1_BITS);
 800e476:	eb0b 0004 	add.w	r0, fp, r4
    z1 -= tmp3;
 800e47a:	eba4 048e 	sub.w	r4, r4, lr, lsl #2
      ((z1 + tmp1 + tmp3 - 7 * CENTERJSAMPLE) << PASS1_BITS);
 800e47e:	4470      	add	r0, lr
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
 800e480:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
      ((z1 + tmp1 + tmp3 - 7 * CENTERJSAMPLE) << PASS1_BITS);
 800e484:	f5a0 7060 	sub.w	r0, r0, #896	@ 0x380
    dataptr[0] = (DCTELEM)
 800e488:	ea4f 0080 	mov.w	r0, r0, lsl #2
 800e48c:	6030      	str	r0, [r6, #0]
    z1 = MULTIPLY(z1, FIX(0.353553391));                /* (c2+c6-c4)/2 */
 800e48e:	f44f 6035 	mov.w	r0, #2896	@ 0xb50
 800e492:	fb00 f404 	mul.w	r4, r0, r4
    z2 = MULTIPLY(tmp0 - tmp2, FIX(0.920609002));       /* (c2+c4-c6)/2 */
 800e496:	f641 5076 	movw	r0, #7542	@ 0x1d76
 800e49a:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = MULTIPLY(tmp1 - tmp2, FIX(0.314692123));       /* c6 */
 800e49e:	f640 2012 	movw	r0, #2578	@ 0xa12
 800e4a2:	fb00 f101 	mul.w	r1, r0, r1
    dataptr[2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS-PASS1_BITS);
 800e4a6:	eb04 000a 	add.w	r0, r4, sl
    z1 -= z2;
 800e4aa:	eba4 040a 	sub.w	r4, r4, sl
    dataptr[2] = (DCTELEM) DESCALE(z1 + z2 + z3, CONST_BITS-PASS1_BITS);
 800e4ae:	4408      	add	r0, r1
 800e4b0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800e4b4:	ea4f 20e0 	mov.w	r0, r0, asr #11
 800e4b8:	60b0      	str	r0, [r6, #8]
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.881747734));       /* c4 */
 800e4ba:	f641 4037 	movw	r0, #7223	@ 0x1c37
 800e4be:	fb00 f707 	mul.w	r7, r0, r7
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
 800e4c2:	f46f 50b5 	mvn.w	r0, #5792	@ 0x16a0
 800e4c6:	4439      	add	r1, r7
    dataptr[6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS-PASS1_BITS);
 800e4c8:	443c      	add	r4, r7
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
 800e4ca:	fb00 110e 	mla	r1, r0, lr, r1
    dataptr[6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS-PASS1_BITS);
 800e4ce:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
    tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.170262339));   /* (c3+c5-c1)/2 */
 800e4d2:	f240 5073 	movw	r0, #1395	@ 0x573
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
 800e4d6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    dataptr[6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS-PASS1_BITS);
 800e4da:	ea4f 24e4 	mov.w	r4, r4, asr #11
      DESCALE(z2 + z3 - MULTIPLY(tmp1 - tmp3, FIX(0.707106781)), /* c2+c6-c4 */
 800e4de:	ea4f 21e1 	mov.w	r1, r1, asr #11
    dataptr[6] = (DCTELEM) DESCALE(z1 + z2, CONST_BITS-PASS1_BITS);
 800e4e2:	61b4      	str	r4, [r6, #24]
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(0.935414347));   /* (c3+c1-c5)/2 */
 800e4e4:	eb03 0405 	add.w	r4, r3, r5
    dataptr[4] = (DCTELEM)
 800e4e8:	6131      	str	r1, [r6, #16]
    tmp1 = MULTIPLY(tmp10 + tmp11, FIX(0.935414347));   /* (c3+c1-c5)/2 */
 800e4ea:	f641 51ef 	movw	r1, #7663	@ 0x1def
 800e4ee:	fb01 f404 	mul.w	r4, r1, r4
    tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.170262339));   /* (c3+c5-c1)/2 */
 800e4f2:	eba3 0105 	sub.w	r1, r3, r5
    tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.378756276)); /* -c1 */
 800e4f6:	4415      	add	r5, r2
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.613604268));   /* c5 */
 800e4f8:	4413      	add	r3, r2
    tmp2 = MULTIPLY(tmp10 - tmp11, FIX(0.170262339));   /* (c3+c5-c1)/2 */
 800e4fa:	fb00 f101 	mul.w	r1, r0, r1
    tmp0 = tmp1 - tmp2;
 800e4fe:	eba4 0001 	sub.w	r0, r4, r1
    tmp1 += tmp2;
 800e502:	4421      	add	r1, r4
    tmp2 = MULTIPLY(tmp11 + tmp12, - FIX(1.378756276)); /* -c1 */
 800e504:	4c91      	ldr	r4, [pc, #580]	@ (800e74c <jpeg_fdct_7x14+0x348>)
 800e506:	fb04 f505 	mul.w	r5, r4, r5
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.613604268));   /* c5 */
 800e50a:	f241 34a3 	movw	r4, #5027	@ 0x13a3
    tmp1 += tmp2;
 800e50e:	4429      	add	r1, r5
    tmp3 = MULTIPLY(tmp10 + tmp12, FIX(0.613604268));   /* c5 */
 800e510:	fb04 f303 	mul.w	r3, r4, r3
    dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS-PASS1_BITS);
 800e514:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    tmp0 += tmp3;
 800e518:	4418      	add	r0, r3
    dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS-PASS1_BITS);
 800e51a:	ea4f 21e1 	mov.w	r1, r1, asr #11
    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS-PASS1_BITS);
 800e51e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
    dataptr[3] = (DCTELEM) DESCALE(tmp1, CONST_BITS-PASS1_BITS);
 800e522:	60f1      	str	r1, [r6, #12]
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(1.870828693));   /* c3+c1-c5 */
 800e524:	f643 31de 	movw	r1, #15326	@ 0x3bde
    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS-PASS1_BITS);
 800e528:	ea4f 20e0 	mov.w	r0, r0, asr #11
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(1.870828693));   /* c3+c1-c5 */
 800e52c:	fb01 3302 	mla	r3, r1, r2, r3
    dataptr[1] = (DCTELEM) DESCALE(tmp0, CONST_BITS-PASS1_BITS);
 800e530:	6070      	str	r0, [r6, #4]
    tmp2 += tmp3 + MULTIPLY(tmp12, FIX(1.870828693));   /* c3+c1-c5 */
 800e532:	442b      	add	r3, r5
    dataptr[5] = (DCTELEM) DESCALE(tmp2, CONST_BITS-PASS1_BITS);
 800e534:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e538:	ea4f 23e3 	mov.w	r3, r3, asr #11
 800e53c:	6173      	str	r3, [r6, #20]
    if (ctr != DCTSIZE) {
 800e53e:	d004      	beq.n	800e54a <jpeg_fdct_7x14+0x146>
      if (ctr == 14)
 800e540:	f1bc 0f0e 	cmp.w	ip, #14
 800e544:	d003      	beq.n	800e54e <jpeg_fdct_7x14+0x14a>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 800e546:	3620      	adds	r6, #32
 800e548:	e76a      	b.n	800e420 <jpeg_fdct_7x14+0x1c>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 800e54a:	ae08      	add	r6, sp, #32
 800e54c:	e768      	b.n	800e420 <jpeg_fdct_7x14+0x1c>
 800e54e:	f108 0218 	add.w	r2, r8, #24
 800e552:	f1a8 0304 	sub.w	r3, r8, #4
   * fold into the constant multipliers:
   * 14-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/28) * 32/49.
   */

  dataptr = data;
  wsptr = workspace;
 800e556:	f10d 0b20 	add.w	fp, sp, #32
 800e55a:	9207      	str	r2, [sp, #28]
  for (ctr = 0; ctr < 7; ctr++) {
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*5];
 800e55c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*4];
 800e560:	f8db c080 	ldr.w	ip, [fp, #128]	@ 0x80
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*5];
 800e564:	9201      	str	r2, [sp, #4]
 800e566:	f8db 20a0 	ldr.w	r2, [fp, #160]	@ 0xa0
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*3];
    tmp13 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*2];
 800e56a:	f8db 0040 	ldr.w	r0, [fp, #64]	@ 0x40
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*5];
 800e56e:	9202      	str	r2, [sp, #8]
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*1];
 800e570:	f8d3 6080 	ldr.w	r6, [r3, #128]	@ 0x80
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*5];
 800e574:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
 800e578:	440a      	add	r2, r1
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*3];
 800e57a:	f8db 1060 	ldr.w	r1, [fp, #96]	@ 0x60
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*5];
 800e57e:	9204      	str	r2, [sp, #16]
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*4];
 800e580:	6a1a      	ldr	r2, [r3, #32]
 800e582:	eb02 090c 	add.w	r9, r2, ip
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*3];
 800e586:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e588:	1854      	adds	r4, r2, r1
    tmp13 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*2];
 800e58a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e58c:	1815      	adds	r5, r2, r0
    tmp4 = dataptr[DCTSIZE*4] + wsptr[DCTSIZE*1];
 800e58e:	f8db 2020 	ldr.w	r2, [fp, #32]
 800e592:	eb06 0e02 	add.w	lr, r6, r2
    tmp5 = dataptr[DCTSIZE*5] + wsptr[DCTSIZE*0];
 800e596:	f85b 6b04 	ldr.w	r6, [fp], #4
 800e59a:	9603      	str	r6, [sp, #12]
 800e59c:	9f03      	ldr	r7, [sp, #12]
 800e59e:	f8d3 60a0 	ldr.w	r6, [r3, #160]	@ 0xa0
 800e5a2:	eb06 0807 	add.w	r8, r6, r7
    tmp6 = dataptr[DCTSIZE*6] + dataptr[DCTSIZE*7];
 800e5a6:	f8d3 60c0 	ldr.w	r6, [r3, #192]	@ 0xc0
 800e5aa:	f8d3 70e0 	ldr.w	r7, [r3, #224]	@ 0xe0
 800e5ae:	eb06 0a07 	add.w	sl, r6, r7

    tmp10 = tmp0 + tmp6;
    tmp14 = tmp0 - tmp6;
 800e5b2:	9f04      	ldr	r7, [sp, #16]
    tmp10 = tmp0 + tmp6;
 800e5b4:	9e04      	ldr	r6, [sp, #16]
    tmp14 = tmp0 - tmp6;
 800e5b6:	eba7 070a 	sub.w	r7, r7, sl
    tmp10 = tmp0 + tmp6;
 800e5ba:	4456      	add	r6, sl
    tmp11 = tmp1 + tmp5;
 800e5bc:	eb09 0a08 	add.w	sl, r9, r8
    tmp14 = tmp0 - tmp6;
 800e5c0:	9704      	str	r7, [sp, #16]
    tmp15 = tmp1 - tmp5;
 800e5c2:	eba9 0708 	sub.w	r7, r9, r8
    tmp12 = tmp2 + tmp4;
 800e5c6:	eb04 080e 	add.w	r8, r4, lr
    tmp16 = tmp2 - tmp4;
 800e5ca:	eba4 040e 	sub.w	r4, r4, lr
    tmp15 = tmp1 - tmp5;
 800e5ce:	9705      	str	r7, [sp, #20]
    tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*1];
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*0];
    tmp6 = dataptr[DCTSIZE*6] - dataptr[DCTSIZE*7];

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12 + tmp13,
 800e5d0:	eb06 0e0a 	add.w	lr, r6, sl
    tmp16 = tmp2 - tmp4;
 800e5d4:	9406      	str	r4, [sp, #24]
		       FIX(0.653061224)),                 /* 32/49 */
	      CONST_BITS+PASS1_BITS);
    tmp13 += tmp13;
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
 800e5d6:	ebaa 0a45 	sub.w	sl, sl, r5, lsl #1
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12 + tmp13,
 800e5da:	44c6      	add	lr, r8
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
 800e5dc:	eba6 0645 	sub.w	r6, r6, r5, lsl #1
 800e5e0:	eba8 0845 	sub.w	r8, r8, r5, lsl #1
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12 + tmp13,
 800e5e4:	44ae      	add	lr, r5
    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*5];
 800e5e6:	e9dd 7401 	ldrd	r7, r4, [sp, #4]
 800e5ea:	eba7 0904 	sub.w	r9, r7, r4
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*4];
 800e5ee:	6a1c      	ldr	r4, [r3, #32]
 800e5f0:	eba4 040c 	sub.w	r4, r4, ip
 800e5f4:	9401      	str	r4, [sp, #4]
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*3];
 800e5f6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800e5f8:	1a61      	subs	r1, r4, r1
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*2];
 800e5fa:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 800e5fc:	1a20      	subs	r0, r4, r0
    tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*1];
 800e5fe:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*0];
 800e602:	9f03      	ldr	r7, [sp, #12]
    tmp4 = dataptr[DCTSIZE*4] - wsptr[DCTSIZE*1];
 800e604:	1aa2      	subs	r2, r4, r2
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*0];
 800e606:	f8d3 40a0 	ldr.w	r4, [r3, #160]	@ 0xa0
 800e60a:	1be4      	subs	r4, r4, r7
    tmp6 = dataptr[DCTSIZE*6] - dataptr[DCTSIZE*7];
 800e60c:	f8d3 70e0 	ldr.w	r7, [r3, #224]	@ 0xe0
    tmp5 = dataptr[DCTSIZE*5] - wsptr[DCTSIZE*0];
 800e610:	9402      	str	r4, [sp, #8]
    tmp6 = dataptr[DCTSIZE*6] - dataptr[DCTSIZE*7];
 800e612:	f8d3 40c0 	ldr.w	r4, [r3, #192]	@ 0xc0
 800e616:	eba4 0c07 	sub.w	ip, r4, r7
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12 + tmp13,
 800e61a:	f241 47e6 	movw	r7, #5350	@ 0x14e6
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
 800e61e:	4c4c      	ldr	r4, [pc, #304]	@ (800e750 <jpeg_fdct_7x14+0x34c>)
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12 + tmp13,
 800e620:	fb07 fe0e 	mul.w	lr, r7, lr
 800e624:	f50e 4e80 	add.w	lr, lr, #16384	@ 0x4000
 800e628:	ea4f 3eee 	mov.w	lr, lr, asr #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 800e62c:	f8c3 e000 	str.w	lr, [r3]
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
 800e630:	f240 6e94 	movw	lr, #1684	@ 0x694
 800e634:	fb0e fa0a 	mul.w	sl, lr, sl
 800e638:	f641 2ea1 	movw	lr, #6817	@ 0x1aa1
 800e63c:	fb0e aa06 	mla	sl, lr, r6, sl
	      MULTIPLY(tmp11 - tmp13, FIX(0.205513223)) - /* c12 */
	      MULTIPLY(tmp12 - tmp13, FIX(0.575835255)),  /* c8 */
	      CONST_BITS+PASS1_BITS);

    tmp10 = MULTIPLY(tmp14 + tmp15, FIX(0.722074570));    /* c6 */
 800e640:	f241 761b 	movw	r6, #5915	@ 0x171b

    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.178337691))   /* c2-c6 */
 800e644:	f640 4ed3 	movw	lr, #3283	@ 0xcd3
      DESCALE(MULTIPLY(tmp10 - tmp13, FIX(0.832106052)) + /* c4 */
 800e648:	fb04 aa08 	mla	sl, r4, r8, sl
 800e64c:	f50a 4580 	add.w	r5, sl, #16384	@ 0x4000
 800e650:	13ed      	asrs	r5, r5, #15
    dataptr[DCTSIZE*4] = (DCTELEM)
 800e652:	f8c3 5080 	str.w	r5, [r3, #128]	@ 0x80
    tmp10 = MULTIPLY(tmp14 + tmp15, FIX(0.722074570));    /* c6 */
 800e656:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e65a:	1965      	adds	r5, r4, r5
 800e65c:	4375      	muls	r5, r6
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.178337691))   /* c2-c6 */
 800e65e:	f240 56b5 	movw	r6, #1461	@ 0x5b5
 800e662:	fb06 5604 	mla	r6, r6, r4, r5
 800e666:	9c06      	ldr	r4, [sp, #24]
 800e668:	fb0e 6604 	mla	r6, lr, r4, r6
	      + MULTIPLY(tmp16, FIX(0.400721155)),        /* c10 */
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.122795725))   /* c6+c10 */
 800e66c:	9c05      	ldr	r4, [sp, #20]
      DESCALE(tmp10 + MULTIPLY(tmp14, FIX(0.178337691))   /* c2-c6 */
 800e66e:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800e672:	13f6      	asrs	r6, r6, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 800e674:	641e      	str	r6, [r3, #64]	@ 0x40
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.122795725))   /* c6+c10 */
 800e676:	4e37      	ldr	r6, [pc, #220]	@ (800e754 <jpeg_fdct_7x14+0x350>)
 800e678:	fb06 5504 	mla	r5, r6, r4, r5
 800e67c:	4c36      	ldr	r4, [pc, #216]	@ (800e758 <jpeg_fdct_7x14+0x354>)
 800e67e:	9e06      	ldr	r6, [sp, #24]
 800e680:	fb04 5506 	mla	r5, r4, r6, r5
	      - MULTIPLY(tmp16, FIX(0.900412262)),        /* c2 */
	      CONST_BITS+PASS1_BITS);

    /* Odd part */

    tmp10 = tmp1 + tmp2;
 800e684:	9c01      	ldr	r4, [sp, #4]
      DESCALE(tmp10 - MULTIPLY(tmp15, FIX(1.122795725))   /* c6+c10 */
 800e686:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800e68a:	13ed      	asrs	r5, r5, #15
    dataptr[DCTSIZE*6] = (DCTELEM)
 800e68c:	f8c3 50c0 	str.w	r5, [r3, #192]	@ 0xc0
    tmp10 = tmp1 + tmp2;
 800e690:	1865      	adds	r5, r4, r1
    tmp11 = tmp5 - tmp4;
 800e692:	9c02      	ldr	r4, [sp, #8]
    dataptr[DCTSIZE*7] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0 - tmp10 + tmp3 - tmp11 - tmp6,
 800e694:	eba9 0605 	sub.w	r6, r9, r5
    tmp11 = tmp5 - tmp4;
 800e698:	1aa4      	subs	r4, r4, r2
      DESCALE(MULTIPLY(tmp0 - tmp10 + tmp3 - tmp11 - tmp6,
 800e69a:	4406      	add	r6, r0
 800e69c:	1b36      	subs	r6, r6, r4
 800e69e:	eba6 060c 	sub.w	r6, r6, ip
 800e6a2:	437e      	muls	r6, r7
		       FIX(0.653061224)),                 /* 32/49 */
	      CONST_BITS+PASS1_BITS);
    tmp3  = MULTIPLY(tmp3 , FIX(0.653061224));            /* 32/49 */
 800e6a4:	4347      	muls	r7, r0
    tmp10 = MULTIPLY(tmp10, - FIX(0.103406812));          /* -c13 */
    tmp11 = MULTIPLY(tmp11, FIX(0.917760839));            /* c1 */
 800e6a6:	f641 505e 	movw	r0, #7518	@ 0x1d5e
      DESCALE(MULTIPLY(tmp0 - tmp10 + tmp3 - tmp11 - tmp6,
 800e6aa:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
    tmp11 = MULTIPLY(tmp11, FIX(0.917760839));            /* c1 */
 800e6ae:	4360      	muls	r0, r4
    tmp10 += tmp11 - tmp3;
 800e6b0:	4c2a      	ldr	r4, [pc, #168]	@ (800e75c <jpeg_fdct_7x14+0x358>)
      DESCALE(MULTIPLY(tmp0 - tmp10 + tmp3 - tmp11 - tmp6,
 800e6b2:	13f6      	asrs	r6, r6, #15
    tmp10 += tmp11 - tmp3;
 800e6b4:	1bc0      	subs	r0, r0, r7
    dataptr[DCTSIZE*7] = (DCTELEM)
 800e6b6:	f8c3 60e0 	str.w	r6, [r3, #224]	@ 0xe0
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(0.782007410)) +     /* c5 */
	    MULTIPLY(tmp4 + tmp6, FIX(0.491367823));      /* c9 */
 800e6ba:	f640 76b9 	movw	r6, #4025	@ 0xfb9
    tmp10 += tmp11 - tmp3;
 800e6be:	fb04 0005 	mla	r0, r4, r5, r0
	    MULTIPLY(tmp4 + tmp6, FIX(0.491367823));      /* c9 */
 800e6c2:	eb02 040c 	add.w	r4, r2, ip
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(0.782007410)) +     /* c5 */
 800e6c6:	eb09 0501 	add.w	r5, r9, r1
	    MULTIPLY(tmp4 + tmp6, FIX(0.491367823));      /* c9 */
 800e6ca:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(tmp0 + tmp2, FIX(0.782007410)) +     /* c5 */
 800e6cc:	f641 1606 	movw	r6, #6406	@ 0x1906
 800e6d0:	fb06 4405 	mla	r4, r6, r5, r4
    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(1.550341076)) /* c3+c5-c13 */
 800e6d4:	4e22      	ldr	r6, [pc, #136]	@ (800e760 <jpeg_fdct_7x14+0x35c>)
 800e6d6:	1905      	adds	r5, r0, r4
 800e6d8:	fb06 5101 	mla	r1, r6, r1, r5
 800e6dc:	f241 7568 	movw	r5, #5992	@ 0x1768
 800e6e0:	fb05 1102 	mla	r1, r5, r2, r1
	      + MULTIPLY(tmp4, FIX(0.731428202)),         /* c1+c11-c9 */
	      CONST_BITS+PASS1_BITS);
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(0.871740478)) +     /* c3 */
 800e6e4:	9a01      	ldr	r2, [sp, #4]
	    MULTIPLY(tmp5 - tmp6, FIX(0.305035186));      /* c11 */
 800e6e6:	f640 15c3 	movw	r5, #2499	@ 0x9c3
      DESCALE(tmp10 + tmp11 - MULTIPLY(tmp2, FIX(1.550341076)) /* c3+c5-c13 */
 800e6ea:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
 800e6ee:	13c9      	asrs	r1, r1, #15
    dataptr[DCTSIZE*5] = (DCTELEM)
 800e6f0:	f8c3 10a0 	str.w	r1, [r3, #160]	@ 0xa0
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(0.871740478)) +     /* c3 */
 800e6f4:	eb09 0102 	add.w	r1, r9, r2
	    MULTIPLY(tmp5 - tmp6, FIX(0.305035186));      /* c11 */
 800e6f8:	9a02      	ldr	r2, [sp, #8]
 800e6fa:	eba2 020c 	sub.w	r2, r2, ip
 800e6fe:	436a      	muls	r2, r5
    tmp12 = MULTIPLY(tmp0 + tmp1, FIX(0.871740478)) +     /* c3 */
 800e700:	f641 35e5 	movw	r5, #7141	@ 0x1be5
 800e704:	fb05 2201 	mla	r2, r5, r1, r2
    dataptr[DCTSIZE*3] = (DCTELEM)
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 800e708:	9901      	ldr	r1, [sp, #4]
 800e70a:	4d16      	ldr	r5, [pc, #88]	@ (800e764 <jpeg_fdct_7x14+0x360>)
	      - MULTIPLY(tmp5, FIX(2.004803435)),         /* c1+c5+c11 */
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(tmp11 + tmp12 + tmp3
 800e70c:	4414      	add	r4, r2
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 800e70e:	4410      	add	r0, r2
      DESCALE(tmp11 + tmp12 + tmp3
 800e710:	4a15      	ldr	r2, [pc, #84]	@ (800e768 <jpeg_fdct_7x14+0x364>)
 800e712:	443c      	add	r4, r7
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 800e714:	fb05 0001 	mla	r0, r5, r1, r0
 800e718:	9902      	ldr	r1, [sp, #8]
      DESCALE(tmp11 + tmp12 + tmp3
 800e71a:	fb02 4409 	mla	r4, r2, r9, r4
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 800e71e:	4d13      	ldr	r5, [pc, #76]	@ (800e76c <jpeg_fdct_7x14+0x368>)
      DESCALE(tmp11 + tmp12 + tmp3
 800e720:	4a13      	ldr	r2, [pc, #76]	@ (800e770 <jpeg_fdct_7x14+0x36c>)
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 800e722:	fb05 0001 	mla	r0, r5, r1, r0
      DESCALE(tmp11 + tmp12 + tmp3
 800e726:	fb02 440c 	mla	r4, r2, ip, r4
  for (ctr = 0; ctr < 7; ctr++) {
 800e72a:	9a07      	ldr	r2, [sp, #28]
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 800e72c:	f500 4080 	add.w	r0, r0, #16384	@ 0x4000
      DESCALE(tmp11 + tmp12 + tmp3
 800e730:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
  for (ctr = 0; ctr < 7; ctr++) {
 800e734:	429a      	cmp	r2, r3
      DESCALE(tmp10 + tmp12 - MULTIPLY(tmp1, FIX(0.276965844)) /* c3-c9-c13 */
 800e736:	ea4f 30e0 	mov.w	r0, r0, asr #15
      DESCALE(tmp11 + tmp12 + tmp3
 800e73a:	ea4f 34e4 	mov.w	r4, r4, asr #15
    dataptr[DCTSIZE*3] = (DCTELEM)
 800e73e:	6618      	str	r0, [r3, #96]	@ 0x60
    dataptr[DCTSIZE*1] = (DCTELEM)
 800e740:	621c      	str	r4, [r3, #32]
  for (ctr = 0; ctr < 7; ctr++) {
 800e742:	f47f af0b 	bne.w	800e55c <jpeg_fdct_7x14+0x158>
	      CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
    wsptr++;			/* advance pointer to next column */
  }
}
 800e746:	b039      	add	sp, #228	@ 0xe4
 800e748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e74c:	ffffd3e1 	.word	0xffffd3e1
 800e750:	ffffed93 	.word	0xffffed93
 800e754:	ffffdc12 	.word	0xffffdc12
 800e758:	ffffe330 	.word	0xffffe330
 800e75c:	fffffcb1 	.word	0xfffffcb1
 800e760:	ffffce64 	.word	0xffffce64
 800e764:	fffff723 	.word	0xfffff723
 800e768:	ffffe873 	.word	0xffffe873
 800e76c:	ffffbfd9 	.word	0xffffbfd9
 800e770:	fffffd59 	.word	0xfffffd59

0800e774 <jpeg_fdct_6x12>:
 * 6-point FDCT in pass 1 (rows), 12-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_6x12 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800e774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e778:	b0a5      	sub	sp, #148	@ 0x94
 800e77a:	4680      	mov	r8, r0
 800e77c:	4691      	mov	r9, r2
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800e77e:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 800e782:	9101      	str	r1, [sp, #4]
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800e784:	2100      	movs	r1, #0
 800e786:	f001 f993 	bl	800fab0 <memset>
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* 6-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/12). */

  dataptr = data;
 800e78a:	4646      	mov	r6, r8
  ctr = 0;
 800e78c:	2000      	movs	r0, #0
  for (;;) {
    elemptr = sample_data[ctr] + start_col;
 800e78e:	9b01      	ldr	r3, [sp, #4]
 800e790:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]

    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << PASS1_BITS));
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << PASS1_BITS);
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << PASS1_BITS));

    ctr++;
 800e794:	3001      	adds	r0, #1
    elemptr = sample_data[ctr] + start_col;
 800e796:	eb02 0309 	add.w	r3, r2, r9
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[5]);
 800e79a:	f812 1009 	ldrb.w	r1, [r2, r9]

    if (ctr != DCTSIZE) {
 800e79e:	2808      	cmp	r0, #8
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[3]);
 800e7a0:	f893 e002 	ldrb.w	lr, [r3, #2]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[5]);
 800e7a4:	f893 b005 	ldrb.w	fp, [r3, #5]
    tmp11 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[4]);
 800e7a8:	f893 a001 	ldrb.w	sl, [r3, #1]
 800e7ac:	791f      	ldrb	r7, [r3, #4]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[5]);
 800e7ae:	eb01 050b 	add.w	r5, r1, fp
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[3]);
 800e7b2:	78db      	ldrb	r3, [r3, #3]
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[5]);
 800e7b4:	eba1 010b 	sub.w	r1, r1, fp
    tmp11 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[4]);
 800e7b8:	eb0a 0207 	add.w	r2, sl, r7
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[4]);
 800e7bc:	ebaa 0707 	sub.w	r7, sl, r7
    tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[3]);
 800e7c0:	eb0e 0c03 	add.w	ip, lr, r3
    tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[3]);
 800e7c4:	ebae 0303 	sub.w	r3, lr, r3
    tmp11 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[4]);
 800e7c8:	9200      	str	r2, [sp, #0]
    tmp10 = tmp0 + tmp2;
 800e7ca:	eb05 040c 	add.w	r4, r5, ip
    tmp12 = tmp0 - tmp2;
 800e7ce:	eba5 050c 	sub.w	r5, r5, ip
      ((tmp10 + tmp11 - 6 * CENTERJSAMPLE) << PASS1_BITS);
 800e7d2:	eb02 0e04 	add.w	lr, r2, r4
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 800e7d6:	f242 7231 	movw	r2, #10033	@ 0x2731
 800e7da:	fb02 f505 	mul.w	r5, r2, r5
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 800e7de:	9a00      	ldr	r2, [sp, #0]
      ((tmp10 + tmp11 - 6 * CENTERJSAMPLE) << PASS1_BITS);
 800e7e0:	f5ae 7e40 	sub.w	lr, lr, #768	@ 0x300
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 800e7e4:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
 800e7e8:	f241 62a1 	movw	r2, #5793	@ 0x16a1
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 800e7ec:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
    dataptr[0] = (DCTELEM)
 800e7f0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 800e7f4:	fb02 f404 	mul.w	r4, r2, r4
    tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
 800e7f8:	eb01 0203 	add.w	r2, r1, r3
      DESCALE(MULTIPLY(tmp12, FIX(1.224744871)),                 /* c2 */
 800e7fc:	ea4f 25e5 	mov.w	r5, r5, asr #11
    dataptr[0] = (DCTELEM)
 800e800:	f8c6 e000 	str.w	lr, [r6]
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 800e804:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
    dataptr[2] = (DCTELEM)
 800e808:	60b5      	str	r5, [r6, #8]
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(0.707106781)), /* c4 */
 800e80a:	ea4f 24e4 	mov.w	r4, r4, asr #11
    dataptr[4] = (DCTELEM)
 800e80e:	6134      	str	r4, [r6, #16]
    tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
 800e810:	f640 34b6 	movw	r4, #2998	@ 0xbb6
 800e814:	fb04 f202 	mul.w	r2, r4, r2
    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << PASS1_BITS));
 800e818:	eb01 0407 	add.w	r4, r1, r7
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << PASS1_BITS);
 800e81c:	eba1 0107 	sub.w	r1, r1, r7
    tmp10 = DESCALE(MULTIPLY(tmp0 + tmp2, FIX(0.366025404)),     /* c5 */
 800e820:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << PASS1_BITS));
 800e824:	ea4f 0484 	mov.w	r4, r4, lsl #2
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << PASS1_BITS);
 800e828:	eba1 0103 	sub.w	r1, r1, r3
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << PASS1_BITS));
 800e82c:	eba3 0307 	sub.w	r3, r3, r7
    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << PASS1_BITS));
 800e830:	eb04 24e2 	add.w	r4, r4, r2, asr #11
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << PASS1_BITS));
 800e834:	ea4f 0383 	mov.w	r3, r3, lsl #2
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << PASS1_BITS);
 800e838:	ea4f 0181 	mov.w	r1, r1, lsl #2
    dataptr[1] = (DCTELEM) (tmp10 + ((tmp0 + tmp1) << PASS1_BITS));
 800e83c:	6074      	str	r4, [r6, #4]
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << PASS1_BITS));
 800e83e:	eb03 23e2 	add.w	r3, r3, r2, asr #11
    dataptr[3] = (DCTELEM) ((tmp0 - tmp1 - tmp2) << PASS1_BITS);
 800e842:	60f1      	str	r1, [r6, #12]
    dataptr[5] = (DCTELEM) (tmp10 + ((tmp2 - tmp1) << PASS1_BITS));
 800e844:	6173      	str	r3, [r6, #20]
    if (ctr != DCTSIZE) {
 800e846:	d003      	beq.n	800e850 <jpeg_fdct_6x12+0xdc>
      if (ctr == 12)
 800e848:	280c      	cmp	r0, #12
 800e84a:	d003      	beq.n	800e854 <jpeg_fdct_6x12+0xe0>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 800e84c:	3620      	adds	r6, #32
 800e84e:	e79e      	b.n	800e78e <jpeg_fdct_6x12+0x1a>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 800e850:	ae04      	add	r6, sp, #16
 800e852:	e79c      	b.n	800e78e <jpeg_fdct_6x12+0x1a>
 800e854:	f108 0214 	add.w	r2, r8, #20
 800e858:	f1a8 0304 	sub.w	r3, r8, #4
   * fold into the constant multipliers:
   * 12-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/24) * 8/9.
   */

  dataptr = data;
  wsptr = workspace;
 800e85c:	f10d 0810 	add.w	r8, sp, #16
 800e860:	9203      	str	r2, [sp, #12]
  for (ctr = 0; ctr < 6; ctr++) {
    /* Even part */

    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*3];
 800e862:	f853 af04 	ldr.w	sl, [r3, #4]!
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*2];
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*1];
 800e866:	f8d8 5020 	ldr.w	r5, [r8, #32]
 800e86a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*3];
 800e86c:	f8d8 2060 	ldr.w	r2, [r8, #96]	@ 0x60
    tmp2 = dataptr[DCTSIZE*2] + wsptr[DCTSIZE*1];
 800e870:	eb04 0b05 	add.w	fp, r4, r5
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*2];
 800e874:	f8d8 7040 	ldr.w	r7, [r8, #64]	@ 0x40
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*0];
 800e878:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*3];
 800e87a:	eb0a 0102 	add.w	r1, sl, r2
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*0];
 800e87e:	f858 9b04 	ldr.w	r9, [r8], #4
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*3];
 800e882:	9200      	str	r2, [sp, #0]
    tmp3 = dataptr[DCTSIZE*3] + wsptr[DCTSIZE*0];
 800e884:	eb04 0609 	add.w	r6, r4, r9
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*7];
 800e888:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800e88c:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*2];
 800e890:	6a18      	ldr	r0, [r3, #32]

    tmp10 = tmp0 + tmp5;
    tmp13 = tmp0 - tmp5;
    tmp11 = tmp1 + tmp4;
    tmp14 = tmp1 - tmp4;
    tmp12 = tmp2 + tmp3;
 800e892:	eb0b 0e06 	add.w	lr, fp, r6
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*7];
 800e896:	4414      	add	r4, r2
    tmp5 = dataptr[DCTSIZE*5] + dataptr[DCTSIZE*6];
 800e898:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*2];
 800e89c:	4438      	add	r0, r7
    tmp15 = tmp2 - tmp3;
 800e89e:	ebab 0606 	sub.w	r6, fp, r6
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*7];
 800e8a2:	9401      	str	r4, [sp, #4]
    tmp5 = dataptr[DCTSIZE*5] + dataptr[DCTSIZE*6];
 800e8a4:	f8d3 40c0 	ldr.w	r4, [r3, #192]	@ 0xc0
 800e8a8:	eb02 0c04 	add.w	ip, r2, r4
    tmp13 = tmp0 - tmp5;
 800e8ac:	eba1 020c 	sub.w	r2, r1, ip
    tmp10 = tmp0 + tmp5;
 800e8b0:	eb01 040c 	add.w	r4, r1, ip

    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*3];
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*2];
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*1];
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*0];
    tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*7];
 800e8b4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
    tmp13 = tmp0 - tmp5;
 800e8b8:	9202      	str	r2, [sp, #8]
    tmp14 = tmp1 - tmp4;
 800e8ba:	9a01      	ldr	r2, [sp, #4]
 800e8bc:	eba0 0c02 	sub.w	ip, r0, r2
    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*3];
 800e8c0:	9a00      	ldr	r2, [sp, #0]
 800e8c2:	ebaa 0202 	sub.w	r2, sl, r2
 800e8c6:	9200      	str	r2, [sp, #0]
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*2];
 800e8c8:	6a1a      	ldr	r2, [r3, #32]
 800e8ca:	1bd7      	subs	r7, r2, r7
    tmp2 = dataptr[DCTSIZE*2] - wsptr[DCTSIZE*1];
 800e8cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e8ce:	1b55      	subs	r5, r2, r5
    tmp3 = dataptr[DCTSIZE*3] - wsptr[DCTSIZE*0];
 800e8d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e8d2:	eba2 0909 	sub.w	r9, r2, r9
    tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*7];
 800e8d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800e8da:	eba2 0a01 	sub.w	sl, r2, r1
    tmp5 = dataptr[DCTSIZE*5] - dataptr[DCTSIZE*6];
 800e8de:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800e8e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800e8e6:	eba2 0b01 	sub.w	fp, r2, r1
    tmp11 = tmp1 + tmp4;
 800e8ea:	9a01      	ldr	r2, [sp, #4]

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(0.888888889)), /* 8/9 */
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*6] = (DCTELEM)
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 800e8ec:	9902      	ldr	r1, [sp, #8]
    tmp11 = tmp1 + tmp4;
 800e8ee:	4410      	add	r0, r2
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(0.888888889)), /* 8/9 */
 800e8f0:	f641 4272 	movw	r2, #7282	@ 0x1c72
 800e8f4:	4420      	add	r0, r4
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
 800e8f6:	eba4 040e 	sub.w	r4, r4, lr
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(0.888888889)), /* 8/9 */
 800e8fa:	4470      	add	r0, lr

    tmp10 = MULTIPLY(tmp1 + tmp4, FIX(0.481063200));   /* c9 */
    tmp14 = tmp10 + MULTIPLY(tmp1, FIX(0.680326102));  /* c3-c9 */
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX(1.642452502));  /* c3+c9 */
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(0.997307603));   /* c5 */
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.765261039));   /* c7 */
 800e8fc:	f641 0e7d 	movw	lr, #6269	@ 0x187d
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(0.888888889)), /* 8/9 */
 800e900:	4350      	muls	r0, r2
 800e902:	f500 4080 	add.w	r0, r0, #16384	@ 0x4000
 800e906:	13c0      	asrs	r0, r0, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 800e908:	6018      	str	r0, [r3, #0]
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 800e90a:	eba1 000c 	sub.w	r0, r1, ip
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
 800e90e:	f242 21d6 	movw	r1, #8918	@ 0x22d6
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 800e912:	ebac 0c06 	sub.w	ip, ip, r6
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 800e916:	1b80      	subs	r0, r0, r6
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
 800e918:	434c      	muls	r4, r1
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 800e91a:	9902      	ldr	r1, [sp, #8]
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 800e91c:	4350      	muls	r0, r2
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 800e91e:	4431      	add	r1, r6
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
 800e920:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 800e924:	f500 4080 	add.w	r0, r0, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.088662108)),         /* c4 */
 800e928:	13e4      	asrs	r4, r4, #15
      DESCALE(MULTIPLY(tmp13 - tmp14 - tmp15, FIX(0.888888889)), /* 8/9 */
 800e92a:	13c0      	asrs	r0, r0, #15
    dataptr[DCTSIZE*4] = (DCTELEM)
 800e92c:	f8c3 4080 	str.w	r4, [r3, #128]	@ 0x80
    dataptr[DCTSIZE*6] = (DCTELEM)
 800e930:	f8c3 00c0 	str.w	r0, [r3, #192]	@ 0xc0
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 800e934:	f242 60db 	movw	r0, #9947	@ 0x26db
 800e938:	4341      	muls	r1, r0
    tmp10 = MULTIPLY(tmp1 + tmp4, FIX(0.481063200));   /* c9 */
 800e93a:	f640 7065 	movw	r0, #3941	@ 0xf65
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 800e93e:	fb02 110c 	mla	r1, r2, ip, r1
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX(1.642452502));  /* c3+c9 */
 800e942:	4a31      	ldr	r2, [pc, #196]	@ (800ea08 <jpeg_fdct_6x12+0x294>)
      DESCALE(MULTIPLY(tmp14 - tmp15, FIX(0.888888889)) +        /* 8/9 */
 800e944:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
 800e948:	13c9      	asrs	r1, r1, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 800e94a:	6419      	str	r1, [r3, #64]	@ 0x40
    tmp10 = MULTIPLY(tmp1 + tmp4, FIX(0.481063200));   /* c9 */
 800e94c:	eb07 010a 	add.w	r1, r7, sl
 800e950:	4341      	muls	r1, r0
    tmp14 = tmp10 + MULTIPLY(tmp1, FIX(0.680326102));  /* c3-c9 */
 800e952:	f241 50c5 	movw	r0, #5573	@ 0x15c5
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX(1.642452502));  /* c3+c9 */
 800e956:	fb02 120a 	mla	r2, r2, sl, r1
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.516244403)) /* c5+c7-c1 */
 800e95a:	f44f 6aa8 	mov.w	sl, #1344	@ 0x540
    tmp14 = tmp10 + MULTIPLY(tmp1, FIX(0.680326102));  /* c3-c9 */
 800e95e:	fb00 1707 	mla	r7, r0, r7, r1
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(0.997307603));   /* c5 */
 800e962:	f641 70ea 	movw	r0, #8170	@ 0x1fea
    tmp15 = tmp10 - MULTIPLY(tmp4, FIX(1.642452502));  /* c3+c9 */
 800e966:	9201      	str	r2, [sp, #4]
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(0.997307603));   /* c5 */
 800e968:	9a00      	ldr	r2, [sp, #0]
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.516244403)) /* c5+c7-c1 */
 800e96a:	9900      	ldr	r1, [sp, #0]
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(0.997307603));   /* c5 */
 800e96c:	eb02 0c05 	add.w	ip, r2, r5
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.765261039));   /* c7 */
 800e970:	eb02 0609 	add.w	r6, r2, r9
	    + MULTIPLY(tmp5, FIX(0.164081699));        /* c11 */
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.164081699)); /* -c11 */
 800e974:	4a25      	ldr	r2, [pc, #148]	@ (800ea0c <jpeg_fdct_6x12+0x298>)
    tmp12 = MULTIPLY(tmp0 + tmp2, FIX(0.997307603));   /* c5 */
 800e976:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.164081699)); /* -c11 */
 800e97a:	eb05 0009 	add.w	r0, r5, r9
    tmp13 = MULTIPLY(tmp0 + tmp3, FIX(0.765261039));   /* c7 */
 800e97e:	fb0e f606 	mul.w	r6, lr, r6
    tmp11 = MULTIPLY(tmp2 + tmp3, - FIX(0.164081699)); /* -c11 */
 800e982:	4350      	muls	r0, r2
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.516244403)) /* c5+c7-c1 */
 800e984:	f6a2 3245 	subw	r2, r2, #2885	@ 0xb45
 800e988:	eb0c 0406 	add.w	r4, ip, r6
 800e98c:	443c      	add	r4, r7
 800e98e:	fb02 4401 	mla	r4, r2, r1, r4
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.079550144)) /* c1+c5-c11 */
	    + MULTIPLY(tmp5, FIX(0.765261039));        /* c7 */
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.645144899)) /* c1+c11-c7 */
	    - MULTIPLY(tmp5, FIX(0.997307603));        /* c5 */
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.161389302)) /* c3 */
 800e992:	eba1 0209 	sub.w	r2, r1, r9
 800e996:	9901      	ldr	r1, [sp, #4]
    tmp10 = tmp12 + tmp13 + tmp14 - MULTIPLY(tmp0, FIX(0.516244403)) /* c5+c7-c1 */
 800e998:	fb0a 440b 	mla	r4, sl, fp, r4
	    - MULTIPLY(tmp2 + tmp5, FIX(0.481063200)); /* c9 */

    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp10, CONST_BITS+PASS1_BITS);
 800e99c:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 800e9a0:	13e4      	asrs	r4, r4, #15
 800e9a2:	621c      	str	r4, [r3, #32]
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.161389302)) /* c3 */
 800e9a4:	f242 542a 	movw	r4, #9514	@ 0x252a
 800e9a8:	fb04 1202 	mla	r2, r4, r2, r1
 800e9ac:	4918      	ldr	r1, [pc, #96]	@ (800ea10 <jpeg_fdct_6x12+0x29c>)
	    - MULTIPLY(tmp2 + tmp5, FIX(0.481063200)); /* c9 */
 800e9ae:	eb05 040b 	add.w	r4, r5, fp
    tmp11 = tmp15 + MULTIPLY(tmp0 - tmp3, FIX(1.161389302)) /* c3 */
 800e9b2:	fb01 2204 	mla	r2, r1, r4, r2
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp11, CONST_BITS+PASS1_BITS);
 800e9b6:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800e9ba:	13d2      	asrs	r2, r2, #15
 800e9bc:	661a      	str	r2, [r3, #96]	@ 0x60
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.079550144)) /* c1+c5-c11 */
 800e9be:	9a01      	ldr	r2, [sp, #4]
 800e9c0:	1a81      	subs	r1, r0, r2
 800e9c2:	4a14      	ldr	r2, [pc, #80]	@ (800ea14 <jpeg_fdct_6x12+0x2a0>)
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.645144899)) /* c1+c11-c7 */
 800e9c4:	1bc0      	subs	r0, r0, r7
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.079550144)) /* c1+c5-c11 */
 800e9c6:	fb02 1105 	mla	r1, r2, r5, r1
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.645144899)) /* c1+c11-c7 */
 800e9ca:	f241 42a5 	movw	r2, #5285	@ 0x14a5
 800e9ce:	fb02 0009 	mla	r0, r2, r9, r0
	    - MULTIPLY(tmp5, FIX(0.997307603));        /* c5 */
 800e9d2:	4a11      	ldr	r2, [pc, #68]	@ (800ea18 <jpeg_fdct_6x12+0x2a4>)
	    + MULTIPLY(tmp5, FIX(0.765261039));        /* c7 */
 800e9d4:	fb0e 110b 	mla	r1, lr, fp, r1
	    - MULTIPLY(tmp5, FIX(0.997307603));        /* c5 */
 800e9d8:	fb02 000b 	mla	r0, r2, fp, r0
  for (ctr = 0; ctr < 6; ctr++) {
 800e9dc:	9a03      	ldr	r2, [sp, #12]
    tmp12 += tmp11 - tmp15 - MULTIPLY(tmp2, FIX(2.079550144)) /* c1+c5-c11 */
 800e9de:	4461      	add	r1, ip
    tmp13 += tmp11 - tmp14 + MULTIPLY(tmp3, FIX(0.645144899)) /* c1+c11-c7 */
 800e9e0:	4430      	add	r0, r6
  for (ctr = 0; ctr < 6; ctr++) {
 800e9e2:	429a      	cmp	r2, r3
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+PASS1_BITS);
 800e9e4:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+PASS1_BITS);
 800e9e8:	f500 4080 	add.w	r0, r0, #16384	@ 0x4000
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+PASS1_BITS);
 800e9ec:	ea4f 31e1 	mov.w	r1, r1, asr #15
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+PASS1_BITS);
 800e9f0:	ea4f 30e0 	mov.w	r0, r0, asr #15
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp12, CONST_BITS+PASS1_BITS);
 800e9f4:	f8c3 10a0 	str.w	r1, [r3, #160]	@ 0xa0
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp13, CONST_BITS+PASS1_BITS);
 800e9f8:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
  for (ctr = 0; ctr < 6; ctr++) {
 800e9fc:	f47f af31 	bne.w	800e862 <jpeg_fdct_6x12+0xee>

    dataptr++;			/* advance pointer to next column */
    wsptr++;			/* advance pointer to next column */
  }
}
 800ea00:	b025      	add	sp, #148	@ 0x94
 800ea02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea06:	bf00      	nop
 800ea08:	ffffcb71 	.word	0xffffcb71
 800ea0c:	fffffac0 	.word	0xfffffac0
 800ea10:	fffff09b 	.word	0xfffff09b
 800ea14:	ffffbd74 	.word	0xffffbd74
 800ea18:	ffffe016 	.word	0xffffe016

0800ea1c <jpeg_fdct_5x10>:
 * 5-point FDCT in pass 1 (rows), 10-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_5x10 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800ea1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea20:	4607      	mov	r7, r0
 800ea22:	b095      	sub	sp, #84	@ 0x54
 800ea24:	4689      	mov	r9, r1
 800ea26:	4690      	mov	r8, r2
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800ea28:	2100      	movs	r1, #0
 800ea2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ea2e:	f001 f83f 	bl	800fab0 <memset>
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* 5-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/10). */

  dataptr = data;
 800ea32:	463d      	mov	r5, r7
  ctr = 0;
 800ea34:	2000      	movs	r0, #0
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[3]);

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM)
      ((tmp10 + tmp2 - 5 * CENTERJSAMPLE) << PASS1_BITS);
    tmp11 = MULTIPLY(tmp11, FIX(0.790569415));          /* (c2+c4)/2 */
 800ea36:	f641 1b4c 	movw	fp, #6476	@ 0x194c
    elemptr = sample_data[ctr] + start_col;
 800ea3a:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
	      CONST_BITS-PASS1_BITS);
    dataptr[3] = (DCTELEM)
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.176250899)), /* c1+c3 */
	      CONST_BITS-PASS1_BITS);

    ctr++;
 800ea3e:	3001      	adds	r0, #1
    elemptr = sample_data[ctr] + start_col;
 800ea40:	eb03 0208 	add.w	r2, r3, r8
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[4]);
 800ea44:	f813 e008 	ldrb.w	lr, [r3, r8]

    if (ctr != DCTSIZE) {
 800ea48:	2808      	cmp	r0, #8
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[3]);
 800ea4a:	7851      	ldrb	r1, [r2, #1]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[4]);
 800ea4c:	7914      	ldrb	r4, [r2, #4]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[3]);
 800ea4e:	f892 c003 	ldrb.w	ip, [r2, #3]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[4]);
 800ea52:	eb0e 0304 	add.w	r3, lr, r4
    tmp2 = GETJSAMPLE(elemptr[2]);
 800ea56:	7892      	ldrb	r2, [r2, #2]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[3]);
 800ea58:	eb01 0a0c 	add.w	sl, r1, ip
    tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[3]);
 800ea5c:	eba1 0c0c 	sub.w	ip, r1, ip
    tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[4]);
 800ea60:	ebae 0404 	sub.w	r4, lr, r4
    tmp10 = tmp0 + tmp1;
 800ea64:	eb03 060a 	add.w	r6, r3, sl
    tmp11 = tmp0 - tmp1;
 800ea68:	eba3 030a 	sub.w	r3, r3, sl
      ((tmp10 + tmp2 - 5 * CENTERJSAMPLE) << PASS1_BITS);
 800ea6c:	eb02 0106 	add.w	r1, r2, r6
    tmp10 -= tmp2 << 2;
 800ea70:	eba6 0682 	sub.w	r6, r6, r2, lsl #2
    tmp10 = MULTIPLY(tmp10, FIX(0.353553391));          /* (c2-c4)/2 */
 800ea74:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
    tmp11 = MULTIPLY(tmp11, FIX(0.790569415));          /* (c2+c4)/2 */
 800ea78:	fb0b f303 	mul.w	r3, fp, r3
      ((tmp10 + tmp2 - 5 * CENTERJSAMPLE) << PASS1_BITS);
 800ea7c:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
    tmp10 = MULTIPLY(tmp10, FIX(0.353553391));          /* (c2-c4)/2 */
 800ea80:	fb02 f606 	mul.w	r6, r2, r6
    dataptr[0] = (DCTELEM)
 800ea84:	ea4f 0181 	mov.w	r1, r1, lsl #2
    dataptr[2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS-PASS1_BITS);
 800ea88:	eb03 0206 	add.w	r2, r3, r6
    dataptr[4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS-PASS1_BITS);
 800ea8c:	eba3 0306 	sub.w	r3, r3, r6
    dataptr[0] = (DCTELEM)
 800ea90:	6029      	str	r1, [r5, #0]
    dataptr[2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS-PASS1_BITS);
 800ea92:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
    dataptr[4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS-PASS1_BITS);
 800ea96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
    dataptr[2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS-PASS1_BITS);
 800ea9a:	ea4f 22e2 	mov.w	r2, r2, asr #11
    dataptr[4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS-PASS1_BITS);
 800ea9e:	ea4f 23e3 	mov.w	r3, r3, asr #11
    dataptr[2] = (DCTELEM) DESCALE(tmp11 + tmp10, CONST_BITS-PASS1_BITS);
 800eaa2:	60aa      	str	r2, [r5, #8]
    tmp10 = MULTIPLY(tmp0 + tmp1, FIX(0.831253876));    /* c3 */
 800eaa4:	f641 229a 	movw	r2, #6810	@ 0x1a9a
    dataptr[4] = (DCTELEM) DESCALE(tmp11 - tmp10, CONST_BITS-PASS1_BITS);
 800eaa8:	612b      	str	r3, [r5, #16]
    tmp10 = MULTIPLY(tmp0 + tmp1, FIX(0.831253876));    /* c3 */
 800eaaa:	eb04 030c 	add.w	r3, r4, ip
 800eaae:	fb02 f303 	mul.w	r3, r2, r3
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.513743148)), /* c1-c3 */
 800eab2:	f241 0271 	movw	r2, #4209	@ 0x1071
 800eab6:	fb02 3404 	mla	r4, r2, r4, r3
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.176250899)), /* c1+c3 */
 800eaba:	4a62      	ldr	r2, [pc, #392]	@ (800ec44 <jpeg_fdct_5x10+0x228>)
 800eabc:	fb02 330c 	mla	r3, r2, ip, r3
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.513743148)), /* c1-c3 */
 800eac0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.176250899)), /* c1+c3 */
 800eac4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
      DESCALE(tmp10 + MULTIPLY(tmp0, FIX(0.513743148)), /* c1-c3 */
 800eac8:	ea4f 24e4 	mov.w	r4, r4, asr #11
      DESCALE(tmp10 - MULTIPLY(tmp1, FIX(2.176250899)), /* c1+c3 */
 800eacc:	ea4f 23e3 	mov.w	r3, r3, asr #11
    dataptr[1] = (DCTELEM)
 800ead0:	606c      	str	r4, [r5, #4]
    dataptr[3] = (DCTELEM)
 800ead2:	60eb      	str	r3, [r5, #12]
    if (ctr != DCTSIZE) {
 800ead4:	d003      	beq.n	800eade <jpeg_fdct_5x10+0xc2>
      if (ctr == 10)
 800ead6:	280a      	cmp	r0, #10
 800ead8:	d003      	beq.n	800eae2 <jpeg_fdct_5x10+0xc6>
	break;			/* Done. */
      dataptr += DCTSIZE;	/* advance pointer to next row */
 800eada:	3520      	adds	r5, #32
 800eadc:	e7ad      	b.n	800ea3a <jpeg_fdct_5x10+0x1e>
    } else
      dataptr = workspace;	/* switch pointer to extended workspace */
 800eade:	ad04      	add	r5, sp, #16
 800eae0:	e7ab      	b.n	800ea3a <jpeg_fdct_5x10+0x1e>
 800eae2:	f107 0210 	add.w	r2, r7, #16
 800eae6:	1f3b      	subs	r3, r7, #4
   * fold into the constant multipliers:
   * 10-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/20) * 32/25.
   */

  dataptr = data;
  wsptr = workspace;
 800eae8:	f10d 0b10 	add.w	fp, sp, #16
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*7];
    tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*6];
    tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*5];

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(1.28)), /* 32/25 */
 800eaec:	f642 08f6 	movw	r8, #10486	@ 0x28f6
 800eaf0:	9203      	str	r2, [sp, #12]
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*1];
 800eaf2:	f853 5f04 	ldr.w	r5, [r3, #4]!
 800eaf6:	f8db a020 	ldr.w	sl, [fp, #32]
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*0];
 800eafa:	6a19      	ldr	r1, [r3, #32]
 800eafc:	f85b 9b04 	ldr.w	r9, [fp], #4
    tmp0 = dataptr[DCTSIZE*0] + wsptr[DCTSIZE*1];
 800eb00:	eb05 020a 	add.w	r2, r5, sl
    tmp12 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*7];
 800eb04:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
    tmp0 = dataptr[DCTSIZE*0] - wsptr[DCTSIZE*1];
 800eb08:	eba5 050a 	sub.w	r5, r5, sl
    tmp1 = dataptr[DCTSIZE*1] + wsptr[DCTSIZE*0];
 800eb0c:	eb01 0609 	add.w	r6, r1, r9
    tmp12 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*7];
 800eb10:	6c19      	ldr	r1, [r3, #64]	@ 0x40
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*5];
 800eb12:	f8d3 e080 	ldr.w	lr, [r3, #128]	@ 0x80
    tmp12 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*7];
 800eb16:	eb01 0c00 	add.w	ip, r1, r0
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*6];
 800eb1a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*7];
 800eb1e:	f8d3 40e0 	ldr.w	r4, [r3, #224]	@ 0xe0
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*6];
 800eb22:	9101      	str	r1, [sp, #4]
 800eb24:	9801      	ldr	r0, [sp, #4]
 800eb26:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800eb28:	4401      	add	r1, r0
 800eb2a:	4608      	mov	r0, r1
    tmp4 = dataptr[DCTSIZE*4] + dataptr[DCTSIZE*5];
 800eb2c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800eb30:	9102      	str	r1, [sp, #8]
 800eb32:	4471      	add	r1, lr
    tmp10 = tmp0 + tmp4;
 800eb34:	1857      	adds	r7, r2, r1
    tmp13 = tmp0 - tmp4;
 800eb36:	1a51      	subs	r1, r2, r1
    tmp11 = tmp1 + tmp3;
 800eb38:	1832      	adds	r2, r6, r0
    tmp14 = tmp1 - tmp3;
 800eb3a:	1a36      	subs	r6, r6, r0
    tmp1 = dataptr[DCTSIZE*1] - wsptr[DCTSIZE*0];
 800eb3c:	6a18      	ldr	r0, [r3, #32]
 800eb3e:	eba0 0909 	sub.w	r9, r0, r9
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*7];
 800eb42:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800eb44:	eba0 0a04 	sub.w	sl, r0, r4
    tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*6];
 800eb48:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 800eb4a:	9c01      	ldr	r4, [sp, #4]
 800eb4c:	1b04      	subs	r4, r0, r4
    tmp4 = dataptr[DCTSIZE*4] - dataptr[DCTSIZE*5];
 800eb4e:	9802      	ldr	r0, [sp, #8]
 800eb50:	ebae 0e00 	sub.w	lr, lr, r0
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(1.28)), /* 32/25 */
 800eb54:	18b8      	adds	r0, r7, r2
	      CONST_BITS+PASS1_BITS);
    tmp12 += tmp12;
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.464477191)) - /* c4 */
 800eb56:	eba2 024c 	sub.w	r2, r2, ip, lsl #1
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(1.28)), /* 32/25 */
 800eb5a:	4460      	add	r0, ip
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.464477191)) - /* c4 */
 800eb5c:	eba7 074c 	sub.w	r7, r7, ip, lsl #1
      DESCALE(MULTIPLY(tmp10 + tmp11 + tmp12, FIX(1.28)), /* 32/25 */
 800eb60:	fb08 f000 	mul.w	r0, r8, r0
 800eb64:	f500 4080 	add.w	r0, r0, #16384	@ 0x4000
 800eb68:	13c0      	asrs	r0, r0, #15
    dataptr[DCTSIZE*0] = (DCTELEM)
 800eb6a:	6018      	str	r0, [r3, #0]
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.464477191)) - /* c4 */
 800eb6c:	4836      	ldr	r0, [pc, #216]	@ (800ec48 <jpeg_fdct_5x10+0x22c>)
 800eb6e:	4342      	muls	r2, r0
 800eb70:	f642 60dd 	movw	r0, #11997	@ 0x2edd
 800eb74:	fb00 2207 	mla	r2, r0, r7, r2
	      MULTIPLY(tmp11 - tmp12, FIX(0.559380511)),  /* c8 */
	      CONST_BITS+PASS1_BITS);
    tmp10 = MULTIPLY(tmp13 + tmp14, FIX(1.064004961));    /* c6 */
 800eb78:	f242 200c 	movw	r0, #8716	@ 0x220c
      DESCALE(MULTIPLY(tmp10 - tmp12, FIX(1.464477191)) - /* c4 */
 800eb7c:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800eb80:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*4] = (DCTELEM)
 800eb82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    tmp10 = MULTIPLY(tmp13 + tmp14, FIX(1.064004961));    /* c6 */
 800eb86:	198a      	adds	r2, r1, r6
 800eb88:	4342      	muls	r2, r0
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.657591230)),  /* c2-c6 */
 800eb8a:	f241 500b 	movw	r0, #5387	@ 0x150b
 800eb8e:	fb00 2101 	mla	r1, r0, r1, r2
    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp2, FIX(1.28)),  /* 32/25 */
	      CONST_BITS+PASS1_BITS);
    tmp2 = MULTIPLY(tmp2, FIX(1.28));                     /* 32/25 */
    dataptr[DCTSIZE*1] = (DCTELEM)
      DESCALE(MULTIPLY(tmp0, FIX(1.787906876)) +          /* c1 */
 800eb92:	f643 1037 	movw	r0, #14647	@ 0x3937
      DESCALE(tmp10 + MULTIPLY(tmp13, FIX(0.657591230)),  /* c2-c6 */
 800eb96:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
 800eb9a:	13c9      	asrs	r1, r1, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 800eb9c:	6419      	str	r1, [r3, #64]	@ 0x40
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.785601151)),  /* c2+c6 */
 800eb9e:	492b      	ldr	r1, [pc, #172]	@ (800ec4c <jpeg_fdct_5x10+0x230>)
 800eba0:	fb01 2206 	mla	r2, r1, r6, r2
    tmp11 = tmp1 - tmp3;
 800eba4:	eba9 0604 	sub.w	r6, r9, r4
    tmp10 = tmp0 + tmp4;
 800eba8:	eb05 010e 	add.w	r1, r5, lr
      DESCALE(tmp10 - MULTIPLY(tmp14, FIX(2.785601151)),  /* c2+c6 */
 800ebac:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800ebb0:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*6] = (DCTELEM)
 800ebb2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp2, FIX(1.28)),  /* 32/25 */
 800ebb6:	1b8a      	subs	r2, r1, r6
	      MULTIPLY(tmp3, FIX(0.821810588)) +          /* c7 */
	      MULTIPLY(tmp4, FIX(0.283176630)),           /* c9 */
	      CONST_BITS+PASS1_BITS);
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(1.217352341)) -     /* (c3+c7)/2 */
	    MULTIPLY(tmp1 + tmp3, FIX(0.752365123));      /* (c1-c9)/2 */
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.395541753)) +   /* (c3-c7)/2 */
 800ebb8:	4431      	add	r1, r6
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp2, FIX(1.28)),  /* 32/25 */
 800ebba:	eba2 020a 	sub.w	r2, r2, sl
    tmp2 = MULTIPLY(tmp2, FIX(1.28));                     /* 32/25 */
 800ebbe:	fb08 fa0a 	mul.w	sl, r8, sl
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp2, FIX(1.28)),  /* 32/25 */
 800ebc2:	fb08 f202 	mul.w	r2, r8, r2
 800ebc6:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800ebca:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*5] = (DCTELEM)
 800ebcc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      DESCALE(MULTIPLY(tmp0, FIX(1.787906876)) +          /* c1 */
 800ebd0:	f243 329d 	movw	r2, #13213	@ 0x339d
 800ebd4:	fb02 f209 	mul.w	r2, r2, r9
	    MULTIPLY(tmp1 + tmp3, FIX(0.752365123));      /* (c1-c9)/2 */
 800ebd8:	44a1      	add	r9, r4
      DESCALE(MULTIPLY(tmp0, FIX(1.787906876)) +          /* c1 */
 800ebda:	fb00 2205 	mla	r2, r0, r5, r2
 800ebde:	f641 204c 	movw	r0, #6732	@ 0x1a4c
 800ebe2:	4452      	add	r2, sl
 800ebe4:	fb00 2204 	mla	r2, r0, r4, r2
 800ebe8:	f44f 6011 	mov.w	r0, #2320	@ 0x910
 800ebec:	fb00 220e 	mla	r2, r0, lr, r2
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(1.217352341)) -     /* (c3+c7)/2 */
 800ebf0:	eba5 000e 	sub.w	r0, r5, lr
      DESCALE(MULTIPLY(tmp0, FIX(1.787906876)) +          /* c1 */
 800ebf4:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800ebf8:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 800ebfa:	621a      	str	r2, [r3, #32]
	    MULTIPLY(tmp1 + tmp3, FIX(0.752365123));      /* (c1-c9)/2 */
 800ebfc:	4a14      	ldr	r2, [pc, #80]	@ (800ec50 <jpeg_fdct_5x10+0x234>)
 800ebfe:	fb02 f909 	mul.w	r9, r2, r9
    tmp12 = MULTIPLY(tmp0 - tmp4, FIX(1.217352341)) -     /* (c3+c7)/2 */
 800ec02:	f242 62f5 	movw	r2, #9973	@ 0x26f5
 800ec06:	fb02 9900 	mla	r9, r2, r0, r9
	    MULTIPLY(tmp11, FIX(0.64)) - tmp2;            /* 16/25 */
 800ec0a:	f241 427b 	movw	r2, #5243	@ 0x147b
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.395541753)) +   /* (c3-c7)/2 */
 800ec0e:	f640 40a8 	movw	r0, #3240	@ 0xca8
	    MULTIPLY(tmp11, FIX(0.64)) - tmp2;            /* 16/25 */
 800ec12:	4372      	muls	r2, r6
    tmp13 = MULTIPLY(tmp10 + tmp11, FIX(0.395541753)) +   /* (c3-c7)/2 */
 800ec14:	fb00 2201 	mla	r2, r0, r1, r2
 800ec18:	eba2 020a 	sub.w	r2, r2, sl
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS+PASS1_BITS);
 800ec1c:	eb09 0102 	add.w	r1, r9, r2
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS+PASS1_BITS);
 800ec20:	eba9 0902 	sub.w	r9, r9, r2
 800ec24:	f509 4280 	add.w	r2, r9, #16384	@ 0x4000
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS+PASS1_BITS);
 800ec28:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS+PASS1_BITS);
 800ec2c:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS+PASS1_BITS);
 800ec2e:	13c9      	asrs	r1, r1, #15
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp12 - tmp13, CONST_BITS+PASS1_BITS);
 800ec30:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  for (ctr = 0; ctr < 5; ctr++) {
 800ec34:	9a03      	ldr	r2, [sp, #12]
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp12 + tmp13, CONST_BITS+PASS1_BITS);
 800ec36:	6619      	str	r1, [r3, #96]	@ 0x60
  for (ctr = 0; ctr < 5; ctr++) {
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	f47f af5a 	bne.w	800eaf2 <jpeg_fdct_5x10+0xd6>

    dataptr++;			/* advance pointer to next column */
    wsptr++;			/* advance pointer to next column */
  }
}
 800ec3e:	b015      	add	sp, #84	@ 0x54
 800ec40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec44:	ffffba5c 	.word	0xffffba5c
 800ec48:	ffffee1a 	.word	0xffffee1a
 800ec4c:	ffffa6dc 	.word	0xffffa6dc
 800ec50:	ffffe7ed 	.word	0xffffe7ed

0800ec54 <jpeg_fdct_4x8>:
 * 4-point FDCT in pass 1 (rows), 8-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_4x8 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800ec54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec58:	4604      	mov	r4, r0
 800ec5a:	460f      	mov	r7, r1
 800ec5c:	4616      	mov	r6, r2
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800ec5e:	2100      	movs	r1, #0
 800ec60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ec64:	f104 0520 	add.w	r5, r4, #32
 800ec68:	f000 ff22 	bl	800fab0 <memset>
  /* furthermore, we scale the results by 2**PASS1_BITS. */
  /* We must also scale the output by 8/4 = 2, which we add here. */
  /* 4-point FDCT kernel, cK represents sqrt(2) * cos(K*pi/16). */

  dataptr = data;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800ec6c:	1f39      	subs	r1, r7, #4
 800ec6e:	f504 7290 	add.w	r2, r4, #288	@ 0x120
      ((tmp0 + tmp1 - 4 * CENTERJSAMPLE) << (PASS1_BITS+1));
    dataptr[2] = (DCTELEM) ((tmp0 - tmp1) << (PASS1_BITS+1));

    /* Odd part */

    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 800ec72:	f241 1e51 	movw	lr, #4433	@ 0x1151
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-2);

    dataptr[1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800ec76:	f641 0c7e 	movw	ip, #6270	@ 0x187e
		  CONST_BITS-PASS1_BITS-1);
    dataptr[3] = (DCTELEM)
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800ec7a:	4f5c      	ldr	r7, [pc, #368]	@ (800edec <jpeg_fdct_4x8+0x198>)
    elemptr = sample_data[ctr] + start_col;
 800ec7c:	f851 3f04 	ldr.w	r3, [r1, #4]!
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800ec80:	3520      	adds	r5, #32
    elemptr = sample_data[ctr] + start_col;
 800ec82:	eb03 0906 	add.w	r9, r3, r6
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[3]);
 800ec86:	5d98      	ldrb	r0, [r3, r6]
 800ec88:	f899 b003 	ldrb.w	fp, [r9, #3]
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[2]);
 800ec8c:	f899 8001 	ldrb.w	r8, [r9, #1]
 800ec90:	f899 9002 	ldrb.w	r9, [r9, #2]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[3]);
 800ec94:	eb00 030b 	add.w	r3, r0, fp
    tmp10 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[3]);
 800ec98:	eba0 000b 	sub.w	r0, r0, fp
    tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[2]);
 800ec9c:	eb08 0a09 	add.w	sl, r8, r9
    tmp11 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[2]);
 800eca0:	eba8 0809 	sub.w	r8, r8, r9
      ((tmp0 + tmp1 - 4 * CENTERJSAMPLE) << (PASS1_BITS+1));
 800eca4:	eb03 090a 	add.w	r9, r3, sl
    dataptr[2] = (DCTELEM) ((tmp0 - tmp1) << (PASS1_BITS+1));
 800eca8:	eba3 030a 	sub.w	r3, r3, sl
 800ecac:	00db      	lsls	r3, r3, #3
      ((tmp0 + tmp1 - 4 * CENTERJSAMPLE) << (PASS1_BITS+1));
 800ecae:	f5a9 7900 	sub.w	r9, r9, #512	@ 0x200
    dataptr[2] = (DCTELEM) ((tmp0 - tmp1) << (PASS1_BITS+1));
 800ecb2:	f845 3c38 	str.w	r3, [r5, #-56]
    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 800ecb6:	eb00 0308 	add.w	r3, r0, r8
    dataptr[0] = (DCTELEM)
 800ecba:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 800ecbe:	fb0e f303 	mul.w	r3, lr, r3
    dataptr[0] = (DCTELEM)
 800ecc2:	f845 9c40 	str.w	r9, [r5, #-64]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-2);
 800ecc6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800ecca:	fb0c 3000 	mla	r0, ip, r0, r3
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800ecce:	fb07 3308 	mla	r3, r7, r8, r3
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800ecd2:	1280      	asrs	r0, r0, #10
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800ecd4:	129b      	asrs	r3, r3, #10
    dataptr[1] = (DCTELEM)
 800ecd6:	f845 0c3c 	str.w	r0, [r5, #-60]
    dataptr[3] = (DCTELEM)
 800ecda:	f845 3c34 	str.w	r3, [r5, #-52]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800ecde:	42aa      	cmp	r2, r5
 800ece0:	d1cc      	bne.n	800ec7c <jpeg_fdct_4x8+0x28>
 800ece2:	f104 0810 	add.w	r8, r4, #16
    tmp13 = tmp1 + tmp3;
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS+PASS1_BITS-1);

    tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
 800ece6:	f243 090b 	movw	r9, #12299	@ 0x300b
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 800ecea:	f8d4 c060 	ldr.w	ip, [r4, #96]	@ 0x60
    dataptr[DCTSIZE*5] = (DCTELEM)
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*7] = (DCTELEM)
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 800ecee:	3404      	adds	r4, #4
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800ecf0:	f854 2c04 	ldr.w	r2, [r4, #-4]
 800ecf4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 800ecf8:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800ecfa:	f8d4 e03c 	ldr.w	lr, [r4, #60]	@ 0x3c
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 800ecfe:	18d1      	adds	r1, r2, r3
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 800ed00:	eb0c 0b05 	add.w	fp, ip, r5
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800ed04:	69e3      	ldr	r3, [r4, #28]
 800ed06:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
    tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
 800ed0a:	ebac 0505 	sub.w	r5, ip, r5
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800ed0e:	f8d4 609c 	ldr.w	r6, [r4, #156]	@ 0x9c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 800ed12:	181f      	adds	r7, r3, r0
    tmp10 = tmp0 + tmp3 + (ONE << (PASS1_BITS-1));
 800ed14:	eb01 000b 	add.w	r0, r1, fp
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 800ed18:	eb0e 0a06 	add.w	sl, lr, r6
    tmp12 = tmp0 - tmp3;
 800ed1c:	eba1 010b 	sub.w	r1, r1, fp
    tmp10 = tmp0 + tmp3 + (ONE << (PASS1_BITS-1));
 800ed20:	3002      	adds	r0, #2
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
 800ed22:	ebae 0606 	sub.w	r6, lr, r6
    tmp11 = tmp1 + tmp2;
 800ed26:	eb07 0b0a 	add.w	fp, r7, sl
    tmp12 = tmp0 - tmp3;
 800ed2a:	9101      	str	r1, [sp, #4]
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 800ed2c:	f8d4 10dc 	ldr.w	r1, [r4, #220]	@ 0xdc
    tmp13 = tmp1 - tmp2;
 800ed30:	eba7 070a 	sub.w	r7, r7, sl
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp10 + tmp11, PASS1_BITS);
 800ed34:	eb00 0c0b 	add.w	ip, r0, fp
    dataptr[DCTSIZE*4] = (DCTELEM) RIGHT_SHIFT(tmp10 - tmp11, PASS1_BITS);
 800ed38:	eba0 000b 	sub.w	r0, r0, fp
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 800ed3c:	1a52      	subs	r2, r2, r1
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 800ed3e:	f8d4 10bc 	ldr.w	r1, [r4, #188]	@ 0xbc
    dataptr[DCTSIZE*4] = (DCTELEM) RIGHT_SHIFT(tmp10 - tmp11, PASS1_BITS);
 800ed42:	1080      	asrs	r0, r0, #2
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 800ed44:	eba3 0a01 	sub.w	sl, r3, r1
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800ed48:	9b01      	ldr	r3, [sp, #4]
    dataptr[DCTSIZE*4] = (DCTELEM) RIGHT_SHIFT(tmp10 - tmp11, PASS1_BITS);
 800ed4a:	67e0      	str	r0, [r4, #124]	@ 0x7c
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800ed4c:	f241 1151 	movw	r1, #4433	@ 0x1151
 800ed50:	19d8      	adds	r0, r3, r7
      RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
 800ed52:	f641 037e 	movw	r3, #6270	@ 0x187e
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp10 + tmp11, PASS1_BITS);
 800ed56:	ea4f 0cac 	mov.w	ip, ip, asr #2
    tmp13 = tmp1 + tmp3;
 800ed5a:	eb0a 0e05 	add.w	lr, sl, r5
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 800ed5e:	4348      	muls	r0, r1
      RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
 800ed60:	9901      	ldr	r1, [sp, #4]
    dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp10 + tmp11, PASS1_BITS);
 800ed62:	f844 cc04 	str.w	ip, [r4, #-4]
    tmp12 = tmp0 + tmp2;
 800ed66:	eb02 0c06 	add.w	ip, r2, r6
    z1 += ONE << (CONST_BITS+PASS1_BITS-1);
 800ed6a:	f500 4080 	add.w	r0, r0, #16384	@ 0x4000
      RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
 800ed6e:	fb03 0101 	mla	r1, r3, r1, r0
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800ed72:	f242 53a1 	movw	r3, #9633	@ 0x25a1
      RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
 800ed76:	13c9      	asrs	r1, r1, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 800ed78:	63e1      	str	r1, [r4, #60]	@ 0x3c
      RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065), CONST_BITS+PASS1_BITS);
 800ed7a:	491c      	ldr	r1, [pc, #112]	@ (800edec <jpeg_fdct_4x8+0x198>)
 800ed7c:	fb01 0007 	mla	r0, r1, r7, r0
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800ed80:	eb0c 070e 	add.w	r7, ip, lr
    tmp10 = tmp0 + tmp3;
 800ed84:	1951      	adds	r1, r2, r5
      RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065), CONST_BITS+PASS1_BITS);
 800ed86:	13c0      	asrs	r0, r0, #15
    z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 800ed88:	435f      	muls	r7, r3
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 800ed8a:	4b19      	ldr	r3, [pc, #100]	@ (800edf0 <jpeg_fdct_4x8+0x19c>)
    dataptr[DCTSIZE*6] = (DCTELEM)
 800ed8c:	f8c4 00bc 	str.w	r0, [r4, #188]	@ 0xbc
    tmp11 = tmp1 + tmp2;
 800ed90:	eb0a 0006 	add.w	r0, sl, r6
    tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 800ed94:	4359      	muls	r1, r3
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 800ed96:	4b17      	ldr	r3, [pc, #92]	@ (800edf4 <jpeg_fdct_4x8+0x1a0>)
    z1 += ONE << (CONST_BITS+PASS1_BITS-1);
 800ed98:	f507 4780 	add.w	r7, r7, #16384	@ 0x4000
    tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 800ed9c:	4358      	muls	r0, r3
    tmp12 += z1;
 800ed9e:	4b16      	ldr	r3, [pc, #88]	@ (800edf8 <jpeg_fdct_4x8+0x1a4>)
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
 800eda0:	fb09 1202 	mla	r2, r9, r2, r1
    tmp12 += z1;
 800eda4:	fb03 7c0c 	mla	ip, r3, ip, r7
    tmp13 += z1;
 800eda8:	4b14      	ldr	r3, [pc, #80]	@ (800edfc <jpeg_fdct_4x8+0x1a8>)
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
 800edaa:	4462      	add	r2, ip
    tmp13 += z1;
 800edac:	fb03 770e 	mla	r7, r3, lr, r7
      RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
 800edb0:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 800edb2:	61e2      	str	r2, [r4, #28]
      RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
 800edb4:	f246 2254 	movw	r2, #25172	@ 0x6254
 800edb8:	fb02 030a 	mla	r3, r2, sl, r0
 800edbc:	443b      	add	r3, r7
 800edbe:	13db      	asrs	r3, r3, #15
    dataptr[DCTSIZE*3] = (DCTELEM)
 800edc0:	65e3      	str	r3, [r4, #92]	@ 0x5c
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
 800edc2:	f244 13b3 	movw	r3, #16819	@ 0x41b3
 800edc6:	fb03 0006 	mla	r0, r3, r6, r0
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);
 800edca:	f640 138e 	movw	r3, #2446	@ 0x98e
 800edce:	fb03 1105 	mla	r1, r3, r5, r1
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
 800edd2:	4460      	add	r0, ip
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);
 800edd4:	4439      	add	r1, r7
      RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
 800edd6:	13c0      	asrs	r0, r0, #15
      RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);
 800edd8:	13c9      	asrs	r1, r1, #15
    dataptr[DCTSIZE*5] = (DCTELEM)
 800edda:	f8c4 009c 	str.w	r0, [r4, #156]	@ 0x9c
    dataptr[DCTSIZE*7] = (DCTELEM)
 800edde:	f8c4 10dc 	str.w	r1, [r4, #220]	@ 0xdc
  for (ctr = 0; ctr < 4; ctr++) {
 800ede2:	4544      	cmp	r4, r8
 800ede4:	d181      	bne.n	800ecea <jpeg_fdct_4x8+0x96>
  }
}
 800ede6:	b003      	add	sp, #12
 800ede8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edec:	ffffc4df 	.word	0xffffc4df
 800edf0:	ffffe333 	.word	0xffffe333
 800edf4:	ffffadfd 	.word	0xffffadfd
 800edf8:	fffff384 	.word	0xfffff384
 800edfc:	ffffc13b 	.word	0xffffc13b

0800ee00 <jpeg_fdct_3x6>:
 * 3-point FDCT in pass 1 (rows), 6-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_3x6 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800ee00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee04:	4604      	mov	r4, r0
 800ee06:	460e      	mov	r6, r1
 800ee08:	4615      	mov	r5, r2
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800ee0a:	2100      	movs	r1, #0
 800ee0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
	      CONST_BITS-PASS1_BITS-1);

    /* Odd part */

    dataptr[1] = (DCTELEM)
      DESCALE(MULTIPLY(tmp2, FIX(1.224744871)),               /* c1 */
 800ee10:	f242 7731 	movw	r7, #10033	@ 0x2731
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800ee14:	f000 fe4c 	bl	800fab0 <memset>
  for (ctr = 0; ctr < 6; ctr++) {
 800ee18:	1f31      	subs	r1, r6, #4
 800ee1a:	f104 0220 	add.w	r2, r4, #32
 800ee1e:	f104 06e0 	add.w	r6, r4, #224	@ 0xe0
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
 800ee22:	f241 6ca1 	movw	ip, #5793	@ 0x16a1
    elemptr = sample_data[ctr] + start_col;
 800ee26:	f851 3f04 	ldr.w	r3, [r1, #4]!
  for (ctr = 0; ctr < 6; ctr++) {
 800ee2a:	3220      	adds	r2, #32
    elemptr = sample_data[ctr] + start_col;
 800ee2c:	eb03 0805 	add.w	r8, r3, r5
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[2]);
 800ee30:	5d5b      	ldrb	r3, [r3, r5]
 800ee32:	f898 e002 	ldrb.w	lr, [r8, #2]
    tmp1 = GETJSAMPLE(elemptr[1]);
 800ee36:	f898 9001 	ldrb.w	r9, [r8, #1]
    tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[2]);
 800ee3a:	eb03 000e 	add.w	r0, r3, lr
    tmp2 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[2]);
 800ee3e:	eba3 030e 	sub.w	r3, r3, lr
      ((tmp0 + tmp1 - 3 * CENTERJSAMPLE) << (PASS1_BITS+1));
 800ee42:	eb00 0809 	add.w	r8, r0, r9
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
 800ee46:	eba0 0049 	sub.w	r0, r0, r9, lsl #1
      DESCALE(MULTIPLY(tmp2, FIX(1.224744871)),               /* c1 */
 800ee4a:	437b      	muls	r3, r7
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
 800ee4c:	fb0c f000 	mul.w	r0, ip, r0
      ((tmp0 + tmp1 - 3 * CENTERJSAMPLE) << (PASS1_BITS+1));
 800ee50:	f5a8 78c0 	sub.w	r8, r8, #384	@ 0x180
      DESCALE(MULTIPLY(tmp2, FIX(1.224744871)),               /* c1 */
 800ee54:	f503 7300 	add.w	r3, r3, #512	@ 0x200
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
 800ee58:	f500 7000 	add.w	r0, r0, #512	@ 0x200
    dataptr[0] = (DCTELEM)
 800ee5c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
      DESCALE(MULTIPLY(tmp2, FIX(1.224744871)),               /* c1 */
 800ee60:	129b      	asrs	r3, r3, #10
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp1, FIX(0.707106781)), /* c2 */
 800ee62:	1280      	asrs	r0, r0, #10
    dataptr[0] = (DCTELEM)
 800ee64:	f842 8c40 	str.w	r8, [r2, #-64]
    dataptr[1] = (DCTELEM)
 800ee68:	f842 3c3c 	str.w	r3, [r2, #-60]
    dataptr[2] = (DCTELEM)
 800ee6c:	f842 0c38 	str.w	r0, [r2, #-56]
  for (ctr = 0; ctr < 6; ctr++) {
 800ee70:	4296      	cmp	r6, r2
 800ee72:	d1d8      	bne.n	800ee26 <jpeg_fdct_3x6+0x26>
 800ee74:	f104 080c 	add.w	r8, r4, #12
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*5];
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*4];
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*3];

    dataptr[DCTSIZE*0] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800ee78:	f643 05e4 	movw	r5, #14564	@ 0x38e4
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*2] = (DCTELEM)
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 800ee7c:	f244 5bad 	movw	fp, #17837	@ 0x45ad
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*4] = (DCTELEM)
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 800ee80:	f642 0a3a 	movw	sl, #10298	@ 0x283a
	      CONST_BITS+PASS1_BITS);

    /* Odd part */

    tmp10 = MULTIPLY(tmp0 + tmp2, FIX(0.650711829));             /* c5 */
 800ee84:	f241 49d3 	movw	r9, #5331	@ 0x14d3
    tmp11 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*4];
 800ee88:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
	      CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*5] = (DCTELEM)
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
	      CONST_BITS+PASS1_BITS);

    dataptr++;			/* advance pointer to next column */
 800ee8c:	3404      	adds	r4, #4
    tmp11 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*4];
 800ee8e:	69e2      	ldr	r2, [r4, #28]
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*5];
 800ee90:	f8d4 e09c 	ldr.w	lr, [r4, #156]	@ 0x9c
 800ee94:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp11 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*4];
 800ee98:	1816      	adds	r6, r2, r0
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*3];
 800ee9a:	f8d4 c05c 	ldr.w	ip, [r4, #92]	@ 0x5c
 800ee9e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*5];
 800eea0:	eb03 010e 	add.w	r1, r3, lr
    tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*5];
 800eea4:	eba3 030e 	sub.w	r3, r3, lr
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*3];
 800eea8:	eb02 070c 	add.w	r7, r2, ip
    tmp10 = tmp0 + tmp2;
 800eeac:	19ca      	adds	r2, r1, r7
 800eeae:	9201      	str	r2, [sp, #4]
    tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*4];
 800eeb0:	69e2      	ldr	r2, [r4, #28]
 800eeb2:	1a10      	subs	r0, r2, r0
    tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*3];
 800eeb4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800eeb6:	eba2 0c0c 	sub.w	ip, r2, ip
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800eeba:	19ca      	adds	r2, r1, r7
    tmp12 = tmp0 - tmp2;
 800eebc:	1bc9      	subs	r1, r1, r7
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800eebe:	eb06 0e02 	add.w	lr, r6, r2
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 800eec2:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 800eec6:	fb0b f101 	mul.w	r1, fp, r1
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 800eeca:	fb0a f202 	mul.w	r2, sl, r2
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 800eece:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800eed2:	fb05 fe0e 	mul.w	lr, r5, lr
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 800eed6:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp12, FIX(2.177324216)),                 /* c2 */
 800eeda:	13c9      	asrs	r1, r1, #15
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800eedc:	f50e 4e80 	add.w	lr, lr, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp10 - tmp11 - tmp11, FIX(1.257078722)), /* c4 */
 800eee0:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*2] = (DCTELEM)
 800eee2:	63e1      	str	r1, [r4, #60]	@ 0x3c
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 800eee4:	1819      	adds	r1, r3, r0
    dataptr[DCTSIZE*4] = (DCTELEM)
 800eee6:	67e2      	str	r2, [r4, #124]	@ 0x7c
    tmp10 = MULTIPLY(tmp0 + tmp2, FIX(0.650711829));             /* c5 */
 800eee8:	eb03 020c 	add.w	r2, r3, ip
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 800eeec:	1a1b      	subs	r3, r3, r0
      DESCALE(MULTIPLY(tmp10 + tmp11, FIX(1.777777778)),         /* 16/9 */
 800eeee:	ea4f 3eee 	mov.w	lr, lr, asr #15
    tmp10 = MULTIPLY(tmp0 + tmp2, FIX(0.650711829));             /* c5 */
 800eef2:	fb09 f202 	mul.w	r2, r9, r2
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 800eef6:	eba3 030c 	sub.w	r3, r3, ip
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 800eefa:	ebac 0c00 	sub.w	ip, ip, r0
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 800eefe:	fb05 2101 	mla	r1, r5, r1, r2
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 800ef02:	436b      	muls	r3, r5
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 800ef04:	fb05 220c 	mla	r2, r5, ip, r2
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 800ef08:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 800ef0c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
    dataptr[DCTSIZE*0] = (DCTELEM)
 800ef10:	f844 ec04 	str.w	lr, [r4, #-4]
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 800ef14:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
      DESCALE(tmp10 + MULTIPLY(tmp0 + tmp1, FIX(1.777777778)),   /* 16/9 */
 800ef18:	13c9      	asrs	r1, r1, #15
      DESCALE(MULTIPLY(tmp0 - tmp1 - tmp2, FIX(1.777777778)),    /* 16/9 */
 800ef1a:	13db      	asrs	r3, r3, #15
      DESCALE(tmp10 + MULTIPLY(tmp2 - tmp1, FIX(1.777777778)),   /* 16/9 */
 800ef1c:	13d2      	asrs	r2, r2, #15
    dataptr[DCTSIZE*1] = (DCTELEM)
 800ef1e:	61e1      	str	r1, [r4, #28]
    dataptr[DCTSIZE*3] = (DCTELEM)
 800ef20:	65e3      	str	r3, [r4, #92]	@ 0x5c
    dataptr[DCTSIZE*5] = (DCTELEM)
 800ef22:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
  for (ctr = 0; ctr < 3; ctr++) {
 800ef26:	4544      	cmp	r4, r8
 800ef28:	d1ae      	bne.n	800ee88 <jpeg_fdct_3x6+0x88>
  }
}
 800ef2a:	b003      	add	sp, #12
 800ef2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef30 <jpeg_fdct_2x4>:
 * 2-point FDCT in pass 1 (rows), 4-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_2x4 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800ef30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef34:	4604      	mov	r4, r0
 800ef36:	460d      	mov	r5, r1
 800ef38:	4616      	mov	r6, r2
  JSAMPROW elemptr;
  int ctr;
  SHIFT_TEMPS

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ef40:	f104 07a0 	add.w	r7, r4, #160	@ 0xa0
 800ef44:	f000 fdb4 	bl	800fab0 <memset>
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT. */
  /* We must also scale the output by (8/2)*(8/4) = 2**3, which we add here. */

  dataptr = data;
  for (ctr = 0; ctr < 4; ctr++) {
 800ef48:	f104 0020 	add.w	r0, r4, #32
 800ef4c:	1f29      	subs	r1, r5, #4
    elemptr = sample_data[ctr] + start_col;
 800ef4e:	f851 3f04 	ldr.w	r3, [r1, #4]!
  for (ctr = 0; ctr < 4; ctr++) {
 800ef52:	3020      	adds	r0, #32
    elemptr = sample_data[ctr] + start_col;
 800ef54:	199a      	adds	r2, r3, r6

    /* Even part */

    tmp0 = GETJSAMPLE(elemptr[0]);
 800ef56:	5d9b      	ldrb	r3, [r3, r6]
    tmp1 = GETJSAMPLE(elemptr[1]);
 800ef58:	7852      	ldrb	r2, [r2, #1]

    /* Apply unsigned->signed conversion */
    dataptr[0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 3);
 800ef5a:	189d      	adds	r5, r3, r2

    /* Odd part */

    dataptr[1] = (DCTELEM) ((tmp0 - tmp1) << 3);
 800ef5c:	1a9b      	subs	r3, r3, r2
    dataptr[0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 3);
 800ef5e:	f5a5 7580 	sub.w	r5, r5, #256	@ 0x100
    dataptr[1] = (DCTELEM) ((tmp0 - tmp1) << 3);
 800ef62:	00db      	lsls	r3, r3, #3
    dataptr[0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 3);
 800ef64:	00ed      	lsls	r5, r5, #3
    dataptr[1] = (DCTELEM) ((tmp0 - tmp1) << 3);
 800ef66:	f840 3c3c 	str.w	r3, [r0, #-60]
    dataptr[0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 3);
 800ef6a:	f840 5c40 	str.w	r5, [r0, #-64]
  for (ctr = 0; ctr < 4; ctr++) {
 800ef6e:	4287      	cmp	r7, r0
 800ef70:	d1ed      	bne.n	800ef4e <jpeg_fdct_2x4+0x1e>
 800ef72:	f104 0008 	add.w	r0, r4, #8
    dataptr[DCTSIZE*0] = (DCTELEM) (tmp0 + tmp1);
    dataptr[DCTSIZE*2] = (DCTELEM) (tmp0 - tmp1);

    /* Odd part */

    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 800ef76:	f241 1751 	movw	r7, #4433	@ 0x1151
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-1);

    dataptr[DCTSIZE*1] = (DCTELEM)
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800ef7a:	f641 067e 	movw	r6, #6270	@ 0x187e
		  CONST_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM)
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800ef7e:	4d13      	ldr	r5, [pc, #76]	@ (800efcc <jpeg_fdct_2x4+0x9c>)
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*2];
 800ef80:	f8d4 e020 	ldr.w	lr, [r4, #32]
		  CONST_BITS);

    dataptr++;			/* advance pointer to next column */
 800ef84:	3404      	adds	r4, #4
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3];
 800ef86:	f854 8c04 	ldr.w	r8, [r4, #-4]
 800ef8a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*2];
 800ef8c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*3];
 800ef8e:	eb08 0302 	add.w	r3, r8, r2
    tmp10 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*3];
 800ef92:	eba8 0202 	sub.w	r2, r8, r2
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*2];
 800ef96:	eb0e 0c01 	add.w	ip, lr, r1
    tmp11 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*2];
 800ef9a:	ebae 0101 	sub.w	r1, lr, r1
    dataptr[DCTSIZE*0] = (DCTELEM) (tmp0 + tmp1);
 800ef9e:	eb03 0e0c 	add.w	lr, r3, ip
    dataptr[DCTSIZE*2] = (DCTELEM) (tmp0 - tmp1);
 800efa2:	eba3 030c 	sub.w	r3, r3, ip
 800efa6:	63e3      	str	r3, [r4, #60]	@ 0x3c
    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 800efa8:	1853      	adds	r3, r2, r1
    dataptr[DCTSIZE*0] = (DCTELEM) (tmp0 + tmp1);
 800efaa:	f844 ec04 	str.w	lr, [r4, #-4]
    tmp0 = MULTIPLY(tmp10 + tmp11, FIX_0_541196100);       /* c6 */
 800efae:	437b      	muls	r3, r7
    tmp0 += ONE << (CONST_BITS-1);
 800efb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800efb4:	fb06 3202 	mla	r2, r6, r2, r3
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800efb8:	fb05 3301 	mla	r3, r5, r1, r3
      RIGHT_SHIFT(tmp0 + MULTIPLY(tmp10, FIX_0_765366865), /* c2-c6 */
 800efbc:	1352      	asrs	r2, r2, #13
      RIGHT_SHIFT(tmp0 - MULTIPLY(tmp11, FIX_1_847759065), /* c2+c6 */
 800efbe:	135b      	asrs	r3, r3, #13
    dataptr[DCTSIZE*1] = (DCTELEM)
 800efc0:	61e2      	str	r2, [r4, #28]
    dataptr[DCTSIZE*3] = (DCTELEM)
 800efc2:	65e3      	str	r3, [r4, #92]	@ 0x5c
  for (ctr = 0; ctr < 2; ctr++) {
 800efc4:	4284      	cmp	r4, r0
 800efc6:	d1db      	bne.n	800ef80 <jpeg_fdct_2x4+0x50>
  }
}
 800efc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efcc:	ffffc4df 	.word	0xffffc4df

0800efd0 <jpeg_fdct_1x2>:
 * 1-point FDCT in pass 1 (rows), 2-point in pass 2 (columns).
 */

GLOBAL(void)
jpeg_fdct_1x2 (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 800efd0:	b570      	push	{r4, r5, r6, lr}
 800efd2:	460e      	mov	r6, r1
 800efd4:	4615      	mov	r5, r2
  INT32 tmp0, tmp1;

  /* Pre-zero output coefficient block. */
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800efd6:	2100      	movs	r1, #0
 800efd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 800efdc:	4604      	mov	r4, r0
  MEMZERO(data, SIZEOF(DCTELEM) * DCTSIZE2);
 800efde:	f000 fd67 	bl	800fab0 <memset>

  tmp0 = GETJSAMPLE(sample_data[0][start_col]);
  tmp1 = GETJSAMPLE(sample_data[1][start_col]);
 800efe2:	6872      	ldr	r2, [r6, #4]
  tmp0 = GETJSAMPLE(sample_data[0][start_col]);
 800efe4:	6833      	ldr	r3, [r6, #0]
  tmp1 = GETJSAMPLE(sample_data[1][start_col]);
 800efe6:	5d51      	ldrb	r1, [r2, r5]
  tmp0 = GETJSAMPLE(sample_data[0][start_col]);
 800efe8:	5d5b      	ldrb	r3, [r3, r5]
   * We must also scale the output by (8/1)*(8/2) = 2**5.
   */

  /* Even part */
  /* Apply unsigned->signed conversion */
  data[DCTSIZE*0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 5);
 800efea:	185a      	adds	r2, r3, r1

  /* Odd part */
  data[DCTSIZE*1] = (DCTELEM) ((tmp0 - tmp1) << 5);
 800efec:	1a5b      	subs	r3, r3, r1
  data[DCTSIZE*0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 5);
 800efee:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
  data[DCTSIZE*1] = (DCTELEM) ((tmp0 - tmp1) << 5);
 800eff2:	015b      	lsls	r3, r3, #5
  data[DCTSIZE*0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 5);
 800eff4:	0152      	lsls	r2, r2, #5
  data[DCTSIZE*1] = (DCTELEM) ((tmp0 - tmp1) << 5);
 800eff6:	6223      	str	r3, [r4, #32]
  data[DCTSIZE*0] = (DCTELEM) ((tmp0 + tmp1 - 2 * CENTERJSAMPLE) << 5);
 800eff8:	6022      	str	r2, [r4, #0]
}
 800effa:	bd70      	pop	{r4, r5, r6, pc}

0800effc <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 800effc:	6803      	ldr	r3, [r0, #0]
 800effe:	2238      	movs	r2, #56	@ 0x38
 800f000:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4718      	bx	r3

0800f008 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 800f008:	688b      	ldr	r3, [r1, #8]
{
 800f00a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 800f00e:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 800f012:	698b      	ldr	r3, [r1, #24]
{
 800f014:	b085      	sub	sp, #20
 800f016:	4681      	mov	r9, r0
 800f018:	460c      	mov	r4, r1
 800f01a:	4693      	mov	fp, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 800f01c:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800f020:	2600      	movs	r6, #0
 800f022:	f101 0a30 	add.w	sl, r1, #48	@ 0x30
 800f026:	6922      	ldr	r2, [r4, #16]
 800f028:	42b2      	cmp	r2, r6
 800f02a:	dc02      	bgt.n	800f032 <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 800f02c:	b005      	add	sp, #20
 800f02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 800f032:	1b92      	subs	r2, r2, r6
 800f034:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 800f036:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 800f038:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 800f03a:	6865      	ldr	r5, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 800f03c:	4430      	add	r0, r6
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 800f03e:	bfa8      	it	ge
 800f040:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 800f042:	69e1      	ldr	r1, [r4, #28]
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 800f044:	1a2d      	subs	r5, r5, r0
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 800f046:	1a09      	subs	r1, r1, r0
 800f048:	4291      	cmp	r1, r2
 800f04a:	bfa8      	it	ge
 800f04c:	4611      	movge	r1, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 800f04e:	428d      	cmp	r5, r1
 800f050:	bfa8      	it	ge
 800f052:	460d      	movge	r5, r1
    if (rows <= 0)		/* this chunk might be past end of file! */
 800f054:	2d00      	cmp	r5, #0
 800f056:	dde9      	ble.n	800f02c <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 800f058:	fb05 f308 	mul.w	r3, r5, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 800f05c:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 800f05e:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 800f060:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 800f064:	f1bb 0f00 	cmp.w	fp, #0
 800f068:	d00a      	beq.n	800f080 <do_barray_io+0x78>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 800f06a:	9300      	str	r3, [sp, #0]
 800f06c:	4651      	mov	r1, sl
 800f06e:	463b      	mov	r3, r7
 800f070:	4648      	mov	r0, r9
 800f072:	6b65      	ldr	r5, [r4, #52]	@ 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 800f074:	47a8      	blx	r5
    file_offset += byte_count;
 800f076:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800f078:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 800f07a:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800f07c:	4416      	add	r6, r2
 800f07e:	e7d2      	b.n	800f026 <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 800f080:	9b03      	ldr	r3, [sp, #12]
 800f082:	4651      	mov	r1, sl
 800f084:	4648      	mov	r0, r9
 800f086:	9300      	str	r3, [sp, #0]
 800f088:	463b      	mov	r3, r7
 800f08a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f08c:	e7f2      	b.n	800f074 <do_barray_io+0x6c>
	...

0800f090 <alloc_small>:
{
 800f090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 800f094:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
{
 800f098:	4606      	mov	r6, r0
 800f09a:	460d      	mov	r5, r1
 800f09c:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 800f09e:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800f0a0:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 800f0a2:	d902      	bls.n	800f0aa <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 800f0a4:	2101      	movs	r1, #1
 800f0a6:	f7ff ffa9 	bl	800effc <out_of_memory>
  if (odd_bytes > 0)
 800f0aa:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 800f0ae:	bf1c      	itt	ne
 800f0b0:	3408      	addne	r4, #8
 800f0b2:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 800f0b4:	2d01      	cmp	r5, #1
 800f0b6:	d906      	bls.n	800f0c6 <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 800f0b8:	6833      	ldr	r3, [r6, #0]
 800f0ba:	220f      	movs	r2, #15
 800f0bc:	4630      	mov	r0, r6
 800f0be:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 800f0c6:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 800f0ca:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 800f0ce:	f8d8 0034 	ldr.w	r0, [r8, #52]	@ 0x34
  while (hdr_ptr != NULL) {
 800f0d2:	b9e8      	cbnz	r0, 800f110 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 800f0d4:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 800f0d8:	f1ba 0f00 	cmp.w	sl, #0
 800f0dc:	d11e      	bne.n	800f11c <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 800f0de:	4b1d      	ldr	r3, [pc, #116]	@ (800f154 <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 800f0e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 800f0e4:	f5c9 3580 	rsb	r5, r9, #65536	@ 0x10000
 800f0e8:	429d      	cmp	r5, r3
 800f0ea:	bf28      	it	cs
 800f0ec:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 800f0ee:	eb05 0b09 	add.w	fp, r5, r9
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	4659      	mov	r1, fp
 800f0f6:	f000 fbc5 	bl	800f884 <jpeg_get_small>
      if (hdr_ptr != NULL)
 800f0fa:	b988      	cbnz	r0, 800f120 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 800f0fc:	2d63      	cmp	r5, #99	@ 0x63
      slop /= 2;
 800f0fe:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 800f102:	d803      	bhi.n	800f10c <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 800f104:	2102      	movs	r1, #2
 800f106:	4630      	mov	r0, r6
 800f108:	f7ff ff78 	bl	800effc <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 800f10c:	465d      	mov	r5, fp
 800f10e:	e7ee      	b.n	800f0ee <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 800f110:	6883      	ldr	r3, [r0, #8]
 800f112:	42a3      	cmp	r3, r4
 800f114:	d211      	bcs.n	800f13a <alloc_small+0xaa>
    prev_hdr_ptr = hdr_ptr;
 800f116:	4682      	mov	sl, r0
    hdr_ptr = hdr_ptr->hdr.next;
 800f118:	6800      	ldr	r0, [r0, #0]
 800f11a:	e7da      	b.n	800f0d2 <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 800f11c:	4b0e      	ldr	r3, [pc, #56]	@ (800f158 <alloc_small+0xc8>)
 800f11e:	e7df      	b.n	800f0e0 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 800f120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 800f122:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 800f124:	445b      	add	r3, fp
 800f126:	64fb      	str	r3, [r7, #76]	@ 0x4c
    hdr_ptr->hdr.next = NULL;
 800f128:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 800f12a:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 800f12c:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 800f130:	f1ba 0f00 	cmp.w	sl, #0
 800f134:	d10b      	bne.n	800f14e <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 800f136:	f8c8 0034 	str.w	r0, [r8, #52]	@ 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 800f13a:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 800f13c:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 800f13e:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 800f140:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 800f142:	6882      	ldr	r2, [r0, #8]
 800f144:	1b12      	subs	r2, r2, r4
 800f146:	6082      	str	r2, [r0, #8]
}
 800f148:	4418      	add	r0, r3
 800f14a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 800f14e:	f8ca 0000 	str.w	r0, [sl]
 800f152:	e7f2      	b.n	800f13a <alloc_small+0xaa>
 800f154:	08011de0 	.word	0x08011de0
 800f158:	08011dd8 	.word	0x08011dd8

0800f15c <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 800f15c:	2901      	cmp	r1, #1
{
 800f15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f162:	4604      	mov	r4, r0
 800f164:	460d      	mov	r5, r1
 800f166:	4616      	mov	r6, r2
 800f168:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800f16a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 800f16e:	d005      	beq.n	800f17c <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 800f170:	6803      	ldr	r3, [r0, #0]
 800f172:	220f      	movs	r2, #15
 800f174:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 800f17c:	223c      	movs	r2, #60	@ 0x3c
 800f17e:	4629      	mov	r1, r5
 800f180:	4620      	mov	r0, r4
 800f182:	f7ff ff85 	bl	800f090 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 800f186:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 800f188:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 800f18a:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 800f18c:	6283      	str	r3, [r0, #40]	@ 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 800f18e:	f8d8 3048 	ldr.w	r3, [r8, #72]	@ 0x48
  result->pre_zero = pre_zero;
 800f192:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 800f194:	62c3      	str	r3, [r0, #44]	@ 0x2c
  result->blocksperrow = blocksperrow;
 800f196:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 800f19a:	9a07      	ldr	r2, [sp, #28]
 800f19c:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 800f19e:	f8c8 0048 	str.w	r0, [r8, #72]	@ 0x48
}
 800f1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f1a6 <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 800f1a6:	2901      	cmp	r1, #1
{
 800f1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	460d      	mov	r5, r1
 800f1b0:	4616      	mov	r6, r2
 800f1b2:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800f1b4:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 800f1b8:	d005      	beq.n	800f1c6 <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 800f1ba:	6803      	ldr	r3, [r0, #0]
 800f1bc:	220f      	movs	r2, #15
 800f1be:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 800f1c6:	223c      	movs	r2, #60	@ 0x3c
 800f1c8:	4629      	mov	r1, r5
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	f7ff ff60 	bl	800f090 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 800f1d0:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 800f1d2:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 800f1d4:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 800f1d6:	6283      	str	r3, [r0, #40]	@ 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 800f1d8:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
  result->pre_zero = pre_zero;
 800f1dc:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 800f1de:	62c3      	str	r3, [r0, #44]	@ 0x2c
  result->samplesperrow = samplesperrow;
 800f1e0:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 800f1e4:	9a07      	ldr	r2, [sp, #28]
 800f1e6:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 800f1e8:	f8c8 0044 	str.w	r0, [r8, #68]	@ 0x44
}
 800f1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f1f0 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 800f1f0:	2901      	cmp	r1, #1
{
 800f1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f6:	4606      	mov	r6, r0
 800f1f8:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800f1fa:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 800f1fc:	d910      	bls.n	800f220 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 800f1fe:	6803      	ldr	r3, [r0, #0]
 800f200:	220f      	movs	r2, #15
 800f202:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 800f20a:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 800f20e:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 800f210:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
  mem->large_list[pool_id] = NULL;
 800f212:	63e2      	str	r2, [r4, #60]	@ 0x3c

  while (lhdr_ptr != NULL) {
 800f214:	bb0b      	cbnz	r3, 800f25a <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 800f216:	6b61      	ldr	r1, [r4, #52]	@ 0x34
  mem->small_list[pool_id] = NULL;
 800f218:	6363      	str	r3, [r4, #52]	@ 0x34

  while (shdr_ptr != NULL) {
 800f21a:	bb69      	cbnz	r1, 800f278 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 800f21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 800f220:	d1f3      	bne.n	800f20a <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800f222:	6c6c      	ldr	r4, [r5, #68]	@ 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 800f224:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800f226:	b924      	cbnz	r4, 800f232 <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 800f228:	6caf      	ldr	r7, [r5, #72]	@ 0x48
    mem->virt_sarray_list = NULL;
 800f22a:	646c      	str	r4, [r5, #68]	@ 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 800f22c:	b95f      	cbnz	r7, 800f246 <free_pool+0x56>
    mem->virt_barray_list = NULL;
 800f22e:	64af      	str	r7, [r5, #72]	@ 0x48
 800f230:	e7eb      	b.n	800f20a <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 800f232:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f234:	b12b      	cbz	r3, 800f242 <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 800f236:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800f238:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f23c:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 800f23e:	62a7      	str	r7, [r4, #40]	@ 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 800f240:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800f242:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 800f244:	e7ef      	b.n	800f226 <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 800f246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f248:	b12b      	cbz	r3, 800f256 <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 800f24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f24c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800f250:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 800f252:	62bc      	str	r4, [r7, #40]	@ 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 800f254:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 800f256:	6aff      	ldr	r7, [r7, #44]	@ 0x2c
 800f258:	e7e8      	b.n	800f22c <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 800f25a:	e9d3 8700 	ldrd	r8, r7, [r3]
 800f25e:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 800f260:	4619      	mov	r1, r3
 800f262:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 800f264:	4417      	add	r7, r2
 800f266:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 800f268:	463a      	mov	r2, r7
 800f26a:	f000 fb14 	bl	800f896 <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 800f26e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800f270:	1bdb      	subs	r3, r3, r7
 800f272:	64eb      	str	r3, [r5, #76]	@ 0x4c
    lhdr_ptr = next_lhdr_ptr;
 800f274:	4643      	mov	r3, r8
 800f276:	e7cd      	b.n	800f214 <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 800f278:	688b      	ldr	r3, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 800f27a:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 800f27c:	e9d1 7400 	ldrd	r7, r4, [r1]
 800f280:	441c      	add	r4, r3
 800f282:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 800f284:	4622      	mov	r2, r4
 800f286:	f000 fb00 	bl	800f88a <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 800f28a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
    shdr_ptr = next_shdr_ptr;
 800f28c:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 800f28e:	1b1b      	subs	r3, r3, r4
 800f290:	64eb      	str	r3, [r5, #76]	@ 0x4c
    shdr_ptr = next_shdr_ptr;
 800f292:	e7c2      	b.n	800f21a <free_pool+0x2a>

0800f294 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 800f294:	b510      	push	{r4, lr}
 800f296:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 800f298:	2101      	movs	r1, #1
 800f29a:	f7ff ffa9 	bl	800f1f0 <free_pool>
 800f29e:	2100      	movs	r1, #0
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	f7ff ffa5 	bl	800f1f0 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	6861      	ldr	r1, [r4, #4]
 800f2aa:	2254      	movs	r2, #84	@ 0x54
 800f2ac:	f000 faed 	bl	800f88a <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 800f2b0:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 800f2b2:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 800f2b4:	6063      	str	r3, [r4, #4]
}
 800f2b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 800f2ba:	f000 baf8 	b.w	800f8ae <jpeg_mem_term>

0800f2be <access_virt_barray>:
{
 800f2be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 800f2c2:	18d7      	adds	r7, r2, r3
{
 800f2c4:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 800f2c6:	684a      	ldr	r2, [r1, #4]
{
 800f2c8:	4606      	mov	r6, r0
 800f2ca:	460c      	mov	r4, r1
 800f2cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 800f2d0:	42ba      	cmp	r2, r7
 800f2d2:	d304      	bcc.n	800f2de <access_virt_barray+0x20>
 800f2d4:	68ca      	ldr	r2, [r1, #12]
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d301      	bcc.n	800f2de <access_virt_barray+0x20>
 800f2da:	680b      	ldr	r3, [r1, #0]
 800f2dc:	b92b      	cbnz	r3, 800f2ea <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 800f2de:	6833      	ldr	r3, [r6, #0]
 800f2e0:	2217      	movs	r2, #23
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	615a      	str	r2, [r3, #20]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	4798      	blx	r3
  if (start_row < ptr->cur_start_row ||
 800f2ea:	69a3      	ldr	r3, [r4, #24]
 800f2ec:	42ab      	cmp	r3, r5
 800f2ee:	d803      	bhi.n	800f2f8 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 800f2f0:	6922      	ldr	r2, [r4, #16]
 800f2f2:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 800f2f4:	42bb      	cmp	r3, r7
 800f2f6:	d21e      	bcs.n	800f336 <access_virt_barray+0x78>
    if (! ptr->b_s_open)
 800f2f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f2fa:	b92b      	cbnz	r3, 800f308 <access_virt_barray+0x4a>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 800f2fc:	6833      	ldr	r3, [r6, #0]
 800f2fe:	2247      	movs	r2, #71	@ 0x47
 800f300:	4630      	mov	r0, r6
 800f302:	615a      	str	r2, [r3, #20]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	4798      	blx	r3
    if (ptr->dirty) {
 800f308:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f30a:	b133      	cbz	r3, 800f31a <access_virt_barray+0x5c>
      do_barray_io(cinfo, ptr, TRUE);
 800f30c:	2201      	movs	r2, #1
 800f30e:	4621      	mov	r1, r4
 800f310:	4630      	mov	r0, r6
 800f312:	f7ff fe79 	bl	800f008 <do_barray_io>
      ptr->dirty = FALSE;
 800f316:	2300      	movs	r3, #0
 800f318:	6263      	str	r3, [r4, #36]	@ 0x24
    if (start_row > ptr->cur_start_row) {
 800f31a:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 800f31c:	2200      	movs	r2, #0
 800f31e:	4621      	mov	r1, r4
 800f320:	4630      	mov	r0, r6
    if (start_row > ptr->cur_start_row) {
 800f322:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 800f324:	bf29      	itett	cs
 800f326:	6923      	ldrcs	r3, [r4, #16]
      ptr->cur_start_row = start_row;
 800f328:	462b      	movcc	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 800f32a:	1afb      	subcs	r3, r7, r3
      if (ltemp < 0)
 800f32c:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 800f330:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 800f332:	f7ff fe69 	bl	800f008 <do_barray_io>
  if (ptr->first_undef_row < end_row) {
 800f336:	69e3      	ldr	r3, [r4, #28]
 800f338:	42bb      	cmp	r3, r7
 800f33a:	d21b      	bcs.n	800f374 <access_virt_barray+0xb6>
    if (ptr->first_undef_row < start_row) {
 800f33c:	42ab      	cmp	r3, r5
 800f33e:	d20b      	bcs.n	800f358 <access_virt_barray+0x9a>
      if (writable)		/* writer skipped over a section of array */
 800f340:	f1b8 0f00 	cmp.w	r8, #0
 800f344:	d01a      	beq.n	800f37c <access_virt_barray+0xbe>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 800f346:	6833      	ldr	r3, [r6, #0]
 800f348:	2217      	movs	r2, #23
 800f34a:	4630      	mov	r0, r6
 800f34c:	615a      	str	r2, [r3, #20]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	4798      	blx	r3
      undef_row = start_row;	/* but reader is allowed to read ahead */
 800f352:	462b      	mov	r3, r5
      ptr->first_undef_row = end_row;
 800f354:	61e7      	str	r7, [r4, #28]
 800f356:	e002      	b.n	800f35e <access_virt_barray+0xa0>
    if (writable)
 800f358:	f1b8 0f00 	cmp.w	r8, #0
 800f35c:	d1fa      	bne.n	800f354 <access_virt_barray+0x96>
    if (ptr->pre_zero) {
 800f35e:	6a22      	ldr	r2, [r4, #32]
 800f360:	b1b2      	cbz	r2, 800f390 <access_virt_barray+0xd2>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 800f362:	68a2      	ldr	r2, [r4, #8]
 800f364:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 800f368:	69a2      	ldr	r2, [r4, #24]
 800f36a:	1a9e      	subs	r6, r3, r2
      end_row -= ptr->cur_start_row;
 800f36c:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 800f36e:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 800f370:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 800f372:	d305      	bcc.n	800f380 <access_virt_barray+0xc2>
  if (writable)
 800f374:	f1b8 0f00 	cmp.w	r8, #0
 800f378:	d10d      	bne.n	800f396 <access_virt_barray+0xd8>
 800f37a:	e00e      	b.n	800f39a <access_virt_barray+0xdc>
      undef_row = start_row;	/* but reader is allowed to read ahead */
 800f37c:	462b      	mov	r3, r5
 800f37e:	e7ee      	b.n	800f35e <access_virt_barray+0xa0>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 800f380:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f384:	464a      	mov	r2, r9
 800f386:	2100      	movs	r1, #0
	undef_row++;
 800f388:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 800f38a:	f000 fb91 	bl	800fab0 <memset>
	undef_row++;
 800f38e:	e7ee      	b.n	800f36e <access_virt_barray+0xb0>
      if (! writable)		/* reader looking at undefined data */
 800f390:	f1b8 0f00 	cmp.w	r8, #0
 800f394:	d008      	beq.n	800f3a8 <access_virt_barray+0xea>
    ptr->dirty = TRUE;
 800f396:	2301      	movs	r3, #1
 800f398:	6263      	str	r3, [r4, #36]	@ 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 800f39a:	69a3      	ldr	r3, [r4, #24]
 800f39c:	6820      	ldr	r0, [r4, #0]
 800f39e:	1aed      	subs	r5, r5, r3
}
 800f3a0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800f3a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 800f3a8:	6833      	ldr	r3, [r6, #0]
 800f3aa:	2217      	movs	r2, #23
 800f3ac:	4630      	mov	r0, r6
 800f3ae:	615a      	str	r2, [r3, #20]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	4798      	blx	r3
  if (writable)
 800f3b4:	e7f1      	b.n	800f39a <access_virt_barray+0xdc>

0800f3b6 <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 800f3b6:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800f3ba:	429a      	cmp	r2, r3
{
 800f3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3c0:	4606      	mov	r6, r0
 800f3c2:	4688      	mov	r8, r1
 800f3c4:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800f3c6:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 800f3c8:	d902      	bls.n	800f3d0 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 800f3ca:	2103      	movs	r1, #3
 800f3cc:	f7ff fe16 	bl	800effc <out_of_memory>
  if (odd_bytes > 0)
 800f3d0:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 800f3d4:	bf1c      	itt	ne
 800f3d6:	3408      	addne	r4, #8
 800f3d8:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 800f3da:	f1b8 0f01 	cmp.w	r8, #1
 800f3de:	d906      	bls.n	800f3ee <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 800f3e0:	6833      	ldr	r3, [r6, #0]
 800f3e2:	220f      	movs	r2, #15
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 800f3ee:	f104 0110 	add.w	r1, r4, #16
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	f000 fa4c 	bl	800f890 <jpeg_get_large>
  if (hdr_ptr == NULL)
 800f3f8:	4605      	mov	r5, r0
 800f3fa:	b918      	cbnz	r0, 800f404 <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 800f3fc:	2104      	movs	r1, #4
 800f3fe:	4630      	mov	r0, r6
 800f400:	f7ff fdfc 	bl	800effc <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 800f404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800f406:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 800f40a:	3310      	adds	r3, #16
 800f40c:	4423      	add	r3, r4
 800f40e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 800f410:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 800f414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 800f416:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 800f41a:	2300      	movs	r3, #0
 800f41c:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 800f41e:	63fd      	str	r5, [r7, #60]	@ 0x3c
}
 800f420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f424 <alloc_barray>:
{
 800f424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 800f428:	01d7      	lsls	r7, r2, #7
{
 800f42a:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 800f42c:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
{
 800f430:	4680      	mov	r8, r0
 800f432:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800f434:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 800f436:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 800f438:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 800f43c:	d904      	bls.n	800f448 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 800f43e:	6803      	ldr	r3, [r0, #0]
 800f440:	2248      	movs	r2, #72	@ 0x48
 800f442:	615a      	str	r2, [r3, #20]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	4798      	blx	r3
  if (ltemp < (long) numrows)
 800f448:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 800f44a:	ea4f 0285 	mov.w	r2, r5, lsl #2
 800f44e:	4651      	mov	r1, sl
 800f450:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 800f452:	bfa8      	it	ge
 800f454:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 800f456:	6534      	str	r4, [r6, #80]	@ 0x50
  currow = 0;
 800f458:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 800f45a:	f7ff fe19 	bl	800f090 <alloc_small>
 800f45e:	4681      	mov	r9, r0
  while (currow < numrows) {
 800f460:	42ae      	cmp	r6, r5
 800f462:	d302      	bcc.n	800f46a <alloc_barray+0x46>
}
 800f464:	4648      	mov	r0, r9
 800f466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 800f46a:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 800f46c:	4651      	mov	r1, sl
 800f46e:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 800f470:	429c      	cmp	r4, r3
 800f472:	bf28      	it	cs
 800f474:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 800f476:	fb04 f207 	mul.w	r2, r4, r7
 800f47a:	f7ff ff9c 	bl	800f3b6 <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 800f47e:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 800f482:	4426      	add	r6, r4
 800f484:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 800f488:	4293      	cmp	r3, r2
 800f48a:	d0e9      	beq.n	800f460 <alloc_barray+0x3c>
      result[currow++] = workspace;
 800f48c:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 800f490:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 800f492:	e7f9      	b.n	800f488 <alloc_barray+0x64>

0800f494 <alloc_sarray>:
{
 800f494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f498:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 800f49a:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
{
 800f49e:	4607      	mov	r7, r0
 800f4a0:	468a      	mov	sl, r1
  if (ltemp <= 0)
 800f4a2:	429a      	cmp	r2, r3
{
 800f4a4:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800f4a6:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 800f4a8:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 800f4ac:	d904      	bls.n	800f4b8 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 800f4ae:	6803      	ldr	r3, [r0, #0]
 800f4b0:	2248      	movs	r2, #72	@ 0x48
 800f4b2:	615a      	str	r2, [r3, #20]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	4798      	blx	r3
  if (ltemp < (long) numrows)
 800f4b8:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 800f4ba:	ea4f 0285 	mov.w	r2, r5, lsl #2
 800f4be:	4651      	mov	r1, sl
 800f4c0:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 800f4c2:	bfa8      	it	ge
 800f4c4:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 800f4c6:	6534      	str	r4, [r6, #80]	@ 0x50
  currow = 0;
 800f4c8:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 800f4ca:	f7ff fde1 	bl	800f090 <alloc_small>
 800f4ce:	4681      	mov	r9, r0
  while (currow < numrows) {
 800f4d0:	42ae      	cmp	r6, r5
 800f4d2:	d302      	bcc.n	800f4da <alloc_sarray+0x46>
}
 800f4d4:	4648      	mov	r0, r9
 800f4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 800f4da:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 800f4dc:	4651      	mov	r1, sl
 800f4de:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 800f4e0:	429c      	cmp	r4, r3
 800f4e2:	bf28      	it	cs
 800f4e4:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 800f4e6:	fb04 f208 	mul.w	r2, r4, r8
 800f4ea:	f7ff ff64 	bl	800f3b6 <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 800f4ee:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 800f4f2:	4426      	add	r6, r4
 800f4f4:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d0e9      	beq.n	800f4d0 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 800f4fc:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 800f500:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 800f502:	e7f9      	b.n	800f4f8 <alloc_sarray+0x64>

0800f504 <realize_virt_arrays>:
{
 800f504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800f508:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 800f50c:	2500      	movs	r5, #0
{
 800f50e:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800f510:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
  space_per_minheight = 0;
 800f514:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800f516:	b9e3      	cbnz	r3, 800f552 <realize_virt_arrays+0x4e>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 800f518:	f8d8 3048 	ldr.w	r3, [r8, #72]	@ 0x48
 800f51c:	bb23      	cbnz	r3, 800f568 <realize_virt_arrays+0x64>
  if (space_per_minheight <= 0)
 800f51e:	2e00      	cmp	r6, #0
 800f520:	dd15      	ble.n	800f54e <realize_virt_arrays+0x4a>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 800f522:	f8d8 304c 	ldr.w	r3, [r8, #76]	@ 0x4c
 800f526:	462a      	mov	r2, r5
 800f528:	4631      	mov	r1, r6
 800f52a:	4638      	mov	r0, r7
 800f52c:	f000 f9b6 	bl	800f89c <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 800f530:	4285      	cmp	r5, r0
 800f532:	dd26      	ble.n	800f582 <realize_virt_arrays+0x7e>
    max_minheights = avail_mem / space_per_minheight;
 800f534:	fb90 f6f6 	sdiv	r6, r0, r6
    if (max_minheights <= 0)
 800f538:	2e01      	cmp	r6, #1
 800f53a:	bfb8      	it	lt
 800f53c:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800f53e:	f8d8 4044 	ldr.w	r4, [r8, #68]	@ 0x44
      sptr->cur_start_row = 0;
 800f542:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800f544:	b9fc      	cbnz	r4, 800f586 <realize_virt_arrays+0x82>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 800f546:	f8d8 5048 	ldr.w	r5, [r8, #72]	@ 0x48
 800f54a:	2d00      	cmp	r5, #0
 800f54c:	d141      	bne.n	800f5d2 <realize_virt_arrays+0xce>
}
 800f54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	b932      	cbnz	r2, 800f564 <realize_virt_arrays+0x60>
      space_per_minheight += (long) sptr->maxaccess *
 800f556:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 800f55a:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 800f55e:	6859      	ldr	r1, [r3, #4]
 800f560:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800f564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f566:	e7d6      	b.n	800f516 <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 800f568:	681a      	ldr	r2, [r3, #0]
 800f56a:	b942      	cbnz	r2, 800f57e <realize_virt_arrays+0x7a>
      space_per_minheight += (long) bptr->maxaccess *
 800f56c:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 800f570:	4351      	muls	r1, r2
 800f572:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 800f576:	6859      	ldr	r1, [r3, #4]
 800f578:	434a      	muls	r2, r1
 800f57a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 800f57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f580:	e7cc      	b.n	800f51c <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 800f582:	4e27      	ldr	r6, [pc, #156]	@ (800f620 <realize_virt_arrays+0x11c>)
 800f584:	e7db      	b.n	800f53e <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 800f586:	6823      	ldr	r3, [r4, #0]
 800f588:	b9b3      	cbnz	r3, 800f5b8 <realize_virt_arrays+0xb4>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 800f58a:	6862      	ldr	r2, [r4, #4]
				(long) sptr->samplesperrow *
 800f58c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 800f590:	1e53      	subs	r3, r2, #1
 800f592:	fbb3 f3f1 	udiv	r3, r3, r1
 800f596:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 800f598:	429e      	cmp	r6, r3
 800f59a:	db0f      	blt.n	800f5bc <realize_virt_arrays+0xb8>
	sptr->rows_in_mem = sptr->rows_in_array;
 800f59c:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 800f59e:	6923      	ldr	r3, [r4, #16]
 800f5a0:	2101      	movs	r1, #1
 800f5a2:	68a2      	ldr	r2, [r4, #8]
 800f5a4:	4638      	mov	r0, r7
 800f5a6:	f7ff ff75 	bl	800f494 <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 800f5aa:	f8d8 3050 	ldr.w	r3, [r8, #80]	@ 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 800f5ae:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 800f5b0:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 800f5b2:	6265      	str	r5, [r4, #36]	@ 0x24
      sptr->cur_start_row = 0;
 800f5b4:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800f5b8:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 800f5ba:	e7c3      	b.n	800f544 <realize_virt_arrays+0x40>
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 800f5bc:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 800f5be:	4342      	muls	r2, r0
 800f5c0:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 800f5c2:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 800f5c4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f5c8:	f000 f96a 	bl	800f8a0 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f5d0:	e7e5      	b.n	800f59e <realize_virt_arrays+0x9a>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 800f5d2:	682b      	ldr	r3, [r5, #0]
 800f5d4:	b9b3      	cbnz	r3, 800f604 <realize_virt_arrays+0x100>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 800f5d6:	6868      	ldr	r0, [r5, #4]
				(long) bptr->blocksperrow *
 800f5d8:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 800f5dc:	1e43      	subs	r3, r0, #1
 800f5de:	fbb3 f3f1 	udiv	r3, r3, r1
 800f5e2:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 800f5e4:	429e      	cmp	r6, r3
 800f5e6:	db0f      	blt.n	800f608 <realize_virt_arrays+0x104>
	bptr->rows_in_mem = bptr->rows_in_array;
 800f5e8:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 800f5ea:	692b      	ldr	r3, [r5, #16]
 800f5ec:	2101      	movs	r1, #1
 800f5ee:	68aa      	ldr	r2, [r5, #8]
 800f5f0:	4638      	mov	r0, r7
 800f5f2:	f7ff ff17 	bl	800f424 <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 800f5f6:	f8d8 3050 	ldr.w	r3, [r8, #80]	@ 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 800f5fa:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 800f5fc:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 800f5fe:	626c      	str	r4, [r5, #36]	@ 0x24
      bptr->cur_start_row = 0;
 800f600:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 800f604:	6aed      	ldr	r5, [r5, #44]	@ 0x2c
 800f606:	e7a0      	b.n	800f54a <realize_virt_arrays+0x46>
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 800f608:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 800f60a:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 800f60c:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 800f60e:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 800f610:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 800f614:	01d2      	lsls	r2, r2, #7
 800f616:	f000 f943 	bl	800f8a0 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 800f61a:	2301      	movs	r3, #1
 800f61c:	62ab      	str	r3, [r5, #40]	@ 0x28
 800f61e:	e7e4      	b.n	800f5ea <realize_virt_arrays+0xe6>
 800f620:	3b9aca00 	.word	0x3b9aca00

0800f624 <access_virt_sarray>:
{
 800f624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 800f628:	eb02 0803 	add.w	r8, r2, r3
{
 800f62c:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 800f62e:	684a      	ldr	r2, [r1, #4]
{
 800f630:	b085      	sub	sp, #20
 800f632:	4682      	mov	sl, r0
 800f634:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 800f636:	4542      	cmp	r2, r8
 800f638:	d304      	bcc.n	800f644 <access_virt_sarray+0x20>
 800f63a:	68ca      	ldr	r2, [r1, #12]
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d301      	bcc.n	800f644 <access_virt_sarray+0x20>
 800f640:	680b      	ldr	r3, [r1, #0]
 800f642:	b933      	cbnz	r3, 800f652 <access_virt_sarray+0x2e>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 800f644:	f8da 3000 	ldr.w	r3, [sl]
 800f648:	2217      	movs	r2, #23
 800f64a:	4650      	mov	r0, sl
 800f64c:	615a      	str	r2, [r3, #20]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4798      	blx	r3
  if (start_row < ptr->cur_start_row ||
 800f652:	69a3      	ldr	r3, [r4, #24]
 800f654:	42ab      	cmp	r3, r5
 800f656:	d80c      	bhi.n	800f672 <access_virt_sarray+0x4e>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 800f658:	6922      	ldr	r2, [r4, #16]
 800f65a:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 800f65c:	4543      	cmp	r3, r8
 800f65e:	d308      	bcc.n	800f672 <access_virt_sarray+0x4e>
  if (ptr->first_undef_row < end_row) {
 800f660:	69e6      	ldr	r6, [r4, #28]
 800f662:	4546      	cmp	r6, r8
 800f664:	f0c0 8081 	bcc.w	800f76a <access_virt_sarray+0x146>
  if (writable)
 800f668:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	f040 80a5 	bne.w	800f7ba <access_virt_sarray+0x196>
 800f670:	e0a5      	b.n	800f7be <access_virt_sarray+0x19a>
    if (! ptr->b_s_open)
 800f672:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f674:	b933      	cbnz	r3, 800f684 <access_virt_sarray+0x60>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 800f676:	f8da 3000 	ldr.w	r3, [sl]
 800f67a:	2247      	movs	r2, #71	@ 0x47
 800f67c:	4650      	mov	r0, sl
 800f67e:	615a      	str	r2, [r3, #20]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	4798      	blx	r3
    if (ptr->dirty) {
 800f684:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f686:	b183      	cbz	r3, 800f6aa <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 800f688:	f8d4 b008 	ldr.w	fp, [r4, #8]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 800f68c:	f104 0230 	add.w	r2, r4, #48	@ 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 800f690:	69a3      	ldr	r3, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800f692:	f04f 0900 	mov.w	r9, #0
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 800f696:	9202      	str	r2, [sp, #8]
  file_offset = ptr->cur_start_row * bytesperrow;
 800f698:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800f69c:	6922      	ldr	r2, [r4, #16]
 800f69e:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 800f6a0:	e9d4 1606 	ldrd	r1, r6, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800f6a4:	dc3c      	bgt.n	800f720 <access_virt_sarray+0xfc>
      ptr->dirty = FALSE;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	6263      	str	r3, [r4, #36]	@ 0x24
    if (start_row > ptr->cur_start_row) {
 800f6aa:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800f6ac:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 800f6b0:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 800f6b2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
    if (start_row > ptr->cur_start_row) {
 800f6b6:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 800f6b8:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 800f6bc:	bf2a      	itet	cs
 800f6be:	eba8 0303 	subcs.w	r3, r8, r3
      ptr->cur_start_row = start_row;
 800f6c2:	462b      	movcc	r3, r5
      if (ltemp < 0)
 800f6c4:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 800f6c8:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 800f6ca:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800f6ce:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 800f6d0:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800f6d2:	454a      	cmp	r2, r9
 800f6d4:	ddc4      	ble.n	800f660 <access_virt_sarray+0x3c>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 800f6d6:	eba2 0209 	sub.w	r2, r2, r9
 800f6da:	6967      	ldr	r7, [r4, #20]
 800f6dc:	42ba      	cmp	r2, r7
 800f6de:	bfa8      	it	ge
 800f6e0:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 800f6e2:	69a7      	ldr	r7, [r4, #24]
 800f6e4:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 800f6e6:	eba6 0c07 	sub.w	ip, r6, r7
 800f6ea:	4594      	cmp	ip, r2
 800f6ec:	bfa8      	it	ge
 800f6ee:	4694      	movge	ip, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 800f6f0:	6862      	ldr	r2, [r4, #4]
 800f6f2:	1bd6      	subs	r6, r2, r7
 800f6f4:	4566      	cmp	r6, ip
 800f6f6:	bfa8      	it	ge
 800f6f8:	4666      	movge	r6, ip
    if (rows <= 0)		/* this chunk might be past end of file! */
 800f6fa:	2e00      	cmp	r6, #0
 800f6fc:	ddb0      	ble.n	800f660 <access_virt_sarray+0x3c>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 800f6fe:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 800f700:	fb06 f60b 	mul.w	r6, r6, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 800f704:	4650      	mov	r0, sl
 800f706:	9303      	str	r3, [sp, #12]
 800f708:	9600      	str	r6, [sp, #0]
 800f70a:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 800f70e:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 800f710:	9102      	str	r1, [sp, #8]
 800f712:	47b8      	blx	r7
    file_offset += byte_count;
 800f714:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800f716:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 800f718:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800f71a:	9902      	ldr	r1, [sp, #8]
 800f71c:	4491      	add	r9, r2
 800f71e:	e7d6      	b.n	800f6ce <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 800f720:	eba2 0209 	sub.w	r2, r2, r9
 800f724:	6960      	ldr	r0, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 800f726:	eb01 0c09 	add.w	ip, r1, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 800f72a:	4282      	cmp	r2, r0
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 800f72c:	eba6 060c 	sub.w	r6, r6, ip
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 800f730:	bfa8      	it	ge
 800f732:	4602      	movge	r2, r0
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 800f734:	4296      	cmp	r6, r2
 800f736:	bfa8      	it	ge
 800f738:	4616      	movge	r6, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 800f73a:	6862      	ldr	r2, [r4, #4]
 800f73c:	eba2 070c 	sub.w	r7, r2, ip
 800f740:	42b7      	cmp	r7, r6
 800f742:	bfa8      	it	ge
 800f744:	4637      	movge	r7, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 800f746:	2f00      	cmp	r7, #0
 800f748:	ddad      	ble.n	800f6a6 <access_virt_sarray+0x82>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 800f74a:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 800f74c:	fb0b f707 	mul.w	r7, fp, r7
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 800f750:	9902      	ldr	r1, [sp, #8]
 800f752:	4650      	mov	r0, sl
 800f754:	9700      	str	r7, [sp, #0]
 800f756:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 800f75a:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800f75c:	9303      	str	r3, [sp, #12]
 800f75e:	47b0      	blx	r6
    file_offset += byte_count;
 800f760:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800f762:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 800f764:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800f766:	4491      	add	r9, r2
 800f768:	e798      	b.n	800f69c <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 800f76a:	42ae      	cmp	r6, r5
      if (writable)		/* writer skipped over a section of array */
 800f76c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    if (ptr->first_undef_row < start_row) {
 800f76e:	d20b      	bcs.n	800f788 <access_virt_sarray+0x164>
      if (writable)		/* writer skipped over a section of array */
 800f770:	b1fb      	cbz	r3, 800f7b2 <access_virt_sarray+0x18e>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 800f772:	f8da 3000 	ldr.w	r3, [sl]
 800f776:	2217      	movs	r2, #23
      undef_row = start_row;	/* but reader is allowed to read ahead */
 800f778:	462e      	mov	r6, r5
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 800f77a:	4650      	mov	r0, sl
 800f77c:	615a      	str	r2, [r3, #20]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	4798      	blx	r3
      ptr->first_undef_row = end_row;
 800f782:	f8c4 801c 	str.w	r8, [r4, #28]
 800f786:	e001      	b.n	800f78c <access_virt_sarray+0x168>
    if (writable)
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d1fa      	bne.n	800f782 <access_virt_sarray+0x15e>
    if (ptr->pre_zero) {
 800f78c:	6a22      	ldr	r2, [r4, #32]
 800f78e:	b192      	cbz	r2, 800f7b6 <access_virt_sarray+0x192>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 800f790:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 800f792:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 800f794:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 800f796:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 800f79a:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 800f79c:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 800f79e:	f4bf af63 	bcs.w	800f668 <access_virt_sarray+0x44>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 800f7a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f7a6:	463a      	mov	r2, r7
 800f7a8:	2100      	movs	r1, #0
	undef_row++;
 800f7aa:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 800f7ac:	f000 f980 	bl	800fab0 <memset>
	undef_row++;
 800f7b0:	e7f3      	b.n	800f79a <access_virt_sarray+0x176>
      undef_row = start_row;	/* but reader is allowed to read ahead */
 800f7b2:	462e      	mov	r6, r5
 800f7b4:	e7ea      	b.n	800f78c <access_virt_sarray+0x168>
      if (! writable)		/* reader looking at undefined data */
 800f7b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7b8:	b14b      	cbz	r3, 800f7ce <access_virt_sarray+0x1aa>
    ptr->dirty = TRUE;
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	6263      	str	r3, [r4, #36]	@ 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 800f7be:	69a3      	ldr	r3, [r4, #24]
 800f7c0:	6820      	ldr	r0, [r4, #0]
 800f7c2:	1aed      	subs	r5, r5, r3
}
 800f7c4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800f7c8:	b005      	add	sp, #20
 800f7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 800f7ce:	f8da 3000 	ldr.w	r3, [sl]
 800f7d2:	2217      	movs	r2, #23
 800f7d4:	4650      	mov	r0, sl
 800f7d6:	615a      	str	r2, [r3, #20]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4798      	blx	r3
  if (writable)
 800f7dc:	e7ef      	b.n	800f7be <access_virt_sarray+0x19a>
	...

0800f7e0 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 800f7e0:	2300      	movs	r3, #0
{
 800f7e2:	b570      	push	{r4, r5, r6, lr}
 800f7e4:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 800f7e6:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 800f7e8:	f000 f85f 	bl	800f8aa <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 800f7ec:	2154      	movs	r1, #84	@ 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 800f7ee:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 800f7f0:	4628      	mov	r0, r5
 800f7f2:	f000 f847 	bl	800f884 <jpeg_get_small>

  if (mem == NULL) {
 800f7f6:	4604      	mov	r4, r0
 800f7f8:	b948      	cbnz	r0, 800f80e <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 800f7fa:	4628      	mov	r0, r5
 800f7fc:	f000 f857 	bl	800f8ae <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 800f800:	682b      	ldr	r3, [r5, #0]
 800f802:	2238      	movs	r2, #56	@ 0x38
 800f804:	4628      	mov	r0, r5
 800f806:	e9c3 2405 	strd	r2, r4, [r3, #20]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 800f80e:	4b12      	ldr	r3, [pc, #72]	@ (800f858 <jinit_memory_mgr+0x78>)
 800f810:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 800f812:	4b12      	ldr	r3, [pc, #72]	@ (800f85c <jinit_memory_mgr+0x7c>)
 800f814:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 800f816:	4b12      	ldr	r3, [pc, #72]	@ (800f860 <jinit_memory_mgr+0x80>)
 800f818:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 800f81a:	4b12      	ldr	r3, [pc, #72]	@ (800f864 <jinit_memory_mgr+0x84>)
 800f81c:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 800f81e:	4b12      	ldr	r3, [pc, #72]	@ (800f868 <jinit_memory_mgr+0x88>)
 800f820:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 800f822:	4b12      	ldr	r3, [pc, #72]	@ (800f86c <jinit_memory_mgr+0x8c>)
 800f824:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 800f826:	4b12      	ldr	r3, [pc, #72]	@ (800f870 <jinit_memory_mgr+0x90>)
 800f828:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 800f82a:	4b12      	ldr	r3, [pc, #72]	@ (800f874 <jinit_memory_mgr+0x94>)
 800f82c:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 800f82e:	4b12      	ldr	r3, [pc, #72]	@ (800f878 <jinit_memory_mgr+0x98>)
 800f830:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 800f832:	4b12      	ldr	r3, [pc, #72]	@ (800f87c <jinit_memory_mgr+0x9c>)
 800f834:	6263      	str	r3, [r4, #36]	@ 0x24
  mem->pub.self_destruct = self_destruct;
 800f836:	4b12      	ldr	r3, [pc, #72]	@ (800f880 <jinit_memory_mgr+0xa0>)
 800f838:	62a3      	str	r3, [r4, #40]	@ 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 800f83a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 800f83e:	e9c4 630b 	strd	r6, r3, [r4, #44]	@ 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 800f842:	2300      	movs	r3, #0
 800f844:	63a3      	str	r3, [r4, #56]	@ 0x38
    mem->large_list[pool] = NULL;
 800f846:	6423      	str	r3, [r4, #64]	@ 0x40
    mem->small_list[pool] = NULL;
 800f848:	6363      	str	r3, [r4, #52]	@ 0x34
    mem->large_list[pool] = NULL;
 800f84a:	63e3      	str	r3, [r4, #60]	@ 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 800f84c:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 800f850:	2354      	movs	r3, #84	@ 0x54
 800f852:	64e3      	str	r3, [r4, #76]	@ 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 800f854:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 800f856:	bd70      	pop	{r4, r5, r6, pc}
 800f858:	0800f091 	.word	0x0800f091
 800f85c:	0800f3b7 	.word	0x0800f3b7
 800f860:	0800f495 	.word	0x0800f495
 800f864:	0800f425 	.word	0x0800f425
 800f868:	0800f1a7 	.word	0x0800f1a7
 800f86c:	0800f15d 	.word	0x0800f15d
 800f870:	0800f505 	.word	0x0800f505
 800f874:	0800f625 	.word	0x0800f625
 800f878:	0800f2bf 	.word	0x0800f2bf
 800f87c:	0800f1f1 	.word	0x0800f1f1
 800f880:	0800f295 	.word	0x0800f295

0800f884 <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 800f884:	4608      	mov	r0, r1
 800f886:	f000 b833 	b.w	800f8f0 <malloc>

0800f88a <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 800f88a:	4608      	mov	r0, r1
 800f88c:	f000 b838 	b.w	800f900 <free>

0800f890 <jpeg_get_large>:
 * this file won't actually work in 80x86 small/medium model; at least,
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL(void FAR *)
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
 800f890:	4608      	mov	r0, r1
 800f892:	f000 b82d 	b.w	800f8f0 <malloc>

0800f896 <jpeg_free_large>:
{
  return (void FAR *) JMALLOC(sizeofobject);
}

GLOBAL(void)
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
 800f896:	4608      	mov	r0, r1
 800f898:	f000 b832 	b.w	800f900 <free>

0800f89c <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 800f89c:	4610      	mov	r0, r2
 800f89e:	4770      	bx	lr

0800f8a0 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 800f8a0:	6803      	ldr	r3, [r0, #0]
 800f8a2:	2233      	movs	r2, #51	@ 0x33
 800f8a4:	615a      	str	r2, [r3, #20]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	4718      	bx	r3

0800f8aa <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 800f8aa:	2000      	movs	r0, #0
 800f8ac:	4770      	bx	lr

0800f8ae <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 800f8ae:	4770      	bx	lr

0800f8b0 <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 800f8b0:	4408      	add	r0, r1
 800f8b2:	3801      	subs	r0, #1
}
 800f8b4:	fb90 f0f1 	sdiv	r0, r0, r1
 800f8b8:	4770      	bx	lr

0800f8ba <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 800f8ba:	1e4b      	subs	r3, r1, #1
 800f8bc:	4403      	add	r3, r0
  return a - (a % b);
 800f8be:	fb93 f0f1 	sdiv	r0, r3, r1
 800f8c2:	fb01 3010 	mls	r0, r1, r0, r3
}
 800f8c6:	1a18      	subs	r0, r3, r0
 800f8c8:	4770      	bx	lr

0800f8ca <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 800f8ca:	b570      	push	{r4, r5, r6, lr}
 800f8cc:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 800f8ce:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 800f8d2:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 800f8d6:	2e00      	cmp	r6, #0
 800f8d8:	dc00      	bgt.n	800f8dc <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 800f8da:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 800f8dc:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 800f8de:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 800f8e0:	f854 1b04 	ldr.w	r1, [r4], #4
 800f8e4:	f855 0b04 	ldr.w	r0, [r5], #4
 800f8e8:	f000 f926 	bl	800fb38 <memcpy>
  for (row = num_rows; row > 0; row--) {
 800f8ec:	e7f3      	b.n	800f8d6 <jcopy_sample_rows+0xc>
	...

0800f8f0 <malloc>:
 800f8f0:	4b02      	ldr	r3, [pc, #8]	@ (800f8fc <malloc+0xc>)
 800f8f2:	4601      	mov	r1, r0
 800f8f4:	6818      	ldr	r0, [r3, #0]
 800f8f6:	f000 b82d 	b.w	800f954 <_malloc_r>
 800f8fa:	bf00      	nop
 800f8fc:	24000014 	.word	0x24000014

0800f900 <free>:
 800f900:	4b02      	ldr	r3, [pc, #8]	@ (800f90c <free+0xc>)
 800f902:	4601      	mov	r1, r0
 800f904:	6818      	ldr	r0, [r3, #0]
 800f906:	f000 b925 	b.w	800fb54 <_free_r>
 800f90a:	bf00      	nop
 800f90c:	24000014 	.word	0x24000014

0800f910 <sbrk_aligned>:
 800f910:	b570      	push	{r4, r5, r6, lr}
 800f912:	4e0f      	ldr	r6, [pc, #60]	@ (800f950 <sbrk_aligned+0x40>)
 800f914:	460c      	mov	r4, r1
 800f916:	6831      	ldr	r1, [r6, #0]
 800f918:	4605      	mov	r5, r0
 800f91a:	b911      	cbnz	r1, 800f922 <sbrk_aligned+0x12>
 800f91c:	f000 f8d0 	bl	800fac0 <_sbrk_r>
 800f920:	6030      	str	r0, [r6, #0]
 800f922:	4621      	mov	r1, r4
 800f924:	4628      	mov	r0, r5
 800f926:	f000 f8cb 	bl	800fac0 <_sbrk_r>
 800f92a:	1c43      	adds	r3, r0, #1
 800f92c:	d103      	bne.n	800f936 <sbrk_aligned+0x26>
 800f92e:	f04f 34ff 	mov.w	r4, #4294967295
 800f932:	4620      	mov	r0, r4
 800f934:	bd70      	pop	{r4, r5, r6, pc}
 800f936:	1cc4      	adds	r4, r0, #3
 800f938:	f024 0403 	bic.w	r4, r4, #3
 800f93c:	42a0      	cmp	r0, r4
 800f93e:	d0f8      	beq.n	800f932 <sbrk_aligned+0x22>
 800f940:	1a21      	subs	r1, r4, r0
 800f942:	4628      	mov	r0, r5
 800f944:	f000 f8bc 	bl	800fac0 <_sbrk_r>
 800f948:	3001      	adds	r0, #1
 800f94a:	d1f2      	bne.n	800f932 <sbrk_aligned+0x22>
 800f94c:	e7ef      	b.n	800f92e <sbrk_aligned+0x1e>
 800f94e:	bf00      	nop
 800f950:	24000734 	.word	0x24000734

0800f954 <_malloc_r>:
 800f954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f958:	1ccd      	adds	r5, r1, #3
 800f95a:	f025 0503 	bic.w	r5, r5, #3
 800f95e:	3508      	adds	r5, #8
 800f960:	2d0c      	cmp	r5, #12
 800f962:	bf38      	it	cc
 800f964:	250c      	movcc	r5, #12
 800f966:	2d00      	cmp	r5, #0
 800f968:	4606      	mov	r6, r0
 800f96a:	db01      	blt.n	800f970 <_malloc_r+0x1c>
 800f96c:	42a9      	cmp	r1, r5
 800f96e:	d904      	bls.n	800f97a <_malloc_r+0x26>
 800f970:	230c      	movs	r3, #12
 800f972:	6033      	str	r3, [r6, #0]
 800f974:	2000      	movs	r0, #0
 800f976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f97a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fa50 <_malloc_r+0xfc>
 800f97e:	f000 f869 	bl	800fa54 <__malloc_lock>
 800f982:	f8d8 3000 	ldr.w	r3, [r8]
 800f986:	461c      	mov	r4, r3
 800f988:	bb44      	cbnz	r4, 800f9dc <_malloc_r+0x88>
 800f98a:	4629      	mov	r1, r5
 800f98c:	4630      	mov	r0, r6
 800f98e:	f7ff ffbf 	bl	800f910 <sbrk_aligned>
 800f992:	1c43      	adds	r3, r0, #1
 800f994:	4604      	mov	r4, r0
 800f996:	d158      	bne.n	800fa4a <_malloc_r+0xf6>
 800f998:	f8d8 4000 	ldr.w	r4, [r8]
 800f99c:	4627      	mov	r7, r4
 800f99e:	2f00      	cmp	r7, #0
 800f9a0:	d143      	bne.n	800fa2a <_malloc_r+0xd6>
 800f9a2:	2c00      	cmp	r4, #0
 800f9a4:	d04b      	beq.n	800fa3e <_malloc_r+0xea>
 800f9a6:	6823      	ldr	r3, [r4, #0]
 800f9a8:	4639      	mov	r1, r7
 800f9aa:	4630      	mov	r0, r6
 800f9ac:	eb04 0903 	add.w	r9, r4, r3
 800f9b0:	f000 f886 	bl	800fac0 <_sbrk_r>
 800f9b4:	4581      	cmp	r9, r0
 800f9b6:	d142      	bne.n	800fa3e <_malloc_r+0xea>
 800f9b8:	6821      	ldr	r1, [r4, #0]
 800f9ba:	1a6d      	subs	r5, r5, r1
 800f9bc:	4629      	mov	r1, r5
 800f9be:	4630      	mov	r0, r6
 800f9c0:	f7ff ffa6 	bl	800f910 <sbrk_aligned>
 800f9c4:	3001      	adds	r0, #1
 800f9c6:	d03a      	beq.n	800fa3e <_malloc_r+0xea>
 800f9c8:	6823      	ldr	r3, [r4, #0]
 800f9ca:	442b      	add	r3, r5
 800f9cc:	6023      	str	r3, [r4, #0]
 800f9ce:	f8d8 3000 	ldr.w	r3, [r8]
 800f9d2:	685a      	ldr	r2, [r3, #4]
 800f9d4:	bb62      	cbnz	r2, 800fa30 <_malloc_r+0xdc>
 800f9d6:	f8c8 7000 	str.w	r7, [r8]
 800f9da:	e00f      	b.n	800f9fc <_malloc_r+0xa8>
 800f9dc:	6822      	ldr	r2, [r4, #0]
 800f9de:	1b52      	subs	r2, r2, r5
 800f9e0:	d420      	bmi.n	800fa24 <_malloc_r+0xd0>
 800f9e2:	2a0b      	cmp	r2, #11
 800f9e4:	d917      	bls.n	800fa16 <_malloc_r+0xc2>
 800f9e6:	1961      	adds	r1, r4, r5
 800f9e8:	42a3      	cmp	r3, r4
 800f9ea:	6025      	str	r5, [r4, #0]
 800f9ec:	bf18      	it	ne
 800f9ee:	6059      	strne	r1, [r3, #4]
 800f9f0:	6863      	ldr	r3, [r4, #4]
 800f9f2:	bf08      	it	eq
 800f9f4:	f8c8 1000 	streq.w	r1, [r8]
 800f9f8:	5162      	str	r2, [r4, r5]
 800f9fa:	604b      	str	r3, [r1, #4]
 800f9fc:	4630      	mov	r0, r6
 800f9fe:	f000 f82f 	bl	800fa60 <__malloc_unlock>
 800fa02:	f104 000b 	add.w	r0, r4, #11
 800fa06:	1d23      	adds	r3, r4, #4
 800fa08:	f020 0007 	bic.w	r0, r0, #7
 800fa0c:	1ac2      	subs	r2, r0, r3
 800fa0e:	bf1c      	itt	ne
 800fa10:	1a1b      	subne	r3, r3, r0
 800fa12:	50a3      	strne	r3, [r4, r2]
 800fa14:	e7af      	b.n	800f976 <_malloc_r+0x22>
 800fa16:	6862      	ldr	r2, [r4, #4]
 800fa18:	42a3      	cmp	r3, r4
 800fa1a:	bf0c      	ite	eq
 800fa1c:	f8c8 2000 	streq.w	r2, [r8]
 800fa20:	605a      	strne	r2, [r3, #4]
 800fa22:	e7eb      	b.n	800f9fc <_malloc_r+0xa8>
 800fa24:	4623      	mov	r3, r4
 800fa26:	6864      	ldr	r4, [r4, #4]
 800fa28:	e7ae      	b.n	800f988 <_malloc_r+0x34>
 800fa2a:	463c      	mov	r4, r7
 800fa2c:	687f      	ldr	r7, [r7, #4]
 800fa2e:	e7b6      	b.n	800f99e <_malloc_r+0x4a>
 800fa30:	461a      	mov	r2, r3
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	42a3      	cmp	r3, r4
 800fa36:	d1fb      	bne.n	800fa30 <_malloc_r+0xdc>
 800fa38:	2300      	movs	r3, #0
 800fa3a:	6053      	str	r3, [r2, #4]
 800fa3c:	e7de      	b.n	800f9fc <_malloc_r+0xa8>
 800fa3e:	230c      	movs	r3, #12
 800fa40:	6033      	str	r3, [r6, #0]
 800fa42:	4630      	mov	r0, r6
 800fa44:	f000 f80c 	bl	800fa60 <__malloc_unlock>
 800fa48:	e794      	b.n	800f974 <_malloc_r+0x20>
 800fa4a:	6005      	str	r5, [r0, #0]
 800fa4c:	e7d6      	b.n	800f9fc <_malloc_r+0xa8>
 800fa4e:	bf00      	nop
 800fa50:	24000738 	.word	0x24000738

0800fa54 <__malloc_lock>:
 800fa54:	4801      	ldr	r0, [pc, #4]	@ (800fa5c <__malloc_lock+0x8>)
 800fa56:	f000 b86d 	b.w	800fb34 <__retarget_lock_acquire_recursive>
 800fa5a:	bf00      	nop
 800fa5c:	24000878 	.word	0x24000878

0800fa60 <__malloc_unlock>:
 800fa60:	4801      	ldr	r0, [pc, #4]	@ (800fa68 <__malloc_unlock+0x8>)
 800fa62:	f000 b868 	b.w	800fb36 <__retarget_lock_release_recursive>
 800fa66:	bf00      	nop
 800fa68:	24000878 	.word	0x24000878

0800fa6c <siprintf>:
 800fa6c:	b40e      	push	{r1, r2, r3}
 800fa6e:	b510      	push	{r4, lr}
 800fa70:	b09d      	sub	sp, #116	@ 0x74
 800fa72:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fa74:	9002      	str	r0, [sp, #8]
 800fa76:	9006      	str	r0, [sp, #24]
 800fa78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fa7c:	480a      	ldr	r0, [pc, #40]	@ (800faa8 <siprintf+0x3c>)
 800fa7e:	9107      	str	r1, [sp, #28]
 800fa80:	9104      	str	r1, [sp, #16]
 800fa82:	490a      	ldr	r1, [pc, #40]	@ (800faac <siprintf+0x40>)
 800fa84:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa88:	9105      	str	r1, [sp, #20]
 800fa8a:	2400      	movs	r4, #0
 800fa8c:	a902      	add	r1, sp, #8
 800fa8e:	6800      	ldr	r0, [r0, #0]
 800fa90:	9301      	str	r3, [sp, #4]
 800fa92:	941b      	str	r4, [sp, #108]	@ 0x6c
 800fa94:	f000 f904 	bl	800fca0 <_svfiprintf_r>
 800fa98:	9b02      	ldr	r3, [sp, #8]
 800fa9a:	701c      	strb	r4, [r3, #0]
 800fa9c:	b01d      	add	sp, #116	@ 0x74
 800fa9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800faa2:	b003      	add	sp, #12
 800faa4:	4770      	bx	lr
 800faa6:	bf00      	nop
 800faa8:	24000014 	.word	0x24000014
 800faac:	ffff0208 	.word	0xffff0208

0800fab0 <memset>:
 800fab0:	4402      	add	r2, r0
 800fab2:	4603      	mov	r3, r0
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d100      	bne.n	800faba <memset+0xa>
 800fab8:	4770      	bx	lr
 800faba:	f803 1b01 	strb.w	r1, [r3], #1
 800fabe:	e7f9      	b.n	800fab4 <memset+0x4>

0800fac0 <_sbrk_r>:
 800fac0:	b538      	push	{r3, r4, r5, lr}
 800fac2:	4d06      	ldr	r5, [pc, #24]	@ (800fadc <_sbrk_r+0x1c>)
 800fac4:	2300      	movs	r3, #0
 800fac6:	4604      	mov	r4, r0
 800fac8:	4608      	mov	r0, r1
 800faca:	602b      	str	r3, [r5, #0]
 800facc:	f7f0 fe7e 	bl	80007cc <_sbrk>
 800fad0:	1c43      	adds	r3, r0, #1
 800fad2:	d102      	bne.n	800fada <_sbrk_r+0x1a>
 800fad4:	682b      	ldr	r3, [r5, #0]
 800fad6:	b103      	cbz	r3, 800fada <_sbrk_r+0x1a>
 800fad8:	6023      	str	r3, [r4, #0]
 800fada:	bd38      	pop	{r3, r4, r5, pc}
 800fadc:	24000874 	.word	0x24000874

0800fae0 <__errno>:
 800fae0:	4b01      	ldr	r3, [pc, #4]	@ (800fae8 <__errno+0x8>)
 800fae2:	6818      	ldr	r0, [r3, #0]
 800fae4:	4770      	bx	lr
 800fae6:	bf00      	nop
 800fae8:	24000014 	.word	0x24000014

0800faec <__libc_init_array>:
 800faec:	b570      	push	{r4, r5, r6, lr}
 800faee:	4d0d      	ldr	r5, [pc, #52]	@ (800fb24 <__libc_init_array+0x38>)
 800faf0:	4c0d      	ldr	r4, [pc, #52]	@ (800fb28 <__libc_init_array+0x3c>)
 800faf2:	1b64      	subs	r4, r4, r5
 800faf4:	10a4      	asrs	r4, r4, #2
 800faf6:	2600      	movs	r6, #0
 800faf8:	42a6      	cmp	r6, r4
 800fafa:	d109      	bne.n	800fb10 <__libc_init_array+0x24>
 800fafc:	4d0b      	ldr	r5, [pc, #44]	@ (800fb2c <__libc_init_array+0x40>)
 800fafe:	4c0c      	ldr	r4, [pc, #48]	@ (800fb30 <__libc_init_array+0x44>)
 800fb00:	f000 fba6 	bl	8010250 <_init>
 800fb04:	1b64      	subs	r4, r4, r5
 800fb06:	10a4      	asrs	r4, r4, #2
 800fb08:	2600      	movs	r6, #0
 800fb0a:	42a6      	cmp	r6, r4
 800fb0c:	d105      	bne.n	800fb1a <__libc_init_array+0x2e>
 800fb0e:	bd70      	pop	{r4, r5, r6, pc}
 800fb10:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb14:	4798      	blx	r3
 800fb16:	3601      	adds	r6, #1
 800fb18:	e7ee      	b.n	800faf8 <__libc_init_array+0xc>
 800fb1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb1e:	4798      	blx	r3
 800fb20:	3601      	adds	r6, #1
 800fb22:	e7f2      	b.n	800fb0a <__libc_init_array+0x1e>
 800fb24:	080122dc 	.word	0x080122dc
 800fb28:	080122dc 	.word	0x080122dc
 800fb2c:	080122dc 	.word	0x080122dc
 800fb30:	080122e0 	.word	0x080122e0

0800fb34 <__retarget_lock_acquire_recursive>:
 800fb34:	4770      	bx	lr

0800fb36 <__retarget_lock_release_recursive>:
 800fb36:	4770      	bx	lr

0800fb38 <memcpy>:
 800fb38:	440a      	add	r2, r1
 800fb3a:	4291      	cmp	r1, r2
 800fb3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb40:	d100      	bne.n	800fb44 <memcpy+0xc>
 800fb42:	4770      	bx	lr
 800fb44:	b510      	push	{r4, lr}
 800fb46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb4e:	4291      	cmp	r1, r2
 800fb50:	d1f9      	bne.n	800fb46 <memcpy+0xe>
 800fb52:	bd10      	pop	{r4, pc}

0800fb54 <_free_r>:
 800fb54:	b538      	push	{r3, r4, r5, lr}
 800fb56:	4605      	mov	r5, r0
 800fb58:	2900      	cmp	r1, #0
 800fb5a:	d041      	beq.n	800fbe0 <_free_r+0x8c>
 800fb5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb60:	1f0c      	subs	r4, r1, #4
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	bfb8      	it	lt
 800fb66:	18e4      	addlt	r4, r4, r3
 800fb68:	f7ff ff74 	bl	800fa54 <__malloc_lock>
 800fb6c:	4a1d      	ldr	r2, [pc, #116]	@ (800fbe4 <_free_r+0x90>)
 800fb6e:	6813      	ldr	r3, [r2, #0]
 800fb70:	b933      	cbnz	r3, 800fb80 <_free_r+0x2c>
 800fb72:	6063      	str	r3, [r4, #4]
 800fb74:	6014      	str	r4, [r2, #0]
 800fb76:	4628      	mov	r0, r5
 800fb78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb7c:	f7ff bf70 	b.w	800fa60 <__malloc_unlock>
 800fb80:	42a3      	cmp	r3, r4
 800fb82:	d908      	bls.n	800fb96 <_free_r+0x42>
 800fb84:	6820      	ldr	r0, [r4, #0]
 800fb86:	1821      	adds	r1, r4, r0
 800fb88:	428b      	cmp	r3, r1
 800fb8a:	bf01      	itttt	eq
 800fb8c:	6819      	ldreq	r1, [r3, #0]
 800fb8e:	685b      	ldreq	r3, [r3, #4]
 800fb90:	1809      	addeq	r1, r1, r0
 800fb92:	6021      	streq	r1, [r4, #0]
 800fb94:	e7ed      	b.n	800fb72 <_free_r+0x1e>
 800fb96:	461a      	mov	r2, r3
 800fb98:	685b      	ldr	r3, [r3, #4]
 800fb9a:	b10b      	cbz	r3, 800fba0 <_free_r+0x4c>
 800fb9c:	42a3      	cmp	r3, r4
 800fb9e:	d9fa      	bls.n	800fb96 <_free_r+0x42>
 800fba0:	6811      	ldr	r1, [r2, #0]
 800fba2:	1850      	adds	r0, r2, r1
 800fba4:	42a0      	cmp	r0, r4
 800fba6:	d10b      	bne.n	800fbc0 <_free_r+0x6c>
 800fba8:	6820      	ldr	r0, [r4, #0]
 800fbaa:	4401      	add	r1, r0
 800fbac:	1850      	adds	r0, r2, r1
 800fbae:	4283      	cmp	r3, r0
 800fbb0:	6011      	str	r1, [r2, #0]
 800fbb2:	d1e0      	bne.n	800fb76 <_free_r+0x22>
 800fbb4:	6818      	ldr	r0, [r3, #0]
 800fbb6:	685b      	ldr	r3, [r3, #4]
 800fbb8:	6053      	str	r3, [r2, #4]
 800fbba:	4408      	add	r0, r1
 800fbbc:	6010      	str	r0, [r2, #0]
 800fbbe:	e7da      	b.n	800fb76 <_free_r+0x22>
 800fbc0:	d902      	bls.n	800fbc8 <_free_r+0x74>
 800fbc2:	230c      	movs	r3, #12
 800fbc4:	602b      	str	r3, [r5, #0]
 800fbc6:	e7d6      	b.n	800fb76 <_free_r+0x22>
 800fbc8:	6820      	ldr	r0, [r4, #0]
 800fbca:	1821      	adds	r1, r4, r0
 800fbcc:	428b      	cmp	r3, r1
 800fbce:	bf04      	itt	eq
 800fbd0:	6819      	ldreq	r1, [r3, #0]
 800fbd2:	685b      	ldreq	r3, [r3, #4]
 800fbd4:	6063      	str	r3, [r4, #4]
 800fbd6:	bf04      	itt	eq
 800fbd8:	1809      	addeq	r1, r1, r0
 800fbda:	6021      	streq	r1, [r4, #0]
 800fbdc:	6054      	str	r4, [r2, #4]
 800fbde:	e7ca      	b.n	800fb76 <_free_r+0x22>
 800fbe0:	bd38      	pop	{r3, r4, r5, pc}
 800fbe2:	bf00      	nop
 800fbe4:	24000738 	.word	0x24000738

0800fbe8 <__ssputs_r>:
 800fbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbec:	688e      	ldr	r6, [r1, #8]
 800fbee:	461f      	mov	r7, r3
 800fbf0:	42be      	cmp	r6, r7
 800fbf2:	680b      	ldr	r3, [r1, #0]
 800fbf4:	4682      	mov	sl, r0
 800fbf6:	460c      	mov	r4, r1
 800fbf8:	4690      	mov	r8, r2
 800fbfa:	d82d      	bhi.n	800fc58 <__ssputs_r+0x70>
 800fbfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fc04:	d026      	beq.n	800fc54 <__ssputs_r+0x6c>
 800fc06:	6965      	ldr	r5, [r4, #20]
 800fc08:	6909      	ldr	r1, [r1, #16]
 800fc0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc0e:	eba3 0901 	sub.w	r9, r3, r1
 800fc12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc16:	1c7b      	adds	r3, r7, #1
 800fc18:	444b      	add	r3, r9
 800fc1a:	106d      	asrs	r5, r5, #1
 800fc1c:	429d      	cmp	r5, r3
 800fc1e:	bf38      	it	cc
 800fc20:	461d      	movcc	r5, r3
 800fc22:	0553      	lsls	r3, r2, #21
 800fc24:	d527      	bpl.n	800fc76 <__ssputs_r+0x8e>
 800fc26:	4629      	mov	r1, r5
 800fc28:	f7ff fe94 	bl	800f954 <_malloc_r>
 800fc2c:	4606      	mov	r6, r0
 800fc2e:	b360      	cbz	r0, 800fc8a <__ssputs_r+0xa2>
 800fc30:	6921      	ldr	r1, [r4, #16]
 800fc32:	464a      	mov	r2, r9
 800fc34:	f7ff ff80 	bl	800fb38 <memcpy>
 800fc38:	89a3      	ldrh	r3, [r4, #12]
 800fc3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fc3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc42:	81a3      	strh	r3, [r4, #12]
 800fc44:	6126      	str	r6, [r4, #16]
 800fc46:	6165      	str	r5, [r4, #20]
 800fc48:	444e      	add	r6, r9
 800fc4a:	eba5 0509 	sub.w	r5, r5, r9
 800fc4e:	6026      	str	r6, [r4, #0]
 800fc50:	60a5      	str	r5, [r4, #8]
 800fc52:	463e      	mov	r6, r7
 800fc54:	42be      	cmp	r6, r7
 800fc56:	d900      	bls.n	800fc5a <__ssputs_r+0x72>
 800fc58:	463e      	mov	r6, r7
 800fc5a:	6820      	ldr	r0, [r4, #0]
 800fc5c:	4632      	mov	r2, r6
 800fc5e:	4641      	mov	r1, r8
 800fc60:	f000 faa6 	bl	80101b0 <memmove>
 800fc64:	68a3      	ldr	r3, [r4, #8]
 800fc66:	1b9b      	subs	r3, r3, r6
 800fc68:	60a3      	str	r3, [r4, #8]
 800fc6a:	6823      	ldr	r3, [r4, #0]
 800fc6c:	4433      	add	r3, r6
 800fc6e:	6023      	str	r3, [r4, #0]
 800fc70:	2000      	movs	r0, #0
 800fc72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc76:	462a      	mov	r2, r5
 800fc78:	f000 fab4 	bl	80101e4 <_realloc_r>
 800fc7c:	4606      	mov	r6, r0
 800fc7e:	2800      	cmp	r0, #0
 800fc80:	d1e0      	bne.n	800fc44 <__ssputs_r+0x5c>
 800fc82:	6921      	ldr	r1, [r4, #16]
 800fc84:	4650      	mov	r0, sl
 800fc86:	f7ff ff65 	bl	800fb54 <_free_r>
 800fc8a:	230c      	movs	r3, #12
 800fc8c:	f8ca 3000 	str.w	r3, [sl]
 800fc90:	89a3      	ldrh	r3, [r4, #12]
 800fc92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc96:	81a3      	strh	r3, [r4, #12]
 800fc98:	f04f 30ff 	mov.w	r0, #4294967295
 800fc9c:	e7e9      	b.n	800fc72 <__ssputs_r+0x8a>
	...

0800fca0 <_svfiprintf_r>:
 800fca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca4:	4698      	mov	r8, r3
 800fca6:	898b      	ldrh	r3, [r1, #12]
 800fca8:	061b      	lsls	r3, r3, #24
 800fcaa:	b09d      	sub	sp, #116	@ 0x74
 800fcac:	4607      	mov	r7, r0
 800fcae:	460d      	mov	r5, r1
 800fcb0:	4614      	mov	r4, r2
 800fcb2:	d510      	bpl.n	800fcd6 <_svfiprintf_r+0x36>
 800fcb4:	690b      	ldr	r3, [r1, #16]
 800fcb6:	b973      	cbnz	r3, 800fcd6 <_svfiprintf_r+0x36>
 800fcb8:	2140      	movs	r1, #64	@ 0x40
 800fcba:	f7ff fe4b 	bl	800f954 <_malloc_r>
 800fcbe:	6028      	str	r0, [r5, #0]
 800fcc0:	6128      	str	r0, [r5, #16]
 800fcc2:	b930      	cbnz	r0, 800fcd2 <_svfiprintf_r+0x32>
 800fcc4:	230c      	movs	r3, #12
 800fcc6:	603b      	str	r3, [r7, #0]
 800fcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800fccc:	b01d      	add	sp, #116	@ 0x74
 800fcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd2:	2340      	movs	r3, #64	@ 0x40
 800fcd4:	616b      	str	r3, [r5, #20]
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcda:	2320      	movs	r3, #32
 800fcdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fce0:	f8cd 800c 	str.w	r8, [sp, #12]
 800fce4:	2330      	movs	r3, #48	@ 0x30
 800fce6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fe84 <_svfiprintf_r+0x1e4>
 800fcea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fcee:	f04f 0901 	mov.w	r9, #1
 800fcf2:	4623      	mov	r3, r4
 800fcf4:	469a      	mov	sl, r3
 800fcf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcfa:	b10a      	cbz	r2, 800fd00 <_svfiprintf_r+0x60>
 800fcfc:	2a25      	cmp	r2, #37	@ 0x25
 800fcfe:	d1f9      	bne.n	800fcf4 <_svfiprintf_r+0x54>
 800fd00:	ebba 0b04 	subs.w	fp, sl, r4
 800fd04:	d00b      	beq.n	800fd1e <_svfiprintf_r+0x7e>
 800fd06:	465b      	mov	r3, fp
 800fd08:	4622      	mov	r2, r4
 800fd0a:	4629      	mov	r1, r5
 800fd0c:	4638      	mov	r0, r7
 800fd0e:	f7ff ff6b 	bl	800fbe8 <__ssputs_r>
 800fd12:	3001      	adds	r0, #1
 800fd14:	f000 80a7 	beq.w	800fe66 <_svfiprintf_r+0x1c6>
 800fd18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd1a:	445a      	add	r2, fp
 800fd1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd1e:	f89a 3000 	ldrb.w	r3, [sl]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	f000 809f 	beq.w	800fe66 <_svfiprintf_r+0x1c6>
 800fd28:	2300      	movs	r3, #0
 800fd2a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd32:	f10a 0a01 	add.w	sl, sl, #1
 800fd36:	9304      	str	r3, [sp, #16]
 800fd38:	9307      	str	r3, [sp, #28]
 800fd3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fd3e:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd40:	4654      	mov	r4, sl
 800fd42:	2205      	movs	r2, #5
 800fd44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd48:	484e      	ldr	r0, [pc, #312]	@ (800fe84 <_svfiprintf_r+0x1e4>)
 800fd4a:	f7f0 fac9 	bl	80002e0 <memchr>
 800fd4e:	9a04      	ldr	r2, [sp, #16]
 800fd50:	b9d8      	cbnz	r0, 800fd8a <_svfiprintf_r+0xea>
 800fd52:	06d0      	lsls	r0, r2, #27
 800fd54:	bf44      	itt	mi
 800fd56:	2320      	movmi	r3, #32
 800fd58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd5c:	0711      	lsls	r1, r2, #28
 800fd5e:	bf44      	itt	mi
 800fd60:	232b      	movmi	r3, #43	@ 0x2b
 800fd62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd66:	f89a 3000 	ldrb.w	r3, [sl]
 800fd6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd6c:	d015      	beq.n	800fd9a <_svfiprintf_r+0xfa>
 800fd6e:	9a07      	ldr	r2, [sp, #28]
 800fd70:	4654      	mov	r4, sl
 800fd72:	2000      	movs	r0, #0
 800fd74:	f04f 0c0a 	mov.w	ip, #10
 800fd78:	4621      	mov	r1, r4
 800fd7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd7e:	3b30      	subs	r3, #48	@ 0x30
 800fd80:	2b09      	cmp	r3, #9
 800fd82:	d94b      	bls.n	800fe1c <_svfiprintf_r+0x17c>
 800fd84:	b1b0      	cbz	r0, 800fdb4 <_svfiprintf_r+0x114>
 800fd86:	9207      	str	r2, [sp, #28]
 800fd88:	e014      	b.n	800fdb4 <_svfiprintf_r+0x114>
 800fd8a:	eba0 0308 	sub.w	r3, r0, r8
 800fd8e:	fa09 f303 	lsl.w	r3, r9, r3
 800fd92:	4313      	orrs	r3, r2
 800fd94:	9304      	str	r3, [sp, #16]
 800fd96:	46a2      	mov	sl, r4
 800fd98:	e7d2      	b.n	800fd40 <_svfiprintf_r+0xa0>
 800fd9a:	9b03      	ldr	r3, [sp, #12]
 800fd9c:	1d19      	adds	r1, r3, #4
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	9103      	str	r1, [sp, #12]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	bfbb      	ittet	lt
 800fda6:	425b      	neglt	r3, r3
 800fda8:	f042 0202 	orrlt.w	r2, r2, #2
 800fdac:	9307      	strge	r3, [sp, #28]
 800fdae:	9307      	strlt	r3, [sp, #28]
 800fdb0:	bfb8      	it	lt
 800fdb2:	9204      	strlt	r2, [sp, #16]
 800fdb4:	7823      	ldrb	r3, [r4, #0]
 800fdb6:	2b2e      	cmp	r3, #46	@ 0x2e
 800fdb8:	d10a      	bne.n	800fdd0 <_svfiprintf_r+0x130>
 800fdba:	7863      	ldrb	r3, [r4, #1]
 800fdbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdbe:	d132      	bne.n	800fe26 <_svfiprintf_r+0x186>
 800fdc0:	9b03      	ldr	r3, [sp, #12]
 800fdc2:	1d1a      	adds	r2, r3, #4
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	9203      	str	r2, [sp, #12]
 800fdc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fdcc:	3402      	adds	r4, #2
 800fdce:	9305      	str	r3, [sp, #20]
 800fdd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fe94 <_svfiprintf_r+0x1f4>
 800fdd4:	7821      	ldrb	r1, [r4, #0]
 800fdd6:	2203      	movs	r2, #3
 800fdd8:	4650      	mov	r0, sl
 800fdda:	f7f0 fa81 	bl	80002e0 <memchr>
 800fdde:	b138      	cbz	r0, 800fdf0 <_svfiprintf_r+0x150>
 800fde0:	9b04      	ldr	r3, [sp, #16]
 800fde2:	eba0 000a 	sub.w	r0, r0, sl
 800fde6:	2240      	movs	r2, #64	@ 0x40
 800fde8:	4082      	lsls	r2, r0
 800fdea:	4313      	orrs	r3, r2
 800fdec:	3401      	adds	r4, #1
 800fdee:	9304      	str	r3, [sp, #16]
 800fdf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdf4:	4824      	ldr	r0, [pc, #144]	@ (800fe88 <_svfiprintf_r+0x1e8>)
 800fdf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fdfa:	2206      	movs	r2, #6
 800fdfc:	f7f0 fa70 	bl	80002e0 <memchr>
 800fe00:	2800      	cmp	r0, #0
 800fe02:	d036      	beq.n	800fe72 <_svfiprintf_r+0x1d2>
 800fe04:	4b21      	ldr	r3, [pc, #132]	@ (800fe8c <_svfiprintf_r+0x1ec>)
 800fe06:	bb1b      	cbnz	r3, 800fe50 <_svfiprintf_r+0x1b0>
 800fe08:	9b03      	ldr	r3, [sp, #12]
 800fe0a:	3307      	adds	r3, #7
 800fe0c:	f023 0307 	bic.w	r3, r3, #7
 800fe10:	3308      	adds	r3, #8
 800fe12:	9303      	str	r3, [sp, #12]
 800fe14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe16:	4433      	add	r3, r6
 800fe18:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe1a:	e76a      	b.n	800fcf2 <_svfiprintf_r+0x52>
 800fe1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe20:	460c      	mov	r4, r1
 800fe22:	2001      	movs	r0, #1
 800fe24:	e7a8      	b.n	800fd78 <_svfiprintf_r+0xd8>
 800fe26:	2300      	movs	r3, #0
 800fe28:	3401      	adds	r4, #1
 800fe2a:	9305      	str	r3, [sp, #20]
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	f04f 0c0a 	mov.w	ip, #10
 800fe32:	4620      	mov	r0, r4
 800fe34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe38:	3a30      	subs	r2, #48	@ 0x30
 800fe3a:	2a09      	cmp	r2, #9
 800fe3c:	d903      	bls.n	800fe46 <_svfiprintf_r+0x1a6>
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d0c6      	beq.n	800fdd0 <_svfiprintf_r+0x130>
 800fe42:	9105      	str	r1, [sp, #20]
 800fe44:	e7c4      	b.n	800fdd0 <_svfiprintf_r+0x130>
 800fe46:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	e7f0      	b.n	800fe32 <_svfiprintf_r+0x192>
 800fe50:	ab03      	add	r3, sp, #12
 800fe52:	9300      	str	r3, [sp, #0]
 800fe54:	462a      	mov	r2, r5
 800fe56:	4b0e      	ldr	r3, [pc, #56]	@ (800fe90 <_svfiprintf_r+0x1f0>)
 800fe58:	a904      	add	r1, sp, #16
 800fe5a:	4638      	mov	r0, r7
 800fe5c:	f3af 8000 	nop.w
 800fe60:	1c42      	adds	r2, r0, #1
 800fe62:	4606      	mov	r6, r0
 800fe64:	d1d6      	bne.n	800fe14 <_svfiprintf_r+0x174>
 800fe66:	89ab      	ldrh	r3, [r5, #12]
 800fe68:	065b      	lsls	r3, r3, #25
 800fe6a:	f53f af2d 	bmi.w	800fcc8 <_svfiprintf_r+0x28>
 800fe6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe70:	e72c      	b.n	800fccc <_svfiprintf_r+0x2c>
 800fe72:	ab03      	add	r3, sp, #12
 800fe74:	9300      	str	r3, [sp, #0]
 800fe76:	462a      	mov	r2, r5
 800fe78:	4b05      	ldr	r3, [pc, #20]	@ (800fe90 <_svfiprintf_r+0x1f0>)
 800fe7a:	a904      	add	r1, sp, #16
 800fe7c:	4638      	mov	r0, r7
 800fe7e:	f000 f879 	bl	800ff74 <_printf_i>
 800fe82:	e7ed      	b.n	800fe60 <_svfiprintf_r+0x1c0>
 800fe84:	080114d7 	.word	0x080114d7
 800fe88:	080114e1 	.word	0x080114e1
 800fe8c:	00000000 	.word	0x00000000
 800fe90:	0800fbe9 	.word	0x0800fbe9
 800fe94:	080114dd 	.word	0x080114dd

0800fe98 <_printf_common>:
 800fe98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe9c:	4616      	mov	r6, r2
 800fe9e:	4698      	mov	r8, r3
 800fea0:	688a      	ldr	r2, [r1, #8]
 800fea2:	690b      	ldr	r3, [r1, #16]
 800fea4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fea8:	4293      	cmp	r3, r2
 800feaa:	bfb8      	it	lt
 800feac:	4613      	movlt	r3, r2
 800feae:	6033      	str	r3, [r6, #0]
 800feb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800feb4:	4607      	mov	r7, r0
 800feb6:	460c      	mov	r4, r1
 800feb8:	b10a      	cbz	r2, 800febe <_printf_common+0x26>
 800feba:	3301      	adds	r3, #1
 800febc:	6033      	str	r3, [r6, #0]
 800febe:	6823      	ldr	r3, [r4, #0]
 800fec0:	0699      	lsls	r1, r3, #26
 800fec2:	bf42      	ittt	mi
 800fec4:	6833      	ldrmi	r3, [r6, #0]
 800fec6:	3302      	addmi	r3, #2
 800fec8:	6033      	strmi	r3, [r6, #0]
 800feca:	6825      	ldr	r5, [r4, #0]
 800fecc:	f015 0506 	ands.w	r5, r5, #6
 800fed0:	d106      	bne.n	800fee0 <_printf_common+0x48>
 800fed2:	f104 0a19 	add.w	sl, r4, #25
 800fed6:	68e3      	ldr	r3, [r4, #12]
 800fed8:	6832      	ldr	r2, [r6, #0]
 800feda:	1a9b      	subs	r3, r3, r2
 800fedc:	42ab      	cmp	r3, r5
 800fede:	dc26      	bgt.n	800ff2e <_printf_common+0x96>
 800fee0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fee4:	6822      	ldr	r2, [r4, #0]
 800fee6:	3b00      	subs	r3, #0
 800fee8:	bf18      	it	ne
 800feea:	2301      	movne	r3, #1
 800feec:	0692      	lsls	r2, r2, #26
 800feee:	d42b      	bmi.n	800ff48 <_printf_common+0xb0>
 800fef0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fef4:	4641      	mov	r1, r8
 800fef6:	4638      	mov	r0, r7
 800fef8:	47c8      	blx	r9
 800fefa:	3001      	adds	r0, #1
 800fefc:	d01e      	beq.n	800ff3c <_printf_common+0xa4>
 800fefe:	6823      	ldr	r3, [r4, #0]
 800ff00:	6922      	ldr	r2, [r4, #16]
 800ff02:	f003 0306 	and.w	r3, r3, #6
 800ff06:	2b04      	cmp	r3, #4
 800ff08:	bf02      	ittt	eq
 800ff0a:	68e5      	ldreq	r5, [r4, #12]
 800ff0c:	6833      	ldreq	r3, [r6, #0]
 800ff0e:	1aed      	subeq	r5, r5, r3
 800ff10:	68a3      	ldr	r3, [r4, #8]
 800ff12:	bf0c      	ite	eq
 800ff14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff18:	2500      	movne	r5, #0
 800ff1a:	4293      	cmp	r3, r2
 800ff1c:	bfc4      	itt	gt
 800ff1e:	1a9b      	subgt	r3, r3, r2
 800ff20:	18ed      	addgt	r5, r5, r3
 800ff22:	2600      	movs	r6, #0
 800ff24:	341a      	adds	r4, #26
 800ff26:	42b5      	cmp	r5, r6
 800ff28:	d11a      	bne.n	800ff60 <_printf_common+0xc8>
 800ff2a:	2000      	movs	r0, #0
 800ff2c:	e008      	b.n	800ff40 <_printf_common+0xa8>
 800ff2e:	2301      	movs	r3, #1
 800ff30:	4652      	mov	r2, sl
 800ff32:	4641      	mov	r1, r8
 800ff34:	4638      	mov	r0, r7
 800ff36:	47c8      	blx	r9
 800ff38:	3001      	adds	r0, #1
 800ff3a:	d103      	bne.n	800ff44 <_printf_common+0xac>
 800ff3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff44:	3501      	adds	r5, #1
 800ff46:	e7c6      	b.n	800fed6 <_printf_common+0x3e>
 800ff48:	18e1      	adds	r1, r4, r3
 800ff4a:	1c5a      	adds	r2, r3, #1
 800ff4c:	2030      	movs	r0, #48	@ 0x30
 800ff4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ff52:	4422      	add	r2, r4
 800ff54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ff58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ff5c:	3302      	adds	r3, #2
 800ff5e:	e7c7      	b.n	800fef0 <_printf_common+0x58>
 800ff60:	2301      	movs	r3, #1
 800ff62:	4622      	mov	r2, r4
 800ff64:	4641      	mov	r1, r8
 800ff66:	4638      	mov	r0, r7
 800ff68:	47c8      	blx	r9
 800ff6a:	3001      	adds	r0, #1
 800ff6c:	d0e6      	beq.n	800ff3c <_printf_common+0xa4>
 800ff6e:	3601      	adds	r6, #1
 800ff70:	e7d9      	b.n	800ff26 <_printf_common+0x8e>
	...

0800ff74 <_printf_i>:
 800ff74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff78:	7e0f      	ldrb	r7, [r1, #24]
 800ff7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ff7c:	2f78      	cmp	r7, #120	@ 0x78
 800ff7e:	4691      	mov	r9, r2
 800ff80:	4680      	mov	r8, r0
 800ff82:	460c      	mov	r4, r1
 800ff84:	469a      	mov	sl, r3
 800ff86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ff8a:	d807      	bhi.n	800ff9c <_printf_i+0x28>
 800ff8c:	2f62      	cmp	r7, #98	@ 0x62
 800ff8e:	d80a      	bhi.n	800ffa6 <_printf_i+0x32>
 800ff90:	2f00      	cmp	r7, #0
 800ff92:	f000 80d1 	beq.w	8010138 <_printf_i+0x1c4>
 800ff96:	2f58      	cmp	r7, #88	@ 0x58
 800ff98:	f000 80b8 	beq.w	801010c <_printf_i+0x198>
 800ff9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ffa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ffa4:	e03a      	b.n	801001c <_printf_i+0xa8>
 800ffa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ffaa:	2b15      	cmp	r3, #21
 800ffac:	d8f6      	bhi.n	800ff9c <_printf_i+0x28>
 800ffae:	a101      	add	r1, pc, #4	@ (adr r1, 800ffb4 <_printf_i+0x40>)
 800ffb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffb4:	0801000d 	.word	0x0801000d
 800ffb8:	08010021 	.word	0x08010021
 800ffbc:	0800ff9d 	.word	0x0800ff9d
 800ffc0:	0800ff9d 	.word	0x0800ff9d
 800ffc4:	0800ff9d 	.word	0x0800ff9d
 800ffc8:	0800ff9d 	.word	0x0800ff9d
 800ffcc:	08010021 	.word	0x08010021
 800ffd0:	0800ff9d 	.word	0x0800ff9d
 800ffd4:	0800ff9d 	.word	0x0800ff9d
 800ffd8:	0800ff9d 	.word	0x0800ff9d
 800ffdc:	0800ff9d 	.word	0x0800ff9d
 800ffe0:	0801011f 	.word	0x0801011f
 800ffe4:	0801004b 	.word	0x0801004b
 800ffe8:	080100d9 	.word	0x080100d9
 800ffec:	0800ff9d 	.word	0x0800ff9d
 800fff0:	0800ff9d 	.word	0x0800ff9d
 800fff4:	08010141 	.word	0x08010141
 800fff8:	0800ff9d 	.word	0x0800ff9d
 800fffc:	0801004b 	.word	0x0801004b
 8010000:	0800ff9d 	.word	0x0800ff9d
 8010004:	0800ff9d 	.word	0x0800ff9d
 8010008:	080100e1 	.word	0x080100e1
 801000c:	6833      	ldr	r3, [r6, #0]
 801000e:	1d1a      	adds	r2, r3, #4
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	6032      	str	r2, [r6, #0]
 8010014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010018:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801001c:	2301      	movs	r3, #1
 801001e:	e09c      	b.n	801015a <_printf_i+0x1e6>
 8010020:	6833      	ldr	r3, [r6, #0]
 8010022:	6820      	ldr	r0, [r4, #0]
 8010024:	1d19      	adds	r1, r3, #4
 8010026:	6031      	str	r1, [r6, #0]
 8010028:	0606      	lsls	r6, r0, #24
 801002a:	d501      	bpl.n	8010030 <_printf_i+0xbc>
 801002c:	681d      	ldr	r5, [r3, #0]
 801002e:	e003      	b.n	8010038 <_printf_i+0xc4>
 8010030:	0645      	lsls	r5, r0, #25
 8010032:	d5fb      	bpl.n	801002c <_printf_i+0xb8>
 8010034:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010038:	2d00      	cmp	r5, #0
 801003a:	da03      	bge.n	8010044 <_printf_i+0xd0>
 801003c:	232d      	movs	r3, #45	@ 0x2d
 801003e:	426d      	negs	r5, r5
 8010040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010044:	4858      	ldr	r0, [pc, #352]	@ (80101a8 <_printf_i+0x234>)
 8010046:	230a      	movs	r3, #10
 8010048:	e011      	b.n	801006e <_printf_i+0xfa>
 801004a:	6821      	ldr	r1, [r4, #0]
 801004c:	6833      	ldr	r3, [r6, #0]
 801004e:	0608      	lsls	r0, r1, #24
 8010050:	f853 5b04 	ldr.w	r5, [r3], #4
 8010054:	d402      	bmi.n	801005c <_printf_i+0xe8>
 8010056:	0649      	lsls	r1, r1, #25
 8010058:	bf48      	it	mi
 801005a:	b2ad      	uxthmi	r5, r5
 801005c:	2f6f      	cmp	r7, #111	@ 0x6f
 801005e:	4852      	ldr	r0, [pc, #328]	@ (80101a8 <_printf_i+0x234>)
 8010060:	6033      	str	r3, [r6, #0]
 8010062:	bf14      	ite	ne
 8010064:	230a      	movne	r3, #10
 8010066:	2308      	moveq	r3, #8
 8010068:	2100      	movs	r1, #0
 801006a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801006e:	6866      	ldr	r6, [r4, #4]
 8010070:	60a6      	str	r6, [r4, #8]
 8010072:	2e00      	cmp	r6, #0
 8010074:	db05      	blt.n	8010082 <_printf_i+0x10e>
 8010076:	6821      	ldr	r1, [r4, #0]
 8010078:	432e      	orrs	r6, r5
 801007a:	f021 0104 	bic.w	r1, r1, #4
 801007e:	6021      	str	r1, [r4, #0]
 8010080:	d04b      	beq.n	801011a <_printf_i+0x1a6>
 8010082:	4616      	mov	r6, r2
 8010084:	fbb5 f1f3 	udiv	r1, r5, r3
 8010088:	fb03 5711 	mls	r7, r3, r1, r5
 801008c:	5dc7      	ldrb	r7, [r0, r7]
 801008e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010092:	462f      	mov	r7, r5
 8010094:	42bb      	cmp	r3, r7
 8010096:	460d      	mov	r5, r1
 8010098:	d9f4      	bls.n	8010084 <_printf_i+0x110>
 801009a:	2b08      	cmp	r3, #8
 801009c:	d10b      	bne.n	80100b6 <_printf_i+0x142>
 801009e:	6823      	ldr	r3, [r4, #0]
 80100a0:	07df      	lsls	r7, r3, #31
 80100a2:	d508      	bpl.n	80100b6 <_printf_i+0x142>
 80100a4:	6923      	ldr	r3, [r4, #16]
 80100a6:	6861      	ldr	r1, [r4, #4]
 80100a8:	4299      	cmp	r1, r3
 80100aa:	bfde      	ittt	le
 80100ac:	2330      	movle	r3, #48	@ 0x30
 80100ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80100b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80100b6:	1b92      	subs	r2, r2, r6
 80100b8:	6122      	str	r2, [r4, #16]
 80100ba:	f8cd a000 	str.w	sl, [sp]
 80100be:	464b      	mov	r3, r9
 80100c0:	aa03      	add	r2, sp, #12
 80100c2:	4621      	mov	r1, r4
 80100c4:	4640      	mov	r0, r8
 80100c6:	f7ff fee7 	bl	800fe98 <_printf_common>
 80100ca:	3001      	adds	r0, #1
 80100cc:	d14a      	bne.n	8010164 <_printf_i+0x1f0>
 80100ce:	f04f 30ff 	mov.w	r0, #4294967295
 80100d2:	b004      	add	sp, #16
 80100d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100d8:	6823      	ldr	r3, [r4, #0]
 80100da:	f043 0320 	orr.w	r3, r3, #32
 80100de:	6023      	str	r3, [r4, #0]
 80100e0:	4832      	ldr	r0, [pc, #200]	@ (80101ac <_printf_i+0x238>)
 80100e2:	2778      	movs	r7, #120	@ 0x78
 80100e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80100e8:	6823      	ldr	r3, [r4, #0]
 80100ea:	6831      	ldr	r1, [r6, #0]
 80100ec:	061f      	lsls	r7, r3, #24
 80100ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80100f2:	d402      	bmi.n	80100fa <_printf_i+0x186>
 80100f4:	065f      	lsls	r7, r3, #25
 80100f6:	bf48      	it	mi
 80100f8:	b2ad      	uxthmi	r5, r5
 80100fa:	6031      	str	r1, [r6, #0]
 80100fc:	07d9      	lsls	r1, r3, #31
 80100fe:	bf44      	itt	mi
 8010100:	f043 0320 	orrmi.w	r3, r3, #32
 8010104:	6023      	strmi	r3, [r4, #0]
 8010106:	b11d      	cbz	r5, 8010110 <_printf_i+0x19c>
 8010108:	2310      	movs	r3, #16
 801010a:	e7ad      	b.n	8010068 <_printf_i+0xf4>
 801010c:	4826      	ldr	r0, [pc, #152]	@ (80101a8 <_printf_i+0x234>)
 801010e:	e7e9      	b.n	80100e4 <_printf_i+0x170>
 8010110:	6823      	ldr	r3, [r4, #0]
 8010112:	f023 0320 	bic.w	r3, r3, #32
 8010116:	6023      	str	r3, [r4, #0]
 8010118:	e7f6      	b.n	8010108 <_printf_i+0x194>
 801011a:	4616      	mov	r6, r2
 801011c:	e7bd      	b.n	801009a <_printf_i+0x126>
 801011e:	6833      	ldr	r3, [r6, #0]
 8010120:	6825      	ldr	r5, [r4, #0]
 8010122:	6961      	ldr	r1, [r4, #20]
 8010124:	1d18      	adds	r0, r3, #4
 8010126:	6030      	str	r0, [r6, #0]
 8010128:	062e      	lsls	r6, r5, #24
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	d501      	bpl.n	8010132 <_printf_i+0x1be>
 801012e:	6019      	str	r1, [r3, #0]
 8010130:	e002      	b.n	8010138 <_printf_i+0x1c4>
 8010132:	0668      	lsls	r0, r5, #25
 8010134:	d5fb      	bpl.n	801012e <_printf_i+0x1ba>
 8010136:	8019      	strh	r1, [r3, #0]
 8010138:	2300      	movs	r3, #0
 801013a:	6123      	str	r3, [r4, #16]
 801013c:	4616      	mov	r6, r2
 801013e:	e7bc      	b.n	80100ba <_printf_i+0x146>
 8010140:	6833      	ldr	r3, [r6, #0]
 8010142:	1d1a      	adds	r2, r3, #4
 8010144:	6032      	str	r2, [r6, #0]
 8010146:	681e      	ldr	r6, [r3, #0]
 8010148:	6862      	ldr	r2, [r4, #4]
 801014a:	2100      	movs	r1, #0
 801014c:	4630      	mov	r0, r6
 801014e:	f7f0 f8c7 	bl	80002e0 <memchr>
 8010152:	b108      	cbz	r0, 8010158 <_printf_i+0x1e4>
 8010154:	1b80      	subs	r0, r0, r6
 8010156:	6060      	str	r0, [r4, #4]
 8010158:	6863      	ldr	r3, [r4, #4]
 801015a:	6123      	str	r3, [r4, #16]
 801015c:	2300      	movs	r3, #0
 801015e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010162:	e7aa      	b.n	80100ba <_printf_i+0x146>
 8010164:	6923      	ldr	r3, [r4, #16]
 8010166:	4632      	mov	r2, r6
 8010168:	4649      	mov	r1, r9
 801016a:	4640      	mov	r0, r8
 801016c:	47d0      	blx	sl
 801016e:	3001      	adds	r0, #1
 8010170:	d0ad      	beq.n	80100ce <_printf_i+0x15a>
 8010172:	6823      	ldr	r3, [r4, #0]
 8010174:	079b      	lsls	r3, r3, #30
 8010176:	d413      	bmi.n	80101a0 <_printf_i+0x22c>
 8010178:	68e0      	ldr	r0, [r4, #12]
 801017a:	9b03      	ldr	r3, [sp, #12]
 801017c:	4298      	cmp	r0, r3
 801017e:	bfb8      	it	lt
 8010180:	4618      	movlt	r0, r3
 8010182:	e7a6      	b.n	80100d2 <_printf_i+0x15e>
 8010184:	2301      	movs	r3, #1
 8010186:	4632      	mov	r2, r6
 8010188:	4649      	mov	r1, r9
 801018a:	4640      	mov	r0, r8
 801018c:	47d0      	blx	sl
 801018e:	3001      	adds	r0, #1
 8010190:	d09d      	beq.n	80100ce <_printf_i+0x15a>
 8010192:	3501      	adds	r5, #1
 8010194:	68e3      	ldr	r3, [r4, #12]
 8010196:	9903      	ldr	r1, [sp, #12]
 8010198:	1a5b      	subs	r3, r3, r1
 801019a:	42ab      	cmp	r3, r5
 801019c:	dcf2      	bgt.n	8010184 <_printf_i+0x210>
 801019e:	e7eb      	b.n	8010178 <_printf_i+0x204>
 80101a0:	2500      	movs	r5, #0
 80101a2:	f104 0619 	add.w	r6, r4, #25
 80101a6:	e7f5      	b.n	8010194 <_printf_i+0x220>
 80101a8:	080114e8 	.word	0x080114e8
 80101ac:	080114f9 	.word	0x080114f9

080101b0 <memmove>:
 80101b0:	4288      	cmp	r0, r1
 80101b2:	b510      	push	{r4, lr}
 80101b4:	eb01 0402 	add.w	r4, r1, r2
 80101b8:	d902      	bls.n	80101c0 <memmove+0x10>
 80101ba:	4284      	cmp	r4, r0
 80101bc:	4623      	mov	r3, r4
 80101be:	d807      	bhi.n	80101d0 <memmove+0x20>
 80101c0:	1e43      	subs	r3, r0, #1
 80101c2:	42a1      	cmp	r1, r4
 80101c4:	d008      	beq.n	80101d8 <memmove+0x28>
 80101c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80101ce:	e7f8      	b.n	80101c2 <memmove+0x12>
 80101d0:	4402      	add	r2, r0
 80101d2:	4601      	mov	r1, r0
 80101d4:	428a      	cmp	r2, r1
 80101d6:	d100      	bne.n	80101da <memmove+0x2a>
 80101d8:	bd10      	pop	{r4, pc}
 80101da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80101e2:	e7f7      	b.n	80101d4 <memmove+0x24>

080101e4 <_realloc_r>:
 80101e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e8:	4607      	mov	r7, r0
 80101ea:	4614      	mov	r4, r2
 80101ec:	460d      	mov	r5, r1
 80101ee:	b921      	cbnz	r1, 80101fa <_realloc_r+0x16>
 80101f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101f4:	4611      	mov	r1, r2
 80101f6:	f7ff bbad 	b.w	800f954 <_malloc_r>
 80101fa:	b92a      	cbnz	r2, 8010208 <_realloc_r+0x24>
 80101fc:	f7ff fcaa 	bl	800fb54 <_free_r>
 8010200:	4625      	mov	r5, r4
 8010202:	4628      	mov	r0, r5
 8010204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010208:	f000 f81a 	bl	8010240 <_malloc_usable_size_r>
 801020c:	4284      	cmp	r4, r0
 801020e:	4606      	mov	r6, r0
 8010210:	d802      	bhi.n	8010218 <_realloc_r+0x34>
 8010212:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010216:	d8f4      	bhi.n	8010202 <_realloc_r+0x1e>
 8010218:	4621      	mov	r1, r4
 801021a:	4638      	mov	r0, r7
 801021c:	f7ff fb9a 	bl	800f954 <_malloc_r>
 8010220:	4680      	mov	r8, r0
 8010222:	b908      	cbnz	r0, 8010228 <_realloc_r+0x44>
 8010224:	4645      	mov	r5, r8
 8010226:	e7ec      	b.n	8010202 <_realloc_r+0x1e>
 8010228:	42b4      	cmp	r4, r6
 801022a:	4622      	mov	r2, r4
 801022c:	4629      	mov	r1, r5
 801022e:	bf28      	it	cs
 8010230:	4632      	movcs	r2, r6
 8010232:	f7ff fc81 	bl	800fb38 <memcpy>
 8010236:	4629      	mov	r1, r5
 8010238:	4638      	mov	r0, r7
 801023a:	f7ff fc8b 	bl	800fb54 <_free_r>
 801023e:	e7f1      	b.n	8010224 <_realloc_r+0x40>

08010240 <_malloc_usable_size_r>:
 8010240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010244:	1f18      	subs	r0, r3, #4
 8010246:	2b00      	cmp	r3, #0
 8010248:	bfbc      	itt	lt
 801024a:	580b      	ldrlt	r3, [r1, r0]
 801024c:	18c0      	addlt	r0, r0, r3
 801024e:	4770      	bx	lr

08010250 <_init>:
 8010250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010252:	bf00      	nop
 8010254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010256:	bc08      	pop	{r3}
 8010258:	469e      	mov	lr, r3
 801025a:	4770      	bx	lr

0801025c <_fini>:
 801025c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801025e:	bf00      	nop
 8010260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010262:	bc08      	pop	{r3}
 8010264:	469e      	mov	lr, r3
 8010266:	4770      	bx	lr
